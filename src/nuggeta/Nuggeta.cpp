
#include "BuyItemRequest.h"

short BuyItemRequest::serializerID = -10337;

















const char* BuyItemRequest::getMessageId() {
    return _MessageId;
}

void BuyItemRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool BuyItemRequest::isMessageIdSet() {
return _MessageIdSet;
}

void BuyItemRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* BuyItemRequest::getRequestId() {
return _RequestId;
}

void BuyItemRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool BuyItemRequest::isRequestIdSet() {
return _RequestIdSet;
}

void BuyItemRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* BuyItemRequest::getItemId() {
return _ItemId;
}

void BuyItemRequest::setItemId(const char* value) {
if (_ItemId && _ItemId != value) {
delete _ItemId;
}
if (value) {
_ItemId = strdup(value);
} else {
_ItemId = 0;
}
_ItemIdSet = true;
}

bool BuyItemRequest::isItemIdSet() {
return _ItemIdSet;
}

void BuyItemRequest::unSetItemId() {
_ItemIdSet = false;
}

int BuyItemRequest::getQuantity() {
return _Quantity;
}

void BuyItemRequest::setQuantity(int value) {
_Quantity = value;
_QuantitySet = true;
}

bool BuyItemRequest::isQuantitySet() {
return _QuantitySet;
}

void BuyItemRequest::unSetQuantity() {
_QuantitySet = false;
}

//@Override
short BuyItemRequest::getSerializerID() {
return serializerID;
}

void* BuyItemRequest::clone() {
BuyItemRequest* _p14850 = new BuyItemRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p14850->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p14850->setRequestId(_RequestId);
}
if (_ItemIdSet == true && Utils::isNull(_ItemId) == false) {
_p14850->setItemId(_ItemId);
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_p14850->setQuantity(_Quantity);
}
return _p14850;
}

const char* BuyItemRequest::toString() {
const char* _w14851 = "";
_w14851 = NUtils::concat(_w14851, NUtils::concat(NUtils::concat("[", "BuyItemRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w14851 = NUtils::concat(_w14851, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w14851 = NUtils::concat(_w14851, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ItemIdSet == true && Utils::isNull(_ItemId) == false) {
_w14851 = NUtils::concat(_w14851, NUtils::concat(NUtils::concat("_ItemId=", _ItemId), "| "));
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_w14851 = NUtils::concat(_w14851, NUtils::concat(NUtils::concat("_Quantity=", _Quantity), "| "));
}
_w14851 = NUtils::concat(_w14851, "]");
return _w14851;
}

BuyItemRequest::BuyItemRequest(){
this->_QuantitySet = false;
this->_Quantity = 0;
this->_ItemIdSet = false;
this->_ItemId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

BuyItemRequest::~BuyItemRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_ItemId) {
delete _ItemId;
_ItemId = 0;
}
}


#include "SaveAsGhostResponse.h"

short SaveAsGhostResponse::serializerID = -10699;













const char* SaveAsGhostResponse::getMessageId() {
    return _MessageId;
}

void SaveAsGhostResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SaveAsGhostResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SaveAsGhostResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SaveAsGhostResponse::getRequestId() {
return _RequestId;
}

void SaveAsGhostResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SaveAsGhostResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SaveAsGhostResponse::unSetRequestId() {
_RequestIdSet = false;
}

SaveAsGhostStatus* SaveAsGhostResponse::getSaveAsGhostStatus() {
return _SaveAsGhostStatus;
}

void SaveAsGhostResponse::setSaveAsGhostStatus(SaveAsGhostStatus* value) {
_SaveAsGhostStatus = value;
_SaveAsGhostStatusSet = true;
}

bool SaveAsGhostResponse::isSaveAsGhostStatusSet() {
return _SaveAsGhostStatusSet;
}

void SaveAsGhostResponse::unSetSaveAsGhostStatus() {
_SaveAsGhostStatusSet = false;
}

//@Override
short SaveAsGhostResponse::getSerializerID() {
return serializerID;
}

void* SaveAsGhostResponse::clone() {
SaveAsGhostResponse* _r15206 = new SaveAsGhostResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r15206->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r15206->setRequestId(_RequestId);
}
if (_SaveAsGhostStatusSet == true && Utils::isNull(_SaveAsGhostStatus) == false) {
_r15206->setSaveAsGhostStatus(_SaveAsGhostStatus);
}
return _r15206;
}

const char* SaveAsGhostResponse::toString() {
const char* _l15207 = "";
_l15207 = NUtils::concat(_l15207, NUtils::concat(NUtils::concat("[", "SaveAsGhostResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l15207 = NUtils::concat(_l15207, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l15207 = NUtils::concat(_l15207, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SaveAsGhostStatusSet == true && Utils::isNull(_SaveAsGhostStatus) == false) {
_l15207 = NUtils::concat(_l15207, NUtils::concat(NUtils::concat("_SaveAsGhostStatus=", _SaveAsGhostStatus->toString()), "| "));
}
_l15207 = NUtils::concat(_l15207, "]");
return _l15207;
}

SaveAsGhostResponse::SaveAsGhostResponse(){
this->_SaveAsGhostStatusSet = false;
this->_SaveAsGhostStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SaveAsGhostResponse::~SaveAsGhostResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "UnjoinGameRequest.h"

short UnjoinGameRequest::serializerID = -10517;













const char* UnjoinGameRequest::getMessageId() {
    return _MessageId;
}

void UnjoinGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool UnjoinGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void UnjoinGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* UnjoinGameRequest::getRequestId() {
return _RequestId;
}

void UnjoinGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool UnjoinGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void UnjoinGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* UnjoinGameRequest::getGameId() {
return _GameId;
}

void UnjoinGameRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool UnjoinGameRequest::isGameIdSet() {
return _GameIdSet;
}

void UnjoinGameRequest::unSetGameId() {
_GameIdSet = false;
}

//@Override
short UnjoinGameRequest::getSerializerID() {
return serializerID;
}

void* UnjoinGameRequest::clone() {
UnjoinGameRequest* _r14219 = new UnjoinGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r14219->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r14219->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_r14219->setGameId(_GameId);
}
return _r14219;
}

const char* UnjoinGameRequest::toString() {
const char* _x14220 = "";
_x14220 = NUtils::concat(_x14220, NUtils::concat(NUtils::concat("[", "UnjoinGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x14220 = NUtils::concat(_x14220, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x14220 = NUtils::concat(_x14220, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_x14220 = NUtils::concat(_x14220, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_x14220 = NUtils::concat(_x14220, "]");
return _x14220;
}

UnjoinGameRequest::UnjoinGameRequest(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

UnjoinGameRequest::~UnjoinGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "FriendshipNotification.h"

short FriendshipNotification::serializerID = -3013;













const char* FriendshipNotification::getMessageId() {
    return _MessageId;
}

void FriendshipNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool FriendshipNotification::isMessageIdSet() {
return _MessageIdSet;
}

void FriendshipNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* FriendshipNotification::getRequestId() {
return _RequestId;
}

void FriendshipNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool FriendshipNotification::isRequestIdSet() {
return _RequestIdSet;
}

void FriendshipNotification::unSetRequestId() {
_RequestIdSet = false;
}

NPlayer* FriendshipNotification::getFriend() {
return _Friend;
}

void FriendshipNotification::setFriend(NPlayer* value) {
if (_Friend && _Friend != value) {
delete _Friend;
}
_Friend = value;
_FriendSet = true;
}

bool FriendshipNotification::isFriendSet() {
return _FriendSet;
}

void FriendshipNotification::unSetFriend() {
_FriendSet = false;
}

//@Override
short FriendshipNotification::getSerializerID() {
return serializerID;
}

void* FriendshipNotification::clone() {
FriendshipNotification* _i13858 = new FriendshipNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i13858->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i13858->setRequestId(_RequestId);
}
if (_FriendSet == true && Utils::isNull(_Friend) == false) {
_i13858->setFriend((NPlayer*)(_Friend->clone()));
}
return _i13858;
}

const char* FriendshipNotification::toString() {
const char* _j13859 = "";
_j13859 = NUtils::concat(_j13859, NUtils::concat(NUtils::concat("[", "FriendshipNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j13859 = NUtils::concat(_j13859, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j13859 = NUtils::concat(_j13859, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_FriendSet == true && Utils::isNull(_Friend) == false) {
_j13859 = NUtils::concat(_j13859, NUtils::concat(NUtils::concat("_Friend=", _Friend->toString()), "| "));
}
_j13859 = NUtils::concat(_j13859, "]");
return _j13859;
}

FriendshipNotification::FriendshipNotification(){
this->_FriendSet = false;
this->_Friend = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

FriendshipNotification::~FriendshipNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Friend) {
delete _Friend;
_Friend=0;
}
}


#include "LoadGhostRequest.h"

short LoadGhostRequest::serializerID = -10737;













const char* LoadGhostRequest::getMessageId() {
    return _MessageId;
}

void LoadGhostRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LoadGhostRequest::isMessageIdSet() {
return _MessageIdSet;
}

void LoadGhostRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* LoadGhostRequest::getRequestId() {
return _RequestId;
}

void LoadGhostRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LoadGhostRequest::isRequestIdSet() {
return _RequestIdSet;
}

void LoadGhostRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* LoadGhostRequest::getGameId() {
return _GameId;
}

void LoadGhostRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool LoadGhostRequest::isGameIdSet() {
return _GameIdSet;
}

void LoadGhostRequest::unSetGameId() {
_GameIdSet = false;
}

//@Override
short LoadGhostRequest::getSerializerID() {
return serializerID;
}

void* LoadGhostRequest::clone() {
LoadGhostRequest* _m13982 = new LoadGhostRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m13982->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m13982->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_m13982->setGameId(_GameId);
}
return _m13982;
}

const char* LoadGhostRequest::toString() {
const char* _l13983 = "";
_l13983 = NUtils::concat(_l13983, NUtils::concat(NUtils::concat("[", "LoadGhostRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l13983 = NUtils::concat(_l13983, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l13983 = NUtils::concat(_l13983, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_l13983 = NUtils::concat(_l13983, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_l13983 = NUtils::concat(_l13983, "]");
return _l13983;
}

LoadGhostRequest::LoadGhostRequest(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LoadGhostRequest::~LoadGhostRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "GameMessageAdapter.h"

GameMessageAdapter::GameMessageAdapter(){
}

GameMessageAdapter::~GameMessageAdapter(){
}


#include "NGameInvitation.h"

short NGameInvitation::serializerID = -3233;













const char* NGameInvitation::getMessageId() {
    return _MessageId;
}

void NGameInvitation::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool NGameInvitation::isMessageIdSet() {
return _MessageIdSet;
}

void NGameInvitation::unSetMessageId() {
_MessageIdSet = false;
}

const char* NGameInvitation::getRequestId() {
return _RequestId;
}

void NGameInvitation::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool NGameInvitation::isRequestIdSet() {
return _RequestIdSet;
}

void NGameInvitation::unSetRequestId() {
_RequestIdSet = false;
}

const char* NGameInvitation::getGameId() {
return _GameId;
}

void NGameInvitation::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool NGameInvitation::isGameIdSet() {
return _GameIdSet;
}

void NGameInvitation::unSetGameId() {
_GameIdSet = false;
}

//@Override
short NGameInvitation::getSerializerID() {
return serializerID;
}

void* NGameInvitation::clone() {
NGameInvitation* _g13986 = new NGameInvitation();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g13986->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g13986->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_g13986->setGameId(_GameId);
}
return _g13986;
}

const char* NGameInvitation::toString() {
const char* _k13987 = "";
_k13987 = NUtils::concat(_k13987, NUtils::concat(NUtils::concat("[", "NGameInvitation"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k13987 = NUtils::concat(_k13987, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k13987 = NUtils::concat(_k13987, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_k13987 = NUtils::concat(_k13987, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_k13987 = NUtils::concat(_k13987, "]");
return _k13987;
}

NGameInvitation::NGameInvitation(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

NGameInvitation::~NGameInvitation(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "AchieveStatus.h"

std::vector<AchieveStatus*>* AchieveStatus::_values = new std::vector<AchieveStatus*>();

AchieveStatus* AchieveStatus::SUCCESS = new AchieveStatus("SUCCESS", 0);

AchieveStatus* AchieveStatus::FAILURE = new AchieveStatus("FAILURE", 1);

AchieveStatus* AchieveStatus::UNKNOWN_ACHIEVEMENT = new AchieveStatus("UNKNOWN_ACHIEVEMENT", 2);

AchieveStatus* AchieveStatus::ALREADY_ACHIEVED = new AchieveStatus("ALREADY_ACHIEVED", 3);

AchieveStatus* AchieveStatus::INVALID_CALL = new AchieveStatus("INVALID_CALL", 4);

AchieveStatus* AchieveStatus::INTERNAL_ERROR = new AchieveStatus("INTERNAL_ERROR", 5);

AchieveStatus* AchieveStatus::PROGRESS_SAVED = new AchieveStatus("PROGRESS_SAVED", 6);

std::vector<AchieveStatus*>* AchieveStatus::values() {
    return _values;
}





int AchieveStatus::getValue() {
return _value;
}

const char* AchieveStatus::name() {
return _name;
}

int AchieveStatus::ordinal() {
return _value;
}

AchieveStatus::AchieveStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

AchieveStatus* AchieveStatus::fromValue(int value) {
for (unsigned int _n5935 = 0; _n5935 < (unsigned int)_values->size(); _n5935++) {
AchieveStatus* _m5936 = (*_values)[_n5935];
if (_m5936->getValue() == value) {
return _m5936;
}
}
return 0;
}

AchieveStatus* AchieveStatus::valueOf(const char* name) {
for (unsigned int _d14007 = 0; _d14007 < (unsigned int)_values->size(); _d14007++) {
AchieveStatus* _r14008 = (*_values)[_d14007];
if (strcmp(name, _r14008->name()) == 0) {
return _r14008;
}
}
return 0;
}

//@Override
short AchieveStatus::getSerializerID() {
return -10458;
}

const char* AchieveStatus::toString() {
return NUtils::concat("AchieveStatus.", _name);
}

void* AchieveStatus::clone() {
return this;
}

AchieveStatus::~AchieveStatus(){
}


#include "ConnectionLostListenerCollection.h"



void ConnectionLostListenerCollection::fireConnectionLost() {
    int _o15463 = connectionLostListeners->size();
    for (unsigned int _t15464 = 0; _t15464 < (unsigned int)_o15463; _t15464++) {
        ConnectionLostListener* _l15465 = (*connectionLostListeners)[_t15464];
        (*_l15465)();
    }
}

std::vector<ConnectionLostListener*>* ConnectionLostListenerCollection::getListeners() {
return connectionLostListeners;
}

void ConnectionLostListenerCollection::add(ConnectionLostListener* listener) {
connectionLostListeners->push_back(listener);
}

void ConnectionLostListenerCollection::remove(ConnectionLostListener* listener) {
int _w15466 = connectionLostListeners->size();
if (_w15466 > 0) {
int _t15467 = std::distance(connectionLostListeners->begin(), std::find(connectionLostListeners->begin(), connectionLostListeners->end(), listener));
if (_t15467 >= 0)
connectionLostListeners->erase(connectionLostListeners->begin() + _t15467);
}
}

ConnectionLostListenerCollection::ConnectionLostListenerCollection(){
this->connectionLostListeners = new std::vector<ConnectionLostListener*>();
}

ConnectionLostListenerCollection::~ConnectionLostListenerCollection(){
if (connectionLostListeners) {
for (unsigned int i=0; i < connectionLostListeners->size(); i++) {
delete (*connectionLostListeners)[i];
}
delete connectionLostListeners;
connectionLostListeners=0;;
}
}


#include "NStore.h"

short NStore::serializerID = -3142;









const char* NStore::getStoreId() {
    return _storeId;
}

void NStore::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NStore::isstoreIdSet() {
return _storeIdSet;
}

void NStore::unSetstoreId() {
_storeIdSet = false;
}

std::vector<NItem*>* NStore::getItems() {
return _Items;
}

void NStore::setItems(std::vector<NItem*>* value) {
if (_Items) {
for (unsigned int i=0; i < _Items->size(); i++) {
delete (*_Items)[i];
}
}
if (_Items && _Items != value) {
delete _Items;
}
_Items = value;
_ItemsSet = true;
}

bool NStore::isItemsSet() {
return _ItemsSet;
}

void NStore::unSetItems() {
_ItemsSet = false;
}

//@Override
short NStore::getSerializerID() {
return serializerID;
}

void* NStore::clone() {
NStore* _s14225 = new NStore();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_s14225->setStoreId(_storeId);
}
if (_ItemsSet == true && Utils::isNull(_Items) == false) {
std::vector<NItem*>* _m14226 = new std::vector<NItem*>();
for (unsigned int i = 0; i < (unsigned int)_Items->size(); i++) {
void* _e14227 = _Items->at(i);
if (_e14227 != 0) {
_m14226->push_back((NItem*)((NItem*)_e14227)->clone());
} else {
_m14226->push_back((NItem*)_e14227);
}
}
_s14225->setItems(_m14226);
}
return _s14225;
}

const char* NStore::toString() {
const char* _m14228 = "";
_m14228 = NUtils::concat(_m14228, NUtils::concat(NUtils::concat("[", "NStore"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_m14228 = NUtils::concat(_m14228, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_ItemsSet == true && Utils::isNull(_Items) == false) {
_m14228 = NUtils::concat(_m14228, NUtils::concat(NUtils::concat("_Items=", "N/A"), "| "));
}
_m14228 = NUtils::concat(_m14228, "]");
return _m14228;
}

NStore::NStore(){
this->_ItemsSet = false;
this->_Items = new std::vector<NItem*>();
this->_storeIdSet = false;
this->_storeId = 0;
}

NStore::~NStore(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Items) {
for (unsigned int i=0; i < _Items->size(); i++) {
delete (*_Items)[i];
}
delete _Items;
_Items=0;;
}
}


#include "T796.h"

T796::T796(const char* name):T804(name){

    _b14044 = NLoggerFactory::getLogger("ConnectionManager");
}

//@Override
void T796::_m16901(T799* _v14015) {
    T804::_m16901(_v14015);
    _m16902(_k14045);
    _k14045->_m16331();
}

void T796::_m16902(T799* _a14016) {
_a14016->_m16333(new ConnectionReadyListener(this, &T796::onConnectionReady0));
_a14016->_m16335(new ConnectionLostListener(this, &T796::onConnectionLost1));
_a14016->_m16337(new ConnectionFailListener(this, &T796::onConnectionFail2));
_a14016->_m16339(new ConnectionInvalidVersionDetectedListener(this, &T796::onInvalidVersionDetected3));
}

//@Override
void T796::_m16903() {
T804::_m16903();
}

T796::~T796(){
}

//@Override
void T796::onConnectionReady0() {
;
_l14046->fireConnectionReady();
}

//@Override
void T796::onConnectionLost1() {
;
_l14047->fireConnectionLost();
}

//@Override
void T796::onConnectionFail2() {
;
_m14048->fireConnectionFail();
}

//@Override
void T796::onInvalidVersionDetected3() {
;
_o14049->fireInvalidVersionDetected();
}


#include "PublishFriendThirdPartyMessageResponse.h"

short PublishFriendThirdPartyMessageResponse::serializerID = -11119;

















const char* PublishFriendThirdPartyMessageResponse::getMessageId() {
    return _MessageId;
}

void PublishFriendThirdPartyMessageResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PublishFriendThirdPartyMessageResponse::isMessageIdSet() {
return _MessageIdSet;
}

void PublishFriendThirdPartyMessageResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* PublishFriendThirdPartyMessageResponse::getRequestId() {
return _RequestId;
}

void PublishFriendThirdPartyMessageResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PublishFriendThirdPartyMessageResponse::isRequestIdSet() {
return _RequestIdSet;
}

void PublishFriendThirdPartyMessageResponse::unSetRequestId() {
_RequestIdSet = false;
}

PublishFriendThirdPartyMessageStatus* PublishFriendThirdPartyMessageResponse::getPublishFriendThirdPartyMessageStatus() {
return _PublishFriendThirdPartyMessageStatus;
}

void PublishFriendThirdPartyMessageResponse::setPublishFriendThirdPartyMessageStatus(PublishFriendThirdPartyMessageStatus* value) {
_PublishFriendThirdPartyMessageStatus = value;
_PublishFriendThirdPartyMessageStatusSet = true;
}

bool PublishFriendThirdPartyMessageResponse::isPublishFriendThirdPartyMessageStatusSet() {
return _PublishFriendThirdPartyMessageStatusSet;
}

void PublishFriendThirdPartyMessageResponse::unSetPublishFriendThirdPartyMessageStatus() {
_PublishFriendThirdPartyMessageStatusSet = false;
}

const char* PublishFriendThirdPartyMessageResponse::getThirdPartyId() {
return _ThirdPartyId;
}

void PublishFriendThirdPartyMessageResponse::setThirdPartyId(const char* value) {
if (_ThirdPartyId && _ThirdPartyId != value) {
delete _ThirdPartyId;
}
if (value) {
_ThirdPartyId = strdup(value);
} else {
_ThirdPartyId = 0;
}
_ThirdPartyIdSet = true;
}

bool PublishFriendThirdPartyMessageResponse::isThirdPartyIdSet() {
return _ThirdPartyIdSet;
}

void PublishFriendThirdPartyMessageResponse::unSetThirdPartyId() {
_ThirdPartyIdSet = false;
}

//@Override
short PublishFriendThirdPartyMessageResponse::getSerializerID() {
return serializerID;
}

void* PublishFriendThirdPartyMessageResponse::clone() {
PublishFriendThirdPartyMessageResponse* _x15461 = new PublishFriendThirdPartyMessageResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15461->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15461->setRequestId(_RequestId);
}
if (_PublishFriendThirdPartyMessageStatusSet == true && Utils::isNull(_PublishFriendThirdPartyMessageStatus) == false) {
_x15461->setPublishFriendThirdPartyMessageStatus(_PublishFriendThirdPartyMessageStatus);
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_x15461->setThirdPartyId(_ThirdPartyId);
}
return _x15461;
}

const char* PublishFriendThirdPartyMessageResponse::toString() {
const char* _h15462 = "";
_h15462 = NUtils::concat(_h15462, NUtils::concat(NUtils::concat("[", "PublishFriendThirdPartyMessageResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15462 = NUtils::concat(_h15462, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15462 = NUtils::concat(_h15462, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_PublishFriendThirdPartyMessageStatusSet == true && Utils::isNull(_PublishFriendThirdPartyMessageStatus) == false) {
_h15462 = NUtils::concat(_h15462, NUtils::concat(NUtils::concat("_PublishFriendThirdPartyMessageStatus=", _PublishFriendThirdPartyMessageStatus->toString()), "| "));
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_h15462 = NUtils::concat(_h15462, NUtils::concat(NUtils::concat("_ThirdPartyId=", _ThirdPartyId), "| "));
}
_h15462 = NUtils::concat(_h15462, "]");
return _h15462;
}

PublishFriendThirdPartyMessageResponse::PublishFriendThirdPartyMessageResponse(){
this->_ThirdPartyIdSet = false;
this->_ThirdPartyId = 0;
this->_PublishFriendThirdPartyMessageStatusSet = false;
this->_PublishFriendThirdPartyMessageStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PublishFriendThirdPartyMessageResponse::~PublishFriendThirdPartyMessageResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_ThirdPartyId) {
delete _ThirdPartyId;
_ThirdPartyId = 0;
}
}


#include "StopGameResponse.h"

short StopGameResponse::serializerID = -10639;

















const char* StopGameResponse::getMessageId() {
    return _MessageId;
}

void StopGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StopGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void StopGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* StopGameResponse::getRequestId() {
return _RequestId;
}

void StopGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StopGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void StopGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

StopGameStatus* StopGameResponse::getStopGameStatus() {
return _StopGameStatus;
}

void StopGameResponse::setStopGameStatus(StopGameStatus* value) {
_StopGameStatus = value;
_StopGameStatusSet = true;
}

bool StopGameResponse::isStopGameStatusSet() {
return _StopGameStatusSet;
}

void StopGameResponse::unSetStopGameStatus() {
_StopGameStatusSet = false;
}

const char* StopGameResponse::getGameId() {
return _GameId;
}

void StopGameResponse::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool StopGameResponse::isGameIdSet() {
return _GameIdSet;
}

void StopGameResponse::unSetGameId() {
_GameIdSet = false;
}

//@Override
short StopGameResponse::getSerializerID() {
return serializerID;
}

void* StopGameResponse::clone() {
StopGameResponse* _i10391 = new StopGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i10391->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i10391->setRequestId(_RequestId);
}
if (_StopGameStatusSet == true && Utils::isNull(_StopGameStatus) == false) {
_i10391->setStopGameStatus(_StopGameStatus);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_i10391->setGameId(_GameId);
}
return _i10391;
}

const char* StopGameResponse::toString() {
const char* _i10392 = "";
_i10392 = NUtils::concat(_i10392, NUtils::concat(NUtils::concat("[", "StopGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i10392 = NUtils::concat(_i10392, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i10392 = NUtils::concat(_i10392, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StopGameStatusSet == true && Utils::isNull(_StopGameStatus) == false) {
_i10392 = NUtils::concat(_i10392, NUtils::concat(NUtils::concat("_StopGameStatus=", _StopGameStatus->toString()), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_i10392 = NUtils::concat(_i10392, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_i10392 = NUtils::concat(_i10392, "]");
return _i10392;
}

StopGameResponse::StopGameResponse(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_StopGameStatusSet = false;
this->_StopGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StopGameResponse::~StopGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "InvitationExpiredNotification.h"

short InvitationExpiredNotification::serializerID = -3237;









const char* InvitationExpiredNotification::getMessageId() {
    return _MessageId;
}

void InvitationExpiredNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InvitationExpiredNotification::isMessageIdSet() {
return _MessageIdSet;
}

void InvitationExpiredNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* InvitationExpiredNotification::getRequestId() {
return _RequestId;
}

void InvitationExpiredNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InvitationExpiredNotification::isRequestIdSet() {
return _RequestIdSet;
}

void InvitationExpiredNotification::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short InvitationExpiredNotification::getSerializerID() {
return serializerID;
}

void* InvitationExpiredNotification::clone() {
InvitationExpiredNotification* _u15261 = new InvitationExpiredNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15261->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15261->setRequestId(_RequestId);
}
return _u15261;
}

const char* InvitationExpiredNotification::toString() {
const char* _p15262 = "";
_p15262 = NUtils::concat(_p15262, NUtils::concat(NUtils::concat("[", "InvitationExpiredNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p15262 = NUtils::concat(_p15262, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p15262 = NUtils::concat(_p15262, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_p15262 = NUtils::concat(_p15262, "]");
return _p15262;
}

InvitationExpiredNotification::InvitationExpiredNotification(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InvitationExpiredNotification::~InvitationExpiredNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "SavePlayerStorableRequest.h"

short SavePlayerStorableRequest::serializerID = -10997;













const char* SavePlayerStorableRequest::getMessageId() {
    return _MessageId;
}

void SavePlayerStorableRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SavePlayerStorableRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SavePlayerStorableRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SavePlayerStorableRequest::getRequestId() {
return _RequestId;
}

void SavePlayerStorableRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SavePlayerStorableRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SavePlayerStorableRequest::unSetRequestId() {
_RequestIdSet = false;
}

Storable* SavePlayerStorableRequest::getStorable() {
return _Storable;
}

void SavePlayerStorableRequest::setStorable(Storable* value) {
if (_Storable && _Storable != value) {
delete _Storable;
}
_Storable = value;
_StorableSet = true;
}

bool SavePlayerStorableRequest::isStorableSet() {
return _StorableSet;
}

void SavePlayerStorableRequest::unSetStorable() {
_StorableSet = false;
}

//@Override
short SavePlayerStorableRequest::getSerializerID() {
return serializerID;
}

void* SavePlayerStorableRequest::clone() {
SavePlayerStorableRequest* _j15558 = new SavePlayerStorableRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j15558->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j15558->setRequestId(_RequestId);
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_j15558->setStorable((Storable*)(_Storable->clone()));
}
return _j15558;
}

const char* SavePlayerStorableRequest::toString() {
const char* _i15559 = "";
_i15559 = NUtils::concat(_i15559, NUtils::concat(NUtils::concat("[", "SavePlayerStorableRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15559 = NUtils::concat(_i15559, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15559 = NUtils::concat(_i15559, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_i15559 = NUtils::concat(_i15559, NUtils::concat(NUtils::concat("_Storable=", _Storable->toString()), "| "));
}
_i15559 = NUtils::concat(_i15559, "]");
return _i15559;
}

SavePlayerStorableRequest::SavePlayerStorableRequest(){
this->_StorableSet = false;
this->_Storable = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SavePlayerStorableRequest::~SavePlayerStorableRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storable) {
delete _Storable;
_Storable=0;
}
}


#include "ApiTester.h"

ApiTester::ApiTester(){
}

ApiTester::~ApiTester(){
}


#include "GetFriendDemandsRequest.h"

short GetFriendDemandsRequest::serializerID = -10237;









const char* GetFriendDemandsRequest::getMessageId() {
    return _MessageId;
}

void GetFriendDemandsRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetFriendDemandsRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetFriendDemandsRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetFriendDemandsRequest::getRequestId() {
return _RequestId;
}

void GetFriendDemandsRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetFriendDemandsRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetFriendDemandsRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short GetFriendDemandsRequest::getSerializerID() {
return serializerID;
}

void* GetFriendDemandsRequest::clone() {
GetFriendDemandsRequest* _p13980 = new GetFriendDemandsRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p13980->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p13980->setRequestId(_RequestId);
}
return _p13980;
}

const char* GetFriendDemandsRequest::toString() {
const char* _l13981 = "";
_l13981 = NUtils::concat(_l13981, NUtils::concat(NUtils::concat("[", "GetFriendDemandsRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l13981 = NUtils::concat(_l13981, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l13981 = NUtils::concat(_l13981, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_l13981 = NUtils::concat(_l13981, "]");
return _l13981;
}

GetFriendDemandsRequest::GetFriendDemandsRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetFriendDemandsRequest::~GetFriendDemandsRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "SetPlayerNameResponse.h"

short SetPlayerNameResponse::serializerID = -10839;













const char* SetPlayerNameResponse::getMessageId() {
    return _MessageId;
}

void SetPlayerNameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SetPlayerNameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SetPlayerNameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SetPlayerNameResponse::getRequestId() {
return _RequestId;
}

void SetPlayerNameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SetPlayerNameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SetPlayerNameResponse::unSetRequestId() {
_RequestIdSet = false;
}

SetPlayerNameStatus* SetPlayerNameResponse::getSetPlayerNameStatus() {
return _SetPlayerNameStatus;
}

void SetPlayerNameResponse::setSetPlayerNameStatus(SetPlayerNameStatus* value) {
_SetPlayerNameStatus = value;
_SetPlayerNameStatusSet = true;
}

bool SetPlayerNameResponse::isSetPlayerNameStatusSet() {
return _SetPlayerNameStatusSet;
}

void SetPlayerNameResponse::unSetSetPlayerNameStatus() {
_SetPlayerNameStatusSet = false;
}

//@Override
short SetPlayerNameResponse::getSerializerID() {
return serializerID;
}

void* SetPlayerNameResponse::clone() {
SetPlayerNameResponse* _q10387 = new SetPlayerNameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q10387->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q10387->setRequestId(_RequestId);
}
if (_SetPlayerNameStatusSet == true && Utils::isNull(_SetPlayerNameStatus) == false) {
_q10387->setSetPlayerNameStatus(_SetPlayerNameStatus);
}
return _q10387;
}

const char* SetPlayerNameResponse::toString() {
const char* _p10388 = "";
_p10388 = NUtils::concat(_p10388, NUtils::concat(NUtils::concat("[", "SetPlayerNameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p10388 = NUtils::concat(_p10388, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p10388 = NUtils::concat(_p10388, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SetPlayerNameStatusSet == true && Utils::isNull(_SetPlayerNameStatus) == false) {
_p10388 = NUtils::concat(_p10388, NUtils::concat(NUtils::concat("_SetPlayerNameStatus=", _SetPlayerNameStatus->toString()), "| "));
}
_p10388 = NUtils::concat(_p10388, "]");
return _p10388;
}

SetPlayerNameResponse::SetPlayerNameResponse(){
this->_SetPlayerNameStatusSet = false;
this->_SetPlayerNameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SetPlayerNameResponse::~SetPlayerNameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "GetStoreResponse.h"

short GetStoreResponse::serializerID = -10359;

















const char* GetStoreResponse::getMessageId() {
    return _MessageId;
}

void GetStoreResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetStoreResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetStoreResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetStoreResponse::getRequestId() {
return _RequestId;
}

void GetStoreResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetStoreResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetStoreResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetStoreStatus* GetStoreResponse::getGetStoreStatus() {
return _GetStoreStatus;
}

void GetStoreResponse::setGetStoreStatus(GetStoreStatus* value) {
_GetStoreStatus = value;
_GetStoreStatusSet = true;
}

bool GetStoreResponse::isGetStoreStatusSet() {
return _GetStoreStatusSet;
}

void GetStoreResponse::unSetGetStoreStatus() {
_GetStoreStatusSet = false;
}

NStore* GetStoreResponse::getStore() {
return _Store;
}

void GetStoreResponse::setStore(NStore* value) {
if (_Store && _Store != value) {
delete _Store;
}
_Store = value;
_StoreSet = true;
}

bool GetStoreResponse::isStoreSet() {
return _StoreSet;
}

void GetStoreResponse::unSetStore() {
_StoreSet = false;
}

//@Override
short GetStoreResponse::getSerializerID() {
return serializerID;
}

void* GetStoreResponse::clone() {
GetStoreResponse* _n15478 = new GetStoreResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n15478->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n15478->setRequestId(_RequestId);
}
if (_GetStoreStatusSet == true && Utils::isNull(_GetStoreStatus) == false) {
_n15478->setGetStoreStatus(_GetStoreStatus);
}
if (_StoreSet == true && Utils::isNull(_Store) == false) {
_n15478->setStore((NStore*)(_Store->clone()));
}
return _n15478;
}

const char* GetStoreResponse::toString() {
const char* _f15479 = "";
_f15479 = NUtils::concat(_f15479, NUtils::concat(NUtils::concat("[", "GetStoreResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f15479 = NUtils::concat(_f15479, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f15479 = NUtils::concat(_f15479, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetStoreStatusSet == true && Utils::isNull(_GetStoreStatus) == false) {
_f15479 = NUtils::concat(_f15479, NUtils::concat(NUtils::concat("_GetStoreStatus=", _GetStoreStatus->toString()), "| "));
}
if (_StoreSet == true && Utils::isNull(_Store) == false) {
_f15479 = NUtils::concat(_f15479, NUtils::concat(NUtils::concat("_Store=", _Store->toString()), "| "));
}
_f15479 = NUtils::concat(_f15479, "]");
return _f15479;
}

GetStoreResponse::GetStoreResponse(){
this->_StoreSet = false;
this->_Store = 0;
this->_GetStoreStatusSet = false;
this->_GetStoreStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetStoreResponse::~GetStoreResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Store) {
delete _Store;
_Store=0;
}
}


#include "T794.h"

void T794::_m16900(CppByteArray* _n13994, int _c13995, CppByteArray* _v13996, int _d13997, int _m13998) {
    int _g13999 = _d13997;
    for (unsigned int _t14000 = 0; _t14000 < (unsigned int)_m13998; _t14000++) {
        (*_v13996)[_g13999] = (*_n13994)[_t14000];
        _g13999++;
    }
}

T794::T794(){
}

T794::~T794(){
}


#include "PublishThirdPartyMessageRequest.h"

short PublishThirdPartyMessageRequest::serializerID = -10917;





























const char* PublishThirdPartyMessageRequest::getMessageId() {
    return _MessageId;
}

void PublishThirdPartyMessageRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PublishThirdPartyMessageRequest::isMessageIdSet() {
return _MessageIdSet;
}

void PublishThirdPartyMessageRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* PublishThirdPartyMessageRequest::getRequestId() {
return _RequestId;
}

void PublishThirdPartyMessageRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PublishThirdPartyMessageRequest::isRequestIdSet() {
return _RequestIdSet;
}

void PublishThirdPartyMessageRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* PublishThirdPartyMessageRequest::getTitle() {
return _Title;
}

void PublishThirdPartyMessageRequest::setTitle(const char* value) {
if (_Title && _Title != value) {
delete _Title;
}
if (value) {
_Title = strdup(value);
} else {
_Title = 0;
}
_TitleSet = true;
}

bool PublishThirdPartyMessageRequest::isTitleSet() {
return _TitleSet;
}

void PublishThirdPartyMessageRequest::unSetTitle() {
_TitleSet = false;
}

const char* PublishThirdPartyMessageRequest::getMessage() {
return _Message;
}

void PublishThirdPartyMessageRequest::setMessage(const char* value) {
if (_Message && _Message != value) {
delete _Message;
}
if (value) {
_Message = strdup(value);
} else {
_Message = 0;
}
_MessageSet = true;
}

bool PublishThirdPartyMessageRequest::isMessageSet() {
return _MessageSet;
}

void PublishThirdPartyMessageRequest::unSetMessage() {
_MessageSet = false;
}

const char* PublishThirdPartyMessageRequest::getPictureUrl() {
return _PictureUrl;
}

void PublishThirdPartyMessageRequest::setPictureUrl(const char* value) {
if (_PictureUrl && _PictureUrl != value) {
delete _PictureUrl;
}
if (value) {
_PictureUrl = strdup(value);
} else {
_PictureUrl = 0;
}
_PictureUrlSet = true;
}

bool PublishThirdPartyMessageRequest::isPictureUrlSet() {
return _PictureUrlSet;
}

void PublishThirdPartyMessageRequest::unSetPictureUrl() {
_PictureUrlSet = false;
}

const char* PublishThirdPartyMessageRequest::getLink() {
return _Link;
}

void PublishThirdPartyMessageRequest::setLink(const char* value) {
if (_Link && _Link != value) {
delete _Link;
}
if (value) {
_Link = strdup(value);
} else {
_Link = 0;
}
_LinkSet = true;
}

bool PublishThirdPartyMessageRequest::isLinkSet() {
return _LinkSet;
}

void PublishThirdPartyMessageRequest::unSetLink() {
_LinkSet = false;
}

ThirdPartySource* PublishThirdPartyMessageRequest::getThirdPartySource() {
return _ThirdPartySource;
}

void PublishThirdPartyMessageRequest::setThirdPartySource(ThirdPartySource* value) {
_ThirdPartySource = value;
_ThirdPartySourceSet = true;
}

bool PublishThirdPartyMessageRequest::isThirdPartySourceSet() {
return _ThirdPartySourceSet;
}

void PublishThirdPartyMessageRequest::unSetThirdPartySource() {
_ThirdPartySourceSet = false;
}

//@Override
short PublishThirdPartyMessageRequest::getSerializerID() {
return serializerID;
}

void* PublishThirdPartyMessageRequest::clone() {
PublishThirdPartyMessageRequest* _f15749 = new PublishThirdPartyMessageRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f15749->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f15749->setRequestId(_RequestId);
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_f15749->setTitle(_Title);
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_f15749->setMessage(_Message);
}
if (_PictureUrlSet == true && Utils::isNull(_PictureUrl) == false) {
_f15749->setPictureUrl(_PictureUrl);
}
if (_LinkSet == true && Utils::isNull(_Link) == false) {
_f15749->setLink(_Link);
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_f15749->setThirdPartySource(_ThirdPartySource);
}
return _f15749;
}

const char* PublishThirdPartyMessageRequest::toString() {
const char* _q15750 = "";
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("[", "PublishThirdPartyMessageRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("_Title=", _Title), "| "));
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("_Message=", _Message), "| "));
}
if (_PictureUrlSet == true && Utils::isNull(_PictureUrl) == false) {
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("_PictureUrl=", _PictureUrl), "| "));
}
if (_LinkSet == true && Utils::isNull(_Link) == false) {
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("_Link=", _Link), "| "));
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_q15750 = NUtils::concat(_q15750, NUtils::concat(NUtils::concat("_ThirdPartySource=", _ThirdPartySource->toString()), "| "));
}
_q15750 = NUtils::concat(_q15750, "]");
return _q15750;
}

PublishThirdPartyMessageRequest::PublishThirdPartyMessageRequest(){
this->_ThirdPartySourceSet = false;
this->_ThirdPartySource = 0;
this->_LinkSet = false;
this->_Link = 0;
this->_PictureUrlSet = false;
this->_PictureUrl = 0;
this->_MessageSet = false;
this->_Message = 0;
this->_TitleSet = false;
this->_Title = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PublishThirdPartyMessageRequest::~PublishThirdPartyMessageRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Title) {
delete _Title;
_Title = 0;
}
if (_Message) {
delete _Message;
_Message = 0;
}
if (_PictureUrl) {
delete _PictureUrl;
_PictureUrl = 0;
}
if (_Link) {
delete _Link;
_Link = 0;
}
}


#include "NuggetaException.h"

short NuggetaException::serializerID = -3106;

















const char* NuggetaException::getMessageId() {
    return _MessageId;
}

void NuggetaException::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool NuggetaException::isMessageIdSet() {
return _MessageIdSet;
}

void NuggetaException::unSetMessageId() {
_MessageIdSet = false;
}

const char* NuggetaException::getRequestId() {
return _RequestId;
}

void NuggetaException::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool NuggetaException::isRequestIdSet() {
return _RequestIdSet;
}

void NuggetaException::unSetRequestId() {
_RequestIdSet = false;
}

ErrorCode* NuggetaException::getErrorCode() {
return _ErrorCode;
}

void NuggetaException::setErrorCode(ErrorCode* value) {
_ErrorCode = value;
_ErrorCodeSet = true;
}

bool NuggetaException::isErrorCodeSet() {
return _ErrorCodeSet;
}

void NuggetaException::unSetErrorCode() {
_ErrorCodeSet = false;
}

const char* NuggetaException::getReason() {
return _Reason;
}

void NuggetaException::setReason(const char* value) {
if (_Reason && _Reason != value) {
delete _Reason;
}
if (value) {
_Reason = strdup(value);
} else {
_Reason = 0;
}
_ReasonSet = true;
}

bool NuggetaException::isReasonSet() {
return _ReasonSet;
}

void NuggetaException::unSetReason() {
_ReasonSet = false;
}

//@Override
short NuggetaException::getSerializerID() {
return serializerID;
}

void* NuggetaException::clone() {
NuggetaException* _q15429 = new NuggetaException();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15429->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15429->setRequestId(_RequestId);
}
if (_ErrorCodeSet == true && Utils::isNull(_ErrorCode) == false) {
_q15429->setErrorCode(_ErrorCode);
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_q15429->setReason(_Reason);
}
return _q15429;
}

const char* NuggetaException::toString() {
const char* _o15430 = "";
_o15430 = NUtils::concat(_o15430, NUtils::concat(NUtils::concat("[", "NuggetaException"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o15430 = NUtils::concat(_o15430, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o15430 = NUtils::concat(_o15430, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ErrorCodeSet == true && Utils::isNull(_ErrorCode) == false) {
_o15430 = NUtils::concat(_o15430, NUtils::concat(NUtils::concat("_ErrorCode=", _ErrorCode->toString()), "| "));
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_o15430 = NUtils::concat(_o15430, NUtils::concat(NUtils::concat("_Reason=", _Reason), "| "));
}
_o15430 = NUtils::concat(_o15430, "]");
return _o15430;
}

NuggetaException::NuggetaException(){
this->_ReasonSet = false;
this->_Reason = 0;
this->_ErrorCodeSet = false;
this->_ErrorCode = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

NuggetaException::~NuggetaException(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Reason) {
delete _Reason;
_Reason = 0;
}
}


#include "OpenConnection.h"

short OpenConnection::serializerID = -3113;

















const char* OpenConnection::getMessageId() {
    return _MessageId;
}

void OpenConnection::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool OpenConnection::isMessageIdSet() {
return _MessageIdSet;
}

void OpenConnection::unSetMessageId() {
_MessageIdSet = false;
}

const char* OpenConnection::getRequestId() {
return _RequestId;
}

void OpenConnection::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool OpenConnection::isRequestIdSet() {
return _RequestIdSet;
}

void OpenConnection::unSetRequestId() {
_RequestIdSet = false;
}

const char* OpenConnection::getIpAddress() {
return _IpAddress;
}

void OpenConnection::setIpAddress(const char* value) {
if (_IpAddress && _IpAddress != value) {
delete _IpAddress;
}
if (value) {
_IpAddress = strdup(value);
} else {
_IpAddress = 0;
}
_IpAddressSet = true;
}

bool OpenConnection::isIpAddressSet() {
return _IpAddressSet;
}

void OpenConnection::unSetIpAddress() {
_IpAddressSet = false;
}

int OpenConnection::getTcpPort() {
return _TcpPort;
}

void OpenConnection::setTcpPort(int value) {
_TcpPort = value;
_TcpPortSet = true;
}

bool OpenConnection::isTcpPortSet() {
return _TcpPortSet;
}

void OpenConnection::unSetTcpPort() {
_TcpPortSet = false;
}

//@Override
short OpenConnection::getSerializerID() {
return serializerID;
}

void* OpenConnection::clone() {
OpenConnection* _p14093 = new OpenConnection();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p14093->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p14093->setRequestId(_RequestId);
}
if (_IpAddressSet == true && Utils::isNull(_IpAddress) == false) {
_p14093->setIpAddress(_IpAddress);
}
if (_TcpPortSet == true && Utils::isNullInteger(_TcpPort) == false) {
_p14093->setTcpPort(_TcpPort);
}
return _p14093;
}

const char* OpenConnection::toString() {
const char* _l14094 = "";
_l14094 = NUtils::concat(_l14094, NUtils::concat(NUtils::concat("[", "OpenConnection"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l14094 = NUtils::concat(_l14094, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l14094 = NUtils::concat(_l14094, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_IpAddressSet == true && Utils::isNull(_IpAddress) == false) {
_l14094 = NUtils::concat(_l14094, NUtils::concat(NUtils::concat("_IpAddress=", _IpAddress), "| "));
}
if (_TcpPortSet == true && Utils::isNullInteger(_TcpPort) == false) {
_l14094 = NUtils::concat(_l14094, NUtils::concat(NUtils::concat("_TcpPort=", _TcpPort), "| "));
}
_l14094 = NUtils::concat(_l14094, "]");
return _l14094;
}

OpenConnection::OpenConnection(){
this->_TcpPortSet = false;
this->_TcpPort = 0;
this->_IpAddressSet = false;
this->_IpAddress = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

OpenConnection::~OpenConnection(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_IpAddress) {
delete _IpAddress;
_IpAddress = 0;
}
}


#include "SendGameChatToPlayerRequest.h"

short SendGameChatToPlayerRequest::serializerID = -10756;





















const char* SendGameChatToPlayerRequest::getMessageId() {
    return _MessageId;
}

void SendGameChatToPlayerRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SendGameChatToPlayerRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SendGameChatToPlayerRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SendGameChatToPlayerRequest::getRequestId() {
return _RequestId;
}

void SendGameChatToPlayerRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SendGameChatToPlayerRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SendGameChatToPlayerRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* SendGameChatToPlayerRequest::getGameId() {
return _GameId;
}

void SendGameChatToPlayerRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool SendGameChatToPlayerRequest::isGameIdSet() {
return _GameIdSet;
}

void SendGameChatToPlayerRequest::unSetGameId() {
_GameIdSet = false;
}

const char* SendGameChatToPlayerRequest::getPlayerId() {
return _PlayerId;
}

void SendGameChatToPlayerRequest::setPlayerId(const char* value) {
if (_PlayerId && _PlayerId != value) {
delete _PlayerId;
}
if (value) {
_PlayerId = strdup(value);
} else {
_PlayerId = 0;
}
_PlayerIdSet = true;
}

bool SendGameChatToPlayerRequest::isPlayerIdSet() {
return _PlayerIdSet;
}

void SendGameChatToPlayerRequest::unSetPlayerId() {
_PlayerIdSet = false;
}

const char* SendGameChatToPlayerRequest::getMessage() {
return _Message;
}

void SendGameChatToPlayerRequest::setMessage(const char* value) {
if (_Message && _Message != value) {
delete _Message;
}
if (value) {
_Message = strdup(value);
} else {
_Message = 0;
}
_MessageSet = true;
}

bool SendGameChatToPlayerRequest::isMessageSet() {
return _MessageSet;
}

void SendGameChatToPlayerRequest::unSetMessage() {
_MessageSet = false;
}

//@Override
short SendGameChatToPlayerRequest::getSerializerID() {
return serializerID;
}

void* SendGameChatToPlayerRequest::clone() {
SendGameChatToPlayerRequest* _e15546 = new SendGameChatToPlayerRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e15546->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e15546->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_e15546->setGameId(_GameId);
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_e15546->setPlayerId(_PlayerId);
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_e15546->setMessage(_Message);
}
return _e15546;
}

const char* SendGameChatToPlayerRequest::toString() {
const char* _e15547 = "";
_e15547 = NUtils::concat(_e15547, NUtils::concat(NUtils::concat("[", "SendGameChatToPlayerRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e15547 = NUtils::concat(_e15547, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e15547 = NUtils::concat(_e15547, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_e15547 = NUtils::concat(_e15547, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_e15547 = NUtils::concat(_e15547, NUtils::concat(NUtils::concat("_PlayerId=", _PlayerId), "| "));
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_e15547 = NUtils::concat(_e15547, NUtils::concat(NUtils::concat("_Message=", _Message), "| "));
}
_e15547 = NUtils::concat(_e15547, "]");
return _e15547;
}

SendGameChatToPlayerRequest::SendGameChatToPlayerRequest(){
this->_MessageSet = false;
this->_Message = 0;
this->_PlayerIdSet = false;
this->_PlayerId = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SendGameChatToPlayerRequest::~SendGameChatToPlayerRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
if (_PlayerId) {
delete _PlayerId;
_PlayerId = 0;
}
if (_Message) {
delete _Message;
_Message = 0;
}
}


#include "AskForFriendResponse.h"

short AskForFriendResponse::serializerID = -10019;













const char* AskForFriendResponse::getMessageId() {
    return _MessageId;
}

void AskForFriendResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AskForFriendResponse::isMessageIdSet() {
return _MessageIdSet;
}

void AskForFriendResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* AskForFriendResponse::getRequestId() {
return _RequestId;
}

void AskForFriendResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AskForFriendResponse::isRequestIdSet() {
return _RequestIdSet;
}

void AskForFriendResponse::unSetRequestId() {
_RequestIdSet = false;
}

AskForFriendStatus* AskForFriendResponse::getAskForFriendStatus() {
return _AskForFriendStatus;
}

void AskForFriendResponse::setAskForFriendStatus(AskForFriendStatus* value) {
_AskForFriendStatus = value;
_AskForFriendStatusSet = true;
}

bool AskForFriendResponse::isAskForFriendStatusSet() {
return _AskForFriendStatusSet;
}

void AskForFriendResponse::unSetAskForFriendStatus() {
_AskForFriendStatusSet = false;
}

//@Override
short AskForFriendResponse::getSerializerID() {
return serializerID;
}

void* AskForFriendResponse::clone() {
AskForFriendResponse* _j15011 = new AskForFriendResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j15011->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j15011->setRequestId(_RequestId);
}
if (_AskForFriendStatusSet == true && Utils::isNull(_AskForFriendStatus) == false) {
_j15011->setAskForFriendStatus(_AskForFriendStatus);
}
return _j15011;
}

const char* AskForFriendResponse::toString() {
const char* _m15012 = "";
_m15012 = NUtils::concat(_m15012, NUtils::concat(NUtils::concat("[", "AskForFriendResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m15012 = NUtils::concat(_m15012, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m15012 = NUtils::concat(_m15012, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_AskForFriendStatusSet == true && Utils::isNull(_AskForFriendStatus) == false) {
_m15012 = NUtils::concat(_m15012, NUtils::concat(NUtils::concat("_AskForFriendStatus=", _AskForFriendStatus->toString()), "| "));
}
_m15012 = NUtils::concat(_m15012, "]");
return _m15012;
}

AskForFriendResponse::AskForFriendResponse(){
this->_AskForFriendStatusSet = false;
this->_AskForFriendStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AskForFriendResponse::~AskForFriendResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "ConnectionState.h"

int ConnectionState::INITIAL = 0;

int ConnectionState::STARTING = 1;

int ConnectionState::STARTED = 2;

int ConnectionState::STOPPING = 3;

int ConnectionState::STOPPED = 4;

ConnectionState::ConnectionState(){
}

ConnectionState::~ConnectionState(){
}


#include "TurnBasedContext.h"

short TurnBasedContext::serializerID = -3158;













const char* TurnBasedContext::getMessageId() {
    return _MessageId;
}

void TurnBasedContext::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool TurnBasedContext::isMessageIdSet() {
return _MessageIdSet;
}

void TurnBasedContext::unSetMessageId() {
_MessageIdSet = false;
}

const char* TurnBasedContext::getRequestId() {
return _RequestId;
}

void TurnBasedContext::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool TurnBasedContext::isRequestIdSet() {
return _RequestIdSet;
}

void TurnBasedContext::unSetRequestId() {
_RequestIdSet = false;
}

NPlayer* TurnBasedContext::getCurrentPlayer() {
return _CurrentPlayer;
}

void TurnBasedContext::setCurrentPlayer(NPlayer* value) {
if (_CurrentPlayer && _CurrentPlayer != value) {
delete _CurrentPlayer;
}
_CurrentPlayer = value;
_CurrentPlayerSet = true;
}

bool TurnBasedContext::isCurrentPlayerSet() {
return _CurrentPlayerSet;
}

void TurnBasedContext::unSetCurrentPlayer() {
_CurrentPlayerSet = false;
}

//@Override
short TurnBasedContext::getSerializerID() {
return serializerID;
}

void* TurnBasedContext::clone() {
TurnBasedContext* _x14106 = new TurnBasedContext();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x14106->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x14106->setRequestId(_RequestId);
}
if (_CurrentPlayerSet == true && Utils::isNull(_CurrentPlayer) == false) {
_x14106->setCurrentPlayer((NPlayer*)(_CurrentPlayer->clone()));
}
return _x14106;
}

const char* TurnBasedContext::toString() {
const char* _w14107 = "";
_w14107 = NUtils::concat(_w14107, NUtils::concat(NUtils::concat("[", "TurnBasedContext"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w14107 = NUtils::concat(_w14107, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w14107 = NUtils::concat(_w14107, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_CurrentPlayerSet == true && Utils::isNull(_CurrentPlayer) == false) {
_w14107 = NUtils::concat(_w14107, NUtils::concat(NUtils::concat("_CurrentPlayer=", _CurrentPlayer->toString()), "| "));
}
_w14107 = NUtils::concat(_w14107, "]");
return _w14107;
}

TurnBasedContext::TurnBasedContext(){
this->_CurrentPlayerSet = false;
this->_CurrentPlayer = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

TurnBasedContext::~TurnBasedContext(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_CurrentPlayer) {
delete _CurrentPlayer;
_CurrentPlayer=0;
}
}


#include "BuyItemResponse.h"

short BuyItemResponse::serializerID = -10339;





















const char* BuyItemResponse::getMessageId() {
    return _MessageId;
}

void BuyItemResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool BuyItemResponse::isMessageIdSet() {
return _MessageIdSet;
}

void BuyItemResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* BuyItemResponse::getRequestId() {
return _RequestId;
}

void BuyItemResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool BuyItemResponse::isRequestIdSet() {
return _RequestIdSet;
}

void BuyItemResponse::unSetRequestId() {
_RequestIdSet = false;
}

BuyItemStatus* BuyItemResponse::getBuyItemStatus() {
return _BuyItemStatus;
}

void BuyItemResponse::setBuyItemStatus(BuyItemStatus* value) {
_BuyItemStatus = value;
_BuyItemStatusSet = true;
}

bool BuyItemResponse::isBuyItemStatusSet() {
return _BuyItemStatusSet;
}

void BuyItemResponse::unSetBuyItemStatus() {
_BuyItemStatusSet = false;
}

NItem* BuyItemResponse::getBoughtItem() {
return _BoughtItem;
}

void BuyItemResponse::setBoughtItem(NItem* value) {
if (_BoughtItem && _BoughtItem != value) {
delete _BoughtItem;
}
_BoughtItem = value;
_BoughtItemSet = true;
}

bool BuyItemResponse::isBoughtItemSet() {
return _BoughtItemSet;
}

void BuyItemResponse::unSetBoughtItem() {
_BoughtItemSet = false;
}

int BuyItemResponse::getQuantity() {
return _Quantity;
}

void BuyItemResponse::setQuantity(int value) {
_Quantity = value;
_QuantitySet = true;
}

bool BuyItemResponse::isQuantitySet() {
return _QuantitySet;
}

void BuyItemResponse::unSetQuantity() {
_QuantitySet = false;
}

//@Override
short BuyItemResponse::getSerializerID() {
return serializerID;
}

void* BuyItemResponse::clone() {
BuyItemResponse* _r15459 = new BuyItemResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r15459->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r15459->setRequestId(_RequestId);
}
if (_BuyItemStatusSet == true && Utils::isNull(_BuyItemStatus) == false) {
_r15459->setBuyItemStatus(_BuyItemStatus);
}
if (_BoughtItemSet == true && Utils::isNull(_BoughtItem) == false) {
_r15459->setBoughtItem((NItem*)(_BoughtItem->clone()));
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_r15459->setQuantity(_Quantity);
}
return _r15459;
}

const char* BuyItemResponse::toString() {
const char* _n15460 = "";
_n15460 = NUtils::concat(_n15460, NUtils::concat(NUtils::concat("[", "BuyItemResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n15460 = NUtils::concat(_n15460, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n15460 = NUtils::concat(_n15460, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_BuyItemStatusSet == true && Utils::isNull(_BuyItemStatus) == false) {
_n15460 = NUtils::concat(_n15460, NUtils::concat(NUtils::concat("_BuyItemStatus=", _BuyItemStatus->toString()), "| "));
}
if (_BoughtItemSet == true && Utils::isNull(_BoughtItem) == false) {
_n15460 = NUtils::concat(_n15460, NUtils::concat(NUtils::concat("_BoughtItem=", _BoughtItem->toString()), "| "));
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_n15460 = NUtils::concat(_n15460, NUtils::concat(NUtils::concat("_Quantity=", _Quantity), "| "));
}
_n15460 = NUtils::concat(_n15460, "]");
return _n15460;
}

BuyItemResponse::BuyItemResponse(){
this->_QuantitySet = false;
this->_Quantity = 0;
this->_BoughtItemSet = false;
this->_BoughtItem = 0;
this->_BuyItemStatusSet = false;
this->_BuyItemStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

BuyItemResponse::~BuyItemResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_BoughtItem) {
delete _BoughtItem;
_BoughtItem=0;
}
}


#include "NGameCharacteristics.h"

short NGameCharacteristics::serializerID = -3010;





















const char* NGameCharacteristics::getStoreId() {
    return _storeId;
}

void NGameCharacteristics::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NGameCharacteristics::isstoreIdSet() {
return _storeIdSet;
}

void NGameCharacteristics::unSetstoreId() {
_storeIdSet = false;
}

int NGameCharacteristics::getMinPlayer() {
return _MinPlayer;
}

void NGameCharacteristics::setMinPlayer(int value) {
_MinPlayer = value;
_MinPlayerSet = true;
}

bool NGameCharacteristics::isMinPlayerSet() {
return _MinPlayerSet;
}

void NGameCharacteristics::unSetMinPlayer() {
_MinPlayerSet = false;
}

int NGameCharacteristics::getMaxPlayer() {
return _MaxPlayer;
}

void NGameCharacteristics::setMaxPlayer(int value) {
_MaxPlayer = value;
_MaxPlayerSet = true;
}

bool NGameCharacteristics::isMaxPlayerSet() {
return _MaxPlayerSet;
}

void NGameCharacteristics::unSetMaxPlayer() {
_MaxPlayerSet = false;
}

bool NGameCharacteristics::isAutoStop() {
return _AutoStop;
}

void NGameCharacteristics::setAutoStop(bool value) {
_AutoStop = value;
_AutoStopSet = true;
}

bool NGameCharacteristics::isAutoStopSet() {
return _AutoStopSet;
}

void NGameCharacteristics::unSetAutoStop() {
_AutoStopSet = false;
}

bool NGameCharacteristics::isAutoStart() {
return _AutoStart;
}

void NGameCharacteristics::setAutoStart(bool value) {
_AutoStart = value;
_AutoStartSet = true;
}

bool NGameCharacteristics::isAutoStartSet() {
return _AutoStartSet;
}

void NGameCharacteristics::unSetAutoStart() {
_AutoStartSet = false;
}

//@Override
short NGameCharacteristics::getSerializerID() {
return serializerID;
}

void* NGameCharacteristics::clone() {
NGameCharacteristics* _r15457 = new NGameCharacteristics();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_r15457->setStoreId(_storeId);
}
if (_MinPlayerSet == true && Utils::isNullInteger(_MinPlayer) == false) {
_r15457->setMinPlayer(_MinPlayer);
}
if (_MaxPlayerSet == true && Utils::isNullInteger(_MaxPlayer) == false) {
_r15457->setMaxPlayer(_MaxPlayer);
}
if (_AutoStopSet == true && Utils::isNullBoolean(_AutoStop) == false) {
_r15457->setAutoStop(_AutoStop);
}
if (_AutoStartSet == true && Utils::isNullBoolean(_AutoStart) == false) {
_r15457->setAutoStart(_AutoStart);
}
return _r15457;
}

const char* NGameCharacteristics::toString() {
const char* _x15458 = "";
_x15458 = NUtils::concat(_x15458, NUtils::concat(NUtils::concat("[", "NGameCharacteristics"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_x15458 = NUtils::concat(_x15458, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_MinPlayerSet == true && Utils::isNullInteger(_MinPlayer) == false) {
_x15458 = NUtils::concat(_x15458, NUtils::concat(NUtils::concat("_MinPlayer=", _MinPlayer), "| "));
}
if (_MaxPlayerSet == true && Utils::isNullInteger(_MaxPlayer) == false) {
_x15458 = NUtils::concat(_x15458, NUtils::concat(NUtils::concat("_MaxPlayer=", _MaxPlayer), "| "));
}
if (_AutoStopSet == true && Utils::isNullBoolean(_AutoStop) == false) {
_x15458 = NUtils::concat(_x15458, NUtils::concat(NUtils::concat("_AutoStop=", _AutoStop), "| "));
}
if (_AutoStartSet == true && Utils::isNullBoolean(_AutoStart) == false) {
_x15458 = NUtils::concat(_x15458, NUtils::concat(NUtils::concat("_AutoStart=", _AutoStart), "| "));
}
_x15458 = NUtils::concat(_x15458, "]");
return _x15458;
}

NGameCharacteristics::NGameCharacteristics(){
this->_AutoStartSet = true;
this->_AutoStart = true;
this->_AutoStopSet = true;
this->_AutoStop = true;
this->_MaxPlayerSet = true;
this->_MaxPlayer = 0;
this->_MinPlayerSet = true;
this->_MinPlayer = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NGameCharacteristics::~NGameCharacteristics(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
}


#include "GetPlayerWalletRequest.h"

short GetPlayerWalletRequest::serializerID = -10417;









const char* GetPlayerWalletRequest::getMessageId() {
    return _MessageId;
}

void GetPlayerWalletRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetPlayerWalletRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetPlayerWalletRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetPlayerWalletRequest::getRequestId() {
return _RequestId;
}

void GetPlayerWalletRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetPlayerWalletRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetPlayerWalletRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short GetPlayerWalletRequest::getSerializerID() {
return serializerID;
}

void* GetPlayerWalletRequest::clone() {
GetPlayerWalletRequest* _w15129 = new GetPlayerWalletRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w15129->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w15129->setRequestId(_RequestId);
}
return _w15129;
}

const char* GetPlayerWalletRequest::toString() {
const char* _x15130 = "";
_x15130 = NUtils::concat(_x15130, NUtils::concat(NUtils::concat("[", "GetPlayerWalletRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15130 = NUtils::concat(_x15130, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15130 = NUtils::concat(_x15130, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_x15130 = NUtils::concat(_x15130, "]");
return _x15130;
}

GetPlayerWalletRequest::GetPlayerWalletRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetPlayerWalletRequest::~GetPlayerWalletRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "Period.h"

std::vector<Period*>* Period::_values = new std::vector<Period*>();

Period* Period::DAY = new Period("DAY", 0);

Period* Period::WEEK = new Period("WEEK", 1);

Period* Period::MONTH = new Period("MONTH", 2);

Period* Period::YEAR = new Period("YEAR", 3);

std::vector<Period*>* Period::values() {
    return _values;
}





int Period::getValue() {
return _value;
}

const char* Period::name() {
return _name;
}

int Period::ordinal() {
return _value;
}

Period::Period(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

Period* Period::fromValue(int value) {
for (unsigned int _y7081 = 0; _y7081 < (unsigned int)_values->size(); _y7081++) {
Period* _g7082 = (*_values)[_y7081];
if (_g7082->getValue() == value) {
return _g7082;
}
}
return 0;
}

Period* Period::valueOf(const char* name) {
for (unsigned int _w15474 = 0; _w15474 < (unsigned int)_values->size(); _w15474++) {
Period* _a15475 = (*_values)[_w15474];
if (strcmp(name, _a15475->name()) == 0) {
return _a15475;
}
}
return 0;
}

//@Override
short Period::getSerializerID() {
return -22;
}

const char* Period::toString() {
return NUtils::concat("Period.", _name);
}

void* Period::clone() {
return this;
}

Period::~Period(){
}


#include "SetPlayerNameRequest.h"

short SetPlayerNameRequest::serializerID = -10837;













const char* SetPlayerNameRequest::getMessageId() {
    return _MessageId;
}

void SetPlayerNameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SetPlayerNameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SetPlayerNameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SetPlayerNameRequest::getRequestId() {
return _RequestId;
}

void SetPlayerNameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SetPlayerNameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SetPlayerNameRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* SetPlayerNameRequest::getName() {
return _Name;
}

void SetPlayerNameRequest::setName(const char* value) {
if (_Name && _Name != value) {
delete _Name;
}
if (value) {
_Name = strdup(value);
} else {
_Name = 0;
}
_NameSet = true;
}

bool SetPlayerNameRequest::isNameSet() {
return _NameSet;
}

void SetPlayerNameRequest::unSetName() {
_NameSet = false;
}

//@Override
short SetPlayerNameRequest::getSerializerID() {
return serializerID;
}

void* SetPlayerNameRequest::clone() {
SetPlayerNameRequest* _h15139 = new SetPlayerNameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15139->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15139->setRequestId(_RequestId);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_h15139->setName(_Name);
}
return _h15139;
}

const char* SetPlayerNameRequest::toString() {
const char* _t15140 = "";
_t15140 = NUtils::concat(_t15140, NUtils::concat(NUtils::concat("[", "SetPlayerNameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_t15140 = NUtils::concat(_t15140, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_t15140 = NUtils::concat(_t15140, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_t15140 = NUtils::concat(_t15140, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
_t15140 = NUtils::concat(_t15140, "]");
return _t15140;
}

SetPlayerNameRequest::SetPlayerNameRequest(){
this->_NameSet = false;
this->_Name = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SetPlayerNameRequest::~SetPlayerNameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Name) {
delete _Name;
_Name = 0;
}
}


#include "SetPlayerNameStatus.h"

std::vector<SetPlayerNameStatus*>* SetPlayerNameStatus::_values = new std::vector<SetPlayerNameStatus*>();

SetPlayerNameStatus* SetPlayerNameStatus::SUCCESS = new SetPlayerNameStatus("SUCCESS", 0);

SetPlayerNameStatus* SetPlayerNameStatus::NOT_ANONYMOUS_PLAYER = new SetPlayerNameStatus("NOT_ANONYMOUS_PLAYER", 1);

SetPlayerNameStatus* SetPlayerNameStatus::INVALID_CALL = new SetPlayerNameStatus("INVALID_CALL", 2);

SetPlayerNameStatus* SetPlayerNameStatus::INTERNAL_ERROR = new SetPlayerNameStatus("INTERNAL_ERROR", 3);

std::vector<SetPlayerNameStatus*>* SetPlayerNameStatus::values() {
    return _values;
}





int SetPlayerNameStatus::getValue() {
return _value;
}

const char* SetPlayerNameStatus::name() {
return _name;
}

int SetPlayerNameStatus::ordinal() {
return _value;
}

SetPlayerNameStatus::SetPlayerNameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SetPlayerNameStatus* SetPlayerNameStatus::fromValue(int value) {
for (unsigned int _l6648 = 0; _l6648 < (unsigned int)_values->size(); _l6648++) {
SetPlayerNameStatus* _b6649 = (*_values)[_l6648];
if (_b6649->getValue() == value) {
return _b6649;
}
}
return 0;
}

SetPlayerNameStatus* SetPlayerNameStatus::valueOf(const char* name) {
for (unsigned int _y14877 = 0; _y14877 < (unsigned int)_values->size(); _y14877++) {
SetPlayerNameStatus* _w14878 = (*_values)[_y14877];
if (strcmp(name, _w14878->name()) == 0) {
return _w14878;
}
}
return 0;
}

//@Override
short SetPlayerNameStatus::getSerializerID() {
return -10838;
}

const char* SetPlayerNameStatus::toString() {
return NUtils::concat("SetPlayerNameStatus.", _name);
}

void* SetPlayerNameStatus::clone() {
return this;
}

SetPlayerNameStatus::~SetPlayerNameStatus(){
}


#include "GetPlayerProfileStatus.h"

std::vector<GetPlayerProfileStatus*>* GetPlayerProfileStatus::_values = new std::vector<GetPlayerProfileStatus*>();

GetPlayerProfileStatus* GetPlayerProfileStatus::SUCCESS = new GetPlayerProfileStatus("SUCCESS", 0);

GetPlayerProfileStatus* GetPlayerProfileStatus::FAILURE = new GetPlayerProfileStatus("FAILURE", 1);

GetPlayerProfileStatus* GetPlayerProfileStatus::INVALID_CALL = new GetPlayerProfileStatus("INVALID_CALL", 2);

GetPlayerProfileStatus* GetPlayerProfileStatus::INTERNAL_ERROR = new GetPlayerProfileStatus("INTERNAL_ERROR", 3);

std::vector<GetPlayerProfileStatus*>* GetPlayerProfileStatus::values() {
    return _values;
}





int GetPlayerProfileStatus::getValue() {
return _value;
}

const char* GetPlayerProfileStatus::name() {
return _name;
}

int GetPlayerProfileStatus::ordinal() {
return _value;
}

GetPlayerProfileStatus::GetPlayerProfileStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetPlayerProfileStatus* GetPlayerProfileStatus::fromValue(int value) {
for (unsigned int _b7005 = 0; _b7005 < (unsigned int)_values->size(); _b7005++) {
GetPlayerProfileStatus* _n7006 = (*_values)[_b7005];
if (_n7006->getValue() == value) {
return _n7006;
}
}
return 0;
}

GetPlayerProfileStatus* GetPlayerProfileStatus::valueOf(const char* name) {
for (unsigned int _h15393 = 0; _h15393 < (unsigned int)_values->size(); _h15393++) {
GetPlayerProfileStatus* _k15394 = (*_values)[_h15393];
if (strcmp(name, _k15394->name()) == 0) {
return _k15394;
}
}
return 0;
}

//@Override
short GetPlayerProfileStatus::getSerializerID() {
return -10118;
}

const char* GetPlayerProfileStatus::toString() {
return NUtils::concat("GetPlayerProfileStatus.", _name);
}

void* GetPlayerProfileStatus::clone() {
return this;
}

GetPlayerProfileStatus::~GetPlayerProfileStatus(){
}


#include "FriendConnectedNotification.h"

short FriendConnectedNotification::serializerID = -3098;













const char* FriendConnectedNotification::getMessageId() {
    return _MessageId;
}

void FriendConnectedNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool FriendConnectedNotification::isMessageIdSet() {
return _MessageIdSet;
}

void FriendConnectedNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* FriendConnectedNotification::getRequestId() {
return _RequestId;
}

void FriendConnectedNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool FriendConnectedNotification::isRequestIdSet() {
return _RequestIdSet;
}

void FriendConnectedNotification::unSetRequestId() {
_RequestIdSet = false;
}

NPlayer* FriendConnectedNotification::getFriend() {
return _friend;
}

void FriendConnectedNotification::setFriend(NPlayer* value) {
if (_friend && _friend != value) {
delete _friend;
}
_friend = value;
_friendSet = true;
}

bool FriendConnectedNotification::isfriendSet() {
return _friendSet;
}

void FriendConnectedNotification::unSetfriend() {
_friendSet = false;
}

//@Override
short FriendConnectedNotification::getSerializerID() {
return serializerID;
}

void* FriendConnectedNotification::clone() {
FriendConnectedNotification* _p15435 = new FriendConnectedNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p15435->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p15435->setRequestId(_RequestId);
}
if (_friendSet == true && Utils::isNull(_friend) == false) {
_p15435->setFriend((NPlayer*)(_friend->clone()));
}
return _p15435;
}

const char* FriendConnectedNotification::toString() {
const char* _x15436 = "";
_x15436 = NUtils::concat(_x15436, NUtils::concat(NUtils::concat("[", "FriendConnectedNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15436 = NUtils::concat(_x15436, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15436 = NUtils::concat(_x15436, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_friendSet == true && Utils::isNull(_friend) == false) {
_x15436 = NUtils::concat(_x15436, NUtils::concat(NUtils::concat("_friend=", _friend->toString()), "| "));
}
_x15436 = NUtils::concat(_x15436, "]");
return _x15436;
}

FriendConnectedNotification::FriendConnectedNotification(){
this->_friendSet = false;
this->_friend = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

FriendConnectedNotification::~FriendConnectedNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_friend) {
delete _friend;
_friend=0;
}
}


#include "DnsResponse.h"

short DnsResponse::serializerID = -3020;

























const char* DnsResponse::getMessageId() {
    return _MessageId;
}

void DnsResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool DnsResponse::isMessageIdSet() {
return _MessageIdSet;
}

void DnsResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* DnsResponse::getRequestId() {
return _RequestId;
}

void DnsResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool DnsResponse::isRequestIdSet() {
return _RequestIdSet;
}

void DnsResponse::unSetRequestId() {
_RequestIdSet = false;
}

const char* DnsResponse::getIpAddress() {
return _IpAddress;
}

void DnsResponse::setIpAddress(const char* value) {
if (_IpAddress && _IpAddress != value) {
delete _IpAddress;
}
if (value) {
_IpAddress = strdup(value);
} else {
_IpAddress = 0;
}
_IpAddressSet = true;
}

bool DnsResponse::isIpAddressSet() {
return _IpAddressSet;
}

void DnsResponse::unSetIpAddress() {
_IpAddressSet = false;
}

int DnsResponse::getTcpPort() {
return _TcpPort;
}

void DnsResponse::setTcpPort(int value) {
_TcpPort = value;
_TcpPortSet = true;
}

bool DnsResponse::isTcpPortSet() {
return _TcpPortSet;
}

void DnsResponse::unSetTcpPort() {
_TcpPortSet = false;
}

DnsStatus* DnsResponse::getDnsStatus() {
return _DnsStatus;
}

void DnsResponse::setDnsStatus(DnsStatus* value) {
_DnsStatus = value;
_DnsStatusSet = true;
}

bool DnsResponse::isDnsStatusSet() {
return _DnsStatusSet;
}

void DnsResponse::unSetDnsStatus() {
_DnsStatusSet = false;
}

StartDetails* DnsResponse::getStartDetails() {
return _StartDetails;
}

void DnsResponse::setStartDetails(StartDetails* value) {
if (_StartDetails && _StartDetails != value) {
delete _StartDetails;
}
_StartDetails = value;
_StartDetailsSet = true;
}

bool DnsResponse::isStartDetailsSet() {
return _StartDetailsSet;
}

void DnsResponse::unSetStartDetails() {
_StartDetailsSet = false;
}

//@Override
short DnsResponse::getSerializerID() {
return serializerID;
}

void* DnsResponse::clone() {
DnsResponse* _u15614 = new DnsResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15614->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15614->setRequestId(_RequestId);
}
if (_IpAddressSet == true && Utils::isNull(_IpAddress) == false) {
_u15614->setIpAddress(_IpAddress);
}
if (_TcpPortSet == true && Utils::isNullInteger(_TcpPort) == false) {
_u15614->setTcpPort(_TcpPort);
}
if (_DnsStatusSet == true && Utils::isNull(_DnsStatus) == false) {
_u15614->setDnsStatus(_DnsStatus);
}
if (_StartDetailsSet == true && Utils::isNull(_StartDetails) == false) {
_u15614->setStartDetails((StartDetails*)(_StartDetails->clone()));
}
return _u15614;
}

const char* DnsResponse::toString() {
const char* _z15615 = "";
_z15615 = NUtils::concat(_z15615, NUtils::concat(NUtils::concat("[", "DnsResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_z15615 = NUtils::concat(_z15615, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_z15615 = NUtils::concat(_z15615, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_IpAddressSet == true && Utils::isNull(_IpAddress) == false) {
_z15615 = NUtils::concat(_z15615, NUtils::concat(NUtils::concat("_IpAddress=", _IpAddress), "| "));
}
if (_TcpPortSet == true && Utils::isNullInteger(_TcpPort) == false) {
_z15615 = NUtils::concat(_z15615, NUtils::concat(NUtils::concat("_TcpPort=", _TcpPort), "| "));
}
if (_DnsStatusSet == true && Utils::isNull(_DnsStatus) == false) {
_z15615 = NUtils::concat(_z15615, NUtils::concat(NUtils::concat("_DnsStatus=", _DnsStatus->toString()), "| "));
}
if (_StartDetailsSet == true && Utils::isNull(_StartDetails) == false) {
_z15615 = NUtils::concat(_z15615, NUtils::concat(NUtils::concat("_StartDetails=", _StartDetails->toString()), "| "));
}
_z15615 = NUtils::concat(_z15615, "]");
return _z15615;
}

DnsResponse::DnsResponse(){
this->_StartDetailsSet = false;
this->_StartDetails = 0;
this->_DnsStatusSet = false;
this->_DnsStatus = 0;
this->_TcpPortSet = false;
this->_TcpPort = 0;
this->_IpAddressSet = false;
this->_IpAddress = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

DnsResponse::~DnsResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_IpAddress) {
delete _IpAddress;
_IpAddress = 0;
}
if (_StartDetails) {
delete _StartDetails;
_StartDetails=0;
}
}


#include "AcceptFriendDemandRequest.h"

short AcceptFriendDemandRequest::serializerID = -10257;













const char* AcceptFriendDemandRequest::getMessageId() {
    return _MessageId;
}

void AcceptFriendDemandRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AcceptFriendDemandRequest::isMessageIdSet() {
return _MessageIdSet;
}

void AcceptFriendDemandRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* AcceptFriendDemandRequest::getRequestId() {
return _RequestId;
}

void AcceptFriendDemandRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AcceptFriendDemandRequest::isRequestIdSet() {
return _RequestIdSet;
}

void AcceptFriendDemandRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* AcceptFriendDemandRequest::getFriendDemandId() {
return _FriendDemandId;
}

void AcceptFriendDemandRequest::setFriendDemandId(const char* value) {
if (_FriendDemandId && _FriendDemandId != value) {
delete _FriendDemandId;
}
if (value) {
_FriendDemandId = strdup(value);
} else {
_FriendDemandId = 0;
}
_FriendDemandIdSet = true;
}

bool AcceptFriendDemandRequest::isFriendDemandIdSet() {
return _FriendDemandIdSet;
}

void AcceptFriendDemandRequest::unSetFriendDemandId() {
_FriendDemandIdSet = false;
}

//@Override
short AcceptFriendDemandRequest::getSerializerID() {
return serializerID;
}

void* AcceptFriendDemandRequest::clone() {
AcceptFriendDemandRequest* _g15572 = new AcceptFriendDemandRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15572->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15572->setRequestId(_RequestId);
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_g15572->setFriendDemandId(_FriendDemandId);
}
return _g15572;
}

const char* AcceptFriendDemandRequest::toString() {
const char* _y15573 = "";
_y15573 = NUtils::concat(_y15573, NUtils::concat(NUtils::concat("[", "AcceptFriendDemandRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15573 = NUtils::concat(_y15573, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15573 = NUtils::concat(_y15573, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_y15573 = NUtils::concat(_y15573, NUtils::concat(NUtils::concat("_FriendDemandId=", _FriendDemandId), "| "));
}
_y15573 = NUtils::concat(_y15573, "]");
return _y15573;
}

AcceptFriendDemandRequest::AcceptFriendDemandRequest(){
this->_FriendDemandIdSet = false;
this->_FriendDemandId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AcceptFriendDemandRequest::~AcceptFriendDemandRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_FriendDemandId) {
delete _FriendDemandId;
_FriendDemandId = 0;
}
}


#include "SendGameChatResponse.h"

short SendGameChatResponse::serializerID = -10759;













const char* SendGameChatResponse::getMessageId() {
    return _MessageId;
}

void SendGameChatResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SendGameChatResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SendGameChatResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SendGameChatResponse::getRequestId() {
return _RequestId;
}

void SendGameChatResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SendGameChatResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SendGameChatResponse::unSetRequestId() {
_RequestIdSet = false;
}

SendGameChatStatus* SendGameChatResponse::getSendGameChatStatus() {
return _SendGameChatStatus;
}

void SendGameChatResponse::setSendGameChatStatus(SendGameChatStatus* value) {
_SendGameChatStatus = value;
_SendGameChatStatusSet = true;
}

bool SendGameChatResponse::isSendGameChatStatusSet() {
return _SendGameChatStatusSet;
}

void SendGameChatResponse::unSetSendGameChatStatus() {
_SendGameChatStatusSet = false;
}

//@Override
short SendGameChatResponse::getSerializerID() {
return serializerID;
}

void* SendGameChatResponse::clone() {
SendGameChatResponse* _i13830 = new SendGameChatResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i13830->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i13830->setRequestId(_RequestId);
}
if (_SendGameChatStatusSet == true && Utils::isNull(_SendGameChatStatus) == false) {
_i13830->setSendGameChatStatus(_SendGameChatStatus);
}
return _i13830;
}

const char* SendGameChatResponse::toString() {
const char* _r13831 = "";
_r13831 = NUtils::concat(_r13831, NUtils::concat(NUtils::concat("[", "SendGameChatResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r13831 = NUtils::concat(_r13831, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r13831 = NUtils::concat(_r13831, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SendGameChatStatusSet == true && Utils::isNull(_SendGameChatStatus) == false) {
_r13831 = NUtils::concat(_r13831, NUtils::concat(NUtils::concat("_SendGameChatStatus=", _SendGameChatStatus->toString()), "| "));
}
_r13831 = NUtils::concat(_r13831, "]");
return _r13831;
}

SendGameChatResponse::SendGameChatResponse(){
this->_SendGameChatStatusSet = false;
this->_SendGameChatStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SendGameChatResponse::~SendGameChatResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "HandshakeState.h"

std::vector<HandshakeState*>* HandshakeState::_values = new std::vector<HandshakeState*>();

HandshakeState* HandshakeState::INIT = new HandshakeState("INIT", 0);

HandshakeState* HandshakeState::BALANCE = new HandshakeState("BALANCE", 1);

HandshakeState* HandshakeState::OPEN_SLAVE_CONNECTION = new HandshakeState("OPEN_SLAVE_CONNECTION", 2);

HandshakeState* HandshakeState::SWITCH = new HandshakeState("SWITCH", 3);

std::vector<HandshakeState*>* HandshakeState::values() {
    return _values;
}





int HandshakeState::getValue() {
return _value;
}

const char* HandshakeState::name() {
return _name;
}

int HandshakeState::ordinal() {
return _value;
}

HandshakeState::HandshakeState(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

HandshakeState* HandshakeState::fromValue(int value) {
for (unsigned int _i7159 = 0; _i7159 < (unsigned int)_values->size(); _i7159++) {
HandshakeState* _m7160 = (*_values)[_i7159];
if (_m7160->getValue() == value) {
return _m7160;
}
}
return 0;
}

HandshakeState* HandshakeState::valueOf(const char* name) {
for (unsigned int _m15552 = 0; _m15552 < (unsigned int)_values->size(); _m15552++) {
HandshakeState* _o15553 = (*_values)[_m15552];
if (strcmp(name, _o15553->name()) == 0) {
return _o15553;
}
}
return 0;
}

//@Override
short HandshakeState::getSerializerID() {
return -18;
}

const char* HandshakeState::toString() {
return NUtils::concat("HandshakeState.", _name);
}

void* HandshakeState::clone() {
return this;
}

HandshakeState::~HandshakeState(){
}


#include "LogoutStatus.h"

std::vector<LogoutStatus*>* LogoutStatus::_values = new std::vector<LogoutStatus*>();

LogoutStatus* LogoutStatus::SUCCESS = new LogoutStatus("SUCCESS", 0);

LogoutStatus* LogoutStatus::INTERNAL_ERROR = new LogoutStatus("INTERNAL_ERROR", 2);

std::vector<LogoutStatus*>* LogoutStatus::values() {
    return _values;
}





int LogoutStatus::getValue() {
return _value;
}

const char* LogoutStatus::name() {
return _name;
}

int LogoutStatus::ordinal() {
return _value;
}

LogoutStatus::LogoutStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

LogoutStatus* LogoutStatus::fromValue(int value) {
for (unsigned int _n6719 = 0; _n6719 < (unsigned int)_values->size(); _n6719++) {
LogoutStatus* _v6720 = (*_values)[_n6719];
if (_v6720->getValue() == value) {
return _v6720;
}
}
return 0;
}

LogoutStatus* LogoutStatus::valueOf(const char* name) {
for (unsigned int _j14976 = 0; _j14976 < (unsigned int)_values->size(); _j14976++) {
LogoutStatus* _t14977 = (*_values)[_j14976];
if (strcmp(name, _t14977->name()) == 0) {
return _t14977;
}
}
return 0;
}

//@Override
short LogoutStatus::getSerializerID() {
return -10138;
}

const char* LogoutStatus::toString() {
return NUtils::concat("LogoutStatus.", _name);
}

void* LogoutStatus::clone() {
return this;
}

LogoutStatus::~LogoutStatus(){
}


#include "GameStateChange.h"

short GameStateChange::serializerID = -3004;

















const char* GameStateChange::getMessageId() {
    return _MessageId;
}

void GameStateChange::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GameStateChange::isMessageIdSet() {
return _MessageIdSet;
}

void GameStateChange::unSetMessageId() {
_MessageIdSet = false;
}

const char* GameStateChange::getRequestId() {
return _RequestId;
}

void GameStateChange::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GameStateChange::isRequestIdSet() {
return _RequestIdSet;
}

void GameStateChange::unSetRequestId() {
_RequestIdSet = false;
}

const char* GameStateChange::getGameId() {
return _GameId;
}

void GameStateChange::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool GameStateChange::isGameIdSet() {
return _GameIdSet;
}

void GameStateChange::unSetGameId() {
_GameIdSet = false;
}

GameRunningState* GameStateChange::getGameRunningState() {
return _GameRunningState;
}

void GameStateChange::setGameRunningState(GameRunningState* value) {
_GameRunningState = value;
_GameRunningStateSet = true;
}

bool GameStateChange::isGameRunningStateSet() {
return _GameRunningStateSet;
}

void GameStateChange::unSetGameRunningState() {
_GameRunningStateSet = false;
}

//@Override
short GameStateChange::getSerializerID() {
return serializerID;
}

void* GameStateChange::clone() {
GameStateChange* _f13866 = new GameStateChange();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f13866->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f13866->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_f13866->setGameId(_GameId);
}
if (_GameRunningStateSet == true && Utils::isNull(_GameRunningState) == false) {
_f13866->setGameRunningState(_GameRunningState);
}
return _f13866;
}

const char* GameStateChange::toString() {
const char* _n13867 = "";
_n13867 = NUtils::concat(_n13867, NUtils::concat(NUtils::concat("[", "GameStateChange"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n13867 = NUtils::concat(_n13867, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n13867 = NUtils::concat(_n13867, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_n13867 = NUtils::concat(_n13867, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_GameRunningStateSet == true && Utils::isNull(_GameRunningState) == false) {
_n13867 = NUtils::concat(_n13867, NUtils::concat(NUtils::concat("_GameRunningState=", _GameRunningState->toString()), "| "));
}
_n13867 = NUtils::concat(_n13867, "]");
return _n13867;
}

GameStateChange::GameStateChange(){
this->_GameRunningStateSet = false;
this->_GameRunningState = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GameStateChange::~GameStateChange(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "CreateGameResponse.h"

short CreateGameResponse::serializerID = -10659;

















const char* CreateGameResponse::getMessageId() {
    return _MessageId;
}

void CreateGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool CreateGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void CreateGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* CreateGameResponse::getRequestId() {
return _RequestId;
}

void CreateGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool CreateGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void CreateGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

CreateGameStatus* CreateGameResponse::getCreateGameStatus() {
return _CreateGameStatus;
}

void CreateGameResponse::setCreateGameStatus(CreateGameStatus* value) {
_CreateGameStatus = value;
_CreateGameStatusSet = true;
}

bool CreateGameResponse::isCreateGameStatusSet() {
return _CreateGameStatusSet;
}

void CreateGameResponse::unSetCreateGameStatus() {
_CreateGameStatusSet = false;
}

const char* CreateGameResponse::getGameId() {
return _GameId;
}

void CreateGameResponse::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool CreateGameResponse::isGameIdSet() {
return _GameIdSet;
}

void CreateGameResponse::unSetGameId() {
_GameIdSet = false;
}

//@Override
short CreateGameResponse::getSerializerID() {
return serializerID;
}

void* CreateGameResponse::clone() {
CreateGameResponse* _n14322 = new CreateGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n14322->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n14322->setRequestId(_RequestId);
}
if (_CreateGameStatusSet == true && Utils::isNull(_CreateGameStatus) == false) {
_n14322->setCreateGameStatus(_CreateGameStatus);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_n14322->setGameId(_GameId);
}
return _n14322;
}

const char* CreateGameResponse::toString() {
const char* _u14323 = "";
_u14323 = NUtils::concat(_u14323, NUtils::concat(NUtils::concat("[", "CreateGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u14323 = NUtils::concat(_u14323, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u14323 = NUtils::concat(_u14323, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_CreateGameStatusSet == true && Utils::isNull(_CreateGameStatus) == false) {
_u14323 = NUtils::concat(_u14323, NUtils::concat(NUtils::concat("_CreateGameStatus=", _CreateGameStatus->toString()), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_u14323 = NUtils::concat(_u14323, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_u14323 = NUtils::concat(_u14323, "]");
return _u14323;
}

CreateGameResponse::CreateGameResponse(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_CreateGameStatusSet = false;
this->_CreateGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

CreateGameResponse::~CreateGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "Handshake.h"

short Handshake::serializerID = -3000;





































const char* Handshake::getMessageId() {
    return _MessageId;
}

void Handshake::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool Handshake::isMessageIdSet() {
return _MessageIdSet;
}

void Handshake::unSetMessageId() {
_MessageIdSet = false;
}

const char* Handshake::getRequestId() {
return _RequestId;
}

void Handshake::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool Handshake::isRequestIdSet() {
return _RequestIdSet;
}

void Handshake::unSetRequestId() {
_RequestIdSet = false;
}

const char* Handshake::getVersion() {
return _Version;
}

void Handshake::setVersion(const char* value) {
if (_Version && _Version != value) {
delete _Version;
}
if (value) {
_Version = strdup(value);
} else {
_Version = 0;
}
_VersionSet = true;
}

bool Handshake::isVersionSet() {
return _VersionSet;
}

void Handshake::unSetVersion() {
_VersionSet = false;
}

HandshakeState* Handshake::getReason() {
return _Reason;
}

void Handshake::setReason(HandshakeState* value) {
_Reason = value;
_ReasonSet = true;
}

bool Handshake::isReasonSet() {
return _ReasonSet;
}

void Handshake::unSetReason() {
_ReasonSet = false;
}

const char* Handshake::getPlayerIdsStored() {
return _playerIdsStored;
}

void Handshake::setPlayerIdsStored(const char* value) {
if (_playerIdsStored && _playerIdsStored != value) {
delete _playerIdsStored;
}
if (value) {
_playerIdsStored = strdup(value);
} else {
_playerIdsStored = 0;
}
_playerIdsStoredSet = true;
}

bool Handshake::isplayerIdsStoredSet() {
return _playerIdsStoredSet;
}

void Handshake::unSetplayerIdsStored() {
_playerIdsStoredSet = false;
}

const char* Handshake::getSessionId() {
return _sessionId;
}

void Handshake::setSessionId(const char* value) {
if (_sessionId && _sessionId != value) {
delete _sessionId;
}
if (value) {
_sessionId = strdup(value);
} else {
_sessionId = 0;
}
_sessionIdSet = true;
}

bool Handshake::issessionIdSet() {
return _sessionIdSet;
}

void Handshake::unSetsessionId() {
_sessionIdSet = false;
}

const char* Handshake::getPlatform() {
return _platform;
}

void Handshake::setPlatform(const char* value) {
if (_platform && _platform != value) {
delete _platform;
}
if (value) {
_platform = strdup(value);
} else {
_platform = 0;
}
_platformSet = true;
}

bool Handshake::isplatformSet() {
return _platformSet;
}

void Handshake::unSetplatform() {
_platformSet = false;
}

const char* Handshake::getSpId() {
return _spId;
}

void Handshake::setSpId(const char* value) {
if (_spId && _spId != value) {
delete _spId;
}
if (value) {
_spId = strdup(value);
} else {
_spId = 0;
}
_spIdSet = true;
}

bool Handshake::isspIdSet() {
return _spIdSet;
}

void Handshake::unSetspId() {
_spIdSet = false;
}

const char* Handshake::getDebugSpId() {
return _debugSpId;
}

void Handshake::setDebugSpId(const char* value) {
if (_debugSpId && _debugSpId != value) {
delete _debugSpId;
}
if (value) {
_debugSpId = strdup(value);
} else {
_debugSpId = 0;
}
_debugSpIdSet = true;
}

bool Handshake::isdebugSpIdSet() {
return _debugSpIdSet;
}

void Handshake::unSetdebugSpId() {
_debugSpIdSet = false;
}

//@Override
short Handshake::getSerializerID() {
return serializerID;
}

void* Handshake::clone() {
Handshake* _v13864 = new Handshake();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v13864->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v13864->setRequestId(_RequestId);
}
if (_VersionSet == true && Utils::isNull(_Version) == false) {
_v13864->setVersion(_Version);
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_v13864->setReason(_Reason);
}
if (_playerIdsStoredSet == true && Utils::isNull(_playerIdsStored) == false) {
_v13864->setPlayerIdsStored(_playerIdsStored);
}
if (_sessionIdSet == true && Utils::isNull(_sessionId) == false) {
_v13864->setSessionId(_sessionId);
}
if (_platformSet == true && Utils::isNull(_platform) == false) {
_v13864->setPlatform(_platform);
}
if (_spIdSet == true && Utils::isNull(_spId) == false) {
_v13864->setSpId(_spId);
}
if (_debugSpIdSet == true && Utils::isNull(_debugSpId) == false) {
_v13864->setDebugSpId(_debugSpId);
}
return _v13864;
}

const char* Handshake::toString() {
const char* _k13865 = "";
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("[", "Handshake"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_VersionSet == true && Utils::isNull(_Version) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_Version=", _Version), "| "));
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_Reason=", _Reason->toString()), "| "));
}
if (_playerIdsStoredSet == true && Utils::isNull(_playerIdsStored) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_playerIdsStored=", _playerIdsStored), "| "));
}
if (_sessionIdSet == true && Utils::isNull(_sessionId) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_sessionId=", _sessionId), "| "));
}
if (_platformSet == true && Utils::isNull(_platform) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_platform=", _platform), "| "));
}
if (_spIdSet == true && Utils::isNull(_spId) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_spId=", _spId), "| "));
}
if (_debugSpIdSet == true && Utils::isNull(_debugSpId) == false) {
_k13865 = NUtils::concat(_k13865, NUtils::concat(NUtils::concat("_debugSpId=", _debugSpId), "| "));
}
_k13865 = NUtils::concat(_k13865, "]");
return _k13865;
}

Handshake::Handshake(){
this->_debugSpIdSet = false;
this->_debugSpId = 0;
this->_spIdSet = false;
this->_spId = 0;
this->_platformSet = false;
this->_platform = 0;
this->_sessionIdSet = false;
this->_sessionId = 0;
this->_playerIdsStoredSet = false;
this->_playerIdsStored = 0;
this->_ReasonSet = false;
this->_Reason = 0;
this->_VersionSet = false;
this->_Version = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

Handshake::~Handshake(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Version) {
delete _Version;
_Version = 0;
}
if (_playerIdsStored) {
delete _playerIdsStored;
_playerIdsStored = 0;
}
if (_sessionId) {
delete _sessionId;
_sessionId = 0;
}
if (_platform) {
delete _platform;
_platform = 0;
}
if (_spId) {
delete _spId;
_spId = 0;
}
if (_debugSpId) {
delete _debugSpId;
_debugSpId = 0;
}
}


#include "SearchImmediateGameResponse.h"

short SearchImmediateGameResponse::serializerID = -10479;

















const char* SearchImmediateGameResponse::getMessageId() {
    return _MessageId;
}

void SearchImmediateGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SearchImmediateGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SearchImmediateGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SearchImmediateGameResponse::getRequestId() {
return _RequestId;
}

void SearchImmediateGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SearchImmediateGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SearchImmediateGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

SearchImmediateGameStatus* SearchImmediateGameResponse::getSearchImmediateGameStatus() {
return _SearchImmediateGameStatus;
}

void SearchImmediateGameResponse::setSearchImmediateGameStatus(SearchImmediateGameStatus* value) {
_SearchImmediateGameStatus = value;
_SearchImmediateGameStatusSet = true;
}

bool SearchImmediateGameResponse::isSearchImmediateGameStatusSet() {
return _SearchImmediateGameStatusSet;
}

void SearchImmediateGameResponse::unSetSearchImmediateGameStatus() {
_SearchImmediateGameStatusSet = false;
}

NGame* SearchImmediateGameResponse::getGame() {
return _Game;
}

void SearchImmediateGameResponse::setGame(NGame* value) {
if (_Game && _Game != value) {
delete _Game;
}
_Game = value;
_GameSet = true;
}

bool SearchImmediateGameResponse::isGameSet() {
return _GameSet;
}

void SearchImmediateGameResponse::unSetGame() {
_GameSet = false;
}

//@Override
short SearchImmediateGameResponse::getSerializerID() {
return serializerID;
}

void* SearchImmediateGameResponse::clone() {
SearchImmediateGameResponse* _b14001 = new SearchImmediateGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b14001->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b14001->setRequestId(_RequestId);
}
if (_SearchImmediateGameStatusSet == true && Utils::isNull(_SearchImmediateGameStatus) == false) {
_b14001->setSearchImmediateGameStatus(_SearchImmediateGameStatus);
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_b14001->setGame((NGame*)(_Game->clone()));
}
return _b14001;
}

const char* SearchImmediateGameResponse::toString() {
const char* _b14002 = "";
_b14002 = NUtils::concat(_b14002, NUtils::concat(NUtils::concat("[", "SearchImmediateGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b14002 = NUtils::concat(_b14002, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b14002 = NUtils::concat(_b14002, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SearchImmediateGameStatusSet == true && Utils::isNull(_SearchImmediateGameStatus) == false) {
_b14002 = NUtils::concat(_b14002, NUtils::concat(NUtils::concat("_SearchImmediateGameStatus=", _SearchImmediateGameStatus->toString()), "| "));
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_b14002 = NUtils::concat(_b14002, NUtils::concat(NUtils::concat("_Game=", _Game->toString()), "| "));
}
_b14002 = NUtils::concat(_b14002, "]");
return _b14002;
}

SearchImmediateGameResponse::SearchImmediateGameResponse(){
this->_GameSet = false;
this->_Game = 0;
this->_SearchImmediateGameStatusSet = false;
this->_SearchImmediateGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SearchImmediateGameResponse::~SearchImmediateGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Game) {
delete _Game;
_Game=0;
}
}


#include "PlayerMessage.h"

short PlayerMessage::serializerID = -3118;





















const char* PlayerMessage::getMessageId() {
    return _MessageId;
}

void PlayerMessage::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PlayerMessage::isMessageIdSet() {
return _MessageIdSet;
}

void PlayerMessage::unSetMessageId() {
_MessageIdSet = false;
}

const char* PlayerMessage::getStoreId() {
return _storeId;
}

void PlayerMessage::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
delete _storeId;
}
if (value) {
_storeId = strdup(value);
} else {
_storeId = 0;
}
_storeIdSet = true;
}

bool PlayerMessage::isstoreIdSet() {
return _storeIdSet;
}

void PlayerMessage::unSetstoreId() {
_storeIdSet = false;
}

const char* PlayerMessage::getRequestId() {
return _RequestId;
}

void PlayerMessage::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PlayerMessage::isRequestIdSet() {
return _RequestIdSet;
}

void PlayerMessage::unSetRequestId() {
_RequestIdSet = false;
}

const char* PlayerMessage::getPlayerId() {
return _playerId;
}

void PlayerMessage::setPlayerId(const char* value) {
if (_playerId && _playerId != value) {
delete _playerId;
}
if (value) {
_playerId = strdup(value);
} else {
_playerId = 0;
}
_playerIdSet = true;
}

bool PlayerMessage::isplayerIdSet() {
return _playerIdSet;
}

void PlayerMessage::unSetplayerId() {
_playerIdSet = false;
}

Message* PlayerMessage::getMessage() {
return _message;
}

void PlayerMessage::setMessage(Message* value) {
if (_message && _message != value) {
delete _message;
}
_message = value;
_messageSet = true;
}

bool PlayerMessage::ismessageSet() {
return _messageSet;
}

void PlayerMessage::unSetmessage() {
_messageSet = false;
}

//@Override
short PlayerMessage::getSerializerID() {
return serializerID;
}

void* PlayerMessage::clone() {
PlayerMessage* _w13832 = new PlayerMessage();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w13832->setMessageId(_MessageId);
}
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_w13832->setStoreId(_storeId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w13832->setRequestId(_RequestId);
}
if (_playerIdSet == true && Utils::isNull(_playerId) == false) {
_w13832->setPlayerId(_playerId);
}
if (_messageSet == true && Utils::isNull(_message) == false) {
_w13832->setMessage((Message*)(_message->clone()));
}
return _w13832;
}

const char* PlayerMessage::toString() {
const char* _y13833 = "";
_y13833 = NUtils::concat(_y13833, NUtils::concat(NUtils::concat("[", "PlayerMessage"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y13833 = NUtils::concat(_y13833, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_y13833 = NUtils::concat(_y13833, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y13833 = NUtils::concat(_y13833, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_playerIdSet == true && Utils::isNull(_playerId) == false) {
_y13833 = NUtils::concat(_y13833, NUtils::concat(NUtils::concat("_playerId=", _playerId), "| "));
}
if (_messageSet == true && Utils::isNull(_message) == false) {
_y13833 = NUtils::concat(_y13833, NUtils::concat(NUtils::concat("_message=", _message->toString()), "| "));
}
_y13833 = NUtils::concat(_y13833, "]");
return _y13833;
}

PlayerMessage::PlayerMessage(){
this->_messageSet = false;
this->_message = 0;
this->_playerIdSet = false;
this->_playerId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_storeIdSet = false;
this->_storeId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PlayerMessage::~PlayerMessage(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_playerId) {
delete _playerId;
_playerId = 0;
}
if (_message) {
delete _message;
_message=0;
}
}


#include "GetFriendDemandsResponse.h"

short GetFriendDemandsResponse::serializerID = -10239;

















const char* GetFriendDemandsResponse::getMessageId() {
    return _MessageId;
}

void GetFriendDemandsResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetFriendDemandsResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetFriendDemandsResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetFriendDemandsResponse::getRequestId() {
return _RequestId;
}

void GetFriendDemandsResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetFriendDemandsResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetFriendDemandsResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetFriendDemandsStatus* GetFriendDemandsResponse::getGetFriendDemandsStatus() {
return _GetFriendDemandsStatus;
}

void GetFriendDemandsResponse::setGetFriendDemandsStatus(GetFriendDemandsStatus* value) {
_GetFriendDemandsStatus = value;
_GetFriendDemandsStatusSet = true;
}

bool GetFriendDemandsResponse::isGetFriendDemandsStatusSet() {
return _GetFriendDemandsStatusSet;
}

void GetFriendDemandsResponse::unSetGetFriendDemandsStatus() {
_GetFriendDemandsStatusSet = false;
}

std::vector<NFriendDemand*>* GetFriendDemandsResponse::getFriendDemands() {
return _FriendDemands;
}

void GetFriendDemandsResponse::setFriendDemands(std::vector<NFriendDemand*>* value) {
if (_FriendDemands) {
for (unsigned int i=0; i < _FriendDemands->size(); i++) {
delete (*_FriendDemands)[i];
}
}
if (_FriendDemands && _FriendDemands != value) {
delete _FriendDemands;
}
_FriendDemands = value;
_FriendDemandsSet = true;
}

bool GetFriendDemandsResponse::isFriendDemandsSet() {
return _FriendDemandsSet;
}

void GetFriendDemandsResponse::unSetFriendDemands() {
_FriendDemandsSet = false;
}

//@Override
short GetFriendDemandsResponse::getSerializerID() {
return serializerID;
}

void* GetFriendDemandsResponse::clone() {
GetFriendDemandsResponse* _q15143 = new GetFriendDemandsResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15143->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15143->setRequestId(_RequestId);
}
if (_GetFriendDemandsStatusSet == true && Utils::isNull(_GetFriendDemandsStatus) == false) {
_q15143->setGetFriendDemandsStatus(_GetFriendDemandsStatus);
}
if (_FriendDemandsSet == true && Utils::isNull(_FriendDemands) == false) {
std::vector<NFriendDemand*>* _e15144 = new std::vector<NFriendDemand*>();
for (unsigned int i = 0; i < (unsigned int)_FriendDemands->size(); i++) {
void* _x15145 = _FriendDemands->at(i);
if (_x15145 != 0) {
_e15144->push_back((NFriendDemand*)((NFriendDemand*)_x15145)->clone());
} else {
_e15144->push_back((NFriendDemand*)_x15145);
}
}
_q15143->setFriendDemands(_e15144);
}
return _q15143;
}

const char* GetFriendDemandsResponse::toString() {
const char* _h15146 = "";
_h15146 = NUtils::concat(_h15146, NUtils::concat(NUtils::concat("[", "GetFriendDemandsResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15146 = NUtils::concat(_h15146, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15146 = NUtils::concat(_h15146, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetFriendDemandsStatusSet == true && Utils::isNull(_GetFriendDemandsStatus) == false) {
_h15146 = NUtils::concat(_h15146, NUtils::concat(NUtils::concat("_GetFriendDemandsStatus=", _GetFriendDemandsStatus->toString()), "| "));
}
if (_FriendDemandsSet == true && Utils::isNull(_FriendDemands) == false) {
_h15146 = NUtils::concat(_h15146, NUtils::concat(NUtils::concat("_FriendDemands=", "N/A"), "| "));
}
_h15146 = NUtils::concat(_h15146, "]");
return _h15146;
}

GetFriendDemandsResponse::GetFriendDemandsResponse(){
this->_FriendDemandsSet = false;
this->_FriendDemands = new std::vector<NFriendDemand*>();
this->_GetFriendDemandsStatusSet = false;
this->_GetFriendDemandsStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetFriendDemandsResponse::~GetFriendDemandsResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_FriendDemands) {
for (unsigned int i=0; i < _FriendDemands->size(); i++) {
delete (*_FriendDemands)[i];
}
delete _FriendDemands;
_FriendDemands=0;;
}
}


#include "ConnectionReadyListenerCollection.h"



void ConnectionReadyListenerCollection::fireConnectionReady() {
    int _w15531 = connectionReadyListeners->size();
    for (unsigned int _x15532 = 0; _x15532 < (unsigned int)_w15531; _x15532++) {
        ConnectionReadyListener* _w15533 = (*connectionReadyListeners)[_x15532];
        (*_w15533)();
    }
}

std::vector<ConnectionReadyListener*>* ConnectionReadyListenerCollection::getListeners() {
return connectionReadyListeners;
}

void ConnectionReadyListenerCollection::add(ConnectionReadyListener* listener) {
connectionReadyListeners->push_back(listener);
}

void ConnectionReadyListenerCollection::remove(ConnectionReadyListener* listener) {
int _t15534 = connectionReadyListeners->size();
if (_t15534 > 0) {
int _s15535 = std::distance(connectionReadyListeners->begin(), std::find(connectionReadyListeners->begin(), connectionReadyListeners->end(), listener));
if (_s15535 >= 0)
connectionReadyListeners->erase(connectionReadyListeners->begin() + _s15535);
}
}

ConnectionReadyListenerCollection::ConnectionReadyListenerCollection(){
this->connectionReadyListeners = new std::vector<ConnectionReadyListener*>();
}

ConnectionReadyListenerCollection::~ConnectionReadyListenerCollection(){
if (connectionReadyListeners) {
for (unsigned int i=0; i < connectionReadyListeners->size(); i++) {
delete (*connectionReadyListeners)[i];
}
delete connectionReadyListeners;
connectionReadyListeners=0;;
}
}


#include "AcceptFriendDemandStatus.h"

std::vector<AcceptFriendDemandStatus*>* AcceptFriendDemandStatus::_values = new std::vector<AcceptFriendDemandStatus*>();

AcceptFriendDemandStatus* AcceptFriendDemandStatus::AUTHENTICATION_REQUIRED = new AcceptFriendDemandStatus("AUTHENTICATION_REQUIRED", 0);

AcceptFriendDemandStatus* AcceptFriendDemandStatus::UNKNOWN_FRIEND_DEMAND = new AcceptFriendDemandStatus("UNKNOWN_FRIEND_DEMAND", 1);

AcceptFriendDemandStatus* AcceptFriendDemandStatus::SUCCESS = new AcceptFriendDemandStatus("SUCCESS", 2);

AcceptFriendDemandStatus* AcceptFriendDemandStatus::FAILURE = new AcceptFriendDemandStatus("FAILURE", 3);

AcceptFriendDemandStatus* AcceptFriendDemandStatus::INVALID_CALL = new AcceptFriendDemandStatus("INVALID_CALL", 4);

AcceptFriendDemandStatus* AcceptFriendDemandStatus::INTERNAL_ERROR = new AcceptFriendDemandStatus("INTERNAL_ERROR", 5);

std::vector<AcceptFriendDemandStatus*>* AcceptFriendDemandStatus::values() {
    return _values;
}





int AcceptFriendDemandStatus::getValue() {
return _value;
}

const char* AcceptFriendDemandStatus::name() {
return _name;
}

int AcceptFriendDemandStatus::ordinal() {
return _value;
}

AcceptFriendDemandStatus::AcceptFriendDemandStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

AcceptFriendDemandStatus* AcceptFriendDemandStatus::fromValue(int value) {
for (unsigned int _p7045 = 0; _p7045 < (unsigned int)_values->size(); _p7045++) {
AcceptFriendDemandStatus* _u7046 = (*_values)[_p7045];
if (_u7046->getValue() == value) {
return _u7046;
}
}
return 0;
}

AcceptFriendDemandStatus* AcceptFriendDemandStatus::valueOf(const char* name) {
for (unsigned int _b15433 = 0; _b15433 < (unsigned int)_values->size(); _b15433++) {
AcceptFriendDemandStatus* _e15434 = (*_values)[_b15433];
if (strcmp(name, _e15434->name()) == 0) {
return _e15434;
}
}
return 0;
}

//@Override
short AcceptFriendDemandStatus::getSerializerID() {
return -10258;
}

const char* AcceptFriendDemandStatus::toString() {
return NUtils::concat("AcceptFriendDemandStatus.", _name);
}

void* AcceptFriendDemandStatus::clone() {
return this;
}

AcceptFriendDemandStatus::~AcceptFriendDemandStatus(){
}


#include "PublishFriendThirdPartyMessageStatus.h"

std::vector<PublishFriendThirdPartyMessageStatus*>* PublishFriendThirdPartyMessageStatus::_values = new std::vector<PublishFriendThirdPartyMessageStatus*>();

PublishFriendThirdPartyMessageStatus* PublishFriendThirdPartyMessageStatus::SUCCESS = new PublishFriendThirdPartyMessageStatus("SUCCESS", 0);

PublishFriendThirdPartyMessageStatus* PublishFriendThirdPartyMessageStatus::INVALID_CALL = new PublishFriendThirdPartyMessageStatus("INVALID_CALL", 1);

PublishFriendThirdPartyMessageStatus* PublishFriendThirdPartyMessageStatus::INTERNAL_ERROR = new PublishFriendThirdPartyMessageStatus("INTERNAL_ERROR", 2);

PublishFriendThirdPartyMessageStatus* PublishFriendThirdPartyMessageStatus::CANCELED = new PublishFriendThirdPartyMessageStatus("CANCELED", 3);

std::vector<PublishFriendThirdPartyMessageStatus*>* PublishFriendThirdPartyMessageStatus::values() {
    return _values;
}





int PublishFriendThirdPartyMessageStatus::getValue() {
return _value;
}

const char* PublishFriendThirdPartyMessageStatus::name() {
return _name;
}

int PublishFriendThirdPartyMessageStatus::ordinal() {
return _value;
}

PublishFriendThirdPartyMessageStatus::PublishFriendThirdPartyMessageStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

PublishFriendThirdPartyMessageStatus* PublishFriendThirdPartyMessageStatus::fromValue(int value) {
for (unsigned int _n3111 = 0; _n3111 < (unsigned int)_values->size(); _n3111++) {
PublishFriendThirdPartyMessageStatus* _v3112 = (*_values)[_n3111];
if (_v3112->getValue() == value) {
return _v3112;
}
}
return 0;
}

PublishFriendThirdPartyMessageStatus* PublishFriendThirdPartyMessageStatus::valueOf(const char* name) {
for (unsigned int _f10354 = 0; _f10354 < (unsigned int)_values->size(); _f10354++) {
PublishFriendThirdPartyMessageStatus* _u10355 = (*_values)[_f10354];
if (strcmp(name, _u10355->name()) == 0) {
return _u10355;
}
}
return 0;
}

//@Override
short PublishFriendThirdPartyMessageStatus::getSerializerID() {
return -11118;
}

const char* PublishFriendThirdPartyMessageStatus::toString() {
return NUtils::concat("PublishFriendThirdPartyMessageStatus.", _name);
}

void* PublishFriendThirdPartyMessageStatus::clone() {
return this;
}

PublishFriendThirdPartyMessageStatus::~PublishFriendThirdPartyMessageStatus(){
}


#include "GetPlayerWalletStatus.h"

std::vector<GetPlayerWalletStatus*>* GetPlayerWalletStatus::_values = new std::vector<GetPlayerWalletStatus*>();

GetPlayerWalletStatus* GetPlayerWalletStatus::SUCCESS = new GetPlayerWalletStatus("SUCCESS", 0);

GetPlayerWalletStatus* GetPlayerWalletStatus::FAILURE = new GetPlayerWalletStatus("FAILURE", 1);

GetPlayerWalletStatus* GetPlayerWalletStatus::INTERNAL_ERROR = new GetPlayerWalletStatus("INTERNAL_ERROR", 2);

std::vector<GetPlayerWalletStatus*>* GetPlayerWalletStatus::values() {
    return _values;
}





int GetPlayerWalletStatus::getValue() {
return _value;
}

const char* GetPlayerWalletStatus::name() {
return _name;
}

int GetPlayerWalletStatus::ordinal() {
return _value;
}

GetPlayerWalletStatus::GetPlayerWalletStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetPlayerWalletStatus* GetPlayerWalletStatus::fromValue(int value) {
for (unsigned int _b3115 = 0; _b3115 < (unsigned int)_values->size(); _b3115++) {
GetPlayerWalletStatus* _o3116 = (*_values)[_b3115];
if (_o3116->getValue() == value) {
return _o3116;
}
}
return 0;
}

GetPlayerWalletStatus* GetPlayerWalletStatus::valueOf(const char* name) {
for (unsigned int _f10358 = 0; _f10358 < (unsigned int)_values->size(); _f10358++) {
GetPlayerWalletStatus* _a10359 = (*_values)[_f10358];
if (strcmp(name, _a10359->name()) == 0) {
return _a10359;
}
}
return 0;
}

//@Override
short GetPlayerWalletStatus::getSerializerID() {
return -10418;
}

const char* GetPlayerWalletStatus::toString() {
return NUtils::concat("GetPlayerWalletStatus.", _name);
}

void* GetPlayerWalletStatus::clone() {
return this;
}

GetPlayerWalletStatus::~GetPlayerWalletStatus(){
}


#include "SaveStorableStatus.h"

std::vector<SaveStorableStatus*>* SaveStorableStatus::_values = new std::vector<SaveStorableStatus*>();

SaveStorableStatus* SaveStorableStatus::SUCCESS = new SaveStorableStatus("SUCCESS", 0);

SaveStorableStatus* SaveStorableStatus::FAILURE = new SaveStorableStatus("FAILURE", 1);

SaveStorableStatus* SaveStorableStatus::INVALID_CALL = new SaveStorableStatus("INVALID_CALL", 2);

SaveStorableStatus* SaveStorableStatus::INTERNAL_ERROR = new SaveStorableStatus("INTERNAL_ERROR", 3);

std::vector<SaveStorableStatus*>* SaveStorableStatus::values() {
    return _values;
}





int SaveStorableStatus::getValue() {
return _value;
}

const char* SaveStorableStatus::name() {
return _name;
}

int SaveStorableStatus::ordinal() {
return _value;
}

SaveStorableStatus::SaveStorableStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SaveStorableStatus* SaveStorableStatus::fromValue(int value) {
for (unsigned int _y6829 = 0; _y6829 < (unsigned int)_values->size(); _y6829++) {
SaveStorableStatus* _u6830 = (*_values)[_y6829];
if (_u6830->getValue() == value) {
return _u6830;
}
}
return 0;
}

SaveStorableStatus* SaveStorableStatus::valueOf(const char* name) {
for (unsigned int _m15127 = 0; _m15127 < (unsigned int)_values->size(); _m15127++) {
SaveStorableStatus* _o15128 = (*_values)[_m15127];
if (strcmp(name, _o15128->name()) == 0) {
return _o15128;
}
}
return 0;
}

//@Override
short SaveStorableStatus::getSerializerID() {
return -10798;
}

const char* SaveStorableStatus::toString() {
return NUtils::concat("SaveStorableStatus.", _name);
}

void* SaveStorableStatus::clone() {
return this;
}

SaveStorableStatus::~SaveStorableStatus(){
}


#include "RemoveStorableStatus.h"

std::vector<RemoveStorableStatus*>* RemoveStorableStatus::_values = new std::vector<RemoveStorableStatus*>();

RemoveStorableStatus* RemoveStorableStatus::SUCCESS = new RemoveStorableStatus("SUCCESS", 0);

RemoveStorableStatus* RemoveStorableStatus::FAILURE = new RemoveStorableStatus("FAILURE", 1);

RemoveStorableStatus* RemoveStorableStatus::INVALID_CALL = new RemoveStorableStatus("INVALID_CALL", 2);

RemoveStorableStatus* RemoveStorableStatus::INTERNAL_ERROR = new RemoveStorableStatus("INTERNAL_ERROR", 3);

std::vector<RemoveStorableStatus*>* RemoveStorableStatus::values() {
    return _values;
}





int RemoveStorableStatus::getValue() {
return _value;
}

const char* RemoveStorableStatus::name() {
return _name;
}

int RemoveStorableStatus::ordinal() {
return _value;
}

RemoveStorableStatus::RemoveStorableStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

RemoveStorableStatus* RemoveStorableStatus::fromValue(int value) {
for (unsigned int _e7019 = 0; _e7019 < (unsigned int)_values->size(); _e7019++) {
RemoveStorableStatus* _c7020 = (*_values)[_e7019];
if (_c7020->getValue() == value) {
return _c7020;
}
}
return 0;
}

RemoveStorableStatus* RemoveStorableStatus::valueOf(const char* name) {
for (unsigned int _b15407 = 0; _b15407 < (unsigned int)_values->size(); _b15407++) {
RemoveStorableStatus* _h15408 = (*_values)[_b15407];
if (strcmp(name, _h15408->name()) == 0) {
return _h15408;
}
}
return 0;
}

//@Override
short RemoveStorableStatus::getSerializerID() {
return -10878;
}

const char* RemoveStorableStatus::toString() {
return NUtils::concat("RemoveStorableStatus.", _name);
}

void* RemoveStorableStatus::clone() {
return this;
}

RemoveStorableStatus::~RemoveStorableStatus(){
}


#include "ConnectionStop.h"

short ConnectionStop::serializerID = -3090;









const char* ConnectionStop::getMessageId() {
    return _MessageId;
}

void ConnectionStop::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ConnectionStop::isMessageIdSet() {
return _MessageIdSet;
}

void ConnectionStop::unSetMessageId() {
_MessageIdSet = false;
}

const char* ConnectionStop::getRequestId() {
return _RequestId;
}

void ConnectionStop::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ConnectionStop::isRequestIdSet() {
return _RequestIdSet;
}

void ConnectionStop::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short ConnectionStop::getSerializerID() {
return serializerID;
}

void* ConnectionStop::clone() {
ConnectionStop* _r10389 = new ConnectionStop();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r10389->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r10389->setRequestId(_RequestId);
}
return _r10389;
}

const char* ConnectionStop::toString() {
const char* _r10390 = "";
_r10390 = NUtils::concat(_r10390, NUtils::concat(NUtils::concat("[", "ConnectionStop"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r10390 = NUtils::concat(_r10390, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r10390 = NUtils::concat(_r10390, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_r10390 = NUtils::concat(_r10390, "]");
return _r10390;
}

ConnectionStop::ConnectionStop(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ConnectionStop::~ConnectionStop(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "SubmitScoreWithPlayerNameRequest.h"

short SubmitScoreWithPlayerNameRequest::serializerID = -10296;





















const char* SubmitScoreWithPlayerNameRequest::getMessageId() {
    return _MessageId;
}

void SubmitScoreWithPlayerNameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SubmitScoreWithPlayerNameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SubmitScoreWithPlayerNameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SubmitScoreWithPlayerNameRequest::getRequestId() {
return _RequestId;
}

void SubmitScoreWithPlayerNameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SubmitScoreWithPlayerNameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SubmitScoreWithPlayerNameRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* SubmitScoreWithPlayerNameRequest::getName() {
return _Name;
}

void SubmitScoreWithPlayerNameRequest::setName(const char* value) {
if (_Name && _Name != value) {
delete _Name;
}
if (value) {
_Name = strdup(value);
} else {
_Name = 0;
}
_NameSet = true;
}

bool SubmitScoreWithPlayerNameRequest::isNameSet() {
return _NameSet;
}

void SubmitScoreWithPlayerNameRequest::unSetName() {
_NameSet = false;
}

NScore* SubmitScoreWithPlayerNameRequest::getScore() {
return _Score;
}

void SubmitScoreWithPlayerNameRequest::setScore(NScore* value) {
if (_Score && _Score != value) {
delete _Score;
}
_Score = value;
_ScoreSet = true;
}

bool SubmitScoreWithPlayerNameRequest::isScoreSet() {
return _ScoreSet;
}

void SubmitScoreWithPlayerNameRequest::unSetScore() {
_ScoreSet = false;
}

const char* SubmitScoreWithPlayerNameRequest::getLeaderboardId() {
return _LeaderboardId;
}

void SubmitScoreWithPlayerNameRequest::setLeaderboardId(const char* value) {
if (_LeaderboardId && _LeaderboardId != value) {
delete _LeaderboardId;
}
if (value) {
_LeaderboardId = strdup(value);
} else {
_LeaderboardId = 0;
}
_LeaderboardIdSet = true;
}

bool SubmitScoreWithPlayerNameRequest::isLeaderboardIdSet() {
return _LeaderboardIdSet;
}

void SubmitScoreWithPlayerNameRequest::unSetLeaderboardId() {
_LeaderboardIdSet = false;
}

//@Override
short SubmitScoreWithPlayerNameRequest::getSerializerID() {
return serializerID;
}

void* SubmitScoreWithPlayerNameRequest::clone() {
SubmitScoreWithPlayerNameRequest* _e15271 = new SubmitScoreWithPlayerNameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e15271->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e15271->setRequestId(_RequestId);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_e15271->setName(_Name);
}
if (_ScoreSet == true && Utils::isNull(_Score) == false) {
_e15271->setScore((NScore*)(_Score->clone()));
}
if (_LeaderboardIdSet == true && Utils::isNull(_LeaderboardId) == false) {
_e15271->setLeaderboardId(_LeaderboardId);
}
return _e15271;
}

const char* SubmitScoreWithPlayerNameRequest::toString() {
const char* _m15272 = "";
_m15272 = NUtils::concat(_m15272, NUtils::concat(NUtils::concat("[", "SubmitScoreWithPlayerNameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m15272 = NUtils::concat(_m15272, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m15272 = NUtils::concat(_m15272, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_m15272 = NUtils::concat(_m15272, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_ScoreSet == true && Utils::isNull(_Score) == false) {
_m15272 = NUtils::concat(_m15272, NUtils::concat(NUtils::concat("_Score=", _Score->toString()), "| "));
}
if (_LeaderboardIdSet == true && Utils::isNull(_LeaderboardId) == false) {
_m15272 = NUtils::concat(_m15272, NUtils::concat(NUtils::concat("_LeaderboardId=", _LeaderboardId), "| "));
}
_m15272 = NUtils::concat(_m15272, "]");
return _m15272;
}

SubmitScoreWithPlayerNameRequest::SubmitScoreWithPlayerNameRequest(){
this->_LeaderboardIdSet = false;
this->_LeaderboardId = 0;
this->_ScoreSet = false;
this->_Score = 0;
this->_NameSet = false;
this->_Name = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SubmitScoreWithPlayerNameRequest::~SubmitScoreWithPlayerNameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Name) {
delete _Name;
_Name = 0;
}
if (_Score) {
delete _Score;
_Score=0;
}
if (_LeaderboardId) {
delete _LeaderboardId;
_LeaderboardId = 0;
}
}


#include "GetThirdPartyFriendsStatus.h"

std::vector<GetThirdPartyFriendsStatus*>* GetThirdPartyFriendsStatus::_values = new std::vector<GetThirdPartyFriendsStatus*>();

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::AUTHENTICATION_REQUIRED = new GetThirdPartyFriendsStatus("AUTHENTICATION_REQUIRED", 0);

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::SUCCESS = new GetThirdPartyFriendsStatus("SUCCESS", 1);

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::NO_THIRD_PARTY_SOURCE_ATTACHED = new GetThirdPartyFriendsStatus("NO_THIRD_PARTY_SOURCE_ATTACHED", 2);

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::INTERNAL_ERROR = new GetThirdPartyFriendsStatus("INTERNAL_ERROR", 4);

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::INVALID_CALL = new GetThirdPartyFriendsStatus("INVALID_CALL", 5);

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::CANCELED = new GetThirdPartyFriendsStatus("CANCELED", 6);

std::vector<GetThirdPartyFriendsStatus*>* GetThirdPartyFriendsStatus::values() {
    return _values;
}





int GetThirdPartyFriendsStatus::getValue() {
return _value;
}

const char* GetThirdPartyFriendsStatus::name() {
return _name;
}

int GetThirdPartyFriendsStatus::ordinal() {
return _value;
}

GetThirdPartyFriendsStatus::GetThirdPartyFriendsStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::fromValue(int value) {
for (unsigned int _t6839 = 0; _t6839 < (unsigned int)_values->size(); _t6839++) {
GetThirdPartyFriendsStatus* _b6840 = (*_values)[_t6839];
if (_b6840->getValue() == value) {
return _b6840;
}
}
return 0;
}

GetThirdPartyFriendsStatus* GetThirdPartyFriendsStatus::valueOf(const char* name) {
for (unsigned int _c15137 = 0; _c15137 < (unsigned int)_values->size(); _c15137++) {
GetThirdPartyFriendsStatus* _g15138 = (*_values)[_c15137];
if (strcmp(name, _g15138->name()) == 0) {
return _g15138;
}
}
return 0;
}

//@Override
short GetThirdPartyFriendsStatus::getSerializerID() {
return -10218;
}

const char* GetThirdPartyFriendsStatus::toString() {
return NUtils::concat("GetThirdPartyFriendsStatus.", _name);
}

void* GetThirdPartyFriendsStatus::clone() {
return this;
}

GetThirdPartyFriendsStatus::~GetThirdPartyFriendsStatus(){
}


#include "ResumeSessionMonitoringResponse.h"

short ResumeSessionMonitoringResponse::serializerID = -11099;













const char* ResumeSessionMonitoringResponse::getMessageId() {
    return _MessageId;
}

void ResumeSessionMonitoringResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ResumeSessionMonitoringResponse::isMessageIdSet() {
return _MessageIdSet;
}

void ResumeSessionMonitoringResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* ResumeSessionMonitoringResponse::getRequestId() {
return _RequestId;
}

void ResumeSessionMonitoringResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ResumeSessionMonitoringResponse::isRequestIdSet() {
return _RequestIdSet;
}

void ResumeSessionMonitoringResponse::unSetRequestId() {
_RequestIdSet = false;
}

ResumeSessionMonitoringStatus* ResumeSessionMonitoringResponse::getResumeSessionMonitoringStatus() {
return _ResumeSessionMonitoringStatus;
}

void ResumeSessionMonitoringResponse::setResumeSessionMonitoringStatus(ResumeSessionMonitoringStatus* value) {
_ResumeSessionMonitoringStatus = value;
_ResumeSessionMonitoringStatusSet = true;
}

bool ResumeSessionMonitoringResponse::isResumeSessionMonitoringStatusSet() {
return _ResumeSessionMonitoringStatusSet;
}

void ResumeSessionMonitoringResponse::unSetResumeSessionMonitoringStatus() {
_ResumeSessionMonitoringStatusSet = false;
}

//@Override
short ResumeSessionMonitoringResponse::getSerializerID() {
return serializerID;
}

void* ResumeSessionMonitoringResponse::clone() {
ResumeSessionMonitoringResponse* _h15178 = new ResumeSessionMonitoringResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15178->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15178->setRequestId(_RequestId);
}
if (_ResumeSessionMonitoringStatusSet == true && Utils::isNull(_ResumeSessionMonitoringStatus) == false) {
_h15178->setResumeSessionMonitoringStatus(_ResumeSessionMonitoringStatus);
}
return _h15178;
}

const char* ResumeSessionMonitoringResponse::toString() {
const char* _h15179 = "";
_h15179 = NUtils::concat(_h15179, NUtils::concat(NUtils::concat("[", "ResumeSessionMonitoringResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15179 = NUtils::concat(_h15179, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15179 = NUtils::concat(_h15179, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ResumeSessionMonitoringStatusSet == true && Utils::isNull(_ResumeSessionMonitoringStatus) == false) {
_h15179 = NUtils::concat(_h15179, NUtils::concat(NUtils::concat("_ResumeSessionMonitoringStatus=", _ResumeSessionMonitoringStatus->toString()), "| "));
}
_h15179 = NUtils::concat(_h15179, "]");
return _h15179;
}

ResumeSessionMonitoringResponse::ResumeSessionMonitoringResponse(){
this->_ResumeSessionMonitoringStatusSet = false;
this->_ResumeSessionMonitoringStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ResumeSessionMonitoringResponse::~ResumeSessionMonitoringResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "AcceptInvitationResponse.h"

short AcceptInvitationResponse::serializerID = -11179;

















const char* AcceptInvitationResponse::getMessageId() {
    return _MessageId;
}

void AcceptInvitationResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AcceptInvitationResponse::isMessageIdSet() {
return _MessageIdSet;
}

void AcceptInvitationResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* AcceptInvitationResponse::getRequestId() {
return _RequestId;
}

void AcceptInvitationResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AcceptInvitationResponse::isRequestIdSet() {
return _RequestIdSet;
}

void AcceptInvitationResponse::unSetRequestId() {
_RequestIdSet = false;
}

AcceptInvitationStatus* AcceptInvitationResponse::getAcceptInvitationStatus() {
return _AcceptInvitationStatus;
}

void AcceptInvitationResponse::setAcceptInvitationStatus(AcceptInvitationStatus* value) {
_AcceptInvitationStatus = value;
_AcceptInvitationStatusSet = true;
}

bool AcceptInvitationResponse::isAcceptInvitationStatusSet() {
return _AcceptInvitationStatusSet;
}

void AcceptInvitationResponse::unSetAcceptInvitationStatus() {
_AcceptInvitationStatusSet = false;
}

const char* AcceptInvitationResponse::getInvitationId() {
return _InvitationId;
}

void AcceptInvitationResponse::setInvitationId(const char* value) {
if (_InvitationId && _InvitationId != value) {
delete _InvitationId;
}
if (value) {
_InvitationId = strdup(value);
} else {
_InvitationId = 0;
}
_InvitationIdSet = true;
}

bool AcceptInvitationResponse::isInvitationIdSet() {
return _InvitationIdSet;
}

void AcceptInvitationResponse::unSetInvitationId() {
_InvitationIdSet = false;
}

//@Override
short AcceptInvitationResponse::getSerializerID() {
return serializerID;
}

void* AcceptInvitationResponse::clone() {
AcceptInvitationResponse* _j15757 = new AcceptInvitationResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j15757->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j15757->setRequestId(_RequestId);
}
if (_AcceptInvitationStatusSet == true && Utils::isNull(_AcceptInvitationStatus) == false) {
_j15757->setAcceptInvitationStatus(_AcceptInvitationStatus);
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_j15757->setInvitationId(_InvitationId);
}
return _j15757;
}

const char* AcceptInvitationResponse::toString() {
const char* _b15758 = "";
_b15758 = NUtils::concat(_b15758, NUtils::concat(NUtils::concat("[", "AcceptInvitationResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b15758 = NUtils::concat(_b15758, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b15758 = NUtils::concat(_b15758, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_AcceptInvitationStatusSet == true && Utils::isNull(_AcceptInvitationStatus) == false) {
_b15758 = NUtils::concat(_b15758, NUtils::concat(NUtils::concat("_AcceptInvitationStatus=", _AcceptInvitationStatus->toString()), "| "));
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_b15758 = NUtils::concat(_b15758, NUtils::concat(NUtils::concat("_InvitationId=", _InvitationId), "| "));
}
_b15758 = NUtils::concat(_b15758, "]");
return _b15758;
}

AcceptInvitationResponse::AcceptInvitationResponse(){
this->_InvitationIdSet = false;
this->_InvitationId = 0;
this->_AcceptInvitationStatusSet = false;
this->_AcceptInvitationStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AcceptInvitationResponse::~AcceptInvitationResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_InvitationId) {
delete _InvitationId;
_InvitationId = 0;
}
}


#include "NFriendDemand.h"

short NFriendDemand::serializerID = -3005;

























const char* NFriendDemand::getStoreId() {
    return _storeId;
}

void NFriendDemand::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NFriendDemand::isstoreIdSet() {
return _storeIdSet;
}

void NFriendDemand::unSetstoreId() {
_storeIdSet = false;
}

NPlayer* NFriendDemand::getEmitter() {
return _Emitter;
}

void NFriendDemand::setEmitter(NPlayer* value) {
if (_Emitter && _Emitter != value) {
delete _Emitter;
}
_Emitter = value;
_EmitterSet = true;
}

bool NFriendDemand::isEmitterSet() {
return _EmitterSet;
}

void NFriendDemand::unSetEmitter() {
_EmitterSet = false;
}

const char* NFriendDemand::getReceiverId() {
return _ReceiverId;
}

void NFriendDemand::setReceiverId(const char* value) {
if (_ReceiverId && _ReceiverId != value) {
delete _ReceiverId;
}
if (value) {
_ReceiverId = strdup(value);
} else {
_ReceiverId = 0;
}
_ReceiverIdSet = true;
}

bool NFriendDemand::isReceiverIdSet() {
return _ReceiverIdSet;
}

void NFriendDemand::unSetReceiverId() {
_ReceiverIdSet = false;
}

const char* NFriendDemand::getCustomMessage() {
return _CustomMessage;
}

void NFriendDemand::setCustomMessage(const char* value) {
if (_CustomMessage && _CustomMessage != value) {
delete _CustomMessage;
}
if (value) {
_CustomMessage = strdup(value);
} else {
_CustomMessage = 0;
}
_CustomMessageSet = true;
}

bool NFriendDemand::isCustomMessageSet() {
return _CustomMessageSet;
}

void NFriendDemand::unSetCustomMessage() {
_CustomMessageSet = false;
}

NFriendDemandStatus* NFriendDemand::getFriendDemandStatus() {
return _FriendDemandStatus;
}

void NFriendDemand::setFriendDemandStatus(NFriendDemandStatus* value) {
_FriendDemandStatus = value;
_FriendDemandStatusSet = true;
}

bool NFriendDemand::isFriendDemandStatusSet() {
return _FriendDemandStatusSet;
}

void NFriendDemand::unSetFriendDemandStatus() {
_FriendDemandStatusSet = false;
}

const char* NFriendDemand::getId() {
return _Id;
}

void NFriendDemand::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool NFriendDemand::isIdSet() {
return _IdSet;
}

void NFriendDemand::unSetId() {
_IdSet = false;
}

//@Override
short NFriendDemand::getSerializerID() {
return serializerID;
}

void* NFriendDemand::clone() {
NFriendDemand* _q15230 = new NFriendDemand();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_q15230->setStoreId(_storeId);
}
if (_EmitterSet == true && Utils::isNull(_Emitter) == false) {
_q15230->setEmitter((NPlayer*)(_Emitter->clone()));
}
if (_ReceiverIdSet == true && Utils::isNull(_ReceiverId) == false) {
_q15230->setReceiverId(_ReceiverId);
}
if (_CustomMessageSet == true && Utils::isNull(_CustomMessage) == false) {
_q15230->setCustomMessage(_CustomMessage);
}
if (_FriendDemandStatusSet == true && Utils::isNull(_FriendDemandStatus) == false) {
_q15230->setFriendDemandStatus(_FriendDemandStatus);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_q15230->setId(_Id);
}
return _q15230;
}

const char* NFriendDemand::toString() {
const char* _o15231 = "";
_o15231 = NUtils::concat(_o15231, NUtils::concat(NUtils::concat("[", "NFriendDemand"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_o15231 = NUtils::concat(_o15231, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_EmitterSet == true && Utils::isNull(_Emitter) == false) {
_o15231 = NUtils::concat(_o15231, NUtils::concat(NUtils::concat("_Emitter=", _Emitter->toString()), "| "));
}
if (_ReceiverIdSet == true && Utils::isNull(_ReceiverId) == false) {
_o15231 = NUtils::concat(_o15231, NUtils::concat(NUtils::concat("_ReceiverId=", _ReceiverId), "| "));
}
if (_CustomMessageSet == true && Utils::isNull(_CustomMessage) == false) {
_o15231 = NUtils::concat(_o15231, NUtils::concat(NUtils::concat("_CustomMessage=", _CustomMessage), "| "));
}
if (_FriendDemandStatusSet == true && Utils::isNull(_FriendDemandStatus) == false) {
_o15231 = NUtils::concat(_o15231, NUtils::concat(NUtils::concat("_FriendDemandStatus=", _FriendDemandStatus->toString()), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_o15231 = NUtils::concat(_o15231, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
_o15231 = NUtils::concat(_o15231, "]");
return _o15231;
}

NFriendDemand::NFriendDemand(){
this->_IdSet = false;
this->_Id = 0;
this->_FriendDemandStatusSet = false;
this->_FriendDemandStatus = 0;
this->_CustomMessageSet = false;
this->_CustomMessage = 0;
this->_ReceiverIdSet = false;
this->_ReceiverId = 0;
this->_EmitterSet = false;
this->_Emitter = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NFriendDemand::~NFriendDemand(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Emitter) {
delete _Emitter;
_Emitter=0;
}
if (_ReceiverId) {
delete _ReceiverId;
_ReceiverId = 0;
}
if (_CustomMessage) {
delete _CustomMessage;
_CustomMessage = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
}


#include "InvitePlayerResponse.h"

short InvitePlayerResponse::serializerID = -11139;

















const char* InvitePlayerResponse::getMessageId() {
    return _MessageId;
}

void InvitePlayerResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InvitePlayerResponse::isMessageIdSet() {
return _MessageIdSet;
}

void InvitePlayerResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* InvitePlayerResponse::getRequestId() {
return _RequestId;
}

void InvitePlayerResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InvitePlayerResponse::isRequestIdSet() {
return _RequestIdSet;
}

void InvitePlayerResponse::unSetRequestId() {
_RequestIdSet = false;
}

InvitePlayerStatus* InvitePlayerResponse::getInvitePlayerStatus() {
return _InvitePlayerStatus;
}

void InvitePlayerResponse::setInvitePlayerStatus(InvitePlayerStatus* value) {
_InvitePlayerStatus = value;
_InvitePlayerStatusSet = true;
}

bool InvitePlayerResponse::isInvitePlayerStatusSet() {
return _InvitePlayerStatusSet;
}

void InvitePlayerResponse::unSetInvitePlayerStatus() {
_InvitePlayerStatusSet = false;
}

const char* InvitePlayerResponse::getInvitationId() {
return _InvitationId;
}

void InvitePlayerResponse::setInvitationId(const char* value) {
if (_InvitationId && _InvitationId != value) {
delete _InvitationId;
}
if (value) {
_InvitationId = strdup(value);
} else {
_InvitationId = 0;
}
_InvitationIdSet = true;
}

bool InvitePlayerResponse::isInvitationIdSet() {
return _InvitationIdSet;
}

void InvitePlayerResponse::unSetInvitationId() {
_InvitationIdSet = false;
}

//@Override
short InvitePlayerResponse::getSerializerID() {
return serializerID;
}

void* InvitePlayerResponse::clone() {
InvitePlayerResponse* _f15155 = new InvitePlayerResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f15155->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f15155->setRequestId(_RequestId);
}
if (_InvitePlayerStatusSet == true && Utils::isNull(_InvitePlayerStatus) == false) {
_f15155->setInvitePlayerStatus(_InvitePlayerStatus);
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_f15155->setInvitationId(_InvitationId);
}
return _f15155;
}

const char* InvitePlayerResponse::toString() {
const char* _s15156 = "";
_s15156 = NUtils::concat(_s15156, NUtils::concat(NUtils::concat("[", "InvitePlayerResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s15156 = NUtils::concat(_s15156, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s15156 = NUtils::concat(_s15156, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_InvitePlayerStatusSet == true && Utils::isNull(_InvitePlayerStatus) == false) {
_s15156 = NUtils::concat(_s15156, NUtils::concat(NUtils::concat("_InvitePlayerStatus=", _InvitePlayerStatus->toString()), "| "));
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_s15156 = NUtils::concat(_s15156, NUtils::concat(NUtils::concat("_InvitationId=", _InvitationId), "| "));
}
_s15156 = NUtils::concat(_s15156, "]");
return _s15156;
}

InvitePlayerResponse::InvitePlayerResponse(){
this->_InvitationIdSet = false;
this->_InvitationId = 0;
this->_InvitePlayerStatusSet = false;
this->_InvitePlayerStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InvitePlayerResponse::~InvitePlayerResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_InvitationId) {
delete _InvitationId;
_InvitationId = 0;
}
}


#include "NuggetaLevel.h"

short NuggetaLevel::serializerID = -3204;

















const char* NuggetaLevel::getStoreId() {
    return _storeId;
}

void NuggetaLevel::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NuggetaLevel::isstoreIdSet() {
return _storeIdSet;
}

void NuggetaLevel::unSetstoreId() {
_storeIdSet = false;
}

const char* NuggetaLevel::getData() {
return _Data;
}

void NuggetaLevel::setData(const char* value) {
if (_Data && _Data != value) {
delete _Data;
}
if (value) {
_Data = strdup(value);
} else {
_Data = 0;
}
_DataSet = true;
}

bool NuggetaLevel::isDataSet() {
return _DataSet;
}

void NuggetaLevel::unSetData() {
_DataSet = false;
}

int NuggetaLevel::getIndex() {
return _Index;
}

void NuggetaLevel::setIndex(int value) {
_Index = value;
_IndexSet = true;
}

bool NuggetaLevel::isIndexSet() {
return _IndexSet;
}

void NuggetaLevel::unSetIndex() {
_IndexSet = false;
}

int NuggetaLevel::getXP() {
return _XP;
}

void NuggetaLevel::setXP(int value) {
_XP = value;
_XPSet = true;
}

bool NuggetaLevel::isXPSet() {
return _XPSet;
}

void NuggetaLevel::unSetXP() {
_XPSet = false;
}

//@Override
short NuggetaLevel::getSerializerID() {
return serializerID;
}

void* NuggetaLevel::clone() {
NuggetaLevel* _d15574 = new NuggetaLevel();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_d15574->setStoreId(_storeId);
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_d15574->setData(_Data);
}
if (_IndexSet == true && Utils::isNullInteger(_Index) == false) {
_d15574->setIndex(_Index);
}
if (_XPSet == true && Utils::isNullInteger(_XP) == false) {
_d15574->setXP(_XP);
}
return _d15574;
}

const char* NuggetaLevel::toString() {
const char* _n15575 = "";
_n15575 = NUtils::concat(_n15575, NUtils::concat(NUtils::concat("[", "NuggetaLevel"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_n15575 = NUtils::concat(_n15575, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_n15575 = NUtils::concat(_n15575, NUtils::concat(NUtils::concat("_Data=", _Data), "| "));
}
if (_IndexSet == true && Utils::isNullInteger(_Index) == false) {
_n15575 = NUtils::concat(_n15575, NUtils::concat(NUtils::concat("_Index=", _Index), "| "));
}
if (_XPSet == true && Utils::isNullInteger(_XP) == false) {
_n15575 = NUtils::concat(_n15575, NUtils::concat(NUtils::concat("_XP=", _XP), "| "));
}
_n15575 = NUtils::concat(_n15575, "]");
return _n15575;
}

NuggetaLevel::NuggetaLevel(){
this->_XPSet = false;
this->_XP = 0;
this->_IndexSet = false;
this->_Index = 0;
this->_DataSet = false;
this->_Data = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NuggetaLevel::~NuggetaLevel(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Data) {
delete _Data;
_Data = 0;
}
}


#include "LoginResponse.h"

short LoginResponse::serializerID = -10079;

















const char* LoginResponse::getMessageId() {
    return _MessageId;
}

void LoginResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LoginResponse::isMessageIdSet() {
return _MessageIdSet;
}

void LoginResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* LoginResponse::getRequestId() {
return _RequestId;
}

void LoginResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LoginResponse::isRequestIdSet() {
return _RequestIdSet;
}

void LoginResponse::unSetRequestId() {
_RequestIdSet = false;
}

LoginStatus* LoginResponse::getLoginStatus() {
return _LoginStatus;
}

void LoginResponse::setLoginStatus(LoginStatus* value) {
_LoginStatus = value;
_LoginStatusSet = true;
}

bool LoginResponse::isLoginStatusSet() {
return _LoginStatusSet;
}

void LoginResponse::unSetLoginStatus() {
_LoginStatusSet = false;
}

NPlayer* LoginResponse::getPlayer() {
return _Player;
}

void LoginResponse::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool LoginResponse::isPlayerSet() {
return _PlayerSet;
}

void LoginResponse::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short LoginResponse::getSerializerID() {
return serializerID;
}

void* LoginResponse::clone() {
LoginResponse* _t13850 = new LoginResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_t13850->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_t13850->setRequestId(_RequestId);
}
if (_LoginStatusSet == true && Utils::isNull(_LoginStatus) == false) {
_t13850->setLoginStatus(_LoginStatus);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_t13850->setPlayer((NPlayer*)(_Player->clone()));
}
return _t13850;
}

const char* LoginResponse::toString() {
const char* _z13851 = "";
_z13851 = NUtils::concat(_z13851, NUtils::concat(NUtils::concat("[", "LoginResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_z13851 = NUtils::concat(_z13851, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_z13851 = NUtils::concat(_z13851, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_LoginStatusSet == true && Utils::isNull(_LoginStatus) == false) {
_z13851 = NUtils::concat(_z13851, NUtils::concat(NUtils::concat("_LoginStatus=", _LoginStatus->toString()), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_z13851 = NUtils::concat(_z13851, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_z13851 = NUtils::concat(_z13851, "]");
return _z13851;
}

LoginResponse::LoginResponse(){
this->_PlayerSet = false;
this->_Player = 0;
this->_LoginStatusSet = false;
this->_LoginStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LoginResponse::~LoginResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "SavePlayerProfileRequest.h"

short SavePlayerProfileRequest::serializerID = -10097;













const char* SavePlayerProfileRequest::getMessageId() {
    return _MessageId;
}

void SavePlayerProfileRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SavePlayerProfileRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SavePlayerProfileRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SavePlayerProfileRequest::getRequestId() {
return _RequestId;
}

void SavePlayerProfileRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SavePlayerProfileRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SavePlayerProfileRequest::unSetRequestId() {
_RequestIdSet = false;
}

NPlayerProfile* SavePlayerProfileRequest::getProfile() {
return _Profile;
}

void SavePlayerProfileRequest::setProfile(NPlayerProfile* value) {
if (_Profile && _Profile != value) {
delete _Profile;
}
_Profile = value;
_ProfileSet = true;
}

bool SavePlayerProfileRequest::isProfileSet() {
return _ProfileSet;
}

void SavePlayerProfileRequest::unSetProfile() {
_ProfileSet = false;
}

//@Override
short SavePlayerProfileRequest::getSerializerID() {
return serializerID;
}

void* SavePlayerProfileRequest::clone() {
SavePlayerProfileRequest* _k13992 = new SavePlayerProfileRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k13992->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k13992->setRequestId(_RequestId);
}
if (_ProfileSet == true && Utils::isNull(_Profile) == false) {
_k13992->setProfile((NPlayerProfile*)(_Profile->clone()));
}
return _k13992;
}

const char* SavePlayerProfileRequest::toString() {
const char* _a13993 = "";
_a13993 = NUtils::concat(_a13993, NUtils::concat(NUtils::concat("[", "SavePlayerProfileRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_a13993 = NUtils::concat(_a13993, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_a13993 = NUtils::concat(_a13993, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ProfileSet == true && Utils::isNull(_Profile) == false) {
_a13993 = NUtils::concat(_a13993, NUtils::concat(NUtils::concat("_Profile=", _Profile->toString()), "| "));
}
_a13993 = NUtils::concat(_a13993, "]");
return _a13993;
}

SavePlayerProfileRequest::SavePlayerProfileRequest(){
this->_ProfileSet = false;
this->_Profile = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SavePlayerProfileRequest::~SavePlayerProfileRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Profile) {
delete _Profile;
_Profile=0;
}
}


#include "NCoinPackage.h"

short NCoinPackage::serializerID = -3107;

















const char* NCoinPackage::getStoreId() {
    return _storeId;
}

void NCoinPackage::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NCoinPackage::isstoreIdSet() {
return _storeIdSet;
}

void NCoinPackage::unSetstoreId() {
_storeIdSet = false;
}

const char* NCoinPackage::getCoinPackageId() {
return _CoinPackageId;
}

void NCoinPackage::setCoinPackageId(const char* value) {
if (_CoinPackageId && _CoinPackageId != value) {
delete _CoinPackageId;
}
if (value) {
_CoinPackageId = strdup(value);
} else {
_CoinPackageId = 0;
}
_CoinPackageIdSet = true;
}

bool NCoinPackage::isCoinPackageIdSet() {
return _CoinPackageIdSet;
}

void NCoinPackage::unSetCoinPackageId() {
_CoinPackageIdSet = false;
}

long long NCoinPackage::getVirtualValue() {
return _VirtualValue;
}

void NCoinPackage::setVirtualValue(long long value) {
_VirtualValue = value;
_VirtualValueSet = true;
}

bool NCoinPackage::isVirtualValueSet() {
return _VirtualValueSet;
}

void NCoinPackage::unSetVirtualValue() {
_VirtualValueSet = false;
}

const char* NCoinPackage::getProductId() {
return _ProductId;
}

void NCoinPackage::setProductId(const char* value) {
if (_ProductId && _ProductId != value) {
delete _ProductId;
}
if (value) {
_ProductId = strdup(value);
} else {
_ProductId = 0;
}
_ProductIdSet = true;
}

bool NCoinPackage::isProductIdSet() {
return _ProductIdSet;
}

void NCoinPackage::unSetProductId() {
_ProductIdSet = false;
}

//@Override
short NCoinPackage::getSerializerID() {
return serializerID;
}

void* NCoinPackage::clone() {
NCoinPackage* _w14883 = new NCoinPackage();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_w14883->setStoreId(_storeId);
}
if (_CoinPackageIdSet == true && Utils::isNull(_CoinPackageId) == false) {
_w14883->setCoinPackageId(_CoinPackageId);
}
if (_VirtualValueSet == true && Utils::isNullLong(_VirtualValue) == false) {
_w14883->setVirtualValue(_VirtualValue);
}
if (_ProductIdSet == true && Utils::isNull(_ProductId) == false) {
_w14883->setProductId(_ProductId);
}
return _w14883;
}

const char* NCoinPackage::toString() {
const char* _y14884 = "";
_y14884 = NUtils::concat(_y14884, NUtils::concat(NUtils::concat("[", "NCoinPackage"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_y14884 = NUtils::concat(_y14884, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_CoinPackageIdSet == true && Utils::isNull(_CoinPackageId) == false) {
_y14884 = NUtils::concat(_y14884, NUtils::concat(NUtils::concat("_CoinPackageId=", _CoinPackageId), "| "));
}
if (_VirtualValueSet == true && Utils::isNullLong(_VirtualValue) == false) {
_y14884 = NUtils::concat(_y14884, NUtils::concat(NUtils::concat("_VirtualValue=", _VirtualValue), "| "));
}
if (_ProductIdSet == true && Utils::isNull(_ProductId) == false) {
_y14884 = NUtils::concat(_y14884, NUtils::concat(NUtils::concat("_ProductId=", _ProductId), "| "));
}
_y14884 = NUtils::concat(_y14884, "]");
return _y14884;
}

NCoinPackage::NCoinPackage(){
this->_ProductIdSet = false;
this->_ProductId = 0;
this->_VirtualValueSet = false;
this->_CoinPackageIdSet = false;
this->_CoinPackageId = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NCoinPackage::~NCoinPackage(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_CoinPackageId) {
delete _CoinPackageId;
_CoinPackageId = 0;
}
if (_ProductId) {
delete _ProductId;
_ProductId = 0;
}
}


#include "SearchImmediateGameByConditionsRequest.h"

short SearchImmediateGameByConditionsRequest::serializerID = -10476;

















const char* SearchImmediateGameByConditionsRequest::getMessageId() {
    return _MessageId;
}

void SearchImmediateGameByConditionsRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SearchImmediateGameByConditionsRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SearchImmediateGameByConditionsRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SearchImmediateGameByConditionsRequest::getRequestId() {
return _RequestId;
}

void SearchImmediateGameByConditionsRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SearchImmediateGameByConditionsRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SearchImmediateGameByConditionsRequest::unSetRequestId() {
_RequestIdSet = false;
}

NuggetaQuery* SearchImmediateGameByConditionsRequest::getQuery() {
return _Query;
}

void SearchImmediateGameByConditionsRequest::setQuery(NuggetaQuery* value) {
if (_Query && _Query != value) {
delete _Query;
}
_Query = value;
_QuerySet = true;
}

bool SearchImmediateGameByConditionsRequest::isQuerySet() {
return _QuerySet;
}

void SearchImmediateGameByConditionsRequest::unSetQuery() {
_QuerySet = false;
}

NMatchMakingConditions* SearchImmediateGameByConditionsRequest::getMatchMakingConditions() {
return _MatchMakingConditions;
}

void SearchImmediateGameByConditionsRequest::setMatchMakingConditions(NMatchMakingConditions* value) {
if (_MatchMakingConditions && _MatchMakingConditions != value) {
delete _MatchMakingConditions;
}
_MatchMakingConditions = value;
_MatchMakingConditionsSet = true;
}

bool SearchImmediateGameByConditionsRequest::isMatchMakingConditionsSet() {
return _MatchMakingConditionsSet;
}

void SearchImmediateGameByConditionsRequest::unSetMatchMakingConditions() {
_MatchMakingConditionsSet = false;
}

//@Override
short SearchImmediateGameByConditionsRequest::getSerializerID() {
return serializerID;
}

void* SearchImmediateGameByConditionsRequest::clone() {
SearchImmediateGameByConditionsRequest* _k15131 = new SearchImmediateGameByConditionsRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k15131->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k15131->setRequestId(_RequestId);
}
if (_QuerySet == true && Utils::isNull(_Query) == false) {
_k15131->setQuery((NuggetaQuery*)(_Query->clone()));
}
if (_MatchMakingConditionsSet == true && Utils::isNull(_MatchMakingConditions) == false) {
_k15131->setMatchMakingConditions((NMatchMakingConditions*)(_MatchMakingConditions->clone()));
}
return _k15131;
}

const char* SearchImmediateGameByConditionsRequest::toString() {
const char* _m15132 = "";
_m15132 = NUtils::concat(_m15132, NUtils::concat(NUtils::concat("[", "SearchImmediateGameByConditionsRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m15132 = NUtils::concat(_m15132, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m15132 = NUtils::concat(_m15132, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_QuerySet == true && Utils::isNull(_Query) == false) {
_m15132 = NUtils::concat(_m15132, NUtils::concat(NUtils::concat("_Query=", _Query->toString()), "| "));
}
if (_MatchMakingConditionsSet == true && Utils::isNull(_MatchMakingConditions) == false) {
_m15132 = NUtils::concat(_m15132, NUtils::concat(NUtils::concat("_MatchMakingConditions=", _MatchMakingConditions->toString()), "| "));
}
_m15132 = NUtils::concat(_m15132, "]");
return _m15132;
}

SearchImmediateGameByConditionsRequest::SearchImmediateGameByConditionsRequest(){
this->_MatchMakingConditionsSet = false;
this->_MatchMakingConditions = 0;
this->_QuerySet = false;
this->_Query = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SearchImmediateGameByConditionsRequest::~SearchImmediateGameByConditionsRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Query) {
delete _Query;
_Query=0;
}
if (_MatchMakingConditions) {
delete _MatchMakingConditions;
_MatchMakingConditions=0;
}
}


#include "RefuseFriendDemandStatus.h"

std::vector<RefuseFriendDemandStatus*>* RefuseFriendDemandStatus::_values = new std::vector<RefuseFriendDemandStatus*>();

RefuseFriendDemandStatus* RefuseFriendDemandStatus::AUTHENTICATION_REQUIRED = new RefuseFriendDemandStatus("AUTHENTICATION_REQUIRED", 0);

RefuseFriendDemandStatus* RefuseFriendDemandStatus::UNKNOWN_FRIEND_DEMAND = new RefuseFriendDemandStatus("UNKNOWN_FRIEND_DEMAND", 1);

RefuseFriendDemandStatus* RefuseFriendDemandStatus::SUCCESS = new RefuseFriendDemandStatus("SUCCESS", 2);

RefuseFriendDemandStatus* RefuseFriendDemandStatus::FAILURE = new RefuseFriendDemandStatus("FAILURE", 3);

RefuseFriendDemandStatus* RefuseFriendDemandStatus::INVALID_CALL = new RefuseFriendDemandStatus("INVALID_CALL", 4);

RefuseFriendDemandStatus* RefuseFriendDemandStatus::INTERNAL_ERROR = new RefuseFriendDemandStatus("INTERNAL_ERROR", 5);

std::vector<RefuseFriendDemandStatus*>* RefuseFriendDemandStatus::values() {
    return _values;
}





int RefuseFriendDemandStatus::getValue() {
return _value;
}

const char* RefuseFriendDemandStatus::name() {
return _name;
}

int RefuseFriendDemandStatus::ordinal() {
return _value;
}

RefuseFriendDemandStatus::RefuseFriendDemandStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

RefuseFriendDemandStatus* RefuseFriendDemandStatus::fromValue(int value) {
for (unsigned int _p7169 = 0; _p7169 < (unsigned int)_values->size(); _p7169++) {
RefuseFriendDemandStatus* _i7170 = (*_values)[_p7169];
if (_i7170->getValue() == value) {
return _i7170;
}
}
return 0;
}

RefuseFriendDemandStatus* RefuseFriendDemandStatus::valueOf(const char* name) {
for (unsigned int _w15562 = 0; _w15562 < (unsigned int)_values->size(); _w15562++) {
RefuseFriendDemandStatus* _g15563 = (*_values)[_w15562];
if (strcmp(name, _g15563->name()) == 0) {
return _g15563;
}
}
return 0;
}

//@Override
short RefuseFriendDemandStatus::getSerializerID() {
return -10278;
}

const char* RefuseFriendDemandStatus::toString() {
return NUtils::concat("RefuseFriendDemandStatus.", _name);
}

void* RefuseFriendDemandStatus::clone() {
return this;
}

RefuseFriendDemandStatus::~RefuseFriendDemandStatus(){
}


#include "NMatrix2.h"







NMatrix2::NMatrix2(short rowCount, short columnCount){
    this->serializableList = 0;
    this->rowCount = rowCount;
    this->columnCount = columnCount;
    serializableList = new std::vector<Serializable*>();
    for (unsigned int _x15208 = 0; _x15208 < (unsigned int)rowCount * columnCount; _x15208++) {
        serializableList->push_back(0);
    }
}

void NMatrix2::addItem(Serializable* serializable) {
    serializableList->push_back(serializable);
}

void NMatrix2::setItem(Serializable* serializable, short row, short column) {
int _j15209 = (row * columnCount) + column;
(*serializableList)[_j15209] = serializable;
}

Serializable* NMatrix2::getItem(short row, short column) {
return (*serializableList)[(row * columnCount) + column];
}

short NMatrix2::getRowCount() {
return rowCount;
}

short NMatrix2::getColumnCount() {
return columnCount;
}

NMatrix2* NMatrix2::clone() {
return new NMatrix2(rowCount, columnCount);
}

NMatrix2::~NMatrix2(){
if (serializableList) {
for (unsigned int i=0; i < serializableList->size(); i++) {
delete (*serializableList)[i];
}
delete serializableList;
serializableList=0;;
}
}


#include "NInvitation.h"

short NInvitation::serializerID = -3232;

























const char* NInvitation::getStoreId() {
    return _StoreId;
}

void NInvitation::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
    delete _StoreId;
}
if (value) {
    _StoreId = strdup(value);
} else {
    _StoreId = 0;
}
_StoreIdSet = true;
}

bool NInvitation::isStoreIdSet() {
return _StoreIdSet;
}

void NInvitation::unSetStoreId() {
_StoreIdSet = false;
}

const char* NInvitation::getId() {
return _Id;
}

void NInvitation::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool NInvitation::isIdSet() {
return _IdSet;
}

void NInvitation::unSetId() {
_IdSet = false;
}

NPlayer* NInvitation::getInviter() {
return _Inviter;
}

void NInvitation::setInviter(NPlayer* value) {
if (_Inviter && _Inviter != value) {
delete _Inviter;
}
_Inviter = value;
_InviterSet = true;
}

bool NInvitation::isInviterSet() {
return _InviterSet;
}

void NInvitation::unSetInviter() {
_InviterSet = false;
}

NPlayer* NInvitation::getInvitee() {
return _Invitee;
}

void NInvitation::setInvitee(NPlayer* value) {
if (_Invitee && _Invitee != value) {
delete _Invitee;
}
_Invitee = value;
_InviteeSet = true;
}

bool NInvitation::isInviteeSet() {
return _InviteeSet;
}

void NInvitation::unSetInvitee() {
_InviteeSet = false;
}

Message* NInvitation::getContent() {
return _Content;
}

void NInvitation::setContent(Message* value) {
if (_Content && _Content != value) {
delete _Content;
}
_Content = value;
_ContentSet = true;
}

bool NInvitation::isContentSet() {
return _ContentSet;
}

void NInvitation::unSetContent() {
_ContentSet = false;
}

NInvitationStatus* NInvitation::getStatus() {
return _Status;
}

void NInvitation::setStatus(NInvitationStatus* value) {
_Status = value;
_StatusSet = true;
}

bool NInvitation::isStatusSet() {
return _StatusSet;
}

void NInvitation::unSetStatus() {
_StatusSet = false;
}

//@Override
short NInvitation::getSerializerID() {
return serializerID;
}

void* NInvitation::clone() {
NInvitation* _m14687 = new NInvitation();
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_m14687->setStoreId(_StoreId);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_m14687->setId(_Id);
}
if (_InviterSet == true && Utils::isNull(_Inviter) == false) {
_m14687->setInviter((NPlayer*)(_Inviter->clone()));
}
if (_InviteeSet == true && Utils::isNull(_Invitee) == false) {
_m14687->setInvitee((NPlayer*)(_Invitee->clone()));
}
if (_ContentSet == true && Utils::isNull(_Content) == false) {
_m14687->setContent((Message*)(_Content->clone()));
}
if (_StatusSet == true && Utils::isNull(_Status) == false) {
_m14687->setStatus(_Status);
}
return _m14687;
}

const char* NInvitation::toString() {
const char* _g14688 = "";
_g14688 = NUtils::concat(_g14688, NUtils::concat(NUtils::concat("[", "NInvitation"), " --> "));
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_g14688 = NUtils::concat(_g14688, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_g14688 = NUtils::concat(_g14688, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_InviterSet == true && Utils::isNull(_Inviter) == false) {
_g14688 = NUtils::concat(_g14688, NUtils::concat(NUtils::concat("_Inviter=", _Inviter->toString()), "| "));
}
if (_InviteeSet == true && Utils::isNull(_Invitee) == false) {
_g14688 = NUtils::concat(_g14688, NUtils::concat(NUtils::concat("_Invitee=", _Invitee->toString()), "| "));
}
if (_ContentSet == true && Utils::isNull(_Content) == false) {
_g14688 = NUtils::concat(_g14688, NUtils::concat(NUtils::concat("_Content=", _Content->toString()), "| "));
}
if (_StatusSet == true && Utils::isNull(_Status) == false) {
_g14688 = NUtils::concat(_g14688, NUtils::concat(NUtils::concat("_Status=", _Status->toString()), "| "));
}
_g14688 = NUtils::concat(_g14688, "]");
return _g14688;
}

NInvitation::NInvitation(){
this->_StatusSet = false;
this->_Status = 0;
this->_ContentSet = false;
this->_Content = 0;
this->_InviteeSet = false;
this->_Invitee = 0;
this->_InviterSet = false;
this->_Inviter = 0;
this->_IdSet = false;
this->_Id = 0;
this->_StoreIdSet = false;
this->_StoreId = 0;
}

NInvitation::~NInvitation(){
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
if (_Inviter) {
delete _Inviter;
_Inviter=0;
}
if (_Invitee) {
delete _Invitee;
_Invitee=0;
}
if (_Content) {
delete _Content;
_Content=0;
}
}


#include "UpdatePlayerStorableResponse.h"

short UpdatePlayerStorableResponse::serializerID = -11019;

















const char* UpdatePlayerStorableResponse::getMessageId() {
    return _MessageId;
}

void UpdatePlayerStorableResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool UpdatePlayerStorableResponse::isMessageIdSet() {
return _MessageIdSet;
}

void UpdatePlayerStorableResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* UpdatePlayerStorableResponse::getRequestId() {
return _RequestId;
}

void UpdatePlayerStorableResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool UpdatePlayerStorableResponse::isRequestIdSet() {
return _RequestIdSet;
}

void UpdatePlayerStorableResponse::unSetRequestId() {
_RequestIdSet = false;
}

UpdatePlayerStorableStatus* UpdatePlayerStorableResponse::getUpdatePlayerStorableStatus() {
return _UpdatePlayerStorableStatus;
}

void UpdatePlayerStorableResponse::setUpdatePlayerStorableStatus(UpdatePlayerStorableStatus* value) {
_UpdatePlayerStorableStatus = value;
_UpdatePlayerStorableStatusSet = true;
}

bool UpdatePlayerStorableResponse::isUpdatePlayerStorableStatusSet() {
return _UpdatePlayerStorableStatusSet;
}

void UpdatePlayerStorableResponse::unSetUpdatePlayerStorableStatus() {
_UpdatePlayerStorableStatusSet = false;
}

const char* UpdatePlayerStorableResponse::getStoreId() {
return _StoreId;
}

void UpdatePlayerStorableResponse::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
delete _StoreId;
}
if (value) {
_StoreId = strdup(value);
} else {
_StoreId = 0;
}
_StoreIdSet = true;
}

bool UpdatePlayerStorableResponse::isStoreIdSet() {
return _StoreIdSet;
}

void UpdatePlayerStorableResponse::unSetStoreId() {
_StoreIdSet = false;
}

//@Override
short UpdatePlayerStorableResponse::getSerializerID() {
return serializerID;
}

void* UpdatePlayerStorableResponse::clone() {
UpdatePlayerStorableResponse* _b14632 = new UpdatePlayerStorableResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b14632->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b14632->setRequestId(_RequestId);
}
if (_UpdatePlayerStorableStatusSet == true && Utils::isNull(_UpdatePlayerStorableStatus) == false) {
_b14632->setUpdatePlayerStorableStatus(_UpdatePlayerStorableStatus);
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_b14632->setStoreId(_StoreId);
}
return _b14632;
}

const char* UpdatePlayerStorableResponse::toString() {
const char* _e14633 = "";
_e14633 = NUtils::concat(_e14633, NUtils::concat(NUtils::concat("[", "UpdatePlayerStorableResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e14633 = NUtils::concat(_e14633, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e14633 = NUtils::concat(_e14633, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_UpdatePlayerStorableStatusSet == true && Utils::isNull(_UpdatePlayerStorableStatus) == false) {
_e14633 = NUtils::concat(_e14633, NUtils::concat(NUtils::concat("_UpdatePlayerStorableStatus=", _UpdatePlayerStorableStatus->toString()), "| "));
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_e14633 = NUtils::concat(_e14633, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
_e14633 = NUtils::concat(_e14633, "]");
return _e14633;
}

UpdatePlayerStorableResponse::UpdatePlayerStorableResponse(){
this->_StoreIdSet = false;
this->_StoreId = 0;
this->_UpdatePlayerStorableStatusSet = false;
this->_UpdatePlayerStorableStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

UpdatePlayerStorableResponse::~UpdatePlayerStorableResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
}


#include "T804.h"

















T804::T804(const char* _s14050){
    this->_x14051 = false;
    this->_c5971 = "";
    this->_o14049 = new ConnectionInvalidVersionDetectedListenerCollection();
    this->_m14048 = new ConnectionFailListenerCollection();
    this->_l14047 = new ConnectionLostListenerCollection();
    this->_l14046 = new ConnectionReadyListenerCollection();
    this->_k14045 = 0;
    this->_b14044 = 0;
    this->_c5971 = NUtils::nstrdup(_s14050);
}

void T804::_m16901(T799* _k14052) {
    ;
    this->_k14045 = _k14052;
    this->_x14051 = false;
}

void T804::_m16905(Message* _y14053) {
if (_k14045 == 0) {
    _b14044->error("**************************** No connection available to sendMessage , did you wait for StartResponse before sending any message ? ");
    return;
}
_k14045->_m16341(_y14053);
}

void T804::_m16906(ConnectionReadyListener* listener) {
_l14046->add(listener);
}

void T804::_m16907(ConnectionReadyListener* listener) {
_l14046->remove(listener);
}

void T804::_m16908(ConnectionLostListener* listener) {
_l14047->add(listener);
}

void T804::_m16909(ConnectionLostListener* listener) {
_l14047->remove(listener);
}

void T804::_m16910(ConnectionFailListener* _q14054) {
_m14048->add(_q14054);
}

void T804::_m16911(ConnectionFailListener* listener) {
_m14048->remove(listener);
}

void T804::_m16912(ConnectionInvalidVersionDetectedListener* _k14055) {
_o14049->add(_k14055);
}

void T804::_m16913(ConnectionInvalidVersionDetectedListener* _p14061) {
_o14049->remove(_p14061);
}

void T804::_m16903() {
_x14051 = true;
if (_k14045 != 0) {
_k14045->_m16332();
_k14045 = 0;
}
}

bool T804::_m16914() {
return _x14051;
}

T799* T804::_m16915() {
return _k14045;
}

void T804::_m16916(Message* _n14062, Message* _y14063) {
if (_k14045 != 0) {
_k14045->_m16342(_n14062, _y14063);
}
}

T804::~T804(){
if (_b14044) {
delete _b14044;
_b14044=0;
}
if (_k14045) {
delete _k14045;
_k14045=0;
}
if (_l14046) {
delete _l14046;
_l14046=0;
}
if (_l14047) {
delete _l14047;
_l14047=0;
}
if (_m14048) {
delete _m14048;
_m14048=0;
}
if (_o14049) {
delete _o14049;
_o14049=0;
}
if (_c5971) {
delete _c5971;
_c5971 = 0;
}
}


#include "GetPlayerStorablesResponse.h"

short GetPlayerStorablesResponse::serializerID = -11059;

















const char* GetPlayerStorablesResponse::getMessageId() {
    return _MessageId;
}

void GetPlayerStorablesResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetPlayerStorablesResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetPlayerStorablesResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetPlayerStorablesResponse::getRequestId() {
return _RequestId;
}

void GetPlayerStorablesResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetPlayerStorablesResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetPlayerStorablesResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetPlayerStorablesStatus* GetPlayerStorablesResponse::getGetPlayerStorablesStatus() {
return _GetPlayerStorablesStatus;
}

void GetPlayerStorablesResponse::setGetPlayerStorablesStatus(GetPlayerStorablesStatus* value) {
_GetPlayerStorablesStatus = value;
_GetPlayerStorablesStatusSet = true;
}

bool GetPlayerStorablesResponse::isGetPlayerStorablesStatusSet() {
return _GetPlayerStorablesStatusSet;
}

void GetPlayerStorablesResponse::unSetGetPlayerStorablesStatus() {
_GetPlayerStorablesStatusSet = false;
}

std::vector<Storable*>* GetPlayerStorablesResponse::getStorables() {
return _Storables;
}

void GetPlayerStorablesResponse::setStorables(std::vector<Storable*>* value) {
if (_Storables) {
for (unsigned int i=0; i < _Storables->size(); i++) {
delete (*_Storables)[i];
}
}
if (_Storables && _Storables != value) {
delete _Storables;
}
_Storables = value;
_StorablesSet = true;
}

bool GetPlayerStorablesResponse::isStorablesSet() {
return _StorablesSet;
}

void GetPlayerStorablesResponse::unSetStorables() {
_StorablesSet = false;
}

//@Override
short GetPlayerStorablesResponse::getSerializerID() {
return serializerID;
}

void* GetPlayerStorablesResponse::clone() {
GetPlayerStorablesResponse* _b15523 = new GetPlayerStorablesResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b15523->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b15523->setRequestId(_RequestId);
}
if (_GetPlayerStorablesStatusSet == true && Utils::isNull(_GetPlayerStorablesStatus) == false) {
_b15523->setGetPlayerStorablesStatus(_GetPlayerStorablesStatus);
}
if (_StorablesSet == true && Utils::isNull(_Storables) == false) {
std::vector<Storable*>* _n15524 = new std::vector<Storable*>();
for (unsigned int i = 0; i < (unsigned int)_Storables->size(); i++) {
void* _v15525 = _Storables->at(i);
if (_v15525 != 0) {
_n15524->push_back((Storable*)((Storable*)_v15525)->clone());
} else {
_n15524->push_back((Storable*)_v15525);
}
}
_b15523->setStorables(_n15524);
}
return _b15523;
}

const char* GetPlayerStorablesResponse::toString() {
const char* _y15526 = "";
_y15526 = NUtils::concat(_y15526, NUtils::concat(NUtils::concat("[", "GetPlayerStorablesResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15526 = NUtils::concat(_y15526, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15526 = NUtils::concat(_y15526, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetPlayerStorablesStatusSet == true && Utils::isNull(_GetPlayerStorablesStatus) == false) {
_y15526 = NUtils::concat(_y15526, NUtils::concat(NUtils::concat("_GetPlayerStorablesStatus=", _GetPlayerStorablesStatus->toString()), "| "));
}
if (_StorablesSet == true && Utils::isNull(_Storables) == false) {
_y15526 = NUtils::concat(_y15526, NUtils::concat(NUtils::concat("_Storables=", "N/A"), "| "));
}
_y15526 = NUtils::concat(_y15526, "]");
return _y15526;
}

GetPlayerStorablesResponse::GetPlayerStorablesResponse(){
this->_StorablesSet = false;
this->_Storables = new std::vector<Storable*>();
this->_GetPlayerStorablesStatusSet = false;
this->_GetPlayerStorablesStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetPlayerStorablesResponse::~GetPlayerStorablesResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storables) {
for (unsigned int i=0; i < _Storables->size(); i++) {
delete (*_Storables)[i];
}
delete _Storables;
_Storables=0;;
}
}


#include "CreateGameStatus.h"

std::vector<CreateGameStatus*>* CreateGameStatus::_values = new std::vector<CreateGameStatus*>();

CreateGameStatus* CreateGameStatus::SUCCESS = new CreateGameStatus("SUCCESS", 0);

CreateGameStatus* CreateGameStatus::INVALID_CALL = new CreateGameStatus("INVALID_CALL", 1);

CreateGameStatus* CreateGameStatus::INTERNAL_ERROR = new CreateGameStatus("INTERNAL_ERROR", 2);

std::vector<CreateGameStatus*>* CreateGameStatus::values() {
    return _values;
}





int CreateGameStatus::getValue() {
return _value;
}

const char* CreateGameStatus::name() {
return _name;
}

int CreateGameStatus::ordinal() {
return _value;
}

CreateGameStatus::CreateGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

CreateGameStatus* CreateGameStatus::fromValue(int value) {
for (unsigned int _a5981 = 0; _a5981 < (unsigned int)_values->size(); _a5981++) {
CreateGameStatus* _z5982 = (*_values)[_a5981];
if (_z5982->getValue() == value) {
return _z5982;
}
}
return 0;
}

CreateGameStatus* CreateGameStatus::valueOf(const char* name) {
for (unsigned int _z14074 = 0; _z14074 < (unsigned int)_values->size(); _z14074++) {
CreateGameStatus* _p14075 = (*_values)[_z14074];
if (strcmp(name, _p14075->name()) == 0) {
return _p14075;
}
}
return 0;
}

//@Override
short CreateGameStatus::getSerializerID() {
return -10658;
}

const char* CreateGameStatus::toString() {
return NUtils::concat("CreateGameStatus.", _name);
}

void* CreateGameStatus::clone() {
return this;
}

CreateGameStatus::~CreateGameStatus(){
}


#include "NextPlayerTurnResponse.h"

short NextPlayerTurnResponse::serializerID = -10819;













const char* NextPlayerTurnResponse::getMessageId() {
    return _MessageId;
}

void NextPlayerTurnResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool NextPlayerTurnResponse::isMessageIdSet() {
return _MessageIdSet;
}

void NextPlayerTurnResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* NextPlayerTurnResponse::getRequestId() {
return _RequestId;
}

void NextPlayerTurnResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool NextPlayerTurnResponse::isRequestIdSet() {
return _RequestIdSet;
}

void NextPlayerTurnResponse::unSetRequestId() {
_RequestIdSet = false;
}

NextPlayerTurnStatus* NextPlayerTurnResponse::getNextPlayerTurnStatus() {
return _NextPlayerTurnStatus;
}

void NextPlayerTurnResponse::setNextPlayerTurnStatus(NextPlayerTurnStatus* value) {
_NextPlayerTurnStatus = value;
_NextPlayerTurnStatusSet = true;
}

bool NextPlayerTurnResponse::isNextPlayerTurnStatusSet() {
return _NextPlayerTurnStatusSet;
}

void NextPlayerTurnResponse::unSetNextPlayerTurnStatus() {
_NextPlayerTurnStatusSet = false;
}

//@Override
short NextPlayerTurnResponse::getSerializerID() {
return serializerID;
}

void* NextPlayerTurnResponse::clone() {
NextPlayerTurnResponse* _l15419 = new NextPlayerTurnResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l15419->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l15419->setRequestId(_RequestId);
}
if (_NextPlayerTurnStatusSet == true && Utils::isNull(_NextPlayerTurnStatus) == false) {
_l15419->setNextPlayerTurnStatus(_NextPlayerTurnStatus);
}
return _l15419;
}

const char* NextPlayerTurnResponse::toString() {
const char* _u15420 = "";
_u15420 = NUtils::concat(_u15420, NUtils::concat(NUtils::concat("[", "NextPlayerTurnResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15420 = NUtils::concat(_u15420, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15420 = NUtils::concat(_u15420, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_NextPlayerTurnStatusSet == true && Utils::isNull(_NextPlayerTurnStatus) == false) {
_u15420 = NUtils::concat(_u15420, NUtils::concat(NUtils::concat("_NextPlayerTurnStatus=", _NextPlayerTurnStatus->toString()), "| "));
}
_u15420 = NUtils::concat(_u15420, "]");
return _u15420;
}

NextPlayerTurnResponse::NextPlayerTurnResponse(){
this->_NextPlayerTurnStatusSet = false;
this->_NextPlayerTurnStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

NextPlayerTurnResponse::~NextPlayerTurnResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "NuggetaMessageAdapter.h"

void NuggetaMessageAdapter::onHandshakeResponse(HandshakeResponse* message) {
}

void NuggetaMessageAdapter::onGameStateChange(GameStateChange* message) {
}

void NuggetaMessageAdapter::onPlayerEnterGame(PlayerEnterGame* message) {
}

void NuggetaMessageAdapter::onFriendshipNotification(FriendshipNotification* message) {
}

void NuggetaMessageAdapter::onPlayerUnjoinGame(PlayerUnjoinGame* message) {
}

void NuggetaMessageAdapter::onConnectionLost(ConnectionLost* message) {
}

void NuggetaMessageAdapter::onConnectionInterrupted(ConnectionInterrupted* message) {
}

void NuggetaMessageAdapter::onConnectionResumed(ConnectionResumed* message) {
}

void NuggetaMessageAdapter::onConnectionStop(ConnectionStop* message) {
}

void NuggetaMessageAdapter::onFriendConnectedNotification(FriendConnectedNotification* message) {
}

void NuggetaMessageAdapter::onFriendDisconnectedNotification(FriendDisconnectedNotification* message) {
}

void NuggetaMessageAdapter::onNuggetaException(NuggetaException* message) {
}

void NuggetaMessageAdapter::onOpenConnection(OpenConnection* message) {
}

void NuggetaMessageAdapter::onRawMessage(NRawMessage* message) {
}

void NuggetaMessageAdapter::onSessionExpired(SessionExpired* message) {
}

void NuggetaMessageAdapter::onGameMessageError(GameMessageError* message) {
}

void NuggetaMessageAdapter::onFriendDemandNotification(FriendDemandNotification* message) {
}

void NuggetaMessageAdapter::onMyTurnNotification(MyTurnNotification* message) {
}

void NuggetaMessageAdapter::onPlayerTurnNotification(PlayerTurnNotification* message) {
}

void NuggetaMessageAdapter::onStartResponse(StartResponse* message) {
}

void NuggetaMessageAdapter::onAskForFriendResponse(AskForFriendResponse* message) {
}

void NuggetaMessageAdapter::onSignUpResponse(SignUpResponse* message) {
}

void NuggetaMessageAdapter::onLoginResponse(LoginResponse* message) {
}

void NuggetaMessageAdapter::onSavePlayerProfileResponse(SavePlayerProfileResponse* message) {
}

void NuggetaMessageAdapter::onGetPlayerProfileResponse(GetPlayerProfileResponse* message) {
}

void NuggetaMessageAdapter::onLogoutResponse(LogoutResponse* message) {
}

void NuggetaMessageAdapter::onGetFriendsResponse(GetFriendsResponse* message) {
}

void NuggetaMessageAdapter::onGetThirdPartyFriendsResponse(GetThirdPartyFriendsResponse* message) {
}

void NuggetaMessageAdapter::onGetFriendDemandsResponse(GetFriendDemandsResponse* message) {
}

void NuggetaMessageAdapter::onAcceptFriendDemandResponse(AcceptFriendDemandResponse* message) {
}

void NuggetaMessageAdapter::onRefuseFriendDemandResponse(RefuseFriendDemandResponse* message) {
}

void NuggetaMessageAdapter::onSubmitScoreResponse(SubmitScoreResponse* message) {
}

void NuggetaMessageAdapter::onGetLeaderboardResponse(GetLeaderboardResponse* message) {
}

void NuggetaMessageAdapter::onBuyItemResponse(BuyItemResponse* message) {
}

void NuggetaMessageAdapter::onGetStoreResponse(GetStoreResponse* message) {
}

void NuggetaMessageAdapter::onConsumeItemResponse(ConsumeItemResponse* message) {
}

void NuggetaMessageAdapter::onIncreasePlayerWalletResponse(IncreasePlayerWalletResponse* message) {
}

void NuggetaMessageAdapter::onGetPlayerWalletResponse(GetPlayerWalletResponse* message) {
}

void NuggetaMessageAdapter::onGetAchievementBoardResponse(GetAchievementBoardResponse* message) {
}

void NuggetaMessageAdapter::onAchieveResponse(AchieveResponse* message) {
}

void NuggetaMessageAdapter::onSearchImmediateGameResponse(SearchImmediateGameResponse* message) {
}

void NuggetaMessageAdapter::onJoinGameResponse(JoinGameResponse* message) {
}

void NuggetaMessageAdapter::onUnjoinGameResponse(UnjoinGameResponse* message) {
}

void NuggetaMessageAdapter::onStartGameResponse(StartGameResponse* message) {
}

void NuggetaMessageAdapter::onStopGameResponse(StopGameResponse* message) {
}

void NuggetaMessageAdapter::onCreateGameResponse(CreateGameResponse* message) {
}

void NuggetaMessageAdapter::onGetGamesResponse(GetGamesResponse* message) {
}

void NuggetaMessageAdapter::onSaveAsGhostResponse(SaveAsGhostResponse* message) {
}

void NuggetaMessageAdapter::onGetGhostsResponse(GetGhostsResponse* message) {
}

void NuggetaMessageAdapter::onLoadGhostResponse(LoadGhostResponse* message) {
}

void NuggetaMessageAdapter::onSendGameChatResponse(SendGameChatResponse* message) {
}

void NuggetaMessageAdapter::onGetStorablesResponse(GetStorablesResponse* message) {
}

void NuggetaMessageAdapter::onSaveStorableResponse(SaveStorableResponse* message) {
}

void NuggetaMessageAdapter::onNextPlayerTurnResponse(NextPlayerTurnResponse* message) {
}

void NuggetaMessageAdapter::onSetPlayerNameResponse(SetPlayerNameResponse* message) {
}

void NuggetaMessageAdapter::onUpdateStorableResponse(UpdateStorableResponse* message) {
}

void NuggetaMessageAdapter::onRemoveStorableResponse(RemoveStorableResponse* message) {
}

void NuggetaMessageAdapter::onInviteThirdPartyFriendResponse(InviteThirdPartyFriendResponse* message) {
}

void NuggetaMessageAdapter::onPublishThirdPartyMessageResponse(PublishThirdPartyMessageResponse* message) {
}

void NuggetaMessageAdapter::onThirdPartyLoginResponse(ThirdPartyLoginResponse* message) {
}

void NuggetaMessageAdapter::onSaveGameResponse(SaveGameResponse* message) {
}

void NuggetaMessageAdapter::onLoadGameResponse(LoadGameResponse* message) {
}

void NuggetaMessageAdapter::onSavePlayerStorableResponse(SavePlayerStorableResponse* message) {
}

void NuggetaMessageAdapter::onUpdatePlayerStorableResponse(UpdatePlayerStorableResponse* message) {
}

void NuggetaMessageAdapter::onRemovePlayerStorableResponse(RemovePlayerStorableResponse* message) {
}

void NuggetaMessageAdapter::onGetPlayerStorablesResponse(GetPlayerStorablesResponse* message) {
}

void NuggetaMessageAdapter::onPauseSessionMonitoringResponse(PauseSessionMonitoringResponse* message) {
}

void NuggetaMessageAdapter::onResumeSessionMonitoringResponse(ResumeSessionMonitoringResponse* message) {
}

void NuggetaMessageAdapter::onPublishFriendThirdPartyMessageResponse(PublishFriendThirdPartyMessageResponse* message) {
}

void NuggetaMessageAdapter::onInvitePlayerResponse(InvitePlayerResponse* message) {
}

void NuggetaMessageAdapter::onGetInvitationsResponse(GetInvitationsResponse* message) {
}

void NuggetaMessageAdapter::onAcceptInvitationResponse(AcceptInvitationResponse* message) {
}

void NuggetaMessageAdapter::onRefuseInvitationResponse(RefuseInvitationResponse* message) {
}

NuggetaMessageAdapter::NuggetaMessageAdapter(){
}

NuggetaMessageAdapter::~NuggetaMessageAdapter(){
}


#include "ThirdPartyLoginStatus.h"

std::vector<ThirdPartyLoginStatus*>* ThirdPartyLoginStatus::_values = new std::vector<ThirdPartyLoginStatus*>();

ThirdPartyLoginStatus* ThirdPartyLoginStatus::CONNECTED = new ThirdPartyLoginStatus("CONNECTED", 0);

ThirdPartyLoginStatus* ThirdPartyLoginStatus::INVALID_LOGIN = new ThirdPartyLoginStatus("INVALID_LOGIN", 1);

ThirdPartyLoginStatus* ThirdPartyLoginStatus::ALREADY_CONNECTED = new ThirdPartyLoginStatus("ALREADY_CONNECTED", 2);

ThirdPartyLoginStatus* ThirdPartyLoginStatus::INVALID_CALL = new ThirdPartyLoginStatus("INVALID_CALL", 3);

ThirdPartyLoginStatus* ThirdPartyLoginStatus::INTERNAL_ERROR = new ThirdPartyLoginStatus("INTERNAL_ERROR", 4);

ThirdPartyLoginStatus* ThirdPartyLoginStatus::CANCELED = new ThirdPartyLoginStatus("CANCELED", 5);

ThirdPartyLoginStatus* ThirdPartyLoginStatus::INVALID_TOKEN = new ThirdPartyLoginStatus("INVALID_TOKEN", 6);

ThirdPartyLoginStatus* ThirdPartyLoginStatus::TOKEN_EXPIRED = new ThirdPartyLoginStatus("TOKEN_EXPIRED", 7);

std::vector<ThirdPartyLoginStatus*>* ThirdPartyLoginStatus::values() {
    return _values;
}





int ThirdPartyLoginStatus::getValue() {
return _value;
}

const char* ThirdPartyLoginStatus::name() {
return _name;
}

int ThirdPartyLoginStatus::ordinal() {
return _value;
}

ThirdPartyLoginStatus::ThirdPartyLoginStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

ThirdPartyLoginStatus* ThirdPartyLoginStatus::fromValue(int value) {
for (unsigned int _i6619 = 0; _i6619 < (unsigned int)_values->size(); _i6619++) {
ThirdPartyLoginStatus* _o6620 = (*_values)[_i6619];
if (_o6620->getValue() == value) {
return _o6620;
}
}
return 0;
}

ThirdPartyLoginStatus* ThirdPartyLoginStatus::valueOf(const char* name) {
for (unsigned int _s14840 = 0; _s14840 < (unsigned int)_values->size(); _s14840++) {
ThirdPartyLoginStatus* _f14841 = (*_values)[_s14840];
if (strcmp(name, _f14841->name()) == 0) {
return _f14841;
}
}
return 0;
}

//@Override
short ThirdPartyLoginStatus::getSerializerID() {
return -10938;
}

const char* ThirdPartyLoginStatus::toString() {
return NUtils::concat("ThirdPartyLoginStatus.", _name);
}

void* ThirdPartyLoginStatus::clone() {
return this;
}

ThirdPartyLoginStatus::~ThirdPartyLoginStatus(){
}


#include "SwitchToServerInformation.h"

short SwitchToServerInformation::serializerID = -3137;













const char* SwitchToServerInformation::getMessageId() {
    return _MessageId;
}

void SwitchToServerInformation::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SwitchToServerInformation::isMessageIdSet() {
return _MessageIdSet;
}

void SwitchToServerInformation::unSetMessageId() {
_MessageIdSet = false;
}

const char* SwitchToServerInformation::getRequestId() {
return _RequestId;
}

void SwitchToServerInformation::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SwitchToServerInformation::isRequestIdSet() {
return _RequestIdSet;
}

void SwitchToServerInformation::unSetRequestId() {
_RequestIdSet = false;
}

const char* SwitchToServerInformation::getAddress() {
return _Address;
}

void SwitchToServerInformation::setAddress(const char* value) {
if (_Address && _Address != value) {
delete _Address;
}
if (value) {
_Address = strdup(value);
} else {
_Address = 0;
}
_AddressSet = true;
}

bool SwitchToServerInformation::isAddressSet() {
return _AddressSet;
}

void SwitchToServerInformation::unSetAddress() {
_AddressSet = false;
}

//@Override
short SwitchToServerInformation::getSerializerID() {
return serializerID;
}

void* SwitchToServerInformation::clone() {
SwitchToServerInformation* _f15413 = new SwitchToServerInformation();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f15413->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f15413->setRequestId(_RequestId);
}
if (_AddressSet == true && Utils::isNull(_Address) == false) {
_f15413->setAddress(_Address);
}
return _f15413;
}

const char* SwitchToServerInformation::toString() {
const char* _q15414 = "";
_q15414 = NUtils::concat(_q15414, NUtils::concat(NUtils::concat("[", "SwitchToServerInformation"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15414 = NUtils::concat(_q15414, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15414 = NUtils::concat(_q15414, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_AddressSet == true && Utils::isNull(_Address) == false) {
_q15414 = NUtils::concat(_q15414, NUtils::concat(NUtils::concat("_Address=", _Address), "| "));
}
_q15414 = NUtils::concat(_q15414, "]");
return _q15414;
}

SwitchToServerInformation::SwitchToServerInformation(){
this->_AddressSet = false;
this->_Address = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SwitchToServerInformation::~SwitchToServerInformation(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Address) {
delete _Address;
_Address = 0;
}
}


#include "T793.h"







T793::T793(int row, int col){
    this->_n14856 = 0;
    this->_u14855 = 0;
    _q14854 = new CppByteArray(row * col);
    this->_u14855 = row;
    this->_n14856 = col;
}

void T793::_m16974(int row, int col, unsigned char _o14859) {
    (*_q14854)[row * _n14856 + col] = _o14859;
}

unsigned char T793::_m16975(int _s14857, int _y14861) {
return (*_q14854)[_s14857 * _n14856 + _y14861];
}

CppByteArray* T793::_m16976(int _h14860) {
CppByteArray* _v14863 = new CppByteArray(_n14856);
int _p14864 = _h14860 * _n14856;
int _i6640 = 0;
for (unsigned int _f6641 = _p14864; _f6641 < (unsigned int)_p14864 + _n14856; _f6641++) {
(*_v14863)[_i6640] = (*_q14854)[_f6641];
_i6640++;
}
return _v14863;
}

void T793::_m16977(CppByteArray* _h14867, int _r14868) {
int _k14869 = _r14868 * _n14856;
for (unsigned int _f14870 = 0; _f14870 < (unsigned int)_n14856; _f14870++) {
(*_q14854)[_k14869] = (*_h14867)[_f14870];
_k14869++;
}
}

int T793::_m16978() {
return _u14855;
}

int T793::_m16979() {
return _n14856;
}

T793::~T793(){
}


#include "SignUpResponse.h"

short SignUpResponse::serializerID = -10039;

















const char* SignUpResponse::getMessageId() {
    return _MessageId;
}

void SignUpResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SignUpResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SignUpResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SignUpResponse::getRequestId() {
return _RequestId;
}

void SignUpResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SignUpResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SignUpResponse::unSetRequestId() {
_RequestIdSet = false;
}

SignUpStatus* SignUpResponse::getSignUpStatus() {
return _SignUpStatus;
}

void SignUpResponse::setSignUpStatus(SignUpStatus* value) {
_SignUpStatus = value;
_SignUpStatusSet = true;
}

bool SignUpResponse::isSignUpStatusSet() {
return _SignUpStatusSet;
}

void SignUpResponse::unSetSignUpStatus() {
_SignUpStatusSet = false;
}

NPlayer* SignUpResponse::getPlayer() {
return _Player;
}

void SignUpResponse::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool SignUpResponse::isPlayerSet() {
return _PlayerSet;
}

void SignUpResponse::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short SignUpResponse::getSerializerID() {
return serializerID;
}

void* SignUpResponse::clone() {
SignUpResponse* _l10350 = new SignUpResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l10350->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l10350->setRequestId(_RequestId);
}
if (_SignUpStatusSet == true && Utils::isNull(_SignUpStatus) == false) {
_l10350->setSignUpStatus(_SignUpStatus);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_l10350->setPlayer((NPlayer*)(_Player->clone()));
}
return _l10350;
}

const char* SignUpResponse::toString() {
const char* _c10351 = "";
_c10351 = NUtils::concat(_c10351, NUtils::concat(NUtils::concat("[", "SignUpResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c10351 = NUtils::concat(_c10351, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c10351 = NUtils::concat(_c10351, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SignUpStatusSet == true && Utils::isNull(_SignUpStatus) == false) {
_c10351 = NUtils::concat(_c10351, NUtils::concat(NUtils::concat("_SignUpStatus=", _SignUpStatus->toString()), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_c10351 = NUtils::concat(_c10351, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_c10351 = NUtils::concat(_c10351, "]");
return _c10351;
}

SignUpResponse::SignUpResponse(){
this->_PlayerSet = false;
this->_Player = 0;
this->_SignUpStatusSet = false;
this->_SignUpStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SignUpResponse::~SignUpResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "NPlayer.h"

short NPlayer::serializerID = -3003;

































const char* NPlayer::getStoreId() {
    return _storeId;
}

void NPlayer::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NPlayer::isstoreIdSet() {
return _storeIdSet;
}

void NPlayer::unSetstoreId() {
_storeIdSet = false;
}

const char* NPlayer::getID() {
return _ID;
}

void NPlayer::setID(const char* value) {
if (_ID && _ID != value) {
delete _ID;
}
if (value) {
_ID = strdup(value);
} else {
_ID = 0;
}
_IDSet = true;
}

bool NPlayer::isIDSet() {
return _IDSet;
}

void NPlayer::unSetID() {
_IDSet = false;
}

const char* NPlayer::getAccessToken() {
return _AccessToken;
}

void NPlayer::setAccessToken(const char* value) {
if (_AccessToken && _AccessToken != value) {
delete _AccessToken;
}
if (value) {
_AccessToken = strdup(value);
} else {
_AccessToken = 0;
}
_AccessTokenSet = true;
}

bool NPlayer::isAccessTokenSet() {
return _AccessTokenSet;
}

void NPlayer::unSetAccessToken() {
_AccessTokenSet = false;
}

const char* NPlayer::getName() {
return _Name;
}

void NPlayer::setName(const char* value) {
if (_Name && _Name != value) {
delete _Name;
}
if (value) {
_Name = strdup(value);
} else {
_Name = 0;
}
_NameSet = true;
}

bool NPlayer::isNameSet() {
return _NameSet;
}

void NPlayer::unSetName() {
_NameSet = false;
}

bool NPlayer::isConnected() {
return _Connected;
}

void NPlayer::setConnected(bool value) {
_Connected = value;
_ConnectedSet = true;
}

bool NPlayer::isConnectedSet() {
return _ConnectedSet;
}

void NPlayer::unSetConnected() {
_ConnectedSet = false;
}

ThirdPartySource* NPlayer::getLoginSource() {
return _LoginSource;
}

void NPlayer::setLoginSource(ThirdPartySource* value) {
_LoginSource = value;
_LoginSourceSet = true;
}

bool NPlayer::isLoginSourceSet() {
return _LoginSourceSet;
}

void NPlayer::unSetLoginSource() {
_LoginSourceSet = false;
}

const char* NPlayer::getThirdPartyId() {
return _ThirdPartyId;
}

void NPlayer::setThirdPartyId(const char* value) {
if (_ThirdPartyId && _ThirdPartyId != value) {
delete _ThirdPartyId;
}
if (value) {
_ThirdPartyId = strdup(value);
} else {
_ThirdPartyId = 0;
}
_ThirdPartyIdSet = true;
}

bool NPlayer::isThirdPartyIdSet() {
return _ThirdPartyIdSet;
}

void NPlayer::unSetThirdPartyId() {
_ThirdPartyIdSet = false;
}

const char* NPlayer::getLang() {
return _Lang;
}

void NPlayer::setLang(const char* value) {
if (_Lang && _Lang != value) {
delete _Lang;
}
if (value) {
_Lang = strdup(value);
} else {
_Lang = 0;
}
_LangSet = true;
}

bool NPlayer::isLangSet() {
return _LangSet;
}

void NPlayer::unSetLang() {
_LangSet = false;
}

//@Override
short NPlayer::getSerializerID() {
return serializerID;
}

void* NPlayer::clone() {
NPlayer* _m14970 = new NPlayer();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_m14970->setStoreId(_storeId);
}
if (_IDSet == true && Utils::isNull(_ID) == false) {
_m14970->setID(_ID);
}
if (_AccessTokenSet == true && Utils::isNull(_AccessToken) == false) {
_m14970->setAccessToken(_AccessToken);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_m14970->setName(_Name);
}
if (_ConnectedSet == true && Utils::isNullBoolean(_Connected) == false) {
_m14970->setConnected(_Connected);
}
if (_LoginSourceSet == true && Utils::isNull(_LoginSource) == false) {
_m14970->setLoginSource(_LoginSource);
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_m14970->setThirdPartyId(_ThirdPartyId);
}
if (_LangSet == true && Utils::isNull(_Lang) == false) {
_m14970->setLang(_Lang);
}
return _m14970;
}

const char* NPlayer::toString() {
const char* _j14971 = "";
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("[", "NPlayer"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_IDSet == true && Utils::isNull(_ID) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_ID=", _ID), "| "));
}
if (_AccessTokenSet == true && Utils::isNull(_AccessToken) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_AccessToken=", _AccessToken), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_ConnectedSet == true && Utils::isNullBoolean(_Connected) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_Connected=", _Connected), "| "));
}
if (_LoginSourceSet == true && Utils::isNull(_LoginSource) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_LoginSource=", _LoginSource->toString()), "| "));
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_ThirdPartyId=", _ThirdPartyId), "| "));
}
if (_LangSet == true && Utils::isNull(_Lang) == false) {
_j14971 = NUtils::concat(_j14971, NUtils::concat(NUtils::concat("_Lang=", _Lang), "| "));
}
_j14971 = NUtils::concat(_j14971, "]");
return _j14971;
}

NPlayer::NPlayer(){
this->_LangSet = false;
this->_Lang = 0;
this->_ThirdPartyIdSet = false;
this->_ThirdPartyId = 0;
this->_LoginSourceSet = false;
this->_LoginSource = 0;
this->_ConnectedSet = true;
this->_Connected = false;
this->_NameSet = false;
this->_Name = 0;
this->_AccessTokenSet = false;
this->_AccessToken = 0;
this->_IDSet = false;
this->_ID = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NPlayer::~NPlayer(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_ID) {
delete _ID;
_ID = 0;
}
if (_AccessToken) {
delete _AccessToken;
_AccessToken = 0;
}
if (_Name) {
delete _Name;
_Name = 0;
}
if (_ThirdPartyId) {
delete _ThirdPartyId;
_ThirdPartyId = 0;
}
if (_Lang) {
delete _Lang;
_Lang = 0;
}
}


#include "DnsRequest.h"

short DnsRequest::serializerID = -3019;

























const char* DnsRequest::getMessageId() {
    return _MessageId;
}

void DnsRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool DnsRequest::isMessageIdSet() {
return _MessageIdSet;
}

void DnsRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* DnsRequest::getRequestId() {
return _RequestId;
}

void DnsRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool DnsRequest::isRequestIdSet() {
return _RequestIdSet;
}

void DnsRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* DnsRequest::getGameId() {
return _GameId;
}

void DnsRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool DnsRequest::isGameIdSet() {
return _GameIdSet;
}

void DnsRequest::unSetGameId() {
_GameIdSet = false;
}

int DnsRequest::getGameVersion() {
return _GameVersion;
}

void DnsRequest::setGameVersion(int value) {
_GameVersion = value;
_GameVersionSet = true;
}

bool DnsRequest::isGameVersionSet() {
return _GameVersionSet;
}

void DnsRequest::unSetGameVersion() {
_GameVersionSet = false;
}

int DnsRequest::getGameDeployedVersion() {
return _GameDeployedVersion;
}

void DnsRequest::setGameDeployedVersion(int value) {
_GameDeployedVersion = value;
_GameDeployedVersionSet = true;
}

bool DnsRequest::isGameDeployedVersionSet() {
return _GameDeployedVersionSet;
}

void DnsRequest::unSetGameDeployedVersion() {
_GameDeployedVersionSet = false;
}

const char* DnsRequest::getPlatform() {
return _Platform;
}

void DnsRequest::setPlatform(const char* value) {
if (_Platform && _Platform != value) {
delete _Platform;
}
if (value) {
_Platform = strdup(value);
} else {
_Platform = 0;
}
_PlatformSet = true;
}

bool DnsRequest::isPlatformSet() {
return _PlatformSet;
}

void DnsRequest::unSetPlatform() {
_PlatformSet = false;
}

//@Override
short DnsRequest::getSerializerID() {
return serializerID;
}

void* DnsRequest::clone() {
DnsRequest* _e15265 = new DnsRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e15265->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e15265->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_e15265->setGameId(_GameId);
}
if (_GameVersionSet == true && Utils::isNullInteger(_GameVersion) == false) {
_e15265->setGameVersion(_GameVersion);
}
if (_GameDeployedVersionSet == true && Utils::isNullInteger(_GameDeployedVersion) == false) {
_e15265->setGameDeployedVersion(_GameDeployedVersion);
}
if (_PlatformSet == true && Utils::isNull(_Platform) == false) {
_e15265->setPlatform(_Platform);
}
return _e15265;
}

const char* DnsRequest::toString() {
const char* _c15266 = "";
_c15266 = NUtils::concat(_c15266, NUtils::concat(NUtils::concat("[", "DnsRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c15266 = NUtils::concat(_c15266, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c15266 = NUtils::concat(_c15266, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_c15266 = NUtils::concat(_c15266, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_GameVersionSet == true && Utils::isNullInteger(_GameVersion) == false) {
_c15266 = NUtils::concat(_c15266, NUtils::concat(NUtils::concat("_GameVersion=", _GameVersion), "| "));
}
if (_GameDeployedVersionSet == true && Utils::isNullInteger(_GameDeployedVersion) == false) {
_c15266 = NUtils::concat(_c15266, NUtils::concat(NUtils::concat("_GameDeployedVersion=", _GameDeployedVersion), "| "));
}
if (_PlatformSet == true && Utils::isNull(_Platform) == false) {
_c15266 = NUtils::concat(_c15266, NUtils::concat(NUtils::concat("_Platform=", _Platform), "| "));
}
_c15266 = NUtils::concat(_c15266, "]");
return _c15266;
}

DnsRequest::DnsRequest(){
this->_PlatformSet = false;
this->_Platform = 0;
this->_GameDeployedVersionSet = false;
this->_GameDeployedVersion = 0;
this->_GameVersionSet = false;
this->_GameVersion = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

DnsRequest::~DnsRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
if (_Platform) {
delete _Platform;
_Platform = 0;
}
}


#include "GetAchievementBoardResponse.h"

short GetAchievementBoardResponse::serializerID = -10439;

















const char* GetAchievementBoardResponse::getMessageId() {
    return _MessageId;
}

void GetAchievementBoardResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetAchievementBoardResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetAchievementBoardResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetAchievementBoardResponse::getRequestId() {
return _RequestId;
}

void GetAchievementBoardResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetAchievementBoardResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetAchievementBoardResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetAchievementBoardStatus* GetAchievementBoardResponse::getGetAchievementBoardStatus() {
return _GetAchievementBoardStatus;
}

void GetAchievementBoardResponse::setGetAchievementBoardStatus(GetAchievementBoardStatus* value) {
_GetAchievementBoardStatus = value;
_GetAchievementBoardStatusSet = true;
}

bool GetAchievementBoardResponse::isGetAchievementBoardStatusSet() {
return _GetAchievementBoardStatusSet;
}

void GetAchievementBoardResponse::unSetGetAchievementBoardStatus() {
_GetAchievementBoardStatusSet = false;
}

NAchievementBoard* GetAchievementBoardResponse::getAchievementBoard() {
return _AchievementBoard;
}

void GetAchievementBoardResponse::setAchievementBoard(NAchievementBoard* value) {
if (_AchievementBoard && _AchievementBoard != value) {
delete _AchievementBoard;
}
_AchievementBoard = value;
_AchievementBoardSet = true;
}

bool GetAchievementBoardResponse::isAchievementBoardSet() {
return _AchievementBoardSet;
}

void GetAchievementBoardResponse::unSetAchievementBoard() {
_AchievementBoardSet = false;
}

//@Override
short GetAchievementBoardResponse::getSerializerID() {
return serializerID;
}

void* GetAchievementBoardResponse::clone() {
GetAchievementBoardResponse* _j15570 = new GetAchievementBoardResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j15570->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j15570->setRequestId(_RequestId);
}
if (_GetAchievementBoardStatusSet == true && Utils::isNull(_GetAchievementBoardStatus) == false) {
_j15570->setGetAchievementBoardStatus(_GetAchievementBoardStatus);
}
if (_AchievementBoardSet == true && Utils::isNull(_AchievementBoard) == false) {
_j15570->setAchievementBoard((NAchievementBoard*)(_AchievementBoard->clone()));
}
return _j15570;
}

const char* GetAchievementBoardResponse::toString() {
const char* _m15571 = "";
_m15571 = NUtils::concat(_m15571, NUtils::concat(NUtils::concat("[", "GetAchievementBoardResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m15571 = NUtils::concat(_m15571, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m15571 = NUtils::concat(_m15571, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetAchievementBoardStatusSet == true && Utils::isNull(_GetAchievementBoardStatus) == false) {
_m15571 = NUtils::concat(_m15571, NUtils::concat(NUtils::concat("_GetAchievementBoardStatus=", _GetAchievementBoardStatus->toString()), "| "));
}
if (_AchievementBoardSet == true && Utils::isNull(_AchievementBoard) == false) {
_m15571 = NUtils::concat(_m15571, NUtils::concat(NUtils::concat("_AchievementBoard=", _AchievementBoard->toString()), "| "));
}
_m15571 = NUtils::concat(_m15571, "]");
return _m15571;
}

GetAchievementBoardResponse::GetAchievementBoardResponse(){
this->_AchievementBoardSet = false;
this->_AchievementBoard = 0;
this->_GetAchievementBoardStatusSet = false;
this->_GetAchievementBoardStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetAchievementBoardResponse::~GetAchievementBoardResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_AchievementBoard) {
delete _AchievementBoard;
_AchievementBoard=0;
}
}


#include "StartGameRequest.h"

short StartGameRequest::serializerID = -10617;













const char* StartGameRequest::getMessageId() {
    return _MessageId;
}

void StartGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StartGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void StartGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* StartGameRequest::getRequestId() {
return _RequestId;
}

void StartGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StartGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void StartGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* StartGameRequest::getGameId() {
return _GameId;
}

void StartGameRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool StartGameRequest::isGameIdSet() {
return _GameIdSet;
}

void StartGameRequest::unSetGameId() {
_GameIdSet = false;
}

//@Override
short StartGameRequest::getSerializerID() {
return serializerID;
}

void* StartGameRequest::clone() {
StartGameRequest* _e14108 = new StartGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e14108->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e14108->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_e14108->setGameId(_GameId);
}
return _e14108;
}

const char* StartGameRequest::toString() {
const char* _x14109 = "";
_x14109 = NUtils::concat(_x14109, NUtils::concat(NUtils::concat("[", "StartGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x14109 = NUtils::concat(_x14109, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x14109 = NUtils::concat(_x14109, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_x14109 = NUtils::concat(_x14109, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_x14109 = NUtils::concat(_x14109, "]");
return _x14109;
}

StartGameRequest::StartGameRequest(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StartGameRequest::~StartGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "NAchievementBoard.h"

short NAchievementBoard::serializerID = -3143;









const char* NAchievementBoard::getStoreId() {
    return _storeId;
}

void NAchievementBoard::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NAchievementBoard::isstoreIdSet() {
return _storeIdSet;
}

void NAchievementBoard::unSetstoreId() {
_storeIdSet = false;
}

std::vector<NAchievement*>* NAchievementBoard::getAchievements() {
return _achievements;
}

void NAchievementBoard::setAchievements(std::vector<NAchievement*>* value) {
if (_achievements) {
for (unsigned int i=0; i < _achievements->size(); i++) {
delete (*_achievements)[i];
}
}
if (_achievements && _achievements != value) {
delete _achievements;
}
_achievements = value;
_achievementsSet = true;
}

bool NAchievementBoard::isachievementsSet() {
return _achievementsSet;
}

void NAchievementBoard::unSetachievements() {
_achievementsSet = false;
}

//@Override
short NAchievementBoard::getSerializerID() {
return serializerID;
}

void* NAchievementBoard::clone() {
NAchievementBoard* _l14695 = new NAchievementBoard();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_l14695->setStoreId(_storeId);
}
if (_achievementsSet == true && Utils::isNull(_achievements) == false) {
std::vector<NAchievement*>* _n14696 = new std::vector<NAchievement*>();
for (unsigned int i = 0; i < (unsigned int)_achievements->size(); i++) {
void* _f14697 = _achievements->at(i);
if (_f14697 != 0) {
_n14696->push_back((NAchievement*)((NAchievement*)_f14697)->clone());
} else {
_n14696->push_back((NAchievement*)_f14697);
}
}
_l14695->setAchievements(_n14696);
}
return _l14695;
}

const char* NAchievementBoard::toString() {
const char* _w14698 = "";
_w14698 = NUtils::concat(_w14698, NUtils::concat(NUtils::concat("[", "NAchievementBoard"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_w14698 = NUtils::concat(_w14698, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_achievementsSet == true && Utils::isNull(_achievements) == false) {
_w14698 = NUtils::concat(_w14698, NUtils::concat(NUtils::concat("_achievements=", "N/A"), "| "));
}
_w14698 = NUtils::concat(_w14698, "]");
return _w14698;
}

NAchievementBoard::NAchievementBoard(){
this->_achievementsSet = false;
this->_achievements = new std::vector<NAchievement*>();
this->_storeIdSet = false;
this->_storeId = 0;
}

NAchievementBoard::~NAchievementBoard(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_achievements) {
for (unsigned int i=0; i < _achievements->size(); i++) {
delete (*_achievements)[i];
}
delete _achievements;
_achievements=0;;
}
}


#include "AbstractNetworkConnection.h"























AbstractNetworkConnection::AbstractNetworkConnection(const char* name, T810* serializerFactory, MessageListener* messageListener){
    this->connectionInvalidVersionDetectedListenerCollection = new ConnectionInvalidVersionDetectedListenerCollection();
    this->connectionLostListenerCollection = new ConnectionLostListenerCollection();
    this->connectionFailListenerCollection = new ConnectionFailListenerCollection();
    this->connectionReadyListenerCollection = new ConnectionReadyListenerCollection();
    this->connectionState = 0;
    this->name = 0;
    this->connectionLostHandler = 0;
    this->connectionSendFailHandler = 0;
    this->messageListener = 0;
    this->serializerFactory = 0;
    this->log = NLoggerFactory::getLogger("AbstractNetworkConnection");
    connectionState = ConnectionState::INITIAL;
    this->serializerFactory = serializerFactory;
    this->messageListener = messageListener;
    this->name = NUtils::nstrdup(name);
    connectionLostHandler = new NetConnectionLostHandler(this, &AbstractNetworkConnection::onConnectionLost4);
    connectionSendFailHandler = new NetConnectionSendFailHandler(this, &AbstractNetworkConnection::onFail5);
}

void AbstractNetworkConnection::tryStop() {
}

//@Override
void AbstractNetworkConnection::_m16333(ConnectionReadyListener* connectionReadyListener) {
connectionReadyListenerCollection->add(connectionReadyListener);
}

//@Override
void AbstractNetworkConnection::_m16334(ConnectionReadyListener* _b15249) {
connectionReadyListenerCollection->remove(_b15249);
}

//@Override
void AbstractNetworkConnection::_m16335(ConnectionLostListener* connectionLostListener) {
connectionLostListenerCollection->add(connectionLostListener);
}

//@Override
void AbstractNetworkConnection::_m16336(ConnectionLostListener* _k15251) {
connectionLostListenerCollection->remove(_k15251);
}

//@Override
void AbstractNetworkConnection::_m16337(ConnectionFailListener* connectionFailListener) {
connectionFailListenerCollection->add(connectionFailListener);
}

//@Override
void AbstractNetworkConnection::_m16338(ConnectionFailListener* _b15253) {
connectionFailListenerCollection->remove(_b15253);
}

//@Override
void AbstractNetworkConnection::_m16339(ConnectionInvalidVersionDetectedListener* connectionInvalidVersionDetectedListener) {
connectionInvalidVersionDetectedListenerCollection->add(connectionInvalidVersionDetectedListener);
}

//@Override
void AbstractNetworkConnection::_m16340(ConnectionInvalidVersionDetectedListener* _s15255) {
connectionInvalidVersionDetectedListenerCollection->remove(_s15255);
}

//@Override
void AbstractNetworkConnection::_m16331() {
}

//@Override
void AbstractNetworkConnection::_m16332() {
}

//@Override
void AbstractNetworkConnection::_m16341(Message* _n15256) {
}

//@Override
void AbstractNetworkConnection::_m16342(Message* _h15257, Message* _m15258) {
}

AbstractNetworkConnection::~AbstractNetworkConnection(){
if (log) {
delete log;
log=0;
}
if (serializerFactory) {
delete serializerFactory;
serializerFactory=0;
}
if (messageListener) {
messageListener=0;
}
if (connectionSendFailHandler) {
delete connectionSendFailHandler;
connectionSendFailHandler=0;
}
if (connectionLostHandler) {
delete connectionLostHandler;
connectionLostHandler=0;
}
if (name) {
delete name;
name=0;
}
if (connectionReadyListenerCollection) {
delete connectionReadyListenerCollection;
connectionReadyListenerCollection=0;
}
if (connectionFailListenerCollection) {
delete connectionFailListenerCollection;
connectionFailListenerCollection=0;
}
if (connectionLostListenerCollection) {
delete connectionLostListenerCollection;
connectionLostListenerCollection=0;
}
if (connectionInvalidVersionDetectedListenerCollection) {
delete connectionInvalidVersionDetectedListenerCollection;
connectionInvalidVersionDetectedListenerCollection=0;
}
}

//@Override
void AbstractNetworkConnection::onConnectionLost4() {
if (connectionState == ConnectionState::STARTED) {
connectionLostListenerCollection->fireConnectionLost();
}
if (connectionState == ConnectionState::STOPPING) {
tryStop();
}
}

//@Override
void AbstractNetworkConnection::onFail5() {
if (connectionState == ConnectionState::STARTED) {
connectionLostListenerCollection->fireConnectionLost();
}
if (connectionState == ConnectionState::STOPPING) {
tryStop();
}
}


#include "NGame.h"

short NGame::serializerID = -3009;





























GameRunningState* NGame::getGameRunningState() {
    return _GameRunningState;
}

void NGame::setGameRunningState(GameRunningState* value) {
_GameRunningState = value;
_GameRunningStateSet = true;
}

bool NGame::isGameRunningStateSet() {
return _GameRunningStateSet;
}

void NGame::unSetGameRunningState() {
_GameRunningStateSet = false;
}

NGameCharacteristics* NGame::getGameCharacteristics() {
return _GameCharacteristics;
}

void NGame::setGameCharacteristics(NGameCharacteristics* value) {
if (_GameCharacteristics && _GameCharacteristics != value) {
delete _GameCharacteristics;
}
_GameCharacteristics = value;
_GameCharacteristicsSet = true;
}

bool NGame::isGameCharacteristicsSet() {
return _GameCharacteristicsSet;
}

void NGame::unSetGameCharacteristics() {
_GameCharacteristicsSet = false;
}

NGameState* NGame::getGameState() {
return _GameState;
}

void NGame::setGameState(NGameState* value) {
if (_GameState && _GameState != value) {
delete _GameState;
}
_GameState = value;
_GameStateSet = true;
}

bool NGame::isGameStateSet() {
return _GameStateSet;
}

void NGame::unSetGameState() {
_GameStateSet = false;
}

NMatchMakingConditions* NGame::getMatchMakingConditions() {
return _MatchMakingConditions;
}

void NGame::setMatchMakingConditions(NMatchMakingConditions* value) {
if (_MatchMakingConditions && _MatchMakingConditions != value) {
delete _MatchMakingConditions;
}
_MatchMakingConditions = value;
_MatchMakingConditionsSet = true;
}

bool NGame::isMatchMakingConditionsSet() {
return _MatchMakingConditionsSet;
}

void NGame::unSetMatchMakingConditions() {
_MatchMakingConditionsSet = false;
}

TurnBasedContext* NGame::getTurnBasedContext() {
return _TurnBasedContext;
}

void NGame::setTurnBasedContext(TurnBasedContext* value) {
if (_TurnBasedContext && _TurnBasedContext != value) {
delete _TurnBasedContext;
}
_TurnBasedContext = value;
_TurnBasedContextSet = true;
}

bool NGame::isTurnBasedContextSet() {
return _TurnBasedContextSet;
}

void NGame::unSetTurnBasedContext() {
_TurnBasedContextSet = false;
}

DisconnectedContext* NGame::getDisconnectedContext() {
return _DisconnectedContext;
}

void NGame::setDisconnectedContext(DisconnectedContext* value) {
if (_DisconnectedContext && _DisconnectedContext != value) {
delete _DisconnectedContext;
}
_DisconnectedContext = value;
_DisconnectedContextSet = true;
}

bool NGame::isDisconnectedContextSet() {
return _DisconnectedContextSet;
}

void NGame::unSetDisconnectedContext() {
_DisconnectedContextSet = false;
}

NPlayer* NGame::getOwner() {
return _Owner;
}

void NGame::setOwner(NPlayer* value) {
if (_Owner && _Owner != value) {
delete _Owner;
}
_Owner = value;
_OwnerSet = true;
}

bool NGame::isOwnerSet() {
return _OwnerSet;
}

void NGame::unSetOwner() {
_OwnerSet = false;
}

//@Override
short NGame::getSerializerID() {
return serializerID;
}

void* NGame::clone() {
NGame* _n15538 = new NGame();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_n15538->setStoreId(_storeId);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_n15538->setId(_Id);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_n15538->setName(_Name);
}
if (_PlayersSet == true && Utils::isNull(_Players) == false) {
std::vector<NPlayer*>* _l15539 = new std::vector<NPlayer*>();
for (unsigned int i = 0; i < (unsigned int)_Players->size(); i++) {
void* _w15540 = _Players->at(i);
if (_w15540 != 0) {
_l15539->push_back((NPlayer*)((NPlayer*)_w15540)->clone());
} else {
_l15539->push_back((NPlayer*)_w15540);
}
}
_n15538->setPlayers(_l15539);
}
if (_GameRunningStateSet == true && Utils::isNull(_GameRunningState) == false) {
_n15538->setGameRunningState(_GameRunningState);
}
if (_GameCharacteristicsSet == true && Utils::isNull(_GameCharacteristics) == false) {
_n15538->setGameCharacteristics((NGameCharacteristics*)(_GameCharacteristics->clone()));
}
if (_GameStateSet == true && Utils::isNull(_GameState) == false) {
_n15538->setGameState((NGameState*)(_GameState->clone()));
}
if (_MatchMakingConditionsSet == true && Utils::isNull(_MatchMakingConditions) == false) {
_n15538->setMatchMakingConditions((NMatchMakingConditions*)(_MatchMakingConditions->clone()));
}
if (_TurnBasedContextSet == true && Utils::isNull(_TurnBasedContext) == false) {
_n15538->setTurnBasedContext((TurnBasedContext*)(_TurnBasedContext->clone()));
}
if (_DisconnectedContextSet == true && Utils::isNull(_DisconnectedContext) == false) {
_n15538->setDisconnectedContext((DisconnectedContext*)(_DisconnectedContext->clone()));
}
if (_OwnerSet == true && Utils::isNull(_Owner) == false) {
_n15538->setOwner((NPlayer*)(_Owner->clone()));
}
return _n15538;
}

const char* NGame::toString() {
const char* _e15541 = "";
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("[", "NGame"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_PlayersSet == true && Utils::isNull(_Players) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_Players=", "N/A"), "| "));
}
if (_GameRunningStateSet == true && Utils::isNull(_GameRunningState) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_GameRunningState=", _GameRunningState->toString()), "| "));
}
if (_GameCharacteristicsSet == true && Utils::isNull(_GameCharacteristics) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_GameCharacteristics=", _GameCharacteristics->toString()), "| "));
}
if (_GameStateSet == true && Utils::isNull(_GameState) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_GameState=", _GameState->toString()), "| "));
}
if (_MatchMakingConditionsSet == true && Utils::isNull(_MatchMakingConditions) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_MatchMakingConditions=", _MatchMakingConditions->toString()), "| "));
}
if (_TurnBasedContextSet == true && Utils::isNull(_TurnBasedContext) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_TurnBasedContext=", _TurnBasedContext->toString()), "| "));
}
if (_DisconnectedContextSet == true && Utils::isNull(_DisconnectedContext) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_DisconnectedContext=", _DisconnectedContext->toString()), "| "));
}
if (_OwnerSet == true && Utils::isNull(_Owner) == false) {
_e15541 = NUtils::concat(_e15541, NUtils::concat(NUtils::concat("_Owner=", _Owner->toString()), "| "));
}
_e15541 = NUtils::concat(_e15541, "]");
return _e15541;
}

NGame::NGame(){
this->_OwnerSet = false;
this->_Owner = 0;
this->_DisconnectedContextSet = false;
this->_DisconnectedContext = 0;
this->_TurnBasedContextSet = false;
this->_TurnBasedContext = 0;
this->_MatchMakingConditionsSet = false;
this->_MatchMakingConditions = 0;
this->_GameStateSet = false;
this->_GameState = 0;
this->_GameCharacteristicsSet = false;
this->_GameCharacteristics = 0;
this->_GameRunningStateSet = false;
this->_GameRunningState = 0;
}

NGame::~NGame(){
if (_GameCharacteristics) {
delete _GameCharacteristics;
_GameCharacteristics=0;
}
if (_GameState) {
delete _GameState;
_GameState=0;
}
if (_MatchMakingConditions) {
delete _MatchMakingConditions;
_MatchMakingConditions=0;
}
if (_TurnBasedContext) {
delete _TurnBasedContext;
_TurnBasedContext=0;
}
if (_DisconnectedContext) {
delete _DisconnectedContext;
_DisconnectedContext=0;
}
if (_Owner) {
delete _Owner;
_Owner=0;
}
}


#include "ThirdPartyLoginResponse.h"

short ThirdPartyLoginResponse::serializerID = -10939;

















const char* ThirdPartyLoginResponse::getMessageId() {
    return _MessageId;
}

void ThirdPartyLoginResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ThirdPartyLoginResponse::isMessageIdSet() {
return _MessageIdSet;
}

void ThirdPartyLoginResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* ThirdPartyLoginResponse::getRequestId() {
return _RequestId;
}

void ThirdPartyLoginResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ThirdPartyLoginResponse::isRequestIdSet() {
return _RequestIdSet;
}

void ThirdPartyLoginResponse::unSetRequestId() {
_RequestIdSet = false;
}

ThirdPartyLoginStatus* ThirdPartyLoginResponse::getThirdPartyLoginStatus() {
return _ThirdPartyLoginStatus;
}

void ThirdPartyLoginResponse::setThirdPartyLoginStatus(ThirdPartyLoginStatus* value) {
_ThirdPartyLoginStatus = value;
_ThirdPartyLoginStatusSet = true;
}

bool ThirdPartyLoginResponse::isThirdPartyLoginStatusSet() {
return _ThirdPartyLoginStatusSet;
}

void ThirdPartyLoginResponse::unSetThirdPartyLoginStatus() {
_ThirdPartyLoginStatusSet = false;
}

NPlayer* ThirdPartyLoginResponse::getPlayer() {
return _Player;
}

void ThirdPartyLoginResponse::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool ThirdPartyLoginResponse::isPlayerSet() {
return _PlayerSet;
}

void ThirdPartyLoginResponse::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short ThirdPartyLoginResponse::getSerializerID() {
return serializerID;
}

void* ThirdPartyLoginResponse::clone() {
ThirdPartyLoginResponse* _u15616 = new ThirdPartyLoginResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15616->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15616->setRequestId(_RequestId);
}
if (_ThirdPartyLoginStatusSet == true && Utils::isNull(_ThirdPartyLoginStatus) == false) {
_u15616->setThirdPartyLoginStatus(_ThirdPartyLoginStatus);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_u15616->setPlayer((NPlayer*)(_Player->clone()));
}
return _u15616;
}

const char* ThirdPartyLoginResponse::toString() {
const char* _r15617 = "";
_r15617 = NUtils::concat(_r15617, NUtils::concat(NUtils::concat("[", "ThirdPartyLoginResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r15617 = NUtils::concat(_r15617, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r15617 = NUtils::concat(_r15617, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ThirdPartyLoginStatusSet == true && Utils::isNull(_ThirdPartyLoginStatus) == false) {
_r15617 = NUtils::concat(_r15617, NUtils::concat(NUtils::concat("_ThirdPartyLoginStatus=", _ThirdPartyLoginStatus->toString()), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_r15617 = NUtils::concat(_r15617, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_r15617 = NUtils::concat(_r15617, "]");
return _r15617;
}

ThirdPartyLoginResponse::ThirdPartyLoginResponse(){
this->_PlayerSet = false;
this->_Player = 0;
this->_ThirdPartyLoginStatusSet = false;
this->_ThirdPartyLoginStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ThirdPartyLoginResponse::~ThirdPartyLoginResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "InviteThirdPartyFriendStatus.h"

std::vector<InviteThirdPartyFriendStatus*>* InviteThirdPartyFriendStatus::_values = new std::vector<InviteThirdPartyFriendStatus*>();

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::AUTHENTICATION_REQUIRED = new InviteThirdPartyFriendStatus("AUTHENTICATION_REQUIRED", 0);

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::SUCCESS = new InviteThirdPartyFriendStatus("SUCCESS", 1);

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::NOT_A_FRIEND = new InviteThirdPartyFriendStatus("NOT_A_FRIEND", 2);

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::INVALID_CALL = new InviteThirdPartyFriendStatus("INVALID_CALL", 3);

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::INTERNAL_ERROR = new InviteThirdPartyFriendStatus("INTERNAL_ERROR", 4);

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::ALREADY_PENDING_INVITATION = new InviteThirdPartyFriendStatus("ALREADY_PENDING_INVITATION", 5);

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::ALREADY_FRIENDS = new InviteThirdPartyFriendStatus("ALREADY_FRIENDS", 6);

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::CANCELED = new InviteThirdPartyFriendStatus("CANCELED", 7);

std::vector<InviteThirdPartyFriendStatus*>* InviteThirdPartyFriendStatus::values() {
    return _values;
}





int InviteThirdPartyFriendStatus::getValue() {
return _value;
}

const char* InviteThirdPartyFriendStatus::name() {
return _name;
}

int InviteThirdPartyFriendStatus::ordinal() {
return _value;
}

InviteThirdPartyFriendStatus::InviteThirdPartyFriendStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::fromValue(int value) {
for (unsigned int _k5945 = 0; _k5945 < (unsigned int)_values->size(); _k5945++) {
InviteThirdPartyFriendStatus* _g5946 = (*_values)[_k5945];
if (_g5946->getValue() == value) {
return _g5946;
}
}
return 0;
}

InviteThirdPartyFriendStatus* InviteThirdPartyFriendStatus::valueOf(const char* name) {
for (unsigned int _j14019 = 0; _j14019 < (unsigned int)_values->size(); _j14019++) {
InviteThirdPartyFriendStatus* _k14020 = (*_values)[_j14019];
if (strcmp(name, _k14020->name()) == 0) {
return _k14020;
}
}
return 0;
}

//@Override
short InviteThirdPartyFriendStatus::getSerializerID() {
return -10898;
}

const char* InviteThirdPartyFriendStatus::toString() {
return NUtils::concat("InviteThirdPartyFriendStatus.", _name);
}

void* InviteThirdPartyFriendStatus::clone() {
return this;
}

InviteThirdPartyFriendStatus::~InviteThirdPartyFriendStatus(){
}


#include "InviteThirdPartyFriendNotification.h"

short InviteThirdPartyFriendNotification::serializerID = -3165;

















const char* InviteThirdPartyFriendNotification::getMessageId() {
    return _MessageId;
}

void InviteThirdPartyFriendNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InviteThirdPartyFriendNotification::isMessageIdSet() {
return _MessageIdSet;
}

void InviteThirdPartyFriendNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* InviteThirdPartyFriendNotification::getRequestId() {
return _RequestId;
}

void InviteThirdPartyFriendNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InviteThirdPartyFriendNotification::isRequestIdSet() {
return _RequestIdSet;
}

void InviteThirdPartyFriendNotification::unSetRequestId() {
_RequestIdSet = false;
}

const char* InviteThirdPartyFriendNotification::getThirdPartyId() {
return _thirdPartyId;
}

void InviteThirdPartyFriendNotification::setThirdPartyId(const char* value) {
if (_thirdPartyId && _thirdPartyId != value) {
delete _thirdPartyId;
}
if (value) {
_thirdPartyId = strdup(value);
} else {
_thirdPartyId = 0;
}
_thirdPartyIdSet = true;
}

bool InviteThirdPartyFriendNotification::isthirdPartyIdSet() {
return _thirdPartyIdSet;
}

void InviteThirdPartyFriendNotification::unSetthirdPartyId() {
_thirdPartyIdSet = false;
}

ExecutionStatus* InviteThirdPartyFriendNotification::getExecutionStatus() {
return _ExecutionStatus;
}

void InviteThirdPartyFriendNotification::setExecutionStatus(ExecutionStatus* value) {
_ExecutionStatus = value;
_ExecutionStatusSet = true;
}

bool InviteThirdPartyFriendNotification::isExecutionStatusSet() {
return _ExecutionStatusSet;
}

void InviteThirdPartyFriendNotification::unSetExecutionStatus() {
_ExecutionStatusSet = false;
}

//@Override
short InviteThirdPartyFriendNotification::getSerializerID() {
return serializerID;
}

void* InviteThirdPartyFriendNotification::clone() {
InviteThirdPartyFriendNotification* _v15192 = new InviteThirdPartyFriendNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v15192->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v15192->setRequestId(_RequestId);
}
if (_thirdPartyIdSet == true && Utils::isNull(_thirdPartyId) == false) {
_v15192->setThirdPartyId(_thirdPartyId);
}
if (_ExecutionStatusSet == true && Utils::isNull(_ExecutionStatus) == false) {
_v15192->setExecutionStatus(_ExecutionStatus);
}
return _v15192;
}

const char* InviteThirdPartyFriendNotification::toString() {
const char* _o15193 = "";
_o15193 = NUtils::concat(_o15193, NUtils::concat(NUtils::concat("[", "InviteThirdPartyFriendNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o15193 = NUtils::concat(_o15193, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o15193 = NUtils::concat(_o15193, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_thirdPartyIdSet == true && Utils::isNull(_thirdPartyId) == false) {
_o15193 = NUtils::concat(_o15193, NUtils::concat(NUtils::concat("_thirdPartyId=", _thirdPartyId), "| "));
}
if (_ExecutionStatusSet == true && Utils::isNull(_ExecutionStatus) == false) {
_o15193 = NUtils::concat(_o15193, NUtils::concat(NUtils::concat("_ExecutionStatus=", _ExecutionStatus->toString()), "| "));
}
_o15193 = NUtils::concat(_o15193, "]");
return _o15193;
}

InviteThirdPartyFriendNotification::InviteThirdPartyFriendNotification(){
this->_ExecutionStatusSet = false;
this->_ExecutionStatus = 0;
this->_thirdPartyIdSet = false;
this->_thirdPartyId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InviteThirdPartyFriendNotification::~InviteThirdPartyFriendNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_thirdPartyId) {
delete _thirdPartyId;
_thirdPartyId = 0;
}
}


#include "SaveStorableRequest.h"

short SaveStorableRequest::serializerID = -10797;













const char* SaveStorableRequest::getMessageId() {
    return _MessageId;
}

void SaveStorableRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SaveStorableRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SaveStorableRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SaveStorableRequest::getRequestId() {
return _RequestId;
}

void SaveStorableRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SaveStorableRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SaveStorableRequest::unSetRequestId() {
_RequestIdSet = false;
}

Storable* SaveStorableRequest::getStorable() {
return _Storable;
}

void SaveStorableRequest::setStorable(Storable* value) {
if (_Storable && _Storable != value) {
delete _Storable;
}
_Storable = value;
_StorableSet = true;
}

bool SaveStorableRequest::isStorableSet() {
return _StorableSet;
}

void SaveStorableRequest::unSetStorable() {
_StorableSet = false;
}

//@Override
short SaveStorableRequest::getSerializerID() {
return serializerID;
}

void* SaveStorableRequest::clone() {
SaveStorableRequest* _l14660 = new SaveStorableRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l14660->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l14660->setRequestId(_RequestId);
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_l14660->setStorable((Storable*)(_Storable->clone()));
}
return _l14660;
}

const char* SaveStorableRequest::toString() {
const char* _q14661 = "";
_q14661 = NUtils::concat(_q14661, NUtils::concat(NUtils::concat("[", "SaveStorableRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q14661 = NUtils::concat(_q14661, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q14661 = NUtils::concat(_q14661, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_q14661 = NUtils::concat(_q14661, NUtils::concat(NUtils::concat("_Storable=", _Storable->toString()), "| "));
}
_q14661 = NUtils::concat(_q14661, "]");
return _q14661;
}

SaveStorableRequest::SaveStorableRequest(){
this->_StorableSet = false;
this->_Storable = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SaveStorableRequest::~SaveStorableRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storable) {
delete _Storable;
_Storable=0;
}
}


#include "HeartBeatResponse.h"

short HeartBeatResponse::serializerID = -3175;













const char* HeartBeatResponse::getMessageId() {
    return _MessageId;
}

void HeartBeatResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool HeartBeatResponse::isMessageIdSet() {
return _MessageIdSet;
}

void HeartBeatResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* HeartBeatResponse::getRequestId() {
return _RequestId;
}

void HeartBeatResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool HeartBeatResponse::isRequestIdSet() {
return _RequestIdSet;
}

void HeartBeatResponse::unSetRequestId() {
_RequestIdSet = false;
}

int HeartBeatResponse::getCounter() {
return _Counter;
}

void HeartBeatResponse::setCounter(int value) {
_Counter = value;
_CounterSet = true;
}

bool HeartBeatResponse::isCounterSet() {
return _CounterSet;
}

void HeartBeatResponse::unSetCounter() {
_CounterSet = false;
}

//@Override
short HeartBeatResponse::getSerializerID() {
return serializerID;
}

void* HeartBeatResponse::clone() {
HeartBeatResponse* _c13990 = new HeartBeatResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c13990->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c13990->setRequestId(_RequestId);
}
if (_CounterSet == true && Utils::isNullInteger(_Counter) == false) {
_c13990->setCounter(_Counter);
}
return _c13990;
}

const char* HeartBeatResponse::toString() {
const char* _y13991 = "";
_y13991 = NUtils::concat(_y13991, NUtils::concat(NUtils::concat("[", "HeartBeatResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y13991 = NUtils::concat(_y13991, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y13991 = NUtils::concat(_y13991, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_CounterSet == true && Utils::isNullInteger(_Counter) == false) {
_y13991 = NUtils::concat(_y13991, NUtils::concat(NUtils::concat("_Counter=", _Counter), "| "));
}
_y13991 = NUtils::concat(_y13991, "]");
return _y13991;
}

HeartBeatResponse::HeartBeatResponse(){
this->_CounterSet = false;
this->_Counter = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

HeartBeatResponse::~HeartBeatResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "SendGameChatRequest.h"

short SendGameChatRequest::serializerID = -10757;

















const char* SendGameChatRequest::getMessageId() {
    return _MessageId;
}

void SendGameChatRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SendGameChatRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SendGameChatRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SendGameChatRequest::getRequestId() {
return _RequestId;
}

void SendGameChatRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SendGameChatRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SendGameChatRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* SendGameChatRequest::getGameId() {
return _GameId;
}

void SendGameChatRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool SendGameChatRequest::isGameIdSet() {
return _GameIdSet;
}

void SendGameChatRequest::unSetGameId() {
_GameIdSet = false;
}

const char* SendGameChatRequest::getMessage() {
return _Message;
}

void SendGameChatRequest::setMessage(const char* value) {
if (_Message && _Message != value) {
delete _Message;
}
if (value) {
_Message = strdup(value);
} else {
_Message = 0;
}
_MessageSet = true;
}

bool SendGameChatRequest::isMessageSet() {
return _MessageSet;
}

void SendGameChatRequest::unSetMessage() {
_MessageSet = false;
}

//@Override
short SendGameChatRequest::getSerializerID() {
return serializerID;
}

void* SendGameChatRequest::clone() {
SendGameChatRequest* _g14889 = new SendGameChatRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g14889->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g14889->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_g14889->setGameId(_GameId);
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_g14889->setMessage(_Message);
}
return _g14889;
}

const char* SendGameChatRequest::toString() {
const char* _q14890 = "";
_q14890 = NUtils::concat(_q14890, NUtils::concat(NUtils::concat("[", "SendGameChatRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q14890 = NUtils::concat(_q14890, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q14890 = NUtils::concat(_q14890, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_q14890 = NUtils::concat(_q14890, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_q14890 = NUtils::concat(_q14890, NUtils::concat(NUtils::concat("_Message=", _Message), "| "));
}
_q14890 = NUtils::concat(_q14890, "]");
return _q14890;
}

SendGameChatRequest::SendGameChatRequest(){
this->_MessageSet = false;
this->_Message = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SendGameChatRequest::~SendGameChatRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
if (_Message) {
delete _Message;
_Message = 0;
}
}


#include "NuggetaDispatcher.h"





















































































































































void NuggetaDispatcher::fireMessage(Message* message) {
    if (message->getSerializerID() == HandshakeResponse::serializerID) {
        for (unsigned int _c6197 = 0; _c6197 < (unsigned int)globalListeners->size(); _c6197++) {
            NuggetaMessageListener* _n6198 = (*globalListeners)[_c6197];
            _n6198->onHandshakeResponse((HandshakeResponse*)message);
            continue;
        }
        for (unsigned int _j14336 = 0; _j14336 < (unsigned int)HandshakeResponseHandlers->size(); _j14336++) {
            HandshakeResponseHandler* _s14339 = (*HandshakeResponseHandlers)[_j14336];
            (*_s14339)((HandshakeResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GameStateChange::serializerID) {
        for (unsigned int _y6201 = 0; _y6201 < (unsigned int)globalListeners->size(); _y6201++) {
            NuggetaMessageListener* _i14337 = (*globalListeners)[_y6201];
            _i14337->onGameStateChange((GameStateChange*)message);
            continue;
        }
        for (unsigned int _r14338 = 0; _r14338 < (unsigned int)GameStateChangeHandlers->size(); _r14338++) {
            GameStateChangeHandler* _c14343 = (*GameStateChangeHandlers)[_r14338];
            (*_c14343)((GameStateChange*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == PlayerEnterGame::serializerID) {
        for (unsigned int _n6205 = 0; _n6205 < (unsigned int)globalListeners->size(); _n6205++) {
            NuggetaMessageListener* _i6206 = (*globalListeners)[_n6205];
            _i6206->onPlayerEnterGame((PlayerEnterGame*)message);
            continue;
        }
        for (unsigned int _q14340 = 0; _q14340 < (unsigned int)PlayerEnterGameHandlers->size(); _q14340++) {
            PlayerEnterGameHandler* _k14347 = (*PlayerEnterGameHandlers)[_q14340];
            (*_k14347)((PlayerEnterGame*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == FriendshipNotification::serializerID) {
        for (unsigned int _q6209 = 0; _q6209 < (unsigned int)globalListeners->size(); _q6209++) {
            NuggetaMessageListener* _v14341 = (*globalListeners)[_q6209];
            _v14341->onFriendshipNotification((FriendshipNotification*)message);
            continue;
        }
        for (unsigned int _g14342 = 0; _g14342 < (unsigned int)FriendshipNotificationHandlers->size(); _g14342++) {
            FriendshipNotificationHandler* _l14351 = (*FriendshipNotificationHandlers)[_g14342];
            (*_l14351)((FriendshipNotification*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == PlayerUnjoinGame::serializerID) {
        for (unsigned int _i6213 = 0; _i6213 < (unsigned int)globalListeners->size(); _i6213++) {
            NuggetaMessageListener* _p6214 = (*globalListeners)[_i6213];
            _p6214->onPlayerUnjoinGame((PlayerUnjoinGame*)message);
            continue;
        }
        for (unsigned int _l14344 = 0; _l14344 < (unsigned int)PlayerUnjoinGameHandlers->size(); _l14344++) {
            PlayerUnjoinGameHandler* _f14355 = (*PlayerUnjoinGameHandlers)[_l14344];
            (*_f14355)((PlayerUnjoinGame*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == ConnectionLost::serializerID) {
        for (unsigned int _g6217 = 0; _g6217 < (unsigned int)globalListeners->size(); _g6217++) {
            NuggetaMessageListener* _d14345 = (*globalListeners)[_g6217];
            _d14345->onConnectionLost((ConnectionLost*)message);
            continue;
        }
        for (unsigned int _f14346 = 0; _f14346 < (unsigned int)ConnectionLostHandlers->size(); _f14346++) {
            ConnectionLostHandler* _z14359 = (*ConnectionLostHandlers)[_f14346];
            (*_z14359)((ConnectionLost*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == ConnectionInterrupted::serializerID) {
        for (unsigned int _o6221 = 0; _o6221 < (unsigned int)globalListeners->size(); _o6221++) {
            NuggetaMessageListener* _y6222 = (*globalListeners)[_o6221];
            _y6222->onConnectionInterrupted((ConnectionInterrupted*)message);
            continue;
        }
        for (unsigned int _c14348 = 0; _c14348 < (unsigned int)ConnectionInterruptedHandlers->size(); _c14348++) {
            ConnectionInterruptedHandler* _c14363 = (*ConnectionInterruptedHandlers)[_c14348];
            (*_c14363)((ConnectionInterrupted*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == ConnectionResumed::serializerID) {
        for (unsigned int _m6225 = 0; _m6225 < (unsigned int)globalListeners->size(); _m6225++) {
            NuggetaMessageListener* _c14349 = (*globalListeners)[_m6225];
            _c14349->onConnectionResumed((ConnectionResumed*)message);
            continue;
        }
        for (unsigned int _e14350 = 0; _e14350 < (unsigned int)ConnectionResumedHandlers->size(); _e14350++) {
            ConnectionResumedHandler* _o14367 = (*ConnectionResumedHandlers)[_e14350];
            (*_o14367)((ConnectionResumed*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == ConnectionStop::serializerID) {
        for (unsigned int _i6229 = 0; _i6229 < (unsigned int)globalListeners->size(); _i6229++) {
            NuggetaMessageListener* _n6230 = (*globalListeners)[_i6229];
            _n6230->onConnectionStop((ConnectionStop*)message);
            continue;
        }
        for (unsigned int _q14352 = 0; _q14352 < (unsigned int)ConnectionStopHandlers->size(); _q14352++) {
            ConnectionStopHandler* _d14371 = (*ConnectionStopHandlers)[_q14352];
            (*_d14371)((ConnectionStop*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == FriendConnectedNotification::serializerID) {
        for (unsigned int _r6233 = 0; _r6233 < (unsigned int)globalListeners->size(); _r6233++) {
            NuggetaMessageListener* _q14353 = (*globalListeners)[_r6233];
            _q14353->onFriendConnectedNotification((FriendConnectedNotification*)message);
            continue;
        }
        for (unsigned int _t14354 = 0; _t14354 < (unsigned int)FriendConnectedNotificationHandlers->size(); _t14354++) {
            FriendConnectedNotificationHandler* _i14375 = (*FriendConnectedNotificationHandlers)[_t14354];
            (*_i14375)((FriendConnectedNotification*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == FriendDisconnectedNotification::serializerID) {
        for (unsigned int _u6237 = 0; _u6237 < (unsigned int)globalListeners->size(); _u6237++) {
            NuggetaMessageListener* _t6238 = (*globalListeners)[_u6237];
            _t6238->onFriendDisconnectedNotification((FriendDisconnectedNotification*)message);
            continue;
        }
        for (unsigned int _k14356 = 0; _k14356 < (unsigned int)FriendDisconnectedNotificationHandlers->size(); _k14356++) {
            FriendDisconnectedNotificationHandler* _b14379 = (*FriendDisconnectedNotificationHandlers)[_k14356];
            (*_b14379)((FriendDisconnectedNotification*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == NuggetaException::serializerID) {
        for (unsigned int _b6241 = 0; _b6241 < (unsigned int)globalListeners->size(); _b6241++) {
            NuggetaMessageListener* _w14357 = (*globalListeners)[_b6241];
            _w14357->onNuggetaException((NuggetaException*)message);
            continue;
        }
        for (unsigned int _m14358 = 0; _m14358 < (unsigned int)NuggetaExceptionHandlers->size(); _m14358++) {
            NuggetaExceptionHandler* _w14383 = (*NuggetaExceptionHandlers)[_m14358];
            (*_w14383)((NuggetaException*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == OpenConnection::serializerID) {
        for (unsigned int _w6245 = 0; _w6245 < (unsigned int)globalListeners->size(); _w6245++) {
            NuggetaMessageListener* _p6246 = (*globalListeners)[_w6245];
            _p6246->onOpenConnection((OpenConnection*)message);
            continue;
        }
        for (unsigned int _q14360 = 0; _q14360 < (unsigned int)OpenConnectionHandlers->size(); _q14360++) {
            OpenConnectionHandler* _e14387 = (*OpenConnectionHandlers)[_q14360];
            (*_e14387)((OpenConnection*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == NRawMessage::serializerID) {
        for (unsigned int _c6249 = 0; _c6249 < (unsigned int)globalListeners->size(); _c6249++) {
            NuggetaMessageListener* _l14361 = (*globalListeners)[_c6249];
            _l14361->onRawMessage((NRawMessage*)message);
            continue;
        }
        for (unsigned int _i14362 = 0; _i14362 < (unsigned int)RawMessageHandlers->size(); _i14362++) {
            RawMessageHandler* _r14391 = (*RawMessageHandlers)[_i14362];
            (*_r14391)((NRawMessage*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SessionExpired::serializerID) {
        for (unsigned int _f6253 = 0; _f6253 < (unsigned int)globalListeners->size(); _f6253++) {
            NuggetaMessageListener* _f6254 = (*globalListeners)[_f6253];
            _f6254->onSessionExpired((SessionExpired*)message);
            continue;
        }
        for (unsigned int _y14364 = 0; _y14364 < (unsigned int)SessionExpiredHandlers->size(); _y14364++) {
            SessionExpiredHandler* _h14395 = (*SessionExpiredHandlers)[_y14364];
            (*_h14395)((SessionExpired*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GameMessageError::serializerID) {
        for (unsigned int _d6257 = 0; _d6257 < (unsigned int)globalListeners->size(); _d6257++) {
            NuggetaMessageListener* _g14365 = (*globalListeners)[_d6257];
            _g14365->onGameMessageError((GameMessageError*)message);
            continue;
        }
        for (unsigned int _w14366 = 0; _w14366 < (unsigned int)GameMessageErrorHandlers->size(); _w14366++) {
            GameMessageErrorHandler* _n14399 = (*GameMessageErrorHandlers)[_w14366];
            (*_n14399)((GameMessageError*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == FriendDemandNotification::serializerID) {
        for (unsigned int _p6261 = 0; _p6261 < (unsigned int)globalListeners->size(); _p6261++) {
            NuggetaMessageListener* _n6262 = (*globalListeners)[_p6261];
            _n6262->onFriendDemandNotification((FriendDemandNotification*)message);
            continue;
        }
        for (unsigned int _c14368 = 0; _c14368 < (unsigned int)FriendDemandNotificationHandlers->size(); _c14368++) {
            FriendDemandNotificationHandler* _x14403 = (*FriendDemandNotificationHandlers)[_c14368];
            (*_x14403)((FriendDemandNotification*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == MyTurnNotification::serializerID) {
        for (unsigned int _b6265 = 0; _b6265 < (unsigned int)globalListeners->size(); _b6265++) {
            NuggetaMessageListener* _i14369 = (*globalListeners)[_b6265];
            _i14369->onMyTurnNotification((MyTurnNotification*)message);
            continue;
        }
        for (unsigned int _f14370 = 0; _f14370 < (unsigned int)MyTurnNotificationHandlers->size(); _f14370++) {
            MyTurnNotificationHandler* _j14407 = (*MyTurnNotificationHandlers)[_f14370];
            (*_j14407)((MyTurnNotification*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == PlayerTurnNotification::serializerID) {
        for (unsigned int _q6269 = 0; _q6269 < (unsigned int)globalListeners->size(); _q6269++) {
            NuggetaMessageListener* _t6270 = (*globalListeners)[_q6269];
            _t6270->onPlayerTurnNotification((PlayerTurnNotification*)message);
            continue;
        }
        for (unsigned int _o14372 = 0; _o14372 < (unsigned int)PlayerTurnNotificationHandlers->size(); _o14372++) {
            PlayerTurnNotificationHandler* _t14411 = (*PlayerTurnNotificationHandlers)[_o14372];
            (*_t14411)((PlayerTurnNotification*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == StartResponse::serializerID) {
        for (unsigned int _g6273 = 0; _g6273 < (unsigned int)globalListeners->size(); _g6273++) {
            NuggetaMessageListener* _w14373 = (*globalListeners)[_g6273];
            _w14373->onStartResponse((StartResponse*)message);
            continue;
        }
        for (unsigned int _r14374 = 0; _r14374 < (unsigned int)StartResponseHandlers->size(); _r14374++) {
            StartResponseHandler* _d14415 = (*StartResponseHandlers)[_r14374];
            (*_d14415)((StartResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == AskForFriendResponse::serializerID) {
        for (unsigned int _a6277 = 0; _a6277 < (unsigned int)globalListeners->size(); _a6277++) {
            NuggetaMessageListener* _k6278 = (*globalListeners)[_a6277];
            _k6278->onAskForFriendResponse((AskForFriendResponse*)message);
            continue;
        }
        for (unsigned int _d14376 = 0; _d14376 < (unsigned int)AskForFriendResponseHandlers->size(); _d14376++) {
            AskForFriendResponseHandler* _e14419 = (*AskForFriendResponseHandlers)[_d14376];
            (*_e14419)((AskForFriendResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SignUpResponse::serializerID) {
        for (unsigned int _f6281 = 0; _f6281 < (unsigned int)globalListeners->size(); _f6281++) {
            NuggetaMessageListener* _x14377 = (*globalListeners)[_f6281];
            _x14377->onSignUpResponse((SignUpResponse*)message);
            continue;
        }
        for (unsigned int _g14378 = 0; _g14378 < (unsigned int)SignUpResponseHandlers->size(); _g14378++) {
            SignUpResponseHandler* _y14423 = (*SignUpResponseHandlers)[_g14378];
            (*_y14423)((SignUpResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == LoginResponse::serializerID) {
        for (unsigned int _m6285 = 0; _m6285 < (unsigned int)globalListeners->size(); _m6285++) {
            NuggetaMessageListener* _l6286 = (*globalListeners)[_m6285];
            _l6286->onLoginResponse((LoginResponse*)message);
            continue;
        }
        for (unsigned int _y14380 = 0; _y14380 < (unsigned int)LoginResponseHandlers->size(); _y14380++) {
            LoginResponseHandler* _u14427 = (*LoginResponseHandlers)[_y14380];
            (*_u14427)((LoginResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SavePlayerProfileResponse::serializerID) {
        for (unsigned int _x6289 = 0; _x6289 < (unsigned int)globalListeners->size(); _x6289++) {
            NuggetaMessageListener* _v14381 = (*globalListeners)[_x6289];
            _v14381->onSavePlayerProfileResponse((SavePlayerProfileResponse*)message);
            continue;
        }
        for (unsigned int _b14382 = 0; _b14382 < (unsigned int)SavePlayerProfileResponseHandlers->size(); _b14382++) {
            SavePlayerProfileResponseHandler* _t14431 = (*SavePlayerProfileResponseHandlers)[_b14382];
            (*_t14431)((SavePlayerProfileResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetPlayerProfileResponse::serializerID) {
        for (unsigned int _s6293 = 0; _s6293 < (unsigned int)globalListeners->size(); _s6293++) {
            NuggetaMessageListener* _t6294 = (*globalListeners)[_s6293];
            _t6294->onGetPlayerProfileResponse((GetPlayerProfileResponse*)message);
            continue;
        }
        for (unsigned int _m14384 = 0; _m14384 < (unsigned int)GetPlayerProfileResponseHandlers->size(); _m14384++) {
            GetPlayerProfileResponseHandler* _r14435 = (*GetPlayerProfileResponseHandlers)[_m14384];
            (*_r14435)((GetPlayerProfileResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == LogoutResponse::serializerID) {
        for (unsigned int _t6297 = 0; _t6297 < (unsigned int)globalListeners->size(); _t6297++) {
            NuggetaMessageListener* _v14385 = (*globalListeners)[_t6297];
            _v14385->onLogoutResponse((LogoutResponse*)message);
            continue;
        }
        for (unsigned int _v14386 = 0; _v14386 < (unsigned int)LogoutResponseHandlers->size(); _v14386++) {
            LogoutResponseHandler* _s14439 = (*LogoutResponseHandlers)[_v14386];
            (*_s14439)((LogoutResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetFriendsResponse::serializerID) {
        for (unsigned int _o6301 = 0; _o6301 < (unsigned int)globalListeners->size(); _o6301++) {
            NuggetaMessageListener* _b6302 = (*globalListeners)[_o6301];
            _b6302->onGetFriendsResponse((GetFriendsResponse*)message);
            continue;
        }
        for (unsigned int _a14388 = 0; _a14388 < (unsigned int)GetFriendsResponseHandlers->size(); _a14388++) {
            GetFriendsResponseHandler* _s14443 = (*GetFriendsResponseHandlers)[_a14388];
            (*_s14443)((GetFriendsResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetThirdPartyFriendsResponse::serializerID) {
        for (unsigned int _y6305 = 0; _y6305 < (unsigned int)globalListeners->size(); _y6305++) {
            NuggetaMessageListener* _h14389 = (*globalListeners)[_y6305];
            _h14389->onGetThirdPartyFriendsResponse((GetThirdPartyFriendsResponse*)message);
            continue;
        }
        for (unsigned int _x14390 = 0; _x14390 < (unsigned int)GetThirdPartyFriendsResponseHandlers->size(); _x14390++) {
            GetThirdPartyFriendsResponseHandler* _p14447 = (*GetThirdPartyFriendsResponseHandlers)[_x14390];
            (*_p14447)((GetThirdPartyFriendsResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetFriendDemandsResponse::serializerID) {
        for (unsigned int _k6309 = 0; _k6309 < (unsigned int)globalListeners->size(); _k6309++) {
            NuggetaMessageListener* _h6310 = (*globalListeners)[_k6309];
            _h6310->onGetFriendDemandsResponse((GetFriendDemandsResponse*)message);
            continue;
        }
        for (unsigned int _w14392 = 0; _w14392 < (unsigned int)GetFriendDemandsResponseHandlers->size(); _w14392++) {
            GetFriendDemandsResponseHandler* _y14451 = (*GetFriendDemandsResponseHandlers)[_w14392];
            (*_y14451)((GetFriendDemandsResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == AcceptFriendDemandResponse::serializerID) {
        for (unsigned int _w6313 = 0; _w6313 < (unsigned int)globalListeners->size(); _w6313++) {
            NuggetaMessageListener* _j14393 = (*globalListeners)[_w6313];
            _j14393->onAcceptFriendDemandResponse((AcceptFriendDemandResponse*)message);
            continue;
        }
        for (unsigned int _h14394 = 0; _h14394 < (unsigned int)AcceptFriendDemandResponseHandlers->size(); _h14394++) {
            AcceptFriendDemandResponseHandler* _t14455 = (*AcceptFriendDemandResponseHandlers)[_h14394];
            (*_t14455)((AcceptFriendDemandResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == RefuseFriendDemandResponse::serializerID) {
        for (unsigned int _k6317 = 0; _k6317 < (unsigned int)globalListeners->size(); _k6317++) {
            NuggetaMessageListener* _v6318 = (*globalListeners)[_k6317];
            _v6318->onRefuseFriendDemandResponse((RefuseFriendDemandResponse*)message);
            continue;
        }
        for (unsigned int _q14396 = 0; _q14396 < (unsigned int)RefuseFriendDemandResponseHandlers->size(); _q14396++) {
            RefuseFriendDemandResponseHandler* _l14459 = (*RefuseFriendDemandResponseHandlers)[_q14396];
            (*_l14459)((RefuseFriendDemandResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SubmitScoreResponse::serializerID) {
        for (unsigned int _r6321 = 0; _r6321 < (unsigned int)globalListeners->size(); _r6321++) {
            NuggetaMessageListener* _y14397 = (*globalListeners)[_r6321];
            _y14397->onSubmitScoreResponse((SubmitScoreResponse*)message);
            continue;
        }
        for (unsigned int _o14398 = 0; _o14398 < (unsigned int)SubmitScoreResponseHandlers->size(); _o14398++) {
            SubmitScoreResponseHandler* _f14463 = (*SubmitScoreResponseHandlers)[_o14398];
            (*_f14463)((SubmitScoreResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetLeaderboardResponse::serializerID) {
        for (unsigned int _c6325 = 0; _c6325 < (unsigned int)globalListeners->size(); _c6325++) {
            NuggetaMessageListener* _o6326 = (*globalListeners)[_c6325];
            _o6326->onGetLeaderboardResponse((GetLeaderboardResponse*)message);
            continue;
        }
        for (unsigned int _g14400 = 0; _g14400 < (unsigned int)GetLeaderboardResponseHandlers->size(); _g14400++) {
            GetLeaderboardResponseHandler* _i14467 = (*GetLeaderboardResponseHandlers)[_g14400];
            (*_i14467)((GetLeaderboardResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == BuyItemResponse::serializerID) {
        for (unsigned int _q6329 = 0; _q6329 < (unsigned int)globalListeners->size(); _q6329++) {
            NuggetaMessageListener* _r14401 = (*globalListeners)[_q6329];
            _r14401->onBuyItemResponse((BuyItemResponse*)message);
            continue;
        }
        for (unsigned int _s14402 = 0; _s14402 < (unsigned int)BuyItemResponseHandlers->size(); _s14402++) {
            BuyItemResponseHandler* _e14471 = (*BuyItemResponseHandlers)[_s14402];
            (*_e14471)((BuyItemResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetStoreResponse::serializerID) {
        for (unsigned int _q6333 = 0; _q6333 < (unsigned int)globalListeners->size(); _q6333++) {
            NuggetaMessageListener* _x6334 = (*globalListeners)[_q6333];
            _x6334->onGetStoreResponse((GetStoreResponse*)message);
            continue;
        }
        for (unsigned int _p14404 = 0; _p14404 < (unsigned int)GetStoreResponseHandlers->size(); _p14404++) {
            GetStoreResponseHandler* _t14475 = (*GetStoreResponseHandlers)[_p14404];
            (*_t14475)((GetStoreResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == ConsumeItemResponse::serializerID) {
        for (unsigned int _h6337 = 0; _h6337 < (unsigned int)globalListeners->size(); _h6337++) {
            NuggetaMessageListener* _v14405 = (*globalListeners)[_h6337];
            _v14405->onConsumeItemResponse((ConsumeItemResponse*)message);
            continue;
        }
        for (unsigned int _n14406 = 0; _n14406 < (unsigned int)ConsumeItemResponseHandlers->size(); _n14406++) {
            ConsumeItemResponseHandler* _f14479 = (*ConsumeItemResponseHandlers)[_n14406];
            (*_f14479)((ConsumeItemResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == IncreasePlayerWalletResponse::serializerID) {
        for (unsigned int _j6341 = 0; _j6341 < (unsigned int)globalListeners->size(); _j6341++) {
            NuggetaMessageListener* _g6342 = (*globalListeners)[_j6341];
            _g6342->onIncreasePlayerWalletResponse((IncreasePlayerWalletResponse*)message);
            continue;
        }
        for (unsigned int _g14408 = 0; _g14408 < (unsigned int)IncreasePlayerWalletResponseHandlers->size(); _g14408++) {
            IncreasePlayerWalletResponseHandler* _i14483 = (*IncreasePlayerWalletResponseHandlers)[_g14408];
            (*_i14483)((IncreasePlayerWalletResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetPlayerWalletResponse::serializerID) {
        for (unsigned int _u6345 = 0; _u6345 < (unsigned int)globalListeners->size(); _u6345++) {
            NuggetaMessageListener* _e14409 = (*globalListeners)[_u6345];
            _e14409->onGetPlayerWalletResponse((GetPlayerWalletResponse*)message);
            continue;
        }
        for (unsigned int _b14410 = 0; _b14410 < (unsigned int)GetPlayerWalletResponseHandlers->size(); _b14410++) {
            GetPlayerWalletResponseHandler* _c14487 = (*GetPlayerWalletResponseHandlers)[_b14410];
            (*_c14487)((GetPlayerWalletResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetAchievementBoardResponse::serializerID) {
        for (unsigned int _w6349 = 0; _w6349 < (unsigned int)globalListeners->size(); _w6349++) {
            NuggetaMessageListener* _h6350 = (*globalListeners)[_w6349];
            _h6350->onGetAchievementBoardResponse((GetAchievementBoardResponse*)message);
            continue;
        }
        for (unsigned int _n14412 = 0; _n14412 < (unsigned int)GetAchievementBoardResponseHandlers->size(); _n14412++) {
            GetAchievementBoardResponseHandler* _i14491 = (*GetAchievementBoardResponseHandlers)[_n14412];
            (*_i14491)((GetAchievementBoardResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == AchieveResponse::serializerID) {
        for (unsigned int _n6353 = 0; _n6353 < (unsigned int)globalListeners->size(); _n6353++) {
            NuggetaMessageListener* _q14413 = (*globalListeners)[_n6353];
            _q14413->onAchieveResponse((AchieveResponse*)message);
            continue;
        }
        for (unsigned int _k14414 = 0; _k14414 < (unsigned int)AchieveResponseHandlers->size(); _k14414++) {
            AchieveResponseHandler* _b14495 = (*AchieveResponseHandlers)[_k14414];
            (*_b14495)((AchieveResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SearchImmediateGameResponse::serializerID) {
        for (unsigned int _o6357 = 0; _o6357 < (unsigned int)globalListeners->size(); _o6357++) {
            NuggetaMessageListener* _q6358 = (*globalListeners)[_o6357];
            _q6358->onSearchImmediateGameResponse((SearchImmediateGameResponse*)message);
            continue;
        }
        for (unsigned int _b14416 = 0; _b14416 < (unsigned int)SearchImmediateGameResponseHandlers->size(); _b14416++) {
            SearchImmediateGameResponseHandler* _i14499 = (*SearchImmediateGameResponseHandlers)[_b14416];
            (*_i14499)((SearchImmediateGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == JoinGameResponse::serializerID) {
        for (unsigned int _f6361 = 0; _f6361 < (unsigned int)globalListeners->size(); _f6361++) {
            NuggetaMessageListener* _t14417 = (*globalListeners)[_f6361];
            _t14417->onJoinGameResponse((JoinGameResponse*)message);
            continue;
        }
        for (unsigned int _b14418 = 0; _b14418 < (unsigned int)JoinGameResponseHandlers->size(); _b14418++) {
            JoinGameResponseHandler* _k14503 = (*JoinGameResponseHandlers)[_b14418];
            (*_k14503)((JoinGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == UnjoinGameResponse::serializerID) {
        for (unsigned int _x6365 = 0; _x6365 < (unsigned int)globalListeners->size(); _x6365++) {
            NuggetaMessageListener* _c6366 = (*globalListeners)[_x6365];
            _c6366->onUnjoinGameResponse((UnjoinGameResponse*)message);
            continue;
        }
        for (unsigned int _j14420 = 0; _j14420 < (unsigned int)UnjoinGameResponseHandlers->size(); _j14420++) {
            UnjoinGameResponseHandler* _o14507 = (*UnjoinGameResponseHandlers)[_j14420];
            (*_o14507)((UnjoinGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == StartGameResponse::serializerID) {
        for (unsigned int _f6369 = 0; _f6369 < (unsigned int)globalListeners->size(); _f6369++) {
            NuggetaMessageListener* _l14421 = (*globalListeners)[_f6369];
            _l14421->onStartGameResponse((StartGameResponse*)message);
            continue;
        }
        for (unsigned int _m14422 = 0; _m14422 < (unsigned int)StartGameResponseHandlers->size(); _m14422++) {
            StartGameResponseHandler* _u14511 = (*StartGameResponseHandlers)[_m14422];
            (*_u14511)((StartGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == StopGameResponse::serializerID) {
        for (unsigned int _f6373 = 0; _f6373 < (unsigned int)globalListeners->size(); _f6373++) {
            NuggetaMessageListener* _q6374 = (*globalListeners)[_f6373];
            _q6374->onStopGameResponse((StopGameResponse*)message);
            continue;
        }
        for (unsigned int _d14424 = 0; _d14424 < (unsigned int)StopGameResponseHandlers->size(); _d14424++) {
            StopGameResponseHandler* _d14515 = (*StopGameResponseHandlers)[_d14424];
            (*_d14515)((StopGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == CreateGameResponse::serializerID) {
        for (unsigned int _q6377 = 0; _q6377 < (unsigned int)globalListeners->size(); _q6377++) {
            NuggetaMessageListener* _h14425 = (*globalListeners)[_q6377];
            _h14425->onCreateGameResponse((CreateGameResponse*)message);
            continue;
        }
        for (unsigned int _i14426 = 0; _i14426 < (unsigned int)CreateGameResponseHandlers->size(); _i14426++) {
            CreateGameResponseHandler* _o14519 = (*CreateGameResponseHandlers)[_i14426];
            (*_o14519)((CreateGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetGamesResponse::serializerID) {
        for (unsigned int _y6381 = 0; _y6381 < (unsigned int)globalListeners->size(); _y6381++) {
            NuggetaMessageListener* _w6382 = (*globalListeners)[_y6381];
            _w6382->onGetGamesResponse((GetGamesResponse*)message);
            continue;
        }
        for (unsigned int _w14428 = 0; _w14428 < (unsigned int)GetGamesResponseHandlers->size(); _w14428++) {
            GetGamesResponseHandler* _t14523 = (*GetGamesResponseHandlers)[_w14428];
            (*_t14523)((GetGamesResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SaveAsGhostResponse::serializerID) {
        for (unsigned int _u6385 = 0; _u6385 < (unsigned int)globalListeners->size(); _u6385++) {
            NuggetaMessageListener* _n14429 = (*globalListeners)[_u6385];
            _n14429->onSaveAsGhostResponse((SaveAsGhostResponse*)message);
            continue;
        }
        for (unsigned int _e14430 = 0; _e14430 < (unsigned int)SaveAsGhostResponseHandlers->size(); _e14430++) {
            SaveAsGhostResponseHandler* _c14527 = (*SaveAsGhostResponseHandlers)[_e14430];
            (*_c14527)((SaveAsGhostResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetGhostsResponse::serializerID) {
        for (unsigned int _h6389 = 0; _h6389 < (unsigned int)globalListeners->size(); _h6389++) {
            NuggetaMessageListener* _s6390 = (*globalListeners)[_h6389];
            _s6390->onGetGhostsResponse((GetGhostsResponse*)message);
            continue;
        }
        for (unsigned int _n14432 = 0; _n14432 < (unsigned int)GetGhostsResponseHandlers->size(); _n14432++) {
            GetGhostsResponseHandler* _k14531 = (*GetGhostsResponseHandlers)[_n14432];
            (*_k14531)((GetGhostsResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == LoadGhostResponse::serializerID) {
        for (unsigned int _s6393 = 0; _s6393 < (unsigned int)globalListeners->size(); _s6393++) {
            NuggetaMessageListener* _j14433 = (*globalListeners)[_s6393];
            _j14433->onLoadGhostResponse((LoadGhostResponse*)message);
            continue;
        }
        for (unsigned int _l14434 = 0; _l14434 < (unsigned int)LoadGhostResponseHandlers->size(); _l14434++) {
            LoadGhostResponseHandler* _d14535 = (*LoadGhostResponseHandlers)[_l14434];
            (*_d14535)((LoadGhostResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SendGameChatResponse::serializerID) {
        for (unsigned int _m6397 = 0; _m6397 < (unsigned int)globalListeners->size(); _m6397++) {
            NuggetaMessageListener* _h6398 = (*globalListeners)[_m6397];
            _h6398->onSendGameChatResponse((SendGameChatResponse*)message);
            continue;
        }
        for (unsigned int _j14436 = 0; _j14436 < (unsigned int)SendGameChatResponseHandlers->size(); _j14436++) {
            SendGameChatResponseHandler* _d14539 = (*SendGameChatResponseHandlers)[_j14436];
            (*_d14539)((SendGameChatResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetStorablesResponse::serializerID) {
        for (unsigned int _o6401 = 0; _o6401 < (unsigned int)globalListeners->size(); _o6401++) {
            NuggetaMessageListener* _x14437 = (*globalListeners)[_o6401];
            _x14437->onGetStorablesResponse((GetStorablesResponse*)message);
            continue;
        }
        for (unsigned int _c14438 = 0; _c14438 < (unsigned int)GetStorablesResponseHandlers->size(); _c14438++) {
            GetStorablesResponseHandler* _e14543 = (*GetStorablesResponseHandlers)[_c14438];
            (*_e14543)((GetStorablesResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SaveStorableResponse::serializerID) {
        for (unsigned int _u6405 = 0; _u6405 < (unsigned int)globalListeners->size(); _u6405++) {
            NuggetaMessageListener* _r6406 = (*globalListeners)[_u6405];
            _r6406->onSaveStorableResponse((SaveStorableResponse*)message);
            continue;
        }
        for (unsigned int _i14440 = 0; _i14440 < (unsigned int)SaveStorableResponseHandlers->size(); _i14440++) {
            SaveStorableResponseHandler* _m14547 = (*SaveStorableResponseHandlers)[_i14440];
            (*_m14547)((SaveStorableResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == NextPlayerTurnResponse::serializerID) {
        for (unsigned int _i6409 = 0; _i6409 < (unsigned int)globalListeners->size(); _i6409++) {
            NuggetaMessageListener* _x14441 = (*globalListeners)[_i6409];
            _x14441->onNextPlayerTurnResponse((NextPlayerTurnResponse*)message);
            continue;
        }
        for (unsigned int _a14442 = 0; _a14442 < (unsigned int)NextPlayerTurnResponseHandlers->size(); _a14442++) {
            NextPlayerTurnResponseHandler* _a14551 = (*NextPlayerTurnResponseHandlers)[_a14442];
            (*_a14551)((NextPlayerTurnResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SetPlayerNameResponse::serializerID) {
        for (unsigned int _g6413 = 0; _g6413 < (unsigned int)globalListeners->size(); _g6413++) {
            NuggetaMessageListener* _h6414 = (*globalListeners)[_g6413];
            _h6414->onSetPlayerNameResponse((SetPlayerNameResponse*)message);
            continue;
        }
        for (unsigned int _s14444 = 0; _s14444 < (unsigned int)SetPlayerNameResponseHandlers->size(); _s14444++) {
            SetPlayerNameResponseHandler* _k14555 = (*SetPlayerNameResponseHandlers)[_s14444];
            (*_k14555)((SetPlayerNameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == UpdateStorableResponse::serializerID) {
        for (unsigned int _x6417 = 0; _x6417 < (unsigned int)globalListeners->size(); _x6417++) {
            NuggetaMessageListener* _b14445 = (*globalListeners)[_x6417];
            _b14445->onUpdateStorableResponse((UpdateStorableResponse*)message);
            continue;
        }
        for (unsigned int _r14446 = 0; _r14446 < (unsigned int)UpdateStorableResponseHandlers->size(); _r14446++) {
            UpdateStorableResponseHandler* _c14559 = (*UpdateStorableResponseHandlers)[_r14446];
            (*_c14559)((UpdateStorableResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == RemoveStorableResponse::serializerID) {
        for (unsigned int _f6421 = 0; _f6421 < (unsigned int)globalListeners->size(); _f6421++) {
            NuggetaMessageListener* _i6422 = (*globalListeners)[_f6421];
            _i6422->onRemoveStorableResponse((RemoveStorableResponse*)message);
            continue;
        }
        for (unsigned int _t14448 = 0; _t14448 < (unsigned int)RemoveStorableResponseHandlers->size(); _t14448++) {
            RemoveStorableResponseHandler* _l14563 = (*RemoveStorableResponseHandlers)[_t14448];
            (*_l14563)((RemoveStorableResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == InviteThirdPartyFriendResponse::serializerID) {
        for (unsigned int _l6425 = 0; _l6425 < (unsigned int)globalListeners->size(); _l6425++) {
            NuggetaMessageListener* _g14449 = (*globalListeners)[_l6425];
            _g14449->onInviteThirdPartyFriendResponse((InviteThirdPartyFriendResponse*)message);
            continue;
        }
        for (unsigned int _g14450 = 0; _g14450 < (unsigned int)InviteThirdPartyFriendResponseHandlers->size(); _g14450++) {
            InviteThirdPartyFriendResponseHandler* _e14567 = (*InviteThirdPartyFriendResponseHandlers)[_g14450];
            (*_e14567)((InviteThirdPartyFriendResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == PublishThirdPartyMessageResponse::serializerID) {
        for (unsigned int _l6429 = 0; _l6429 < (unsigned int)globalListeners->size(); _l6429++) {
            NuggetaMessageListener* _u6430 = (*globalListeners)[_l6429];
            _u6430->onPublishThirdPartyMessageResponse((PublishThirdPartyMessageResponse*)message);
            continue;
        }
        for (unsigned int _z14452 = 0; _z14452 < (unsigned int)PublishThirdPartyMessageResponseHandlers->size(); _z14452++) {
            PublishThirdPartyMessageResponseHandler* _i14571 = (*PublishThirdPartyMessageResponseHandlers)[_z14452];
            (*_i14571)((PublishThirdPartyMessageResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == ThirdPartyLoginResponse::serializerID) {
        for (unsigned int _u6433 = 0; _u6433 < (unsigned int)globalListeners->size(); _u6433++) {
            NuggetaMessageListener* _d14453 = (*globalListeners)[_u6433];
            _d14453->onThirdPartyLoginResponse((ThirdPartyLoginResponse*)message);
            continue;
        }
        for (unsigned int _h14454 = 0; _h14454 < (unsigned int)ThirdPartyLoginResponseHandlers->size(); _h14454++) {
            ThirdPartyLoginResponseHandler* _a14575 = (*ThirdPartyLoginResponseHandlers)[_h14454];
            (*_a14575)((ThirdPartyLoginResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SaveGameResponse::serializerID) {
        for (unsigned int _u6437 = 0; _u6437 < (unsigned int)globalListeners->size(); _u6437++) {
            NuggetaMessageListener* _s6438 = (*globalListeners)[_u6437];
            _s6438->onSaveGameResponse((SaveGameResponse*)message);
            continue;
        }
        for (unsigned int _g14456 = 0; _g14456 < (unsigned int)SaveGameResponseHandlers->size(); _g14456++) {
            SaveGameResponseHandler* _i14579 = (*SaveGameResponseHandlers)[_g14456];
            (*_i14579)((SaveGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == LoadGameResponse::serializerID) {
        for (unsigned int _e6441 = 0; _e6441 < (unsigned int)globalListeners->size(); _e6441++) {
            NuggetaMessageListener* _t14457 = (*globalListeners)[_e6441];
            _t14457->onLoadGameResponse((LoadGameResponse*)message);
            continue;
        }
        for (unsigned int _v14458 = 0; _v14458 < (unsigned int)LoadGameResponseHandlers->size(); _v14458++) {
            LoadGameResponseHandler* _h14583 = (*LoadGameResponseHandlers)[_v14458];
            (*_h14583)((LoadGameResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == SavePlayerStorableResponse::serializerID) {
        for (unsigned int _r6445 = 0; _r6445 < (unsigned int)globalListeners->size(); _r6445++) {
            NuggetaMessageListener* _m6446 = (*globalListeners)[_r6445];
            _m6446->onSavePlayerStorableResponse((SavePlayerStorableResponse*)message);
            continue;
        }
        for (unsigned int _k14460 = 0; _k14460 < (unsigned int)SavePlayerStorableResponseHandlers->size(); _k14460++) {
            SavePlayerStorableResponseHandler* _f14587 = (*SavePlayerStorableResponseHandlers)[_k14460];
            (*_f14587)((SavePlayerStorableResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == UpdatePlayerStorableResponse::serializerID) {
        for (unsigned int _q6449 = 0; _q6449 < (unsigned int)globalListeners->size(); _q6449++) {
            NuggetaMessageListener* _m14461 = (*globalListeners)[_q6449];
            _m14461->onUpdatePlayerStorableResponse((UpdatePlayerStorableResponse*)message);
            continue;
        }
        for (unsigned int _w14462 = 0; _w14462 < (unsigned int)UpdatePlayerStorableResponseHandlers->size(); _w14462++) {
            UpdatePlayerStorableResponseHandler* _n14591 = (*UpdatePlayerStorableResponseHandlers)[_w14462];
            (*_n14591)((UpdatePlayerStorableResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == RemovePlayerStorableResponse::serializerID) {
        for (unsigned int _o6453 = 0; _o6453 < (unsigned int)globalListeners->size(); _o6453++) {
            NuggetaMessageListener* _u6454 = (*globalListeners)[_o6453];
            _u6454->onRemovePlayerStorableResponse((RemovePlayerStorableResponse*)message);
            continue;
        }
        for (unsigned int _p14464 = 0; _p14464 < (unsigned int)RemovePlayerStorableResponseHandlers->size(); _p14464++) {
            RemovePlayerStorableResponseHandler* _o14595 = (*RemovePlayerStorableResponseHandlers)[_p14464];
            (*_o14595)((RemovePlayerStorableResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetPlayerStorablesResponse::serializerID) {
        for (unsigned int _y6457 = 0; _y6457 < (unsigned int)globalListeners->size(); _y6457++) {
            NuggetaMessageListener* _p14465 = (*globalListeners)[_y6457];
            _p14465->onGetPlayerStorablesResponse((GetPlayerStorablesResponse*)message);
            continue;
        }
        for (unsigned int _j14466 = 0; _j14466 < (unsigned int)GetPlayerStorablesResponseHandlers->size(); _j14466++) {
            GetPlayerStorablesResponseHandler* _f14599 = (*GetPlayerStorablesResponseHandlers)[_j14466];
            (*_f14599)((GetPlayerStorablesResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == PauseSessionMonitoringResponse::serializerID) {
        for (unsigned int _k6461 = 0; _k6461 < (unsigned int)globalListeners->size(); _k6461++) {
            NuggetaMessageListener* _l6462 = (*globalListeners)[_k6461];
            _l6462->onPauseSessionMonitoringResponse((PauseSessionMonitoringResponse*)message);
            continue;
        }
        for (unsigned int _r14468 = 0; _r14468 < (unsigned int)PauseSessionMonitoringResponseHandlers->size(); _r14468++) {
            PauseSessionMonitoringResponseHandler* _d14603 = (*PauseSessionMonitoringResponseHandlers)[_r14468];
            (*_d14603)((PauseSessionMonitoringResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == ResumeSessionMonitoringResponse::serializerID) {
        for (unsigned int _n6465 = 0; _n6465 < (unsigned int)globalListeners->size(); _n6465++) {
            NuggetaMessageListener* _w14469 = (*globalListeners)[_n6465];
            _w14469->onResumeSessionMonitoringResponse((ResumeSessionMonitoringResponse*)message);
            continue;
        }
        for (unsigned int _l14470 = 0; _l14470 < (unsigned int)ResumeSessionMonitoringResponseHandlers->size(); _l14470++) {
            ResumeSessionMonitoringResponseHandler* _i14607 = (*ResumeSessionMonitoringResponseHandlers)[_l14470];
            (*_i14607)((ResumeSessionMonitoringResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == PublishFriendThirdPartyMessageResponse::serializerID) {
        for (unsigned int _p6469 = 0; _p6469 < (unsigned int)globalListeners->size(); _p6469++) {
            NuggetaMessageListener* _a6470 = (*globalListeners)[_p6469];
            _a6470->onPublishFriendThirdPartyMessageResponse((PublishFriendThirdPartyMessageResponse*)message);
            continue;
        }
        for (unsigned int _e14472 = 0; _e14472 < (unsigned int)PublishFriendThirdPartyMessageResponseHandlers->size(); _e14472++) {
            PublishFriendThirdPartyMessageResponseHandler* _z14611 = (*PublishFriendThirdPartyMessageResponseHandlers)[_e14472];
            (*_z14611)((PublishFriendThirdPartyMessageResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == InvitePlayerResponse::serializerID) {
        for (unsigned int _v6473 = 0; _v6473 < (unsigned int)globalListeners->size(); _v6473++) {
            NuggetaMessageListener* _c14473 = (*globalListeners)[_v6473];
            _c14473->onInvitePlayerResponse((InvitePlayerResponse*)message);
            continue;
        }
        for (unsigned int _h14474 = 0; _h14474 < (unsigned int)InvitePlayerResponseHandlers->size(); _h14474++) {
            InvitePlayerResponseHandler* _n14615 = (*InvitePlayerResponseHandlers)[_h14474];
            (*_n14615)((InvitePlayerResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == GetInvitationsResponse::serializerID) {
        for (unsigned int _p6477 = 0; _p6477 < (unsigned int)globalListeners->size(); _p6477++) {
            NuggetaMessageListener* _x6478 = (*globalListeners)[_p6477];
            _x6478->onGetInvitationsResponse((GetInvitationsResponse*)message);
            continue;
        }
        for (unsigned int _y14476 = 0; _y14476 < (unsigned int)GetInvitationsResponseHandlers->size(); _y14476++) {
            GetInvitationsResponseHandler* _l14619 = (*GetInvitationsResponseHandlers)[_y14476];
            (*_l14619)((GetInvitationsResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == AcceptInvitationResponse::serializerID) {
        for (unsigned int _e6481 = 0; _e6481 < (unsigned int)globalListeners->size(); _e6481++) {
            NuggetaMessageListener* _x14477 = (*globalListeners)[_e6481];
            _x14477->onAcceptInvitationResponse((AcceptInvitationResponse*)message);
            continue;
        }
        for (unsigned int _n14478 = 0; _n14478 < (unsigned int)AcceptInvitationResponseHandlers->size(); _n14478++) {
            AcceptInvitationResponseHandler* _n14623 = (*AcceptInvitationResponseHandlers)[_n14478];
            (*_n14623)((AcceptInvitationResponse*)message);
            continue;
        }
        return;
    }
    if (message->getSerializerID() == RefuseInvitationResponse::serializerID) {
        for (unsigned int _u6485 = 0; _u6485 < (unsigned int)globalListeners->size(); _u6485++) {
            NuggetaMessageListener* _s6486 = (*globalListeners)[_u6485];
            _s6486->onRefuseInvitationResponse((RefuseInvitationResponse*)message);
            continue;
        }
        for (unsigned int _i14626 = 0; _i14626 < (unsigned int)RefuseInvitationResponseHandlers->size(); _i14626++) {
            RefuseInvitationResponseHandler* _m14627 = (*RefuseInvitationResponseHandlers)[_i14626];
            (*_m14627)((RefuseInvitationResponse*)message);
            continue;
        }
        return;
    }
}

void NuggetaDispatcher::addNuggetaMessageListener(NuggetaMessageListener* listener) {
globalListeners->push_back(listener);
}

void NuggetaDispatcher::removeNuggetaMessageListener(NuggetaMessageListener* _p14625) {
globalListeners->erase(std::find(globalListeners->begin(), globalListeners->end(), _p14625));
}

void NuggetaDispatcher::addHandshakeResponseHandler(HandshakeResponseHandler* handler) {
HandshakeResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeHandshakeResponseHandler(HandshakeResponseHandler* handler) {
HandshakeResponseHandlers->erase(std::find(HandshakeResponseHandlers->begin(), HandshakeResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGameStateChangeHandler(GameStateChangeHandler* handler) {
GameStateChangeHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGameStateChangeHandler(GameStateChangeHandler* handler) {
GameStateChangeHandlers->erase(std::find(GameStateChangeHandlers->begin(), GameStateChangeHandlers->end(), handler));
}

void NuggetaDispatcher::addPlayerEnterGameHandler(PlayerEnterGameHandler* handler) {
PlayerEnterGameHandlers->push_back(handler);
}

void NuggetaDispatcher::removePlayerEnterGameHandler(PlayerEnterGameHandler* handler) {
PlayerEnterGameHandlers->erase(std::find(PlayerEnterGameHandlers->begin(), PlayerEnterGameHandlers->end(), handler));
}

void NuggetaDispatcher::addFriendshipNotificationHandler(FriendshipNotificationHandler* handler) {
FriendshipNotificationHandlers->push_back(handler);
}

void NuggetaDispatcher::removeFriendshipNotificationHandler(FriendshipNotificationHandler* handler) {
FriendshipNotificationHandlers->erase(std::find(FriendshipNotificationHandlers->begin(), FriendshipNotificationHandlers->end(), handler));
}

void NuggetaDispatcher::addPlayerUnjoinGameHandler(PlayerUnjoinGameHandler* handler) {
PlayerUnjoinGameHandlers->push_back(handler);
}

void NuggetaDispatcher::removePlayerUnjoinGameHandler(PlayerUnjoinGameHandler* handler) {
PlayerUnjoinGameHandlers->erase(std::find(PlayerUnjoinGameHandlers->begin(), PlayerUnjoinGameHandlers->end(), handler));
}

void NuggetaDispatcher::addConnectionLostHandler(ConnectionLostHandler* handler) {
ConnectionLostHandlers->push_back(handler);
}

void NuggetaDispatcher::removeConnectionLostHandler(ConnectionLostHandler* handler) {
ConnectionLostHandlers->erase(std::find(ConnectionLostHandlers->begin(), ConnectionLostHandlers->end(), handler));
}

void NuggetaDispatcher::addConnectionInterruptedHandler(ConnectionInterruptedHandler* handler) {
ConnectionInterruptedHandlers->push_back(handler);
}

void NuggetaDispatcher::removeConnectionInterruptedHandler(ConnectionInterruptedHandler* handler) {
ConnectionInterruptedHandlers->erase(std::find(ConnectionInterruptedHandlers->begin(), ConnectionInterruptedHandlers->end(), handler));
}

void NuggetaDispatcher::addConnectionResumedHandler(ConnectionResumedHandler* handler) {
ConnectionResumedHandlers->push_back(handler);
}

void NuggetaDispatcher::removeConnectionResumedHandler(ConnectionResumedHandler* handler) {
ConnectionResumedHandlers->erase(std::find(ConnectionResumedHandlers->begin(), ConnectionResumedHandlers->end(), handler));
}

void NuggetaDispatcher::addConnectionStopHandler(ConnectionStopHandler* handler) {
ConnectionStopHandlers->push_back(handler);
}

void NuggetaDispatcher::removeConnectionStopHandler(ConnectionStopHandler* handler) {
ConnectionStopHandlers->erase(std::find(ConnectionStopHandlers->begin(), ConnectionStopHandlers->end(), handler));
}

void NuggetaDispatcher::addFriendConnectedNotificationHandler(FriendConnectedNotificationHandler* handler) {
FriendConnectedNotificationHandlers->push_back(handler);
}

void NuggetaDispatcher::removeFriendConnectedNotificationHandler(FriendConnectedNotificationHandler* handler) {
FriendConnectedNotificationHandlers->erase(std::find(FriendConnectedNotificationHandlers->begin(), FriendConnectedNotificationHandlers->end(), handler));
}

void NuggetaDispatcher::addFriendDisconnectedNotificationHandler(FriendDisconnectedNotificationHandler* handler) {
FriendDisconnectedNotificationHandlers->push_back(handler);
}

void NuggetaDispatcher::removeFriendDisconnectedNotificationHandler(FriendDisconnectedNotificationHandler* handler) {
FriendDisconnectedNotificationHandlers->erase(std::find(FriendDisconnectedNotificationHandlers->begin(), FriendDisconnectedNotificationHandlers->end(), handler));
}

void NuggetaDispatcher::addNuggetaExceptionHandler(NuggetaExceptionHandler* handler) {
NuggetaExceptionHandlers->push_back(handler);
}

void NuggetaDispatcher::removeNuggetaExceptionHandler(NuggetaExceptionHandler* handler) {
NuggetaExceptionHandlers->erase(std::find(NuggetaExceptionHandlers->begin(), NuggetaExceptionHandlers->end(), handler));
}

void NuggetaDispatcher::addOpenConnectionHandler(OpenConnectionHandler* handler) {
OpenConnectionHandlers->push_back(handler);
}

void NuggetaDispatcher::removeOpenConnectionHandler(OpenConnectionHandler* handler) {
OpenConnectionHandlers->erase(std::find(OpenConnectionHandlers->begin(), OpenConnectionHandlers->end(), handler));
}

void NuggetaDispatcher::addRawMessageHandler(RawMessageHandler* handler) {
RawMessageHandlers->push_back(handler);
}

void NuggetaDispatcher::removeRawMessageHandler(RawMessageHandler* handler) {
RawMessageHandlers->erase(std::find(RawMessageHandlers->begin(), RawMessageHandlers->end(), handler));
}

void NuggetaDispatcher::addSessionExpiredHandler(SessionExpiredHandler* handler) {
SessionExpiredHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSessionExpiredHandler(SessionExpiredHandler* handler) {
SessionExpiredHandlers->erase(std::find(SessionExpiredHandlers->begin(), SessionExpiredHandlers->end(), handler));
}

void NuggetaDispatcher::addGameMessageErrorHandler(GameMessageErrorHandler* handler) {
GameMessageErrorHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGameMessageErrorHandler(GameMessageErrorHandler* handler) {
GameMessageErrorHandlers->erase(std::find(GameMessageErrorHandlers->begin(), GameMessageErrorHandlers->end(), handler));
}

void NuggetaDispatcher::addFriendDemandNotificationHandler(FriendDemandNotificationHandler* handler) {
FriendDemandNotificationHandlers->push_back(handler);
}

void NuggetaDispatcher::removeFriendDemandNotificationHandler(FriendDemandNotificationHandler* handler) {
FriendDemandNotificationHandlers->erase(std::find(FriendDemandNotificationHandlers->begin(), FriendDemandNotificationHandlers->end(), handler));
}

void NuggetaDispatcher::addMyTurnNotificationHandler(MyTurnNotificationHandler* handler) {
MyTurnNotificationHandlers->push_back(handler);
}

void NuggetaDispatcher::removeMyTurnNotificationHandler(MyTurnNotificationHandler* handler) {
MyTurnNotificationHandlers->erase(std::find(MyTurnNotificationHandlers->begin(), MyTurnNotificationHandlers->end(), handler));
}

void NuggetaDispatcher::addPlayerTurnNotificationHandler(PlayerTurnNotificationHandler* handler) {
PlayerTurnNotificationHandlers->push_back(handler);
}

void NuggetaDispatcher::removePlayerTurnNotificationHandler(PlayerTurnNotificationHandler* handler) {
PlayerTurnNotificationHandlers->erase(std::find(PlayerTurnNotificationHandlers->begin(), PlayerTurnNotificationHandlers->end(), handler));
}

void NuggetaDispatcher::addStartResponseHandler(StartResponseHandler* handler) {
StartResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeStartResponseHandler(StartResponseHandler* handler) {
StartResponseHandlers->erase(std::find(StartResponseHandlers->begin(), StartResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addAskForFriendResponseHandler(AskForFriendResponseHandler* handler) {
AskForFriendResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeAskForFriendResponseHandler(AskForFriendResponseHandler* handler) {
AskForFriendResponseHandlers->erase(std::find(AskForFriendResponseHandlers->begin(), AskForFriendResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSignUpResponseHandler(SignUpResponseHandler* handler) {
SignUpResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSignUpResponseHandler(SignUpResponseHandler* handler) {
SignUpResponseHandlers->erase(std::find(SignUpResponseHandlers->begin(), SignUpResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addLoginResponseHandler(LoginResponseHandler* handler) {
LoginResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeLoginResponseHandler(LoginResponseHandler* handler) {
LoginResponseHandlers->erase(std::find(LoginResponseHandlers->begin(), LoginResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSavePlayerProfileResponseHandler(SavePlayerProfileResponseHandler* handler) {
SavePlayerProfileResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSavePlayerProfileResponseHandler(SavePlayerProfileResponseHandler* handler) {
SavePlayerProfileResponseHandlers->erase(std::find(SavePlayerProfileResponseHandlers->begin(), SavePlayerProfileResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetPlayerProfileResponseHandler(GetPlayerProfileResponseHandler* handler) {
GetPlayerProfileResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetPlayerProfileResponseHandler(GetPlayerProfileResponseHandler* handler) {
GetPlayerProfileResponseHandlers->erase(std::find(GetPlayerProfileResponseHandlers->begin(), GetPlayerProfileResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addLogoutResponseHandler(LogoutResponseHandler* handler) {
LogoutResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeLogoutResponseHandler(LogoutResponseHandler* handler) {
LogoutResponseHandlers->erase(std::find(LogoutResponseHandlers->begin(), LogoutResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetFriendsResponseHandler(GetFriendsResponseHandler* handler) {
GetFriendsResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetFriendsResponseHandler(GetFriendsResponseHandler* handler) {
GetFriendsResponseHandlers->erase(std::find(GetFriendsResponseHandlers->begin(), GetFriendsResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetThirdPartyFriendsResponseHandler(GetThirdPartyFriendsResponseHandler* handler) {
GetThirdPartyFriendsResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetThirdPartyFriendsResponseHandler(GetThirdPartyFriendsResponseHandler* handler) {
GetThirdPartyFriendsResponseHandlers->erase(std::find(GetThirdPartyFriendsResponseHandlers->begin(), GetThirdPartyFriendsResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetFriendDemandsResponseHandler(GetFriendDemandsResponseHandler* handler) {
GetFriendDemandsResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetFriendDemandsResponseHandler(GetFriendDemandsResponseHandler* handler) {
GetFriendDemandsResponseHandlers->erase(std::find(GetFriendDemandsResponseHandlers->begin(), GetFriendDemandsResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addAcceptFriendDemandResponseHandler(AcceptFriendDemandResponseHandler* handler) {
AcceptFriendDemandResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeAcceptFriendDemandResponseHandler(AcceptFriendDemandResponseHandler* handler) {
AcceptFriendDemandResponseHandlers->erase(std::find(AcceptFriendDemandResponseHandlers->begin(), AcceptFriendDemandResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addRefuseFriendDemandResponseHandler(RefuseFriendDemandResponseHandler* handler) {
RefuseFriendDemandResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeRefuseFriendDemandResponseHandler(RefuseFriendDemandResponseHandler* handler) {
RefuseFriendDemandResponseHandlers->erase(std::find(RefuseFriendDemandResponseHandlers->begin(), RefuseFriendDemandResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSubmitScoreResponseHandler(SubmitScoreResponseHandler* handler) {
SubmitScoreResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSubmitScoreResponseHandler(SubmitScoreResponseHandler* handler) {
SubmitScoreResponseHandlers->erase(std::find(SubmitScoreResponseHandlers->begin(), SubmitScoreResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetLeaderboardResponseHandler(GetLeaderboardResponseHandler* handler) {
GetLeaderboardResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetLeaderboardResponseHandler(GetLeaderboardResponseHandler* handler) {
GetLeaderboardResponseHandlers->erase(std::find(GetLeaderboardResponseHandlers->begin(), GetLeaderboardResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addBuyItemResponseHandler(BuyItemResponseHandler* handler) {
BuyItemResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeBuyItemResponseHandler(BuyItemResponseHandler* handler) {
BuyItemResponseHandlers->erase(std::find(BuyItemResponseHandlers->begin(), BuyItemResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetStoreResponseHandler(GetStoreResponseHandler* handler) {
GetStoreResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetStoreResponseHandler(GetStoreResponseHandler* handler) {
GetStoreResponseHandlers->erase(std::find(GetStoreResponseHandlers->begin(), GetStoreResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addConsumeItemResponseHandler(ConsumeItemResponseHandler* handler) {
ConsumeItemResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeConsumeItemResponseHandler(ConsumeItemResponseHandler* handler) {
ConsumeItemResponseHandlers->erase(std::find(ConsumeItemResponseHandlers->begin(), ConsumeItemResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addIncreasePlayerWalletResponseHandler(IncreasePlayerWalletResponseHandler* handler) {
IncreasePlayerWalletResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeIncreasePlayerWalletResponseHandler(IncreasePlayerWalletResponseHandler* handler) {
IncreasePlayerWalletResponseHandlers->erase(std::find(IncreasePlayerWalletResponseHandlers->begin(), IncreasePlayerWalletResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetPlayerWalletResponseHandler(GetPlayerWalletResponseHandler* handler) {
GetPlayerWalletResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetPlayerWalletResponseHandler(GetPlayerWalletResponseHandler* handler) {
GetPlayerWalletResponseHandlers->erase(std::find(GetPlayerWalletResponseHandlers->begin(), GetPlayerWalletResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetAchievementBoardResponseHandler(GetAchievementBoardResponseHandler* handler) {
GetAchievementBoardResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetAchievementBoardResponseHandler(GetAchievementBoardResponseHandler* handler) {
GetAchievementBoardResponseHandlers->erase(std::find(GetAchievementBoardResponseHandlers->begin(), GetAchievementBoardResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addAchieveResponseHandler(AchieveResponseHandler* handler) {
AchieveResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeAchieveResponseHandler(AchieveResponseHandler* handler) {
AchieveResponseHandlers->erase(std::find(AchieveResponseHandlers->begin(), AchieveResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSearchImmediateGameResponseHandler(SearchImmediateGameResponseHandler* handler) {
SearchImmediateGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSearchImmediateGameResponseHandler(SearchImmediateGameResponseHandler* handler) {
SearchImmediateGameResponseHandlers->erase(std::find(SearchImmediateGameResponseHandlers->begin(), SearchImmediateGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addJoinGameResponseHandler(JoinGameResponseHandler* handler) {
JoinGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeJoinGameResponseHandler(JoinGameResponseHandler* handler) {
JoinGameResponseHandlers->erase(std::find(JoinGameResponseHandlers->begin(), JoinGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addUnjoinGameResponseHandler(UnjoinGameResponseHandler* handler) {
UnjoinGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeUnjoinGameResponseHandler(UnjoinGameResponseHandler* handler) {
UnjoinGameResponseHandlers->erase(std::find(UnjoinGameResponseHandlers->begin(), UnjoinGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addStartGameResponseHandler(StartGameResponseHandler* handler) {
StartGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeStartGameResponseHandler(StartGameResponseHandler* handler) {
StartGameResponseHandlers->erase(std::find(StartGameResponseHandlers->begin(), StartGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addStopGameResponseHandler(StopGameResponseHandler* handler) {
StopGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeStopGameResponseHandler(StopGameResponseHandler* handler) {
StopGameResponseHandlers->erase(std::find(StopGameResponseHandlers->begin(), StopGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addCreateGameResponseHandler(CreateGameResponseHandler* handler) {
CreateGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeCreateGameResponseHandler(CreateGameResponseHandler* handler) {
CreateGameResponseHandlers->erase(std::find(CreateGameResponseHandlers->begin(), CreateGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetGamesResponseHandler(GetGamesResponseHandler* handler) {
GetGamesResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetGamesResponseHandler(GetGamesResponseHandler* handler) {
GetGamesResponseHandlers->erase(std::find(GetGamesResponseHandlers->begin(), GetGamesResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSaveAsGhostResponseHandler(SaveAsGhostResponseHandler* handler) {
SaveAsGhostResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSaveAsGhostResponseHandler(SaveAsGhostResponseHandler* handler) {
SaveAsGhostResponseHandlers->erase(std::find(SaveAsGhostResponseHandlers->begin(), SaveAsGhostResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetGhostsResponseHandler(GetGhostsResponseHandler* handler) {
GetGhostsResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetGhostsResponseHandler(GetGhostsResponseHandler* handler) {
GetGhostsResponseHandlers->erase(std::find(GetGhostsResponseHandlers->begin(), GetGhostsResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addLoadGhostResponseHandler(LoadGhostResponseHandler* handler) {
LoadGhostResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeLoadGhostResponseHandler(LoadGhostResponseHandler* handler) {
LoadGhostResponseHandlers->erase(std::find(LoadGhostResponseHandlers->begin(), LoadGhostResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSendGameChatResponseHandler(SendGameChatResponseHandler* handler) {
SendGameChatResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSendGameChatResponseHandler(SendGameChatResponseHandler* handler) {
SendGameChatResponseHandlers->erase(std::find(SendGameChatResponseHandlers->begin(), SendGameChatResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetStorablesResponseHandler(GetStorablesResponseHandler* handler) {
GetStorablesResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetStorablesResponseHandler(GetStorablesResponseHandler* handler) {
GetStorablesResponseHandlers->erase(std::find(GetStorablesResponseHandlers->begin(), GetStorablesResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSaveStorableResponseHandler(SaveStorableResponseHandler* handler) {
SaveStorableResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSaveStorableResponseHandler(SaveStorableResponseHandler* handler) {
SaveStorableResponseHandlers->erase(std::find(SaveStorableResponseHandlers->begin(), SaveStorableResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addNextPlayerTurnResponseHandler(NextPlayerTurnResponseHandler* handler) {
NextPlayerTurnResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeNextPlayerTurnResponseHandler(NextPlayerTurnResponseHandler* handler) {
NextPlayerTurnResponseHandlers->erase(std::find(NextPlayerTurnResponseHandlers->begin(), NextPlayerTurnResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSetPlayerNameResponseHandler(SetPlayerNameResponseHandler* handler) {
SetPlayerNameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSetPlayerNameResponseHandler(SetPlayerNameResponseHandler* handler) {
SetPlayerNameResponseHandlers->erase(std::find(SetPlayerNameResponseHandlers->begin(), SetPlayerNameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addUpdateStorableResponseHandler(UpdateStorableResponseHandler* handler) {
UpdateStorableResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeUpdateStorableResponseHandler(UpdateStorableResponseHandler* handler) {
UpdateStorableResponseHandlers->erase(std::find(UpdateStorableResponseHandlers->begin(), UpdateStorableResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addRemoveStorableResponseHandler(RemoveStorableResponseHandler* handler) {
RemoveStorableResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeRemoveStorableResponseHandler(RemoveStorableResponseHandler* handler) {
RemoveStorableResponseHandlers->erase(std::find(RemoveStorableResponseHandlers->begin(), RemoveStorableResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addInviteThirdPartyFriendResponseHandler(InviteThirdPartyFriendResponseHandler* handler) {
InviteThirdPartyFriendResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeInviteThirdPartyFriendResponseHandler(InviteThirdPartyFriendResponseHandler* handler) {
InviteThirdPartyFriendResponseHandlers->erase(std::find(InviteThirdPartyFriendResponseHandlers->begin(), InviteThirdPartyFriendResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addPublishThirdPartyMessageResponseHandler(PublishThirdPartyMessageResponseHandler* handler) {
PublishThirdPartyMessageResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removePublishThirdPartyMessageResponseHandler(PublishThirdPartyMessageResponseHandler* handler) {
PublishThirdPartyMessageResponseHandlers->erase(std::find(PublishThirdPartyMessageResponseHandlers->begin(), PublishThirdPartyMessageResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addThirdPartyLoginResponseHandler(ThirdPartyLoginResponseHandler* handler) {
ThirdPartyLoginResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeThirdPartyLoginResponseHandler(ThirdPartyLoginResponseHandler* handler) {
ThirdPartyLoginResponseHandlers->erase(std::find(ThirdPartyLoginResponseHandlers->begin(), ThirdPartyLoginResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSaveGameResponseHandler(SaveGameResponseHandler* handler) {
SaveGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSaveGameResponseHandler(SaveGameResponseHandler* handler) {
SaveGameResponseHandlers->erase(std::find(SaveGameResponseHandlers->begin(), SaveGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addLoadGameResponseHandler(LoadGameResponseHandler* handler) {
LoadGameResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeLoadGameResponseHandler(LoadGameResponseHandler* handler) {
LoadGameResponseHandlers->erase(std::find(LoadGameResponseHandlers->begin(), LoadGameResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addSavePlayerStorableResponseHandler(SavePlayerStorableResponseHandler* handler) {
SavePlayerStorableResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeSavePlayerStorableResponseHandler(SavePlayerStorableResponseHandler* handler) {
SavePlayerStorableResponseHandlers->erase(std::find(SavePlayerStorableResponseHandlers->begin(), SavePlayerStorableResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addUpdatePlayerStorableResponseHandler(UpdatePlayerStorableResponseHandler* handler) {
UpdatePlayerStorableResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeUpdatePlayerStorableResponseHandler(UpdatePlayerStorableResponseHandler* handler) {
UpdatePlayerStorableResponseHandlers->erase(std::find(UpdatePlayerStorableResponseHandlers->begin(), UpdatePlayerStorableResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addRemovePlayerStorableResponseHandler(RemovePlayerStorableResponseHandler* handler) {
RemovePlayerStorableResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeRemovePlayerStorableResponseHandler(RemovePlayerStorableResponseHandler* handler) {
RemovePlayerStorableResponseHandlers->erase(std::find(RemovePlayerStorableResponseHandlers->begin(), RemovePlayerStorableResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetPlayerStorablesResponseHandler(GetPlayerStorablesResponseHandler* handler) {
GetPlayerStorablesResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetPlayerStorablesResponseHandler(GetPlayerStorablesResponseHandler* handler) {
GetPlayerStorablesResponseHandlers->erase(std::find(GetPlayerStorablesResponseHandlers->begin(), GetPlayerStorablesResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addPauseSessionMonitoringResponseHandler(PauseSessionMonitoringResponseHandler* handler) {
PauseSessionMonitoringResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removePauseSessionMonitoringResponseHandler(PauseSessionMonitoringResponseHandler* handler) {
PauseSessionMonitoringResponseHandlers->erase(std::find(PauseSessionMonitoringResponseHandlers->begin(), PauseSessionMonitoringResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addResumeSessionMonitoringResponseHandler(ResumeSessionMonitoringResponseHandler* handler) {
ResumeSessionMonitoringResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeResumeSessionMonitoringResponseHandler(ResumeSessionMonitoringResponseHandler* handler) {
ResumeSessionMonitoringResponseHandlers->erase(std::find(ResumeSessionMonitoringResponseHandlers->begin(), ResumeSessionMonitoringResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addPublishFriendThirdPartyMessageResponseHandler(PublishFriendThirdPartyMessageResponseHandler* handler) {
PublishFriendThirdPartyMessageResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removePublishFriendThirdPartyMessageResponseHandler(PublishFriendThirdPartyMessageResponseHandler* handler) {
PublishFriendThirdPartyMessageResponseHandlers->erase(std::find(PublishFriendThirdPartyMessageResponseHandlers->begin(), PublishFriendThirdPartyMessageResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addInvitePlayerResponseHandler(InvitePlayerResponseHandler* handler) {
InvitePlayerResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeInvitePlayerResponseHandler(InvitePlayerResponseHandler* handler) {
InvitePlayerResponseHandlers->erase(std::find(InvitePlayerResponseHandlers->begin(), InvitePlayerResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addGetInvitationsResponseHandler(GetInvitationsResponseHandler* handler) {
GetInvitationsResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeGetInvitationsResponseHandler(GetInvitationsResponseHandler* handler) {
GetInvitationsResponseHandlers->erase(std::find(GetInvitationsResponseHandlers->begin(), GetInvitationsResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addAcceptInvitationResponseHandler(AcceptInvitationResponseHandler* handler) {
AcceptInvitationResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeAcceptInvitationResponseHandler(AcceptInvitationResponseHandler* handler) {
AcceptInvitationResponseHandlers->erase(std::find(AcceptInvitationResponseHandlers->begin(), AcceptInvitationResponseHandlers->end(), handler));
}

void NuggetaDispatcher::addRefuseInvitationResponseHandler(RefuseInvitationResponseHandler* handler) {
RefuseInvitationResponseHandlers->push_back(handler);
}

void NuggetaDispatcher::removeRefuseInvitationResponseHandler(RefuseInvitationResponseHandler* handler) {
RefuseInvitationResponseHandlers->erase(std::find(RefuseInvitationResponseHandlers->begin(), RefuseInvitationResponseHandlers->end(), handler));
}

void NuggetaDispatcher::clear() {
globalListeners->clear();
HandshakeResponseHandlers->clear();
GameStateChangeHandlers->clear();
PlayerEnterGameHandlers->clear();
FriendshipNotificationHandlers->clear();
PlayerUnjoinGameHandlers->clear();
ConnectionLostHandlers->clear();
ConnectionInterruptedHandlers->clear();
ConnectionResumedHandlers->clear();
ConnectionStopHandlers->clear();
FriendConnectedNotificationHandlers->clear();
FriendDisconnectedNotificationHandlers->clear();
NuggetaExceptionHandlers->clear();
OpenConnectionHandlers->clear();
RawMessageHandlers->clear();
SessionExpiredHandlers->clear();
GameMessageErrorHandlers->clear();
FriendDemandNotificationHandlers->clear();
MyTurnNotificationHandlers->clear();
PlayerTurnNotificationHandlers->clear();
StartResponseHandlers->clear();
AskForFriendResponseHandlers->clear();
SignUpResponseHandlers->clear();
LoginResponseHandlers->clear();
SavePlayerProfileResponseHandlers->clear();
GetPlayerProfileResponseHandlers->clear();
LogoutResponseHandlers->clear();
GetFriendsResponseHandlers->clear();
GetThirdPartyFriendsResponseHandlers->clear();
GetFriendDemandsResponseHandlers->clear();
AcceptFriendDemandResponseHandlers->clear();
RefuseFriendDemandResponseHandlers->clear();
SubmitScoreResponseHandlers->clear();
GetLeaderboardResponseHandlers->clear();
BuyItemResponseHandlers->clear();
GetStoreResponseHandlers->clear();
ConsumeItemResponseHandlers->clear();
IncreasePlayerWalletResponseHandlers->clear();
GetPlayerWalletResponseHandlers->clear();
GetAchievementBoardResponseHandlers->clear();
AchieveResponseHandlers->clear();
SearchImmediateGameResponseHandlers->clear();
JoinGameResponseHandlers->clear();
UnjoinGameResponseHandlers->clear();
StartGameResponseHandlers->clear();
StopGameResponseHandlers->clear();
CreateGameResponseHandlers->clear();
GetGamesResponseHandlers->clear();
SaveAsGhostResponseHandlers->clear();
GetGhostsResponseHandlers->clear();
LoadGhostResponseHandlers->clear();
SendGameChatResponseHandlers->clear();
GetStorablesResponseHandlers->clear();
SaveStorableResponseHandlers->clear();
NextPlayerTurnResponseHandlers->clear();
SetPlayerNameResponseHandlers->clear();
UpdateStorableResponseHandlers->clear();
RemoveStorableResponseHandlers->clear();
InviteThirdPartyFriendResponseHandlers->clear();
PublishThirdPartyMessageResponseHandlers->clear();
ThirdPartyLoginResponseHandlers->clear();
SaveGameResponseHandlers->clear();
LoadGameResponseHandlers->clear();
SavePlayerStorableResponseHandlers->clear();
UpdatePlayerStorableResponseHandlers->clear();
RemovePlayerStorableResponseHandlers->clear();
GetPlayerStorablesResponseHandlers->clear();
PauseSessionMonitoringResponseHandlers->clear();
ResumeSessionMonitoringResponseHandlers->clear();
PublishFriendThirdPartyMessageResponseHandlers->clear();
InvitePlayerResponseHandlers->clear();
GetInvitationsResponseHandlers->clear();
AcceptInvitationResponseHandlers->clear();
RefuseInvitationResponseHandlers->clear();
}

NuggetaDispatcher::NuggetaDispatcher(){
this->RefuseInvitationResponseHandlers = new std::vector<RefuseInvitationResponseHandler*>();
this->AcceptInvitationResponseHandlers = new std::vector<AcceptInvitationResponseHandler*>();
this->GetInvitationsResponseHandlers = new std::vector<GetInvitationsResponseHandler*>();
this->InvitePlayerResponseHandlers = new std::vector<InvitePlayerResponseHandler*>();
this->PublishFriendThirdPartyMessageResponseHandlers = new std::vector<PublishFriendThirdPartyMessageResponseHandler*>();
this->ResumeSessionMonitoringResponseHandlers = new std::vector<ResumeSessionMonitoringResponseHandler*>();
this->PauseSessionMonitoringResponseHandlers = new std::vector<PauseSessionMonitoringResponseHandler*>();
this->GetPlayerStorablesResponseHandlers = new std::vector<GetPlayerStorablesResponseHandler*>();
this->RemovePlayerStorableResponseHandlers = new std::vector<RemovePlayerStorableResponseHandler*>();
this->UpdatePlayerStorableResponseHandlers = new std::vector<UpdatePlayerStorableResponseHandler*>();
this->SavePlayerStorableResponseHandlers = new std::vector<SavePlayerStorableResponseHandler*>();
this->LoadGameResponseHandlers = new std::vector<LoadGameResponseHandler*>();
this->SaveGameResponseHandlers = new std::vector<SaveGameResponseHandler*>();
this->ThirdPartyLoginResponseHandlers = new std::vector<ThirdPartyLoginResponseHandler*>();
this->PublishThirdPartyMessageResponseHandlers = new std::vector<PublishThirdPartyMessageResponseHandler*>();
this->InviteThirdPartyFriendResponseHandlers = new std::vector<InviteThirdPartyFriendResponseHandler*>();
this->RemoveStorableResponseHandlers = new std::vector<RemoveStorableResponseHandler*>();
this->UpdateStorableResponseHandlers = new std::vector<UpdateStorableResponseHandler*>();
this->SetPlayerNameResponseHandlers = new std::vector<SetPlayerNameResponseHandler*>();
this->NextPlayerTurnResponseHandlers = new std::vector<NextPlayerTurnResponseHandler*>();
this->SaveStorableResponseHandlers = new std::vector<SaveStorableResponseHandler*>();
this->GetStorablesResponseHandlers = new std::vector<GetStorablesResponseHandler*>();
this->SendGameChatResponseHandlers = new std::vector<SendGameChatResponseHandler*>();
this->LoadGhostResponseHandlers = new std::vector<LoadGhostResponseHandler*>();
this->GetGhostsResponseHandlers = new std::vector<GetGhostsResponseHandler*>();
this->SaveAsGhostResponseHandlers = new std::vector<SaveAsGhostResponseHandler*>();
this->GetGamesResponseHandlers = new std::vector<GetGamesResponseHandler*>();
this->CreateGameResponseHandlers = new std::vector<CreateGameResponseHandler*>();
this->StopGameResponseHandlers = new std::vector<StopGameResponseHandler*>();
this->StartGameResponseHandlers = new std::vector<StartGameResponseHandler*>();
this->UnjoinGameResponseHandlers = new std::vector<UnjoinGameResponseHandler*>();
this->JoinGameResponseHandlers = new std::vector<JoinGameResponseHandler*>();
this->SearchImmediateGameResponseHandlers = new std::vector<SearchImmediateGameResponseHandler*>();
this->AchieveResponseHandlers = new std::vector<AchieveResponseHandler*>();
this->GetAchievementBoardResponseHandlers = new std::vector<GetAchievementBoardResponseHandler*>();
this->GetPlayerWalletResponseHandlers = new std::vector<GetPlayerWalletResponseHandler*>();
this->IncreasePlayerWalletResponseHandlers = new std::vector<IncreasePlayerWalletResponseHandler*>();
this->ConsumeItemResponseHandlers = new std::vector<ConsumeItemResponseHandler*>();
this->GetStoreResponseHandlers = new std::vector<GetStoreResponseHandler*>();
this->BuyItemResponseHandlers = new std::vector<BuyItemResponseHandler*>();
this->GetLeaderboardResponseHandlers = new std::vector<GetLeaderboardResponseHandler*>();
this->SubmitScoreResponseHandlers = new std::vector<SubmitScoreResponseHandler*>();
this->RefuseFriendDemandResponseHandlers = new std::vector<RefuseFriendDemandResponseHandler*>();
this->AcceptFriendDemandResponseHandlers = new std::vector<AcceptFriendDemandResponseHandler*>();
this->GetFriendDemandsResponseHandlers = new std::vector<GetFriendDemandsResponseHandler*>();
this->GetThirdPartyFriendsResponseHandlers = new std::vector<GetThirdPartyFriendsResponseHandler*>();
this->GetFriendsResponseHandlers = new std::vector<GetFriendsResponseHandler*>();
this->LogoutResponseHandlers = new std::vector<LogoutResponseHandler*>();
this->GetPlayerProfileResponseHandlers = new std::vector<GetPlayerProfileResponseHandler*>();
this->SavePlayerProfileResponseHandlers = new std::vector<SavePlayerProfileResponseHandler*>();
this->LoginResponseHandlers = new std::vector<LoginResponseHandler*>();
this->SignUpResponseHandlers = new std::vector<SignUpResponseHandler*>();
this->AskForFriendResponseHandlers = new std::vector<AskForFriendResponseHandler*>();
this->StartResponseHandlers = new std::vector<StartResponseHandler*>();
this->PlayerTurnNotificationHandlers = new std::vector<PlayerTurnNotificationHandler*>();
this->MyTurnNotificationHandlers = new std::vector<MyTurnNotificationHandler*>();
this->FriendDemandNotificationHandlers = new std::vector<FriendDemandNotificationHandler*>();
this->GameMessageErrorHandlers = new std::vector<GameMessageErrorHandler*>();
this->SessionExpiredHandlers = new std::vector<SessionExpiredHandler*>();
this->RawMessageHandlers = new std::vector<RawMessageHandler*>();
this->OpenConnectionHandlers = new std::vector<OpenConnectionHandler*>();
this->NuggetaExceptionHandlers = new std::vector<NuggetaExceptionHandler*>();
this->FriendDisconnectedNotificationHandlers = new std::vector<FriendDisconnectedNotificationHandler*>();
this->FriendConnectedNotificationHandlers = new std::vector<FriendConnectedNotificationHandler*>();
this->ConnectionStopHandlers = new std::vector<ConnectionStopHandler*>();
this->ConnectionResumedHandlers = new std::vector<ConnectionResumedHandler*>();
this->ConnectionInterruptedHandlers = new std::vector<ConnectionInterruptedHandler*>();
this->ConnectionLostHandlers = new std::vector<ConnectionLostHandler*>();
this->PlayerUnjoinGameHandlers = new std::vector<PlayerUnjoinGameHandler*>();
this->FriendshipNotificationHandlers = new std::vector<FriendshipNotificationHandler*>();
this->PlayerEnterGameHandlers = new std::vector<PlayerEnterGameHandler*>();
this->GameStateChangeHandlers = new std::vector<GameStateChangeHandler*>();
this->HandshakeResponseHandlers = new std::vector<HandshakeResponseHandler*>();
this->globalListeners = new std::vector<NuggetaMessageListener*>();
}

NuggetaDispatcher::~NuggetaDispatcher(){
if (globalListeners) {
for (unsigned int i=0; i < globalListeners->size(); i++) {
delete (*globalListeners)[i];
}
delete globalListeners;
globalListeners=0;;
}
if (HandshakeResponseHandlers) {
for (unsigned int i=0; i < HandshakeResponseHandlers->size(); i++) {
delete (*HandshakeResponseHandlers)[i];
}
delete HandshakeResponseHandlers;
HandshakeResponseHandlers=0;;
}
if (GameStateChangeHandlers) {
for (unsigned int i=0; i < GameStateChangeHandlers->size(); i++) {
delete (*GameStateChangeHandlers)[i];
}
delete GameStateChangeHandlers;
GameStateChangeHandlers=0;;
}
if (PlayerEnterGameHandlers) {
for (unsigned int i=0; i < PlayerEnterGameHandlers->size(); i++) {
delete (*PlayerEnterGameHandlers)[i];
}
delete PlayerEnterGameHandlers;
PlayerEnterGameHandlers=0;;
}
if (FriendshipNotificationHandlers) {
for (unsigned int i=0; i < FriendshipNotificationHandlers->size(); i++) {
delete (*FriendshipNotificationHandlers)[i];
}
delete FriendshipNotificationHandlers;
FriendshipNotificationHandlers=0;;
}
if (PlayerUnjoinGameHandlers) {
for (unsigned int i=0; i < PlayerUnjoinGameHandlers->size(); i++) {
delete (*PlayerUnjoinGameHandlers)[i];
}
delete PlayerUnjoinGameHandlers;
PlayerUnjoinGameHandlers=0;;
}
if (ConnectionLostHandlers) {
for (unsigned int i=0; i < ConnectionLostHandlers->size(); i++) {
delete (*ConnectionLostHandlers)[i];
}
delete ConnectionLostHandlers;
ConnectionLostHandlers=0;;
}
if (ConnectionInterruptedHandlers) {
for (unsigned int i=0; i < ConnectionInterruptedHandlers->size(); i++) {
delete (*ConnectionInterruptedHandlers)[i];
}
delete ConnectionInterruptedHandlers;
ConnectionInterruptedHandlers=0;;
}
if (ConnectionResumedHandlers) {
for (unsigned int i=0; i < ConnectionResumedHandlers->size(); i++) {
delete (*ConnectionResumedHandlers)[i];
}
delete ConnectionResumedHandlers;
ConnectionResumedHandlers=0;;
}
if (ConnectionStopHandlers) {
for (unsigned int i=0; i < ConnectionStopHandlers->size(); i++) {
delete (*ConnectionStopHandlers)[i];
}
delete ConnectionStopHandlers;
ConnectionStopHandlers=0;;
}
if (FriendConnectedNotificationHandlers) {
for (unsigned int i=0; i < FriendConnectedNotificationHandlers->size(); i++) {
delete (*FriendConnectedNotificationHandlers)[i];
}
delete FriendConnectedNotificationHandlers;
FriendConnectedNotificationHandlers=0;;
}
if (FriendDisconnectedNotificationHandlers) {
for (unsigned int i=0; i < FriendDisconnectedNotificationHandlers->size(); i++) {
delete (*FriendDisconnectedNotificationHandlers)[i];
}
delete FriendDisconnectedNotificationHandlers;
FriendDisconnectedNotificationHandlers=0;;
}
if (NuggetaExceptionHandlers) {
for (unsigned int i=0; i < NuggetaExceptionHandlers->size(); i++) {
delete (*NuggetaExceptionHandlers)[i];
}
delete NuggetaExceptionHandlers;
NuggetaExceptionHandlers=0;;
}
if (OpenConnectionHandlers) {
for (unsigned int i=0; i < OpenConnectionHandlers->size(); i++) {
delete (*OpenConnectionHandlers)[i];
}
delete OpenConnectionHandlers;
OpenConnectionHandlers=0;;
}
if (RawMessageHandlers) {
for (unsigned int i=0; i < RawMessageHandlers->size(); i++) {
delete (*RawMessageHandlers)[i];
}
delete RawMessageHandlers;
RawMessageHandlers=0;;
}
if (SessionExpiredHandlers) {
for (unsigned int i=0; i < SessionExpiredHandlers->size(); i++) {
delete (*SessionExpiredHandlers)[i];
}
delete SessionExpiredHandlers;
SessionExpiredHandlers=0;;
}
if (GameMessageErrorHandlers) {
for (unsigned int i=0; i < GameMessageErrorHandlers->size(); i++) {
delete (*GameMessageErrorHandlers)[i];
}
delete GameMessageErrorHandlers;
GameMessageErrorHandlers=0;;
}
if (FriendDemandNotificationHandlers) {
for (unsigned int i=0; i < FriendDemandNotificationHandlers->size(); i++) {
delete (*FriendDemandNotificationHandlers)[i];
}
delete FriendDemandNotificationHandlers;
FriendDemandNotificationHandlers=0;;
}
if (MyTurnNotificationHandlers) {
for (unsigned int i=0; i < MyTurnNotificationHandlers->size(); i++) {
delete (*MyTurnNotificationHandlers)[i];
}
delete MyTurnNotificationHandlers;
MyTurnNotificationHandlers=0;;
}
if (PlayerTurnNotificationHandlers) {
for (unsigned int i=0; i < PlayerTurnNotificationHandlers->size(); i++) {
delete (*PlayerTurnNotificationHandlers)[i];
}
delete PlayerTurnNotificationHandlers;
PlayerTurnNotificationHandlers=0;;
}
if (StartResponseHandlers) {
for (unsigned int i=0; i < StartResponseHandlers->size(); i++) {
delete (*StartResponseHandlers)[i];
}
delete StartResponseHandlers;
StartResponseHandlers=0;;
}
if (AskForFriendResponseHandlers) {
for (unsigned int i=0; i < AskForFriendResponseHandlers->size(); i++) {
delete (*AskForFriendResponseHandlers)[i];
}
delete AskForFriendResponseHandlers;
AskForFriendResponseHandlers=0;;
}
if (SignUpResponseHandlers) {
for (unsigned int i=0; i < SignUpResponseHandlers->size(); i++) {
delete (*SignUpResponseHandlers)[i];
}
delete SignUpResponseHandlers;
SignUpResponseHandlers=0;;
}
if (LoginResponseHandlers) {
for (unsigned int i=0; i < LoginResponseHandlers->size(); i++) {
delete (*LoginResponseHandlers)[i];
}
delete LoginResponseHandlers;
LoginResponseHandlers=0;;
}
if (SavePlayerProfileResponseHandlers) {
for (unsigned int i=0; i < SavePlayerProfileResponseHandlers->size(); i++) {
delete (*SavePlayerProfileResponseHandlers)[i];
}
delete SavePlayerProfileResponseHandlers;
SavePlayerProfileResponseHandlers=0;;
}
if (GetPlayerProfileResponseHandlers) {
for (unsigned int i=0; i < GetPlayerProfileResponseHandlers->size(); i++) {
delete (*GetPlayerProfileResponseHandlers)[i];
}
delete GetPlayerProfileResponseHandlers;
GetPlayerProfileResponseHandlers=0;;
}
if (LogoutResponseHandlers) {
for (unsigned int i=0; i < LogoutResponseHandlers->size(); i++) {
delete (*LogoutResponseHandlers)[i];
}
delete LogoutResponseHandlers;
LogoutResponseHandlers=0;;
}
if (GetFriendsResponseHandlers) {
for (unsigned int i=0; i < GetFriendsResponseHandlers->size(); i++) {
delete (*GetFriendsResponseHandlers)[i];
}
delete GetFriendsResponseHandlers;
GetFriendsResponseHandlers=0;;
}
if (GetThirdPartyFriendsResponseHandlers) {
for (unsigned int i=0; i < GetThirdPartyFriendsResponseHandlers->size(); i++) {
delete (*GetThirdPartyFriendsResponseHandlers)[i];
}
delete GetThirdPartyFriendsResponseHandlers;
GetThirdPartyFriendsResponseHandlers=0;;
}
if (GetFriendDemandsResponseHandlers) {
for (unsigned int i=0; i < GetFriendDemandsResponseHandlers->size(); i++) {
delete (*GetFriendDemandsResponseHandlers)[i];
}
delete GetFriendDemandsResponseHandlers;
GetFriendDemandsResponseHandlers=0;;
}
if (AcceptFriendDemandResponseHandlers) {
for (unsigned int i=0; i < AcceptFriendDemandResponseHandlers->size(); i++) {
delete (*AcceptFriendDemandResponseHandlers)[i];
}
delete AcceptFriendDemandResponseHandlers;
AcceptFriendDemandResponseHandlers=0;;
}
if (RefuseFriendDemandResponseHandlers) {
for (unsigned int i=0; i < RefuseFriendDemandResponseHandlers->size(); i++) {
delete (*RefuseFriendDemandResponseHandlers)[i];
}
delete RefuseFriendDemandResponseHandlers;
RefuseFriendDemandResponseHandlers=0;;
}
if (SubmitScoreResponseHandlers) {
for (unsigned int i=0; i < SubmitScoreResponseHandlers->size(); i++) {
delete (*SubmitScoreResponseHandlers)[i];
}
delete SubmitScoreResponseHandlers;
SubmitScoreResponseHandlers=0;;
}
if (GetLeaderboardResponseHandlers) {
for (unsigned int i=0; i < GetLeaderboardResponseHandlers->size(); i++) {
delete (*GetLeaderboardResponseHandlers)[i];
}
delete GetLeaderboardResponseHandlers;
GetLeaderboardResponseHandlers=0;;
}
if (BuyItemResponseHandlers) {
for (unsigned int i=0; i < BuyItemResponseHandlers->size(); i++) {
delete (*BuyItemResponseHandlers)[i];
}
delete BuyItemResponseHandlers;
BuyItemResponseHandlers=0;;
}
if (GetStoreResponseHandlers) {
for (unsigned int i=0; i < GetStoreResponseHandlers->size(); i++) {
delete (*GetStoreResponseHandlers)[i];
}
delete GetStoreResponseHandlers;
GetStoreResponseHandlers=0;;
}
if (ConsumeItemResponseHandlers) {
for (unsigned int i=0; i < ConsumeItemResponseHandlers->size(); i++) {
delete (*ConsumeItemResponseHandlers)[i];
}
delete ConsumeItemResponseHandlers;
ConsumeItemResponseHandlers=0;;
}
if (IncreasePlayerWalletResponseHandlers) {
for (unsigned int i=0; i < IncreasePlayerWalletResponseHandlers->size(); i++) {
delete (*IncreasePlayerWalletResponseHandlers)[i];
}
delete IncreasePlayerWalletResponseHandlers;
IncreasePlayerWalletResponseHandlers=0;;
}
if (GetPlayerWalletResponseHandlers) {
for (unsigned int i=0; i < GetPlayerWalletResponseHandlers->size(); i++) {
delete (*GetPlayerWalletResponseHandlers)[i];
}
delete GetPlayerWalletResponseHandlers;
GetPlayerWalletResponseHandlers=0;;
}
if (GetAchievementBoardResponseHandlers) {
for (unsigned int i=0; i < GetAchievementBoardResponseHandlers->size(); i++) {
delete (*GetAchievementBoardResponseHandlers)[i];
}
delete GetAchievementBoardResponseHandlers;
GetAchievementBoardResponseHandlers=0;;
}
if (AchieveResponseHandlers) {
for (unsigned int i=0; i < AchieveResponseHandlers->size(); i++) {
delete (*AchieveResponseHandlers)[i];
}
delete AchieveResponseHandlers;
AchieveResponseHandlers=0;;
}
if (SearchImmediateGameResponseHandlers) {
for (unsigned int i=0; i < SearchImmediateGameResponseHandlers->size(); i++) {
delete (*SearchImmediateGameResponseHandlers)[i];
}
delete SearchImmediateGameResponseHandlers;
SearchImmediateGameResponseHandlers=0;;
}
if (JoinGameResponseHandlers) {
for (unsigned int i=0; i < JoinGameResponseHandlers->size(); i++) {
delete (*JoinGameResponseHandlers)[i];
}
delete JoinGameResponseHandlers;
JoinGameResponseHandlers=0;;
}
if (UnjoinGameResponseHandlers) {
for (unsigned int i=0; i < UnjoinGameResponseHandlers->size(); i++) {
delete (*UnjoinGameResponseHandlers)[i];
}
delete UnjoinGameResponseHandlers;
UnjoinGameResponseHandlers=0;;
}
if (StartGameResponseHandlers) {
for (unsigned int i=0; i < StartGameResponseHandlers->size(); i++) {
delete (*StartGameResponseHandlers)[i];
}
delete StartGameResponseHandlers;
StartGameResponseHandlers=0;;
}
if (StopGameResponseHandlers) {
for (unsigned int i=0; i < StopGameResponseHandlers->size(); i++) {
delete (*StopGameResponseHandlers)[i];
}
delete StopGameResponseHandlers;
StopGameResponseHandlers=0;;
}
if (CreateGameResponseHandlers) {
for (unsigned int i=0; i < CreateGameResponseHandlers->size(); i++) {
delete (*CreateGameResponseHandlers)[i];
}
delete CreateGameResponseHandlers;
CreateGameResponseHandlers=0;;
}
if (GetGamesResponseHandlers) {
for (unsigned int i=0; i < GetGamesResponseHandlers->size(); i++) {
delete (*GetGamesResponseHandlers)[i];
}
delete GetGamesResponseHandlers;
GetGamesResponseHandlers=0;;
}
if (SaveAsGhostResponseHandlers) {
for (unsigned int i=0; i < SaveAsGhostResponseHandlers->size(); i++) {
delete (*SaveAsGhostResponseHandlers)[i];
}
delete SaveAsGhostResponseHandlers;
SaveAsGhostResponseHandlers=0;;
}
if (GetGhostsResponseHandlers) {
for (unsigned int i=0; i < GetGhostsResponseHandlers->size(); i++) {
delete (*GetGhostsResponseHandlers)[i];
}
delete GetGhostsResponseHandlers;
GetGhostsResponseHandlers=0;;
}
if (LoadGhostResponseHandlers) {
for (unsigned int i=0; i < LoadGhostResponseHandlers->size(); i++) {
delete (*LoadGhostResponseHandlers)[i];
}
delete LoadGhostResponseHandlers;
LoadGhostResponseHandlers=0;;
}
if (SendGameChatResponseHandlers) {
for (unsigned int i=0; i < SendGameChatResponseHandlers->size(); i++) {
delete (*SendGameChatResponseHandlers)[i];
}
delete SendGameChatResponseHandlers;
SendGameChatResponseHandlers=0;;
}
if (GetStorablesResponseHandlers) {
for (unsigned int i=0; i < GetStorablesResponseHandlers->size(); i++) {
delete (*GetStorablesResponseHandlers)[i];
}
delete GetStorablesResponseHandlers;
GetStorablesResponseHandlers=0;;
}
if (SaveStorableResponseHandlers) {
for (unsigned int i=0; i < SaveStorableResponseHandlers->size(); i++) {
delete (*SaveStorableResponseHandlers)[i];
}
delete SaveStorableResponseHandlers;
SaveStorableResponseHandlers=0;;
}
if (NextPlayerTurnResponseHandlers) {
for (unsigned int i=0; i < NextPlayerTurnResponseHandlers->size(); i++) {
delete (*NextPlayerTurnResponseHandlers)[i];
}
delete NextPlayerTurnResponseHandlers;
NextPlayerTurnResponseHandlers=0;;
}
if (SetPlayerNameResponseHandlers) {
for (unsigned int i=0; i < SetPlayerNameResponseHandlers->size(); i++) {
delete (*SetPlayerNameResponseHandlers)[i];
}
delete SetPlayerNameResponseHandlers;
SetPlayerNameResponseHandlers=0;;
}
if (UpdateStorableResponseHandlers) {
for (unsigned int i=0; i < UpdateStorableResponseHandlers->size(); i++) {
delete (*UpdateStorableResponseHandlers)[i];
}
delete UpdateStorableResponseHandlers;
UpdateStorableResponseHandlers=0;;
}
if (RemoveStorableResponseHandlers) {
for (unsigned int i=0; i < RemoveStorableResponseHandlers->size(); i++) {
delete (*RemoveStorableResponseHandlers)[i];
}
delete RemoveStorableResponseHandlers;
RemoveStorableResponseHandlers=0;;
}
if (InviteThirdPartyFriendResponseHandlers) {
for (unsigned int i=0; i < InviteThirdPartyFriendResponseHandlers->size(); i++) {
delete (*InviteThirdPartyFriendResponseHandlers)[i];
}
delete InviteThirdPartyFriendResponseHandlers;
InviteThirdPartyFriendResponseHandlers=0;;
}
if (PublishThirdPartyMessageResponseHandlers) {
for (unsigned int i=0; i < PublishThirdPartyMessageResponseHandlers->size(); i++) {
delete (*PublishThirdPartyMessageResponseHandlers)[i];
}
delete PublishThirdPartyMessageResponseHandlers;
PublishThirdPartyMessageResponseHandlers=0;;
}
if (ThirdPartyLoginResponseHandlers) {
for (unsigned int i=0; i < ThirdPartyLoginResponseHandlers->size(); i++) {
delete (*ThirdPartyLoginResponseHandlers)[i];
}
delete ThirdPartyLoginResponseHandlers;
ThirdPartyLoginResponseHandlers=0;;
}
if (SaveGameResponseHandlers) {
for (unsigned int i=0; i < SaveGameResponseHandlers->size(); i++) {
delete (*SaveGameResponseHandlers)[i];
}
delete SaveGameResponseHandlers;
SaveGameResponseHandlers=0;;
}
if (LoadGameResponseHandlers) {
for (unsigned int i=0; i < LoadGameResponseHandlers->size(); i++) {
delete (*LoadGameResponseHandlers)[i];
}
delete LoadGameResponseHandlers;
LoadGameResponseHandlers=0;;
}
if (SavePlayerStorableResponseHandlers) {
for (unsigned int i=0; i < SavePlayerStorableResponseHandlers->size(); i++) {
delete (*SavePlayerStorableResponseHandlers)[i];
}
delete SavePlayerStorableResponseHandlers;
SavePlayerStorableResponseHandlers=0;;
}
if (UpdatePlayerStorableResponseHandlers) {
for (unsigned int i=0; i < UpdatePlayerStorableResponseHandlers->size(); i++) {
delete (*UpdatePlayerStorableResponseHandlers)[i];
}
delete UpdatePlayerStorableResponseHandlers;
UpdatePlayerStorableResponseHandlers=0;;
}
if (RemovePlayerStorableResponseHandlers) {
for (unsigned int i=0; i < RemovePlayerStorableResponseHandlers->size(); i++) {
delete (*RemovePlayerStorableResponseHandlers)[i];
}
delete RemovePlayerStorableResponseHandlers;
RemovePlayerStorableResponseHandlers=0;;
}
if (GetPlayerStorablesResponseHandlers) {
for (unsigned int i=0; i < GetPlayerStorablesResponseHandlers->size(); i++) {
delete (*GetPlayerStorablesResponseHandlers)[i];
}
delete GetPlayerStorablesResponseHandlers;
GetPlayerStorablesResponseHandlers=0;;
}
if (PauseSessionMonitoringResponseHandlers) {
for (unsigned int i=0; i < PauseSessionMonitoringResponseHandlers->size(); i++) {
delete (*PauseSessionMonitoringResponseHandlers)[i];
}
delete PauseSessionMonitoringResponseHandlers;
PauseSessionMonitoringResponseHandlers=0;;
}
if (ResumeSessionMonitoringResponseHandlers) {
for (unsigned int i=0; i < ResumeSessionMonitoringResponseHandlers->size(); i++) {
delete (*ResumeSessionMonitoringResponseHandlers)[i];
}
delete ResumeSessionMonitoringResponseHandlers;
ResumeSessionMonitoringResponseHandlers=0;;
}
if (PublishFriendThirdPartyMessageResponseHandlers) {
for (unsigned int i=0; i < PublishFriendThirdPartyMessageResponseHandlers->size(); i++) {
delete (*PublishFriendThirdPartyMessageResponseHandlers)[i];
}
delete PublishFriendThirdPartyMessageResponseHandlers;
PublishFriendThirdPartyMessageResponseHandlers=0;;
}
if (InvitePlayerResponseHandlers) {
for (unsigned int i=0; i < InvitePlayerResponseHandlers->size(); i++) {
delete (*InvitePlayerResponseHandlers)[i];
}
delete InvitePlayerResponseHandlers;
InvitePlayerResponseHandlers=0;;
}
if (GetInvitationsResponseHandlers) {
for (unsigned int i=0; i < GetInvitationsResponseHandlers->size(); i++) {
delete (*GetInvitationsResponseHandlers)[i];
}
delete GetInvitationsResponseHandlers;
GetInvitationsResponseHandlers=0;;
}
if (AcceptInvitationResponseHandlers) {
for (unsigned int i=0; i < AcceptInvitationResponseHandlers->size(); i++) {
delete (*AcceptInvitationResponseHandlers)[i];
}
delete AcceptInvitationResponseHandlers;
AcceptInvitationResponseHandlers=0;;
}
if (RefuseInvitationResponseHandlers) {
for (unsigned int i=0; i < RefuseInvitationResponseHandlers->size(); i++) {
delete (*RefuseInvitationResponseHandlers)[i];
}
delete RefuseInvitationResponseHandlers;
RefuseInvitationResponseHandlers=0;;
}
}


#include "SendGameChatStatus.h"

std::vector<SendGameChatStatus*>* SendGameChatStatus::_values = new std::vector<SendGameChatStatus*>();

SendGameChatStatus* SendGameChatStatus::SENT = new SendGameChatStatus("SENT", 0);

SendGameChatStatus* SendGameChatStatus::FAILURE = new SendGameChatStatus("FAILURE", 1);

SendGameChatStatus* SendGameChatStatus::INVALID_CALL = new SendGameChatStatus("INVALID_CALL", 2);

SendGameChatStatus* SendGameChatStatus::INTERNAL_ERROR = new SendGameChatStatus("INTERNAL_ERROR", 3);

std::vector<SendGameChatStatus*>* SendGameChatStatus::values() {
    return _values;
}





int SendGameChatStatus::getValue() {
return _value;
}

const char* SendGameChatStatus::name() {
return _name;
}

int SendGameChatStatus::ordinal() {
return _value;
}

SendGameChatStatus::SendGameChatStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SendGameChatStatus* SendGameChatStatus::fromValue(int value) {
for (unsigned int _b6900 = 0; _b6900 < (unsigned int)_values->size(); _b6900++) {
SendGameChatStatus* _s6901 = (*_values)[_b6900];
if (_s6901->getValue() == value) {
return _s6901;
}
}
return 0;
}

SendGameChatStatus* SendGameChatStatus::valueOf(const char* name) {
for (unsigned int _y15198 = 0; _y15198 < (unsigned int)_values->size(); _y15198++) {
SendGameChatStatus* _r15199 = (*_values)[_y15198];
if (strcmp(name, _r15199->name()) == 0) {
return _r15199;
}
}
return 0;
}

//@Override
short SendGameChatStatus::getSerializerID() {
return -10758;
}

const char* SendGameChatStatus::toString() {
return NUtils::concat("SendGameChatStatus.", _name);
}

void* SendGameChatStatus::clone() {
return this;
}

SendGameChatStatus::~SendGameChatStatus(){
}


#include "SavePlayerProfileStatus.h"

std::vector<SavePlayerProfileStatus*>* SavePlayerProfileStatus::_values = new std::vector<SavePlayerProfileStatus*>();

SavePlayerProfileStatus* SavePlayerProfileStatus::SUCCESS = new SavePlayerProfileStatus("SUCCESS", 0);

SavePlayerProfileStatus* SavePlayerProfileStatus::INVALID_CALL = new SavePlayerProfileStatus("INVALID_CALL", 1);

SavePlayerProfileStatus* SavePlayerProfileStatus::INTERNAL_ERROR = new SavePlayerProfileStatus("INTERNAL_ERROR", 2);

std::vector<SavePlayerProfileStatus*>* SavePlayerProfileStatus::values() {
    return _values;
}





int SavePlayerProfileStatus::getValue() {
return _value;
}

const char* SavePlayerProfileStatus::name() {
return _name;
}

int SavePlayerProfileStatus::ordinal() {
return _value;
}

SavePlayerProfileStatus::SavePlayerProfileStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SavePlayerProfileStatus* SavePlayerProfileStatus::fromValue(int value) {
for (unsigned int _i6189 = 0; _i6189 < (unsigned int)_values->size(); _i6189++) {
SavePlayerProfileStatus* _j6190 = (*_values)[_i6189];
if (_j6190->getValue() == value) {
return _j6190;
}
}
return 0;
}

SavePlayerProfileStatus* SavePlayerProfileStatus::valueOf(const char* name) {
for (unsigned int _w14330 = 0; _w14330 < (unsigned int)_values->size(); _w14330++) {
SavePlayerProfileStatus* _g14331 = (*_values)[_w14330];
if (strcmp(name, _g14331->name()) == 0) {
return _g14331;
}
}
return 0;
}

//@Override
short SavePlayerProfileStatus::getSerializerID() {
return -10098;
}

const char* SavePlayerProfileStatus::toString() {
return NUtils::concat("SavePlayerProfileStatus.", _name);
}

void* SavePlayerProfileStatus::clone() {
return this;
}

SavePlayerProfileStatus::~SavePlayerProfileStatus(){
}


#include "GetPlayerProfileRequest.h"

short GetPlayerProfileRequest::serializerID = -10117;









const char* GetPlayerProfileRequest::getMessageId() {
    return _MessageId;
}

void GetPlayerProfileRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetPlayerProfileRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetPlayerProfileRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetPlayerProfileRequest::getRequestId() {
return _RequestId;
}

void GetPlayerProfileRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetPlayerProfileRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetPlayerProfileRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short GetPlayerProfileRequest::getSerializerID() {
return serializerID;
}

void* GetPlayerProfileRequest::clone() {
GetPlayerProfileRequest* _z14235 = new GetPlayerProfileRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_z14235->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_z14235->setRequestId(_RequestId);
}
return _z14235;
}

const char* GetPlayerProfileRequest::toString() {
const char* _e14236 = "";
_e14236 = NUtils::concat(_e14236, NUtils::concat(NUtils::concat("[", "GetPlayerProfileRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e14236 = NUtils::concat(_e14236, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e14236 = NUtils::concat(_e14236, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_e14236 = NUtils::concat(_e14236, "]");
return _e14236;
}

GetPlayerProfileRequest::GetPlayerProfileRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetPlayerProfileRequest::~GetPlayerProfileRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "NextPlayerTurnRequest.h"

short NextPlayerTurnRequest::serializerID = -10817;













const char* NextPlayerTurnRequest::getMessageId() {
    return _MessageId;
}

void NextPlayerTurnRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool NextPlayerTurnRequest::isMessageIdSet() {
return _MessageIdSet;
}

void NextPlayerTurnRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* NextPlayerTurnRequest::getRequestId() {
return _RequestId;
}

void NextPlayerTurnRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool NextPlayerTurnRequest::isRequestIdSet() {
return _RequestIdSet;
}

void NextPlayerTurnRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* NextPlayerTurnRequest::getGameId() {
return _GameId;
}

void NextPlayerTurnRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool NextPlayerTurnRequest::isGameIdSet() {
return _GameIdSet;
}

void NextPlayerTurnRequest::unSetGameId() {
_GameIdSet = false;
}

//@Override
short NextPlayerTurnRequest::getSerializerID() {
return serializerID;
}

void* NextPlayerTurnRequest::clone() {
NextPlayerTurnRequest* _i15437 = new NextPlayerTurnRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15437->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15437->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_i15437->setGameId(_GameId);
}
return _i15437;
}

const char* NextPlayerTurnRequest::toString() {
const char* _h15438 = "";
_h15438 = NUtils::concat(_h15438, NUtils::concat(NUtils::concat("[", "NextPlayerTurnRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15438 = NUtils::concat(_h15438, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15438 = NUtils::concat(_h15438, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_h15438 = NUtils::concat(_h15438, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_h15438 = NUtils::concat(_h15438, "]");
return _h15438;
}

NextPlayerTurnRequest::NextPlayerTurnRequest(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

NextPlayerTurnRequest::~NextPlayerTurnRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "SaveAsGhostRequest.h"

short SaveAsGhostRequest::serializerID = -10697;













const char* SaveAsGhostRequest::getMessageId() {
    return _MessageId;
}

void SaveAsGhostRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SaveAsGhostRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SaveAsGhostRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SaveAsGhostRequest::getRequestId() {
return _RequestId;
}

void SaveAsGhostRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SaveAsGhostRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SaveAsGhostRequest::unSetRequestId() {
_RequestIdSet = false;
}

NGame* SaveAsGhostRequest::getGame() {
return _Game;
}

void SaveAsGhostRequest::setGame(NGame* value) {
if (_Game && _Game != value) {
delete _Game;
}
_Game = value;
_GameSet = true;
}

bool SaveAsGhostRequest::isGameSet() {
return _GameSet;
}

void SaveAsGhostRequest::unSetGame() {
_GameSet = false;
}

//@Override
short SaveAsGhostRequest::getSerializerID() {
return serializerID;
}

void* SaveAsGhostRequest::clone() {
SaveAsGhostRequest* _p13810 = new SaveAsGhostRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p13810->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p13810->setRequestId(_RequestId);
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_p13810->setGame((NGame*)(_Game->clone()));
}
return _p13810;
}

const char* SaveAsGhostRequest::toString() {
const char* _b13811 = "";
_b13811 = NUtils::concat(_b13811, NUtils::concat(NUtils::concat("[", "SaveAsGhostRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b13811 = NUtils::concat(_b13811, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b13811 = NUtils::concat(_b13811, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_b13811 = NUtils::concat(_b13811, NUtils::concat(NUtils::concat("_Game=", _Game->toString()), "| "));
}
_b13811 = NUtils::concat(_b13811, "]");
return _b13811;
}

SaveAsGhostRequest::SaveAsGhostRequest(){
this->_GameSet = false;
this->_Game = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SaveAsGhostRequest::~SaveAsGhostRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Game) {
delete _Game;
_Game=0;
}
}


#include "GameMessageError.h"

short GameMessageError::serializerID = -3122;













const char* GameMessageError::getMessageId() {
    return _MessageId;
}

void GameMessageError::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GameMessageError::isMessageIdSet() {
return _MessageIdSet;
}

void GameMessageError::unSetMessageId() {
_MessageIdSet = false;
}

const char* GameMessageError::getRequestId() {
return _RequestId;
}

void GameMessageError::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GameMessageError::isRequestIdSet() {
return _RequestIdSet;
}

void GameMessageError::unSetRequestId() {
_RequestIdSet = false;
}

const char* GameMessageError::getReason() {
return _Reason;
}

void GameMessageError::setReason(const char* value) {
if (_Reason && _Reason != value) {
delete _Reason;
}
if (value) {
_Reason = strdup(value);
} else {
_Reason = 0;
}
_ReasonSet = true;
}

bool GameMessageError::isReasonSet() {
return _ReasonSet;
}

void GameMessageError::unSetReason() {
_ReasonSet = false;
}

//@Override
short GameMessageError::getSerializerID() {
return serializerID;
}

void* GameMessageError::clone() {
GameMessageError* _k15610 = new GameMessageError();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k15610->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k15610->setRequestId(_RequestId);
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_k15610->setReason(_Reason);
}
return _k15610;
}

const char* GameMessageError::toString() {
const char* _b15611 = "";
_b15611 = NUtils::concat(_b15611, NUtils::concat(NUtils::concat("[", "GameMessageError"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b15611 = NUtils::concat(_b15611, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b15611 = NUtils::concat(_b15611, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_b15611 = NUtils::concat(_b15611, NUtils::concat(NUtils::concat("_Reason=", _Reason), "| "));
}
_b15611 = NUtils::concat(_b15611, "]");
return _b15611;
}

GameMessageError::GameMessageError(){
this->_ReasonSet = false;
this->_Reason = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GameMessageError::~GameMessageError(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Reason) {
delete _Reason;
_Reason = 0;
}
}


#include "GetFriendsStatus.h"

std::vector<GetFriendsStatus*>* GetFriendsStatus::_values = new std::vector<GetFriendsStatus*>();

GetFriendsStatus* GetFriendsStatus::AUTHENTICATION_REQUIRED = new GetFriendsStatus("AUTHENTICATION_REQUIRED", 0);

GetFriendsStatus* GetFriendsStatus::SUCCESS = new GetFriendsStatus("SUCCESS", 1);

GetFriendsStatus* GetFriendsStatus::INVALID_CALL = new GetFriendsStatus("INVALID_CALL", 3);

GetFriendsStatus* GetFriendsStatus::INTERNAL_ERROR = new GetFriendsStatus("INTERNAL_ERROR", 4);

std::vector<GetFriendsStatus*>* GetFriendsStatus::values() {
    return _values;
}





int GetFriendsStatus::getValue() {
return _value;
}

const char* GetFriendsStatus::name() {
return _name;
}

int GetFriendsStatus::ordinal() {
return _value;
}

GetFriendsStatus::GetFriendsStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetFriendsStatus* GetFriendsStatus::fromValue(int value) {
for (unsigned int _x3481 = 0; _x3481 < (unsigned int)_values->size(); _x3481++) {
GetFriendsStatus* _k3482 = (*_values)[_x3481];
if (_k3482->getValue() == value) {
return _k3482;
}
}
return 0;
}

GetFriendsStatus* GetFriendsStatus::valueOf(const char* name) {
for (unsigned int _d10742 = 0; _d10742 < (unsigned int)_values->size(); _d10742++) {
GetFriendsStatus* _p10743 = (*_values)[_d10742];
if (strcmp(name, _p10743->name()) == 0) {
return _p10743;
}
}
return 0;
}

//@Override
short GetFriendsStatus::getSerializerID() {
return -10198;
}

const char* GetFriendsStatus::toString() {
return NUtils::concat("GetFriendsStatus.", _name);
}

void* GetFriendsStatus::clone() {
return this;
}

GetFriendsStatus::~GetFriendsStatus(){
}


#include "BuyItemStatus.h"

std::vector<BuyItemStatus*>* BuyItemStatus::_values = new std::vector<BuyItemStatus*>();

BuyItemStatus* BuyItemStatus::SUCCESS = new BuyItemStatus("SUCCESS", 0);

BuyItemStatus* BuyItemStatus::NOT_ENOUGH_COINS = new BuyItemStatus("NOT_ENOUGH_COINS", 1);

BuyItemStatus* BuyItemStatus::UNKNOWN_ITEM = new BuyItemStatus("UNKNOWN_ITEM", 2);

BuyItemStatus* BuyItemStatus::INVALID_CALL = new BuyItemStatus("INVALID_CALL", 3);

BuyItemStatus* BuyItemStatus::INTERNAL_ERROR = new BuyItemStatus("INTERNAL_ERROR", 4);

std::vector<BuyItemStatus*>* BuyItemStatus::values() {
    return _values;
}





int BuyItemStatus::getValue() {
return _value;
}

const char* BuyItemStatus::name() {
return _name;
}

int BuyItemStatus::ordinal() {
return _value;
}

BuyItemStatus::BuyItemStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

BuyItemStatus* BuyItemStatus::fromValue(int value) {
for (unsigned int _a6627 = 0; _a6627 < (unsigned int)_values->size(); _a6627++) {
BuyItemStatus* _s6628 = (*_values)[_a6627];
if (_s6628->getValue() == value) {
return _s6628;
}
}
return 0;
}

BuyItemStatus* BuyItemStatus::valueOf(const char* name) {
for (unsigned int _o14848 = 0; _o14848 < (unsigned int)_values->size(); _o14848++) {
BuyItemStatus* _j14849 = (*_values)[_o14848];
if (strcmp(name, _j14849->name()) == 0) {
return _j14849;
}
}
return 0;
}

//@Override
short BuyItemStatus::getSerializerID() {
return -10338;
}

const char* BuyItemStatus::toString() {
return NUtils::concat("BuyItemStatus.", _name);
}

void* BuyItemStatus::clone() {
return this;
}

BuyItemStatus::~BuyItemStatus(){
}


#include "GetPlayerStorablesRequest.h"

short GetPlayerStorablesRequest::serializerID = -11057;













const char* GetPlayerStorablesRequest::getMessageId() {
    return _MessageId;
}

void GetPlayerStorablesRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetPlayerStorablesRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetPlayerStorablesRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetPlayerStorablesRequest::getRequestId() {
return _RequestId;
}

void GetPlayerStorablesRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetPlayerStorablesRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetPlayerStorablesRequest::unSetRequestId() {
_RequestIdSet = false;
}

NuggetaQuery* GetPlayerStorablesRequest::getDbQuery() {
return _DbQuery;
}

void GetPlayerStorablesRequest::setDbQuery(NuggetaQuery* value) {
if (_DbQuery && _DbQuery != value) {
delete _DbQuery;
}
_DbQuery = value;
_DbQuerySet = true;
}

bool GetPlayerStorablesRequest::isDbQuerySet() {
return _DbQuerySet;
}

void GetPlayerStorablesRequest::unSetDbQuery() {
_DbQuerySet = false;
}

//@Override
short GetPlayerStorablesRequest::getSerializerID() {
return serializerID;
}

void* GetPlayerStorablesRequest::clone() {
GetPlayerStorablesRequest* _c13808 = new GetPlayerStorablesRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c13808->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c13808->setRequestId(_RequestId);
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_c13808->setDbQuery((NuggetaQuery*)(_DbQuery->clone()));
}
return _c13808;
}

const char* GetPlayerStorablesRequest::toString() {
const char* _y13809 = "";
_y13809 = NUtils::concat(_y13809, NUtils::concat(NUtils::concat("[", "GetPlayerStorablesRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y13809 = NUtils::concat(_y13809, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y13809 = NUtils::concat(_y13809, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_y13809 = NUtils::concat(_y13809, NUtils::concat(NUtils::concat("_DbQuery=", _DbQuery->toString()), "| "));
}
_y13809 = NUtils::concat(_y13809, "]");
return _y13809;
}

GetPlayerStorablesRequest::GetPlayerStorablesRequest(){
this->_DbQuerySet = false;
this->_DbQuery = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetPlayerStorablesRequest::~GetPlayerStorablesRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_DbQuery) {
delete _DbQuery;
_DbQuery=0;
}
}


#include "AcceptInvitationStatus.h"

std::vector<AcceptInvitationStatus*>* AcceptInvitationStatus::_values = new std::vector<AcceptInvitationStatus*>();

AcceptInvitationStatus* AcceptInvitationStatus::SUCCESS = new AcceptInvitationStatus("SUCCESS", 0);

AcceptInvitationStatus* AcceptInvitationStatus::MISSING_INVITATION_ID = new AcceptInvitationStatus("MISSING_INVITATION_ID", 1);

AcceptInvitationStatus* AcceptInvitationStatus::UNKNOWN_INVITATION_ID = new AcceptInvitationStatus("UNKNOWN_INVITATION_ID", 2);

AcceptInvitationStatus* AcceptInvitationStatus::ALREADY_ACCEPTED = new AcceptInvitationStatus("ALREADY_ACCEPTED", 3);

AcceptInvitationStatus* AcceptInvitationStatus::ALREADY_REFUSED = new AcceptInvitationStatus("ALREADY_REFUSED", 4);

AcceptInvitationStatus* AcceptInvitationStatus::NOT_THE_INVITEE = new AcceptInvitationStatus("NOT_THE_INVITEE", 5);

AcceptInvitationStatus* AcceptInvitationStatus::INTERNAL_ERROR = new AcceptInvitationStatus("INTERNAL_ERROR", 6);

std::vector<AcceptInvitationStatus*>* AcceptInvitationStatus::values() {
    return _values;
}





int AcceptInvitationStatus::getValue() {
return _value;
}

const char* AcceptInvitationStatus::name() {
return _name;
}

int AcceptInvitationStatus::ordinal() {
return _value;
}

AcceptInvitationStatus::AcceptInvitationStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

AcceptInvitationStatus* AcceptInvitationStatus::fromValue(int value) {
for (unsigned int _u6185 = 0; _u6185 < (unsigned int)_values->size(); _u6185++) {
AcceptInvitationStatus* _r6186 = (*_values)[_u6185];
if (_r6186->getValue() == value) {
return _r6186;
}
}
return 0;
}

AcceptInvitationStatus* AcceptInvitationStatus::valueOf(const char* name) {
for (unsigned int _i14326 = 0; _i14326 < (unsigned int)_values->size(); _i14326++) {
AcceptInvitationStatus* _b14327 = (*_values)[_i14326];
if (strcmp(name, _b14327->name()) == 0) {
return _b14327;
}
}
return 0;
}

//@Override
short AcceptInvitationStatus::getSerializerID() {
return -11178;
}

const char* AcceptInvitationStatus::toString() {
return NUtils::concat("AcceptInvitationStatus.", _name);
}

void* AcceptInvitationStatus::clone() {
return this;
}

AcceptInvitationStatus::~AcceptInvitationStatus(){
}


#include "OpenUrl.h"

short OpenUrl::serializerID = -3157;













const char* OpenUrl::getMessageId() {
    return _MessageId;
}

void OpenUrl::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool OpenUrl::isMessageIdSet() {
return _MessageIdSet;
}

void OpenUrl::unSetMessageId() {
_MessageIdSet = false;
}

const char* OpenUrl::getRequestId() {
return _RequestId;
}

void OpenUrl::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool OpenUrl::isRequestIdSet() {
return _RequestIdSet;
}

void OpenUrl::unSetRequestId() {
_RequestIdSet = false;
}

const char* OpenUrl::getUrl() {
return _url;
}

void OpenUrl::setUrl(const char* value) {
if (_url && _url != value) {
delete _url;
}
if (value) {
_url = strdup(value);
} else {
_url = 0;
}
_urlSet = true;
}

bool OpenUrl::isurlSet() {
return _urlSet;
}

void OpenUrl::unSeturl() {
_urlSet = false;
}

//@Override
short OpenUrl::getSerializerID() {
return serializerID;
}

void* OpenUrl::clone() {
OpenUrl* _x10348 = new OpenUrl();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x10348->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x10348->setRequestId(_RequestId);
}
if (_urlSet == true && Utils::isNull(_url) == false) {
_x10348->setUrl(_url);
}
return _x10348;
}

const char* OpenUrl::toString() {
const char* _n10349 = "";
_n10349 = NUtils::concat(_n10349, NUtils::concat(NUtils::concat("[", "OpenUrl"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n10349 = NUtils::concat(_n10349, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n10349 = NUtils::concat(_n10349, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_urlSet == true && Utils::isNull(_url) == false) {
_n10349 = NUtils::concat(_n10349, NUtils::concat(NUtils::concat("_url=", _url), "| "));
}
_n10349 = NUtils::concat(_n10349, "]");
return _n10349;
}

OpenUrl::OpenUrl(){
this->_urlSet = false;
this->_url = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

OpenUrl::~OpenUrl(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_url) {
delete _url;
_url = 0;
}
}


#include "LogLevel.h"

std::vector<LogLevel*>* LogLevel::_values = new std::vector<LogLevel*>();

LogLevel* LogLevel::LOG_LEVEL_DEBUG = new LogLevel("LOG_LEVEL_DEBUG", 0);

LogLevel* LogLevel::LOG_LEVEL_INFO = new LogLevel("LOG_LEVEL_INFO", 1);

LogLevel* LogLevel::LOG_LEVEL_WARN = new LogLevel("LOG_LEVEL_WARN", 2);

LogLevel* LogLevel::LOG_LEVEL_ERROR = new LogLevel("LOG_LEVEL_ERROR", 3);

LogLevel* LogLevel::LOG_LEVEL_FATAL = new LogLevel("LOG_LEVEL_FATAL", 4);

std::vector<LogLevel*>* LogLevel::values() {
    return _values;
}





int LogLevel::getValue() {
return _value;
}

const char* LogLevel::name() {
return _name;
}

int LogLevel::ordinal() {
return _value;
}

LogLevel::LogLevel(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

LogLevel* LogLevel::fromValue(int value) {
for (unsigned int _a7035 = 0; _a7035 < (unsigned int)_values->size(); _a7035++) {
LogLevel* _m7036 = (*_values)[_a7035];
if (_m7036->getValue() == value) {
return _m7036;
}
}
return 0;
}

LogLevel* LogLevel::valueOf(const char* name) {
for (unsigned int _h15423 = 0; _h15423 < (unsigned int)_values->size(); _h15423++) {
LogLevel* _k15424 = (*_values)[_h15423];
if (strcmp(name, _k15424->name()) == 0) {
return _k15424;
}
}
return 0;
}

//@Override
short LogLevel::getSerializerID() {
return -12;
}

const char* LogLevel::toString() {
return NUtils::concat("LogLevel.", _name);
}

void* LogLevel::clone() {
return this;
}

LogLevel::~LogLevel(){
}


#include "IncreasePlayerWalletRequest.h"

short IncreasePlayerWalletRequest::serializerID = -10397;













const char* IncreasePlayerWalletRequest::getMessageId() {
    return _MessageId;
}

void IncreasePlayerWalletRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool IncreasePlayerWalletRequest::isMessageIdSet() {
return _MessageIdSet;
}

void IncreasePlayerWalletRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* IncreasePlayerWalletRequest::getRequestId() {
return _RequestId;
}

void IncreasePlayerWalletRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool IncreasePlayerWalletRequest::isRequestIdSet() {
return _RequestIdSet;
}

void IncreasePlayerWalletRequest::unSetRequestId() {
_RequestIdSet = false;
}

int IncreasePlayerWalletRequest::getValue() {
return _Value;
}

void IncreasePlayerWalletRequest::setValue(int value) {
_Value = value;
_ValueSet = true;
}

bool IncreasePlayerWalletRequest::isValueSet() {
return _ValueSet;
}

void IncreasePlayerWalletRequest::unSetValue() {
_ValueSet = false;
}

//@Override
short IncreasePlayerWalletRequest::getSerializerID() {
return serializerID;
}

void* IncreasePlayerWalletRequest::clone() {
IncreasePlayerWalletRequest* _b15751 = new IncreasePlayerWalletRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b15751->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b15751->setRequestId(_RequestId);
}
if (_ValueSet == true && Utils::isNullInteger(_Value) == false) {
_b15751->setValue(_Value);
}
return _b15751;
}

const char* IncreasePlayerWalletRequest::toString() {
const char* _j15752 = "";
_j15752 = NUtils::concat(_j15752, NUtils::concat(NUtils::concat("[", "IncreasePlayerWalletRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j15752 = NUtils::concat(_j15752, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j15752 = NUtils::concat(_j15752, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ValueSet == true && Utils::isNullInteger(_Value) == false) {
_j15752 = NUtils::concat(_j15752, NUtils::concat(NUtils::concat("_Value=", _Value), "| "));
}
_j15752 = NUtils::concat(_j15752, "]");
return _j15752;
}

IncreasePlayerWalletRequest::IncreasePlayerWalletRequest(){
this->_ValueSet = false;
this->_Value = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

IncreasePlayerWalletRequest::~IncreasePlayerWalletRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "AskForFriendStatus.h"

std::vector<AskForFriendStatus*>* AskForFriendStatus::_values = new std::vector<AskForFriendStatus*>();

AskForFriendStatus* AskForFriendStatus::AUTHENTICATION_REQUIRED = new AskForFriendStatus("AUTHENTICATION_REQUIRED", 0);

AskForFriendStatus* AskForFriendStatus::ALREADY_FRIENDS = new AskForFriendStatus("ALREADY_FRIENDS", 1);

AskForFriendStatus* AskForFriendStatus::PLAYER_NOT_EXISTS = new AskForFriendStatus("PLAYER_NOT_EXISTS", 2);

AskForFriendStatus* AskForFriendStatus::HAVE_PENDING_INVITATION = new AskForFriendStatus("HAVE_PENDING_INVITATION", 3);

AskForFriendStatus* AskForFriendStatus::PENDING = new AskForFriendStatus("PENDING", 5);

AskForFriendStatus* AskForFriendStatus::CANT_INVITE_YOURSELF = new AskForFriendStatus("CANT_INVITE_YOURSELF", 6);

AskForFriendStatus* AskForFriendStatus::INVALID_CALL = new AskForFriendStatus("INVALID_CALL", 7);

AskForFriendStatus* AskForFriendStatus::INTERNAL_ERROR = new AskForFriendStatus("INTERNAL_ERROR", 8);

std::vector<AskForFriendStatus*>* AskForFriendStatus::values() {
    return _values;
}





int AskForFriendStatus::getValue() {
return _value;
}

const char* AskForFriendStatus::name() {
return _name;
}

int AskForFriendStatus::ordinal() {
return _value;
}

AskForFriendStatus::AskForFriendStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

AskForFriendStatus* AskForFriendStatus::fromValue(int value) {
for (unsigned int _m7015 = 0; _m7015 < (unsigned int)_values->size(); _m7015++) {
AskForFriendStatus* _n7016 = (*_values)[_m7015];
if (_n7016->getValue() == value) {
return _n7016;
}
}
return 0;
}

AskForFriendStatus* AskForFriendStatus::valueOf(const char* name) {
for (unsigned int _o15403 = 0; _o15403 < (unsigned int)_values->size(); _o15403++) {
AskForFriendStatus* _c15404 = (*_values)[_o15403];
if (strcmp(name, _c15404->name()) == 0) {
return _c15404;
}
}
return 0;
}

//@Override
short AskForFriendStatus::getSerializerID() {
return -10018;
}

const char* AskForFriendStatus::toString() {
return NUtils::concat("AskForFriendStatus.", _name);
}

void* AskForFriendStatus::clone() {
return this;
}

AskForFriendStatus::~AskForFriendStatus(){
}


#include "DisconnectedContext.h"

short DisconnectedContext::serializerID = -3159;













const char* DisconnectedContext::getMessageId() {
    return _MessageId;
}

void DisconnectedContext::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool DisconnectedContext::isMessageIdSet() {
return _MessageIdSet;
}

void DisconnectedContext::unSetMessageId() {
_MessageIdSet = false;
}

const char* DisconnectedContext::getRequestId() {
return _RequestId;
}

void DisconnectedContext::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool DisconnectedContext::isRequestIdSet() {
return _RequestIdSet;
}

void DisconnectedContext::unSetRequestId() {
_RequestIdSet = false;
}

std::vector<NPlayer*>* DisconnectedContext::getParticipants() {
return _Participants;
}

void DisconnectedContext::setParticipants(std::vector<NPlayer*>* value) {
if (_Participants) {
for (unsigned int i=0; i < _Participants->size(); i++) {
delete (*_Participants)[i];
}
}
if (_Participants && _Participants != value) {
delete _Participants;
}
_Participants = value;
_ParticipantsSet = true;
}

bool DisconnectedContext::isParticipantsSet() {
return _ParticipantsSet;
}

void DisconnectedContext::unSetParticipants() {
_ParticipantsSet = false;
}

//@Override
short DisconnectedContext::getSerializerID() {
return serializerID;
}

void* DisconnectedContext::clone() {
DisconnectedContext* _h10344 = new DisconnectedContext();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h10344->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h10344->setRequestId(_RequestId);
}
if (_ParticipantsSet == true && Utils::isNull(_Participants) == false) {
std::vector<NPlayer*>* _t10345 = new std::vector<NPlayer*>();
for (unsigned int i = 0; i < (unsigned int)_Participants->size(); i++) {
void* _v10346 = _Participants->at(i);
if (_v10346 != 0) {
_t10345->push_back((NPlayer*)((NPlayer*)_v10346)->clone());
} else {
_t10345->push_back((NPlayer*)_v10346);
}
}
_h10344->setParticipants(_t10345);
}
return _h10344;
}

const char* DisconnectedContext::toString() {
const char* _v10347 = "";
_v10347 = NUtils::concat(_v10347, NUtils::concat(NUtils::concat("[", "DisconnectedContext"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v10347 = NUtils::concat(_v10347, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v10347 = NUtils::concat(_v10347, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ParticipantsSet == true && Utils::isNull(_Participants) == false) {
_v10347 = NUtils::concat(_v10347, NUtils::concat(NUtils::concat("_Participants=", "N/A"), "| "));
}
_v10347 = NUtils::concat(_v10347, "]");
return _v10347;
}

DisconnectedContext::DisconnectedContext(){
this->_ParticipantsSet = false;
this->_Participants = new std::vector<NPlayer*>();
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

DisconnectedContext::~DisconnectedContext(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Participants) {
for (unsigned int i=0; i < _Participants->size(); i++) {
delete (*_Participants)[i];
}
delete _Participants;
_Participants=0;;
}
}


#include "InvitePlayerStatus.h"

std::vector<InvitePlayerStatus*>* InvitePlayerStatus::_values = new std::vector<InvitePlayerStatus*>();

InvitePlayerStatus* InvitePlayerStatus::SUCCESS = new InvitePlayerStatus("SUCCESS", 0);

InvitePlayerStatus* InvitePlayerStatus::INVALID_CALL = new InvitePlayerStatus("INVALID_CALL", 1);

InvitePlayerStatus* InvitePlayerStatus::UNKNOWN_PLAYER_ID = new InvitePlayerStatus("UNKNOWN_PLAYER_ID", 2);

InvitePlayerStatus* InvitePlayerStatus::INTERNAL_ERROR = new InvitePlayerStatus("INTERNAL_ERROR", 3);

std::vector<InvitePlayerStatus*>* InvitePlayerStatus::values() {
    return _values;
}





int InvitePlayerStatus::getValue() {
return _value;
}

const char* InvitePlayerStatus::name() {
return _name;
}

int InvitePlayerStatus::ordinal() {
return _value;
}

InvitePlayerStatus::InvitePlayerStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

InvitePlayerStatus* InvitePlayerStatus::fromValue(int value) {
for (unsigned int _c5816 = 0; _c5816 < (unsigned int)_values->size(); _c5816++) {
InvitePlayerStatus* _u5817 = (*_values)[_c5816];
if (_u5817->getValue() == value) {
return _u5817;
}
}
return 0;
}

InvitePlayerStatus* InvitePlayerStatus::valueOf(const char* name) {
for (unsigned int _o13854 = 0; _o13854 < (unsigned int)_values->size(); _o13854++) {
InvitePlayerStatus* _n13855 = (*_values)[_o13854];
if (strcmp(name, _n13855->name()) == 0) {
return _n13855;
}
}
return 0;
}

//@Override
short InvitePlayerStatus::getSerializerID() {
return -11138;
}

const char* InvitePlayerStatus::toString() {
return NUtils::concat("InvitePlayerStatus.", _name);
}

void* InvitePlayerStatus::clone() {
return this;
}

InvitePlayerStatus::~InvitePlayerStatus(){
}


#include "RefuseFriendDemandResponse.h"

short RefuseFriendDemandResponse::serializerID = -10279;

















const char* RefuseFriendDemandResponse::getMessageId() {
    return _MessageId;
}

void RefuseFriendDemandResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RefuseFriendDemandResponse::isMessageIdSet() {
return _MessageIdSet;
}

void RefuseFriendDemandResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* RefuseFriendDemandResponse::getRequestId() {
return _RequestId;
}

void RefuseFriendDemandResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RefuseFriendDemandResponse::isRequestIdSet() {
return _RequestIdSet;
}

void RefuseFriendDemandResponse::unSetRequestId() {
_RequestIdSet = false;
}

RefuseFriendDemandStatus* RefuseFriendDemandResponse::getRefuseFriendDemandStatus() {
return _RefuseFriendDemandStatus;
}

void RefuseFriendDemandResponse::setRefuseFriendDemandStatus(RefuseFriendDemandStatus* value) {
_RefuseFriendDemandStatus = value;
_RefuseFriendDemandStatusSet = true;
}

bool RefuseFriendDemandResponse::isRefuseFriendDemandStatusSet() {
return _RefuseFriendDemandStatusSet;
}

void RefuseFriendDemandResponse::unSetRefuseFriendDemandStatus() {
_RefuseFriendDemandStatusSet = false;
}

const char* RefuseFriendDemandResponse::getFriendDemandId() {
return _FriendDemandId;
}

void RefuseFriendDemandResponse::setFriendDemandId(const char* value) {
if (_FriendDemandId && _FriendDemandId != value) {
delete _FriendDemandId;
}
if (value) {
_FriendDemandId = strdup(value);
} else {
_FriendDemandId = 0;
}
_FriendDemandIdSet = true;
}

bool RefuseFriendDemandResponse::isFriendDemandIdSet() {
return _FriendDemandIdSet;
}

void RefuseFriendDemandResponse::unSetFriendDemandId() {
_FriendDemandIdSet = false;
}

//@Override
short RefuseFriendDemandResponse::getSerializerID() {
return serializerID;
}

void* RefuseFriendDemandResponse::clone() {
RefuseFriendDemandResponse* _b14027 = new RefuseFriendDemandResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b14027->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b14027->setRequestId(_RequestId);
}
if (_RefuseFriendDemandStatusSet == true && Utils::isNull(_RefuseFriendDemandStatus) == false) {
_b14027->setRefuseFriendDemandStatus(_RefuseFriendDemandStatus);
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_b14027->setFriendDemandId(_FriendDemandId);
}
return _b14027;
}

const char* RefuseFriendDemandResponse::toString() {
const char* _d14028 = "";
_d14028 = NUtils::concat(_d14028, NUtils::concat(NUtils::concat("[", "RefuseFriendDemandResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d14028 = NUtils::concat(_d14028, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d14028 = NUtils::concat(_d14028, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_RefuseFriendDemandStatusSet == true && Utils::isNull(_RefuseFriendDemandStatus) == false) {
_d14028 = NUtils::concat(_d14028, NUtils::concat(NUtils::concat("_RefuseFriendDemandStatus=", _RefuseFriendDemandStatus->toString()), "| "));
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_d14028 = NUtils::concat(_d14028, NUtils::concat(NUtils::concat("_FriendDemandId=", _FriendDemandId), "| "));
}
_d14028 = NUtils::concat(_d14028, "]");
return _d14028;
}

RefuseFriendDemandResponse::RefuseFriendDemandResponse(){
this->_FriendDemandIdSet = false;
this->_FriendDemandId = 0;
this->_RefuseFriendDemandStatusSet = false;
this->_RefuseFriendDemandStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RefuseFriendDemandResponse::~RefuseFriendDemandResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_FriendDemandId) {
delete _FriendDemandId;
_FriendDemandId = 0;
}
}


#include "GetAchievementBoardStatus.h"

std::vector<GetAchievementBoardStatus*>* GetAchievementBoardStatus::_values = new std::vector<GetAchievementBoardStatus*>();

GetAchievementBoardStatus* GetAchievementBoardStatus::SUCCESS = new GetAchievementBoardStatus("SUCCESS", 0);

GetAchievementBoardStatus* GetAchievementBoardStatus::FAILURE = new GetAchievementBoardStatus("FAILURE", 1);

GetAchievementBoardStatus* GetAchievementBoardStatus::INTERNAL_ERROR = new GetAchievementBoardStatus("INTERNAL_ERROR", 2);

std::vector<GetAchievementBoardStatus*>* GetAchievementBoardStatus::values() {
    return _values;
}





int GetAchievementBoardStatus::getValue() {
return _value;
}

const char* GetAchievementBoardStatus::name() {
return _name;
}

int GetAchievementBoardStatus::ordinal() {
return _value;
}

GetAchievementBoardStatus::GetAchievementBoardStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetAchievementBoardStatus* GetAchievementBoardStatus::fromValue(int value) {
for (unsigned int _e5768 = 0; _e5768 < (unsigned int)_values->size(); _e5768++) {
GetAchievementBoardStatus* _x5769 = (*_values)[_e5768];
if (_x5769->getValue() == value) {
return _x5769;
}
}
return 0;
}

GetAchievementBoardStatus* GetAchievementBoardStatus::valueOf(const char* name) {
for (unsigned int _o13806 = 0; _o13806 < (unsigned int)_values->size(); _o13806++) {
GetAchievementBoardStatus* _e13807 = (*_values)[_o13806];
if (strcmp(name, _e13807->name()) == 0) {
return _e13807;
}
}
return 0;
}

//@Override
short GetAchievementBoardStatus::getSerializerID() {
return -10438;
}

const char* GetAchievementBoardStatus::toString() {
return NUtils::concat("GetAchievementBoardStatus.", _name);
}

void* GetAchievementBoardStatus::clone() {
return this;
}

GetAchievementBoardStatus::~GetAchievementBoardStatus(){
}


#include "AdDisplayedNotification.h"

short AdDisplayedNotification::serializerID = -3124;









const char* AdDisplayedNotification::getMessageId() {
    return _MessageId;
}

void AdDisplayedNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AdDisplayedNotification::isMessageIdSet() {
return _MessageIdSet;
}

void AdDisplayedNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* AdDisplayedNotification::getRequestId() {
return _RequestId;
}

void AdDisplayedNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AdDisplayedNotification::isRequestIdSet() {
return _RequestIdSet;
}

void AdDisplayedNotification::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short AdDisplayedNotification::getSerializerID() {
return serializerID;
}

void* AdDisplayedNotification::clone() {
AdDisplayedNotification* _y15200 = new AdDisplayedNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15200->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15200->setRequestId(_RequestId);
}
return _y15200;
}

const char* AdDisplayedNotification::toString() {
const char* _h15201 = "";
_h15201 = NUtils::concat(_h15201, NUtils::concat(NUtils::concat("[", "AdDisplayedNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15201 = NUtils::concat(_h15201, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15201 = NUtils::concat(_h15201, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_h15201 = NUtils::concat(_h15201, "]");
return _h15201;
}

AdDisplayedNotification::AdDisplayedNotification(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AdDisplayedNotification::~AdDisplayedNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "SavePlayerStorableStatus.h"

std::vector<SavePlayerStorableStatus*>* SavePlayerStorableStatus::_values = new std::vector<SavePlayerStorableStatus*>();

SavePlayerStorableStatus* SavePlayerStorableStatus::SUCCESS = new SavePlayerStorableStatus("SUCCESS", 0);

SavePlayerStorableStatus* SavePlayerStorableStatus::FAILURE = new SavePlayerStorableStatus("FAILURE", 1);

SavePlayerStorableStatus* SavePlayerStorableStatus::INVALID_CALL = new SavePlayerStorableStatus("INVALID_CALL", 2);

SavePlayerStorableStatus* SavePlayerStorableStatus::INTERNAL_ERROR = new SavePlayerStorableStatus("INTERNAL_ERROR", 3);

std::vector<SavePlayerStorableStatus*>* SavePlayerStorableStatus::values() {
    return _values;
}





int SavePlayerStorableStatus::getValue() {
return _value;
}

const char* SavePlayerStorableStatus::name() {
return _name;
}

int SavePlayerStorableStatus::ordinal() {
return _value;
}

SavePlayerStorableStatus::SavePlayerStorableStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SavePlayerStorableStatus* SavePlayerStorableStatus::fromValue(int value) {
for (unsigned int _a6727 = 0; _a6727 < (unsigned int)_values->size(); _a6727++) {
SavePlayerStorableStatus* _e6728 = (*_values)[_a6727];
if (_e6728->getValue() == value) {
return _e6728;
}
}
return 0;
}

SavePlayerStorableStatus* SavePlayerStorableStatus::valueOf(const char* name) {
for (unsigned int _p14984 = 0; _p14984 < (unsigned int)_values->size(); _p14984++) {
SavePlayerStorableStatus* _v14985 = (*_values)[_p14984];
if (strcmp(name, _v14985->name()) == 0) {
return _v14985;
}
}
return 0;
}

//@Override
short SavePlayerStorableStatus::getSerializerID() {
return -10998;
}

const char* SavePlayerStorableStatus::toString() {
return NUtils::concat("SavePlayerStorableStatus.", _name);
}

void* SavePlayerStorableStatus::clone() {
return this;
}

SavePlayerStorableStatus::~SavePlayerStorableStatus(){
}


#include "PauseSessionMonitoringStatus.h"

std::vector<PauseSessionMonitoringStatus*>* PauseSessionMonitoringStatus::_values = new std::vector<PauseSessionMonitoringStatus*>();

PauseSessionMonitoringStatus* PauseSessionMonitoringStatus::PAUSED = new PauseSessionMonitoringStatus("PAUSED", 0);

PauseSessionMonitoringStatus* PauseSessionMonitoringStatus::INTERNAL_ERROR = new PauseSessionMonitoringStatus("INTERNAL_ERROR", 1);

std::vector<PauseSessionMonitoringStatus*>* PauseSessionMonitoringStatus::values() {
    return _values;
}





int PauseSessionMonitoringStatus::getValue() {
return _value;
}

const char* PauseSessionMonitoringStatus::name() {
return _name;
}

int PauseSessionMonitoringStatus::ordinal() {
return _value;
}

PauseSessionMonitoringStatus::PauseSessionMonitoringStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

PauseSessionMonitoringStatus* PauseSessionMonitoringStatus::fromValue(int value) {
for (unsigned int _t6946 = 0; _t6946 < (unsigned int)_values->size(); _t6946++) {
PauseSessionMonitoringStatus* _y6947 = (*_values)[_t6946];
if (_y6947->getValue() == value) {
return _y6947;
}
}
return 0;
}

PauseSessionMonitoringStatus* PauseSessionMonitoringStatus::valueOf(const char* name) {
for (unsigned int _t15244 = 0; _t15244 < (unsigned int)_values->size(); _t15244++) {
PauseSessionMonitoringStatus* _j15245 = (*_values)[_t15244];
if (strcmp(name, _j15245->name()) == 0) {
return _j15245;
}
}
return 0;
}

//@Override
short PauseSessionMonitoringStatus::getSerializerID() {
return -11078;
}

const char* PauseSessionMonitoringStatus::toString() {
return NUtils::concat("PauseSessionMonitoringStatus.", _name);
}

void* PauseSessionMonitoringStatus::clone() {
return this;
}

PauseSessionMonitoringStatus::~PauseSessionMonitoringStatus(){
}


#include "StopPlugConnectionRequest.h"

short StopPlugConnectionRequest::serializerID = -3077;









const char* StopPlugConnectionRequest::getMessageId() {
    return _MessageId;
}

void StopPlugConnectionRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StopPlugConnectionRequest::isMessageIdSet() {
return _MessageIdSet;
}

void StopPlugConnectionRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* StopPlugConnectionRequest::getRequestId() {
return _RequestId;
}

void StopPlugConnectionRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StopPlugConnectionRequest::isRequestIdSet() {
return _RequestIdSet;
}

void StopPlugConnectionRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short StopPlugConnectionRequest::getSerializerID() {
return serializerID;
}

void* StopPlugConnectionRequest::clone() {
StopPlugConnectionRequest* _g14972 = new StopPlugConnectionRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g14972->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g14972->setRequestId(_RequestId);
}
return _g14972;
}

const char* StopPlugConnectionRequest::toString() {
const char* _c14973 = "";
_c14973 = NUtils::concat(_c14973, NUtils::concat(NUtils::concat("[", "StopPlugConnectionRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c14973 = NUtils::concat(_c14973, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c14973 = NUtils::concat(_c14973, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_c14973 = NUtils::concat(_c14973, "]");
return _c14973;
}

StopPlugConnectionRequest::StopPlugConnectionRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StopPlugConnectionRequest::~StopPlugConnectionRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "OpenUrlData.h"

short OpenUrlData::serializerID = -3164;





























const char* OpenUrlData::getMessageId() {
    return _MessageId;
}

void OpenUrlData::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool OpenUrlData::isMessageIdSet() {
return _MessageIdSet;
}

void OpenUrlData::unSetMessageId() {
_MessageIdSet = false;
}

const char* OpenUrlData::getRequestId() {
return _RequestId;
}

void OpenUrlData::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool OpenUrlData::isRequestIdSet() {
return _RequestIdSet;
}

void OpenUrlData::unSetRequestId() {
_RequestIdSet = false;
}

const char* OpenUrlData::getSessionId() {
return _SessionId;
}

void OpenUrlData::setSessionId(const char* value) {
if (_SessionId && _SessionId != value) {
delete _SessionId;
}
if (value) {
_SessionId = strdup(value);
} else {
_SessionId = 0;
}
_SessionIdSet = true;
}

bool OpenUrlData::isSessionIdSet() {
return _SessionIdSet;
}

void OpenUrlData::unSetSessionId() {
_SessionIdSet = false;
}

const char* OpenUrlData::getCallbackId() {
return _CallbackId;
}

void OpenUrlData::setCallbackId(const char* value) {
if (_CallbackId && _CallbackId != value) {
delete _CallbackId;
}
if (value) {
_CallbackId = strdup(value);
} else {
_CallbackId = 0;
}
_CallbackIdSet = true;
}

bool OpenUrlData::isCallbackIdSet() {
return _CallbackIdSet;
}

void OpenUrlData::unSetCallbackId() {
_CallbackIdSet = false;
}

const char* OpenUrlData::getCallbackUrl() {
return _CallbackUrl;
}

void OpenUrlData::setCallbackUrl(const char* value) {
if (_CallbackUrl && _CallbackUrl != value) {
delete _CallbackUrl;
}
if (value) {
_CallbackUrl = strdup(value);
} else {
_CallbackUrl = 0;
}
_CallbackUrlSet = true;
}

bool OpenUrlData::isCallbackUrlSet() {
return _CallbackUrlSet;
}

void OpenUrlData::unSetCallbackUrl() {
_CallbackUrlSet = false;
}

ThirdPartySource* OpenUrlData::getThirdPartySource() {
return _ThirdPartySource;
}

void OpenUrlData::setThirdPartySource(ThirdPartySource* value) {
_ThirdPartySource = value;
_ThirdPartySourceSet = true;
}

bool OpenUrlData::isThirdPartySourceSet() {
return _ThirdPartySourceSet;
}

void OpenUrlData::unSetThirdPartySource() {
_ThirdPartySourceSet = false;
}

const char* OpenUrlData::getThirdPartyId() {
return _ThirdPartyId;
}

void OpenUrlData::setThirdPartyId(const char* value) {
if (_ThirdPartyId && _ThirdPartyId != value) {
delete _ThirdPartyId;
}
if (value) {
_ThirdPartyId = strdup(value);
} else {
_ThirdPartyId = 0;
}
_ThirdPartyIdSet = true;
}

bool OpenUrlData::isThirdPartyIdSet() {
return _ThirdPartyIdSet;
}

void OpenUrlData::unSetThirdPartyId() {
_ThirdPartyIdSet = false;
}

//@Override
short OpenUrlData::getSerializerID() {
return serializerID;
}

void* OpenUrlData::clone() {
OpenUrlData* _p15588 = new OpenUrlData();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p15588->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p15588->setRequestId(_RequestId);
}
if (_SessionIdSet == true && Utils::isNull(_SessionId) == false) {
_p15588->setSessionId(_SessionId);
}
if (_CallbackIdSet == true && Utils::isNull(_CallbackId) == false) {
_p15588->setCallbackId(_CallbackId);
}
if (_CallbackUrlSet == true && Utils::isNull(_CallbackUrl) == false) {
_p15588->setCallbackUrl(_CallbackUrl);
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_p15588->setThirdPartySource(_ThirdPartySource);
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_p15588->setThirdPartyId(_ThirdPartyId);
}
return _p15588;
}

const char* OpenUrlData::toString() {
const char* _l15589 = "";
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("[", "OpenUrlData"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SessionIdSet == true && Utils::isNull(_SessionId) == false) {
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("_SessionId=", _SessionId), "| "));
}
if (_CallbackIdSet == true && Utils::isNull(_CallbackId) == false) {
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("_CallbackId=", _CallbackId), "| "));
}
if (_CallbackUrlSet == true && Utils::isNull(_CallbackUrl) == false) {
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("_CallbackUrl=", _CallbackUrl), "| "));
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("_ThirdPartySource=", _ThirdPartySource->toString()), "| "));
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_l15589 = NUtils::concat(_l15589, NUtils::concat(NUtils::concat("_ThirdPartyId=", _ThirdPartyId), "| "));
}
_l15589 = NUtils::concat(_l15589, "]");
return _l15589;
}

OpenUrlData::OpenUrlData(){
this->_ThirdPartyIdSet = false;
this->_ThirdPartyId = 0;
this->_ThirdPartySourceSet = false;
this->_ThirdPartySource = 0;
this->_CallbackUrlSet = false;
this->_CallbackUrl = 0;
this->_CallbackIdSet = false;
this->_CallbackId = 0;
this->_SessionIdSet = false;
this->_SessionId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

OpenUrlData::~OpenUrlData(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_SessionId) {
delete _SessionId;
_SessionId = 0;
}
if (_CallbackId) {
delete _CallbackId;
_CallbackId = 0;
}
if (_CallbackUrl) {
delete _CallbackUrl;
_CallbackUrl = 0;
}
if (_ThirdPartyId) {
delete _ThirdPartyId;
_ThirdPartyId = 0;
}
}


#include "FriendDemandNotification.h"

short FriendDemandNotification::serializerID = -3129;













const char* FriendDemandNotification::getMessageId() {
    return _MessageId;
}

void FriendDemandNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool FriendDemandNotification::isMessageIdSet() {
return _MessageIdSet;
}

void FriendDemandNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* FriendDemandNotification::getRequestId() {
return _RequestId;
}

void FriendDemandNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool FriendDemandNotification::isRequestIdSet() {
return _RequestIdSet;
}

void FriendDemandNotification::unSetRequestId() {
_RequestIdSet = false;
}

NFriendDemand* FriendDemandNotification::getFriendDemand() {
return _FriendDemand;
}

void FriendDemandNotification::setFriendDemand(NFriendDemand* value) {
if (_FriendDemand && _FriendDemand != value) {
delete _FriendDemand;
}
_FriendDemand = value;
_FriendDemandSet = true;
}

bool FriendDemandNotification::isFriendDemandSet() {
return _FriendDemandSet;
}

void FriendDemandNotification::unSetFriendDemand() {
_FriendDemandSet = false;
}

//@Override
short FriendDemandNotification::getSerializerID() {
return serializerID;
}

void* FriendDemandNotification::clone() {
FriendDemandNotification* _o14887 = new FriendDemandNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o14887->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o14887->setRequestId(_RequestId);
}
if (_FriendDemandSet == true && Utils::isNull(_FriendDemand) == false) {
_o14887->setFriendDemand((NFriendDemand*)(_FriendDemand->clone()));
}
return _o14887;
}

const char* FriendDemandNotification::toString() {
const char* _j14888 = "";
_j14888 = NUtils::concat(_j14888, NUtils::concat(NUtils::concat("[", "FriendDemandNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j14888 = NUtils::concat(_j14888, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j14888 = NUtils::concat(_j14888, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_FriendDemandSet == true && Utils::isNull(_FriendDemand) == false) {
_j14888 = NUtils::concat(_j14888, NUtils::concat(NUtils::concat("_FriendDemand=", _FriendDemand->toString()), "| "));
}
_j14888 = NUtils::concat(_j14888, "]");
return _j14888;
}

FriendDemandNotification::FriendDemandNotification(){
this->_FriendDemandSet = false;
this->_FriendDemand = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

FriendDemandNotification::~FriendDemandNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_FriendDemand) {
delete _FriendDemand;
_FriendDemand=0;
}
}


#include "IncreasePlayerWalletResponse.h"

short IncreasePlayerWalletResponse::serializerID = -10399;

















const char* IncreasePlayerWalletResponse::getMessageId() {
    return _MessageId;
}

void IncreasePlayerWalletResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool IncreasePlayerWalletResponse::isMessageIdSet() {
return _MessageIdSet;
}

void IncreasePlayerWalletResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* IncreasePlayerWalletResponse::getRequestId() {
return _RequestId;
}

void IncreasePlayerWalletResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool IncreasePlayerWalletResponse::isRequestIdSet() {
return _RequestIdSet;
}

void IncreasePlayerWalletResponse::unSetRequestId() {
_RequestIdSet = false;
}

IncreasePlayerWalletStatus* IncreasePlayerWalletResponse::getIncreasePlayerWalletStatus() {
return _IncreasePlayerWalletStatus;
}

void IncreasePlayerWalletResponse::setIncreasePlayerWalletStatus(IncreasePlayerWalletStatus* value) {
_IncreasePlayerWalletStatus = value;
_IncreasePlayerWalletStatusSet = true;
}

bool IncreasePlayerWalletResponse::isIncreasePlayerWalletStatusSet() {
return _IncreasePlayerWalletStatusSet;
}

void IncreasePlayerWalletResponse::unSetIncreasePlayerWalletStatus() {
_IncreasePlayerWalletStatusSet = false;
}

int IncreasePlayerWalletResponse::getValue() {
return _Value;
}

void IncreasePlayerWalletResponse::setValue(int value) {
_Value = value;
_ValueSet = true;
}

bool IncreasePlayerWalletResponse::isValueSet() {
return _ValueSet;
}

void IncreasePlayerWalletResponse::unSetValue() {
_ValueSet = false;
}

//@Override
short IncreasePlayerWalletResponse::getSerializerID() {
return serializerID;
}

void* IncreasePlayerWalletResponse::clone() {
IncreasePlayerWalletResponse* _s13976 = new IncreasePlayerWalletResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s13976->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s13976->setRequestId(_RequestId);
}
if (_IncreasePlayerWalletStatusSet == true && Utils::isNull(_IncreasePlayerWalletStatus) == false) {
_s13976->setIncreasePlayerWalletStatus(_IncreasePlayerWalletStatus);
}
if (_ValueSet == true && Utils::isNullInteger(_Value) == false) {
_s13976->setValue(_Value);
}
return _s13976;
}

const char* IncreasePlayerWalletResponse::toString() {
const char* _x13977 = "";
_x13977 = NUtils::concat(_x13977, NUtils::concat(NUtils::concat("[", "IncreasePlayerWalletResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x13977 = NUtils::concat(_x13977, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x13977 = NUtils::concat(_x13977, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_IncreasePlayerWalletStatusSet == true && Utils::isNull(_IncreasePlayerWalletStatus) == false) {
_x13977 = NUtils::concat(_x13977, NUtils::concat(NUtils::concat("_IncreasePlayerWalletStatus=", _IncreasePlayerWalletStatus->toString()), "| "));
}
if (_ValueSet == true && Utils::isNullInteger(_Value) == false) {
_x13977 = NUtils::concat(_x13977, NUtils::concat(NUtils::concat("_Value=", _Value), "| "));
}
_x13977 = NUtils::concat(_x13977, "]");
return _x13977;
}

IncreasePlayerWalletResponse::IncreasePlayerWalletResponse(){
this->_ValueSet = false;
this->_Value = 0;
this->_IncreasePlayerWalletStatusSet = false;
this->_IncreasePlayerWalletStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

IncreasePlayerWalletResponse::~IncreasePlayerWalletResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "UpdatePlayerStorableRequest.h"

short UpdatePlayerStorableRequest::serializerID = -11017;













const char* UpdatePlayerStorableRequest::getMessageId() {
    return _MessageId;
}

void UpdatePlayerStorableRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool UpdatePlayerStorableRequest::isMessageIdSet() {
return _MessageIdSet;
}

void UpdatePlayerStorableRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* UpdatePlayerStorableRequest::getRequestId() {
return _RequestId;
}

void UpdatePlayerStorableRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool UpdatePlayerStorableRequest::isRequestIdSet() {
return _RequestIdSet;
}

void UpdatePlayerStorableRequest::unSetRequestId() {
_RequestIdSet = false;
}

Storable* UpdatePlayerStorableRequest::getStorable() {
return _Storable;
}

void UpdatePlayerStorableRequest::setStorable(Storable* value) {
if (_Storable && _Storable != value) {
delete _Storable;
}
_Storable = value;
_StorableSet = true;
}

bool UpdatePlayerStorableRequest::isStorableSet() {
return _StorableSet;
}

void UpdatePlayerStorableRequest::unSetStorable() {
_StorableSet = false;
}

//@Override
short UpdatePlayerStorableRequest::getSerializerID() {
return serializerID;
}

void* UpdatePlayerStorableRequest::clone() {
UpdatePlayerStorableRequest* _q15263 = new UpdatePlayerStorableRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15263->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15263->setRequestId(_RequestId);
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_q15263->setStorable((Storable*)(_Storable->clone()));
}
return _q15263;
}

const char* UpdatePlayerStorableRequest::toString() {
const char* _t15264 = "";
_t15264 = NUtils::concat(_t15264, NUtils::concat(NUtils::concat("[", "UpdatePlayerStorableRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_t15264 = NUtils::concat(_t15264, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_t15264 = NUtils::concat(_t15264, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_t15264 = NUtils::concat(_t15264, NUtils::concat(NUtils::concat("_Storable=", _Storable->toString()), "| "));
}
_t15264 = NUtils::concat(_t15264, "]");
return _t15264;
}

UpdatePlayerStorableRequest::UpdatePlayerStorableRequest(){
this->_StorableSet = false;
this->_Storable = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

UpdatePlayerStorableRequest::~UpdatePlayerStorableRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storable) {
delete _Storable;
_Storable=0;
}
}


#include "ConnectionListenerCollection.h"



void ConnectionListenerCollection::fireConnectionReady() {
    int _t13958 = listeners->size();
    for (unsigned int _j13959 = 0; _j13959 < (unsigned int)_t13958; _j13959++) {
        ConnectionListener* _s5895 = (*listeners)[_j13959];
        _s5895->onConnectionReady(0);
    }
}

void ConnectionListenerCollection::fireConnectionFail() {
int _o5896 = listeners->size();
for (unsigned int _j5897 = 0; _j5897 < (unsigned int)_o5896; _j5897++) {
    ConnectionListener* _b13960 = (*listeners)[_j5897];
    _b13960->onConnectionFail(0);
}
}

void ConnectionListenerCollection::fireConnectionLost() {
int _a13961 = listeners->size();
for (unsigned int _l13962 = 0; _l13962 < (unsigned int)_a13961; _l13962++) {
ConnectionListener* _c5901 = (*listeners)[_l13962];
_c5901->onConnectionLost(0);
}
}

void ConnectionListenerCollection::fireInvalidVersionDetected() {
int _d5902 = listeners->size();
for (unsigned int _c13968 = 0; _c13968 < (unsigned int)_d5902; _c13968++) {
ConnectionListener* _h5904 = (*listeners)[_c13968];
_h5904->onInvalidVersionDetected(0);
}
}

void ConnectionListenerCollection::add(ConnectionListener* _j13963) {
listeners->push_back(_j13963);
}

void ConnectionListenerCollection::remove(ConnectionListener* _y13969) {
int _m13970 = listeners->size();
if (_m13970 > 0) {
int _h13971 = std::distance(listeners->begin(), std::find(listeners->begin(), listeners->end(), _y13969));
if (_h13971 >= 0)
listeners->erase(listeners->begin() + _h13971);
}
}

std::vector<ConnectionListener*>* ConnectionListenerCollection::getListeners() {
return listeners;
}

ConnectionListenerCollection::ConnectionListenerCollection(){
this->listeners = new std::vector<ConnectionListener*>();
}

ConnectionListenerCollection::~ConnectionListenerCollection(){
if (listeners) {
for (unsigned int i=0; i < listeners->size(); i++) {
delete (*listeners)[i];
}
delete listeners;
listeners=0;;
}
}


#include "SearchImmediateGameStatus.h"

std::vector<SearchImmediateGameStatus*>* SearchImmediateGameStatus::_values = new std::vector<SearchImmediateGameStatus*>();

SearchImmediateGameStatus* SearchImmediateGameStatus::ACCEPTED = new SearchImmediateGameStatus("ACCEPTED", 0);

SearchImmediateGameStatus* SearchImmediateGameStatus::GAME_NOT_FOUND = new SearchImmediateGameStatus("GAME_NOT_FOUND", 1);

SearchImmediateGameStatus* SearchImmediateGameStatus::ALREADY_IN_GAME = new SearchImmediateGameStatus("ALREADY_IN_GAME", 2);

SearchImmediateGameStatus* SearchImmediateGameStatus::REJECTED = new SearchImmediateGameStatus("REJECTED", 3);

SearchImmediateGameStatus* SearchImmediateGameStatus::INTERNAL_ERROR = new SearchImmediateGameStatus("INTERNAL_ERROR", 4);

SearchImmediateGameStatus* SearchImmediateGameStatus::INVALID_QUERY = new SearchImmediateGameStatus("INVALID_QUERY", 5);

std::vector<SearchImmediateGameStatus*>* SearchImmediateGameStatus::values() {
    return _values;
}





int SearchImmediateGameStatus::getValue() {
return _value;
}

const char* SearchImmediateGameStatus::name() {
return _name;
}

int SearchImmediateGameStatus::ordinal() {
return _value;
}

SearchImmediateGameStatus::SearchImmediateGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SearchImmediateGameStatus* SearchImmediateGameStatus::fromValue(int value) {
for (unsigned int _z7173 = 0; _z7173 < (unsigned int)_values->size(); _z7173++) {
SearchImmediateGameStatus* _t7174 = (*_values)[_z7173];
if (_t7174->getValue() == value) {
return _t7174;
}
}
return 0;
}

SearchImmediateGameStatus* SearchImmediateGameStatus::valueOf(const char* name) {
for (unsigned int _l15566 = 0; _l15566 < (unsigned int)_values->size(); _l15566++) {
SearchImmediateGameStatus* _k15567 = (*_values)[_l15566];
if (strcmp(name, _k15567->name()) == 0) {
return _k15567;
}
}
return 0;
}

//@Override
short SearchImmediateGameStatus::getSerializerID() {
return -10478;
}

const char* SearchImmediateGameStatus::toString() {
return NUtils::concat("SearchImmediateGameStatus.", _name);
}

void* SearchImmediateGameStatus::clone() {
return this;
}

SearchImmediateGameStatus::~SearchImmediateGameStatus(){
}


#include "SendGameChatToPlayerListRequest.h"

short SendGameChatToPlayerListRequest::serializerID = -10755;

















const char* SendGameChatToPlayerListRequest::getMessageId() {
    return _MessageId;
}

void SendGameChatToPlayerListRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SendGameChatToPlayerListRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SendGameChatToPlayerListRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SendGameChatToPlayerListRequest::getRequestId() {
return _RequestId;
}

void SendGameChatToPlayerListRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SendGameChatToPlayerListRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SendGameChatToPlayerListRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* SendGameChatToPlayerListRequest::getGameId() {
return _GameId;
}

void SendGameChatToPlayerListRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool SendGameChatToPlayerListRequest::isGameIdSet() {
return _GameIdSet;
}

void SendGameChatToPlayerListRequest::unSetGameId() {
_GameIdSet = false;
}

const char* SendGameChatToPlayerListRequest::getMessage() {
return _Message;
}

void SendGameChatToPlayerListRequest::setMessage(const char* value) {
if (_Message && _Message != value) {
delete _Message;
}
if (value) {
_Message = strdup(value);
} else {
_Message = 0;
}
_MessageSet = true;
}

bool SendGameChatToPlayerListRequest::isMessageSet() {
return _MessageSet;
}

void SendGameChatToPlayerListRequest::unSetMessage() {
_MessageSet = false;
}

//@Override
short SendGameChatToPlayerListRequest::getSerializerID() {
return serializerID;
}

void* SendGameChatToPlayerListRequest::clone() {
SendGameChatToPlayerListRequest* _r15141 = new SendGameChatToPlayerListRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r15141->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r15141->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_r15141->setGameId(_GameId);
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_r15141->setMessage(_Message);
}
return _r15141;
}

const char* SendGameChatToPlayerListRequest::toString() {
const char* _y15142 = "";
_y15142 = NUtils::concat(_y15142, NUtils::concat(NUtils::concat("[", "SendGameChatToPlayerListRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15142 = NUtils::concat(_y15142, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15142 = NUtils::concat(_y15142, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_y15142 = NUtils::concat(_y15142, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_y15142 = NUtils::concat(_y15142, NUtils::concat(NUtils::concat("_Message=", _Message), "| "));
}
_y15142 = NUtils::concat(_y15142, "]");
return _y15142;
}

SendGameChatToPlayerListRequest::SendGameChatToPlayerListRequest(){
this->_MessageSet = false;
this->_Message = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SendGameChatToPlayerListRequest::~SendGameChatToPlayerListRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
if (_Message) {
delete _Message;
_Message = 0;
}
}


#include "T795.h"

























T795::T795(MessageListener* _w14673){
    this->_d6527 = 0;
    this->_m14672 = 0;
    this->_f14671 = 0;
    this->_t14670 = 0;
    this->_t14669 = 0;
    this->_b14668 = NLoggerFactory::getLogger("FoldingNetworkConnection");
    this->_l14667 = new ConnectionInvalidVersionDetectedListenerCollection();
    this->_x14666 = new ConnectionFailListenerCollection();
    this->_k14665 = new ConnectionLostListenerCollection();
    this->_d14664 = new ConnectionReadyListenerCollection();
    this->_s14663 = 0;
    this->_k14662 = new std::vector<T799*>();
    this->_d6527 = _w14673;
}

//@Override
void T795::_m16331() {
    _m16955();
}

void T795::_m16955() {
int _d14674 = _k14662->size();
;
if (_d14674 != 0) {
    if (_s14663 != 0) {
        _s14663->_m16334(_t14669);
        _s14663->_m16338(_f14671);
        _s14663->_m16336(_t14670);
        _s14663->_m16340(_m14672);
        delete _t14669;
        delete _f14671;
        delete _t14670;
        delete _m14672;
    }
    _s14663 = (*_k14662)[0];
    _k14662->erase(_k14662->begin() + 0);
    _t14669 = new ConnectionReadyListener(this, &T795::onConnectionReady6);
    _s14663->_m16333(_t14669);
    _t14670 = new ConnectionLostListener(this, &T795::onConnectionLost7);
    _s14663->_m16335(_t14670);
    _f14671 = new ConnectionFailListener(this, &T795::onConnectionFail8);
    _s14663->_m16337(_f14671);
    _m14672 = new ConnectionInvalidVersionDetectedListener(this, &T795::onInvalidVersionDetected9);
    _s14663->_m16339(_m14672);
    ;
    _s14663->_m16331();
} else {
    ;
    _x14666->fireConnectionFail();
}
}

//@Override
void T795::_m16332() {
if (_s14663 != 0) {
_s14663->_m16332();
} else {
;
}
}

//@Override
void T795::_m16341(Message* _i14675) {
_s14663->_m16341(_i14675);
}

void T795::_m16327(T799* _e14676) {
_k14662->push_back(_e14676);
}

//@Override
void T795::_m16333(ConnectionReadyListener* connectionReadyListener) {
_d14664->add(connectionReadyListener);
}

//@Override
void T795::_m16335(ConnectionLostListener* connectionLostListener) {
_k14665->add(connectionLostListener);
}

//@Override
void T795::_m16337(ConnectionFailListener* connectionFailListener) {
_x14666->add(connectionFailListener);
}

//@Override
void T795::_m16339(ConnectionInvalidVersionDetectedListener* connectionInvalidVersionDetectedListener) {
_l14667->add(connectionInvalidVersionDetectedListener);
}

//@Override
void T795::_m16340(ConnectionInvalidVersionDetectedListener* _t14681) {
_l14667->remove(_t14681);
}

//@Override
void T795::_m16334(ConnectionReadyListener* _b14682) {
_d14664->remove(_b14682);
}

//@Override
void T795::_m16336(ConnectionLostListener* _d14683) {
_k14665->remove(_d14683);
}

//@Override
void T795::_m16338(ConnectionFailListener* _l14684) {
_x14666->remove(_l14684);
}

//@Override
void T795::_m16342(Message* _r14685, Message* _c14686) {
_s14663->_m16342(_r14685, _c14686);
}

T795::~T795(){
if (_k14662) {
for (unsigned int i=0; i < _k14662->size(); i++) {
delete (*_k14662)[i];
}
delete _k14662;
_k14662=0;;
}
if (_s14663) {
delete _s14663;
_s14663=0;
}
if (_d14664) {
delete _d14664;
_d14664=0;
}
if (_k14665) {
delete _k14665;
_k14665=0;
}
if (_x14666) {
delete _x14666;
_x14666=0;
}
if (_l14667) {
delete _l14667;
_l14667=0;
}
if (_b14668) {
delete _b14668;
_b14668=0;
}
if (_t14669) {
delete _t14669;
_t14669=0;
}
if (_t14670) {
delete _t14670;
_t14670=0;
}
if (_f14671) {
delete _f14671;
_f14671=0;
}
if (_m14672) {
delete _m14672;
_m14672=0;
}
if (_d6527) {
delete _d6527;
_d6527=0;
}
}

//@Override
void T795::onConnectionReady6() {
_s14663->_m16334(_t14669);
_d14664->fireConnectionReady();
return;
}

//@Override
void T795::onConnectionLost7() {
_s14663->_m16336(_t14670);
_k14665->fireConnectionLost();
return;
}

//@Override
void T795::onConnectionFail8() {
_s14663->_m16338(_f14671);
_m16955();
return;
}

void T795::onInvalidVersionDetected9() {
_s14663->_m16340(_m14672);
_l14667->fireInvalidVersionDetected();
return;
}


#include "GetGamesResponse.h"

short GetGamesResponse::serializerID = -10679;

















const char* GetGamesResponse::getMessageId() {
    return _MessageId;
}

void GetGamesResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetGamesResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetGamesResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetGamesResponse::getRequestId() {
return _RequestId;
}

void GetGamesResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetGamesResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetGamesResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetGamesStatus* GetGamesResponse::getGetGamesStatus() {
return _GetGamesStatus;
}

void GetGamesResponse::setGetGamesStatus(GetGamesStatus* value) {
_GetGamesStatus = value;
_GetGamesStatusSet = true;
}

bool GetGamesResponse::isGetGamesStatusSet() {
return _GetGamesStatusSet;
}

void GetGamesResponse::unSetGetGamesStatus() {
_GetGamesStatusSet = false;
}

std::vector<NGame*>* GetGamesResponse::getGames() {
return _Games;
}

void GetGamesResponse::setGames(std::vector<NGame*>* value) {
if (_Games) {
for (unsigned int i=0; i < _Games->size(); i++) {
delete (*_Games)[i];
}
}
if (_Games && _Games != value) {
delete _Games;
}
_Games = value;
_GamesSet = true;
}

bool GetGamesResponse::isGamesSet() {
return _GamesSet;
}

void GetGamesResponse::unSetGames() {
_GamesSet = false;
}

//@Override
short GetGamesResponse::getSerializerID() {
return serializerID;
}

void* GetGamesResponse::clone() {
GetGamesResponse* _s15527 = new GetGamesResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s15527->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s15527->setRequestId(_RequestId);
}
if (_GetGamesStatusSet == true && Utils::isNull(_GetGamesStatus) == false) {
_s15527->setGetGamesStatus(_GetGamesStatus);
}
if (_GamesSet == true && Utils::isNull(_Games) == false) {
std::vector<NGame*>* _r15528 = new std::vector<NGame*>();
for (unsigned int i = 0; i < (unsigned int)_Games->size(); i++) {
void* _b15529 = _Games->at(i);
if (_b15529 != 0) {
_r15528->push_back((NGame*)((NGame*)_b15529)->clone());
} else {
_r15528->push_back((NGame*)_b15529);
}
}
_s15527->setGames(_r15528);
}
return _s15527;
}

const char* GetGamesResponse::toString() {
const char* _c15530 = "";
_c15530 = NUtils::concat(_c15530, NUtils::concat(NUtils::concat("[", "GetGamesResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c15530 = NUtils::concat(_c15530, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c15530 = NUtils::concat(_c15530, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetGamesStatusSet == true && Utils::isNull(_GetGamesStatus) == false) {
_c15530 = NUtils::concat(_c15530, NUtils::concat(NUtils::concat("_GetGamesStatus=", _GetGamesStatus->toString()), "| "));
}
if (_GamesSet == true && Utils::isNull(_Games) == false) {
_c15530 = NUtils::concat(_c15530, NUtils::concat(NUtils::concat("_Games=", "N/A"), "| "));
}
_c15530 = NUtils::concat(_c15530, "]");
return _c15530;
}

GetGamesResponse::GetGamesResponse(){
this->_GamesSet = false;
this->_Games = new std::vector<NGame*>();
this->_GetGamesStatusSet = false;
this->_GetGamesStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetGamesResponse::~GetGamesResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Games) {
for (unsigned int i=0; i < _Games->size(); i++) {
delete (*_Games)[i];
}
delete _Games;
_Games=0;;
}
}


#include "PublishThirdPartyMessageResponse.h"

short PublishThirdPartyMessageResponse::serializerID = -10919;













const char* PublishThirdPartyMessageResponse::getMessageId() {
    return _MessageId;
}

void PublishThirdPartyMessageResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PublishThirdPartyMessageResponse::isMessageIdSet() {
return _MessageIdSet;
}

void PublishThirdPartyMessageResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* PublishThirdPartyMessageResponse::getRequestId() {
return _RequestId;
}

void PublishThirdPartyMessageResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PublishThirdPartyMessageResponse::isRequestIdSet() {
return _RequestIdSet;
}

void PublishThirdPartyMessageResponse::unSetRequestId() {
_RequestIdSet = false;
}

PublishThirdPartyMessageStatus* PublishThirdPartyMessageResponse::getPublishThirdPartyMessageStatus() {
return _PublishThirdPartyMessageStatus;
}

void PublishThirdPartyMessageResponse::setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus* value) {
_PublishThirdPartyMessageStatus = value;
_PublishThirdPartyMessageStatusSet = true;
}

bool PublishThirdPartyMessageResponse::isPublishThirdPartyMessageStatusSet() {
return _PublishThirdPartyMessageStatusSet;
}

void PublishThirdPartyMessageResponse::unSetPublishThirdPartyMessageStatus() {
_PublishThirdPartyMessageStatusSet = false;
}

//@Override
short PublishThirdPartyMessageResponse::getSerializerID() {
return serializerID;
}

void* PublishThirdPartyMessageResponse::clone() {
PublishThirdPartyMessageResponse* _q15586 = new PublishThirdPartyMessageResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15586->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15586->setRequestId(_RequestId);
}
if (_PublishThirdPartyMessageStatusSet == true && Utils::isNull(_PublishThirdPartyMessageStatus) == false) {
_q15586->setPublishThirdPartyMessageStatus(_PublishThirdPartyMessageStatus);
}
return _q15586;
}

const char* PublishThirdPartyMessageResponse::toString() {
const char* _r15587 = "";
_r15587 = NUtils::concat(_r15587, NUtils::concat(NUtils::concat("[", "PublishThirdPartyMessageResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r15587 = NUtils::concat(_r15587, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r15587 = NUtils::concat(_r15587, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_PublishThirdPartyMessageStatusSet == true && Utils::isNull(_PublishThirdPartyMessageStatus) == false) {
_r15587 = NUtils::concat(_r15587, NUtils::concat(NUtils::concat("_PublishThirdPartyMessageStatus=", _PublishThirdPartyMessageStatus->toString()), "| "));
}
_r15587 = NUtils::concat(_r15587, "]");
return _r15587;
}

PublishThirdPartyMessageResponse::PublishThirdPartyMessageResponse(){
this->_PublishThirdPartyMessageStatusSet = false;
this->_PublishThirdPartyMessageStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PublishThirdPartyMessageResponse::~PublishThirdPartyMessageResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "GetStoreRequest.h"

short GetStoreRequest::serializerID = -10357;









const char* GetStoreRequest::getMessageId() {
    return _MessageId;
}

void GetStoreRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetStoreRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetStoreRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetStoreRequest::getRequestId() {
return _RequestId;
}

void GetStoreRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetStoreRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetStoreRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short GetStoreRequest::getSerializerID() {
return serializerID;
}

void* GetStoreRequest::clone() {
GetStoreRequest* _l14215 = new GetStoreRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l14215->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l14215->setRequestId(_RequestId);
}
return _l14215;
}

const char* GetStoreRequest::toString() {
const char* _g14216 = "";
_g14216 = NUtils::concat(_g14216, NUtils::concat(NUtils::concat("[", "GetStoreRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g14216 = NUtils::concat(_g14216, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g14216 = NUtils::concat(_g14216, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_g14216 = NUtils::concat(_g14216, "]");
return _g14216;
}

GetStoreRequest::GetStoreRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetStoreRequest::~GetStoreRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "NWorldUpdate.h"

short NWorldUpdate::serializerID = -3042;













const char* NWorldUpdate::getStoreId() {
    return _storeId;
}

void NWorldUpdate::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NWorldUpdate::isstoreIdSet() {
return _storeIdSet;
}

void NWorldUpdate::unSetstoreId() {
_storeIdSet = false;
}

int NWorldUpdate::getUpdate() {
return _Update;
}

void NWorldUpdate::setUpdate(int value) {
_Update = value;
_UpdateSet = true;
}

bool NWorldUpdate::isUpdateSet() {
return _UpdateSet;
}

void NWorldUpdate::unSetUpdate() {
_UpdateSet = false;
}

std::vector<Message*>* NWorldUpdate::getValues() {
return _Values;
}

void NWorldUpdate::setValues(std::vector<Message*>* value) {
if (_Values) {
for (unsigned int i=0; i < _Values->size(); i++) {
delete (*_Values)[i];
}
}
if (_Values && _Values != value) {
delete _Values;
}
_Values = value;
_ValuesSet = true;
}

bool NWorldUpdate::isValuesSet() {
return _ValuesSet;
}

void NWorldUpdate::unSetValues() {
_ValuesSet = false;
}

//@Override
short NWorldUpdate::getSerializerID() {
return serializerID;
}

void* NWorldUpdate::clone() {
NWorldUpdate* _k15151 = new NWorldUpdate();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_k15151->setStoreId(_storeId);
}
if (_UpdateSet == true && Utils::isNullInteger(_Update) == false) {
_k15151->setUpdate(_Update);
}
if (_ValuesSet == true && Utils::isNull(_Values) == false) {
std::vector<Message*>* _x15152 = new std::vector<Message*>();
for (unsigned int i = 0; i < (unsigned int)_Values->size(); i++) {
void* _y15153 = _Values->at(i);
if (_y15153 != 0) {
_x15152->push_back((Message*)((Message*)_y15153)->clone());
} else {
_x15152->push_back((Message*)_y15153);
}
}
_k15151->setValues(_x15152);
}
return _k15151;
}

const char* NWorldUpdate::toString() {
const char* _w15154 = "";
_w15154 = NUtils::concat(_w15154, NUtils::concat(NUtils::concat("[", "NWorldUpdate"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_w15154 = NUtils::concat(_w15154, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_UpdateSet == true && Utils::isNullInteger(_Update) == false) {
_w15154 = NUtils::concat(_w15154, NUtils::concat(NUtils::concat("_Update=", _Update), "| "));
}
if (_ValuesSet == true && Utils::isNull(_Values) == false) {
_w15154 = NUtils::concat(_w15154, NUtils::concat(NUtils::concat("_Values=", "N/A"), "| "));
}
_w15154 = NUtils::concat(_w15154, "]");
return _w15154;
}

NWorldUpdate::NWorldUpdate(){
this->_ValuesSet = false;
this->_Values = new std::vector<Message*>();
this->_UpdateSet = false;
this->_Update = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NWorldUpdate::~NWorldUpdate(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Values) {
for (unsigned int i=0; i < _Values->size(); i++) {
delete (*_Values)[i];
}
delete _Values;
_Values=0;;
}
}


#include "T813.h"

const char* T813::_e15273 = "api-client-java";

bool T813::_m16031(T810* _t15274, void* _m15275, short _d15276, T808* _y15277) {
    if (_m15275 == 0) {
        return false;
    }
    _y15277->_m16035(_d15276);
    _m16037(_t15274, _m15275, _y15277);
    return true;
}

bool T813::_m16037(T810* factory, void* _g15279, T808* stream) {
if (_g15279 == 0) {
    return false;
}
stream->_m16036(T809::_v15501);
int _r15281 = stream->_m16028();
stream->_m16029(4);
int _t15282 = stream->_m16028();
Serializable* _w15283 = (Serializable*)_g15279;
short _y15284 = _w15283->getSerializerID();
stream->_m16035(_y15284);
factory->_m15769(_w15283, (T808*)stream);
stream->_m16038(_r15281, stream->_m16028() - _t15282);
return true;
}

bool T813::_m16042(T810* _i15285, std::vector<int>* _o15286, int _e15287, T808* _n15288) {
if (_o15286 == 0) {
return false;
}
_n15288->_m16035((short)_e15287);
_n15288->_m16036(T809::_y15502);
int _t6971 = _n15288->_m16028();
_n15288->_m16029(4);
int _r6972 = _o15286->size();
_n15288->_m16035((short)_r6972);
for (unsigned int _l6973 = 0; _l6973 < (unsigned int)_r6972; _l6973++) {
int _i15292 = (*_o15286)[_l6973];
if (Utils::isNullInteger(_i15292)) {
    _n15288->_m16036(T809::_g15500);
} else {
    _m16027(_i15292, _n15288);
}
}
_n15288->_m16038(_t6971, _n15288->_m16028() - _t6971);
return true;
}

bool T813::_m16043(T810* factory, std::vector<short>* _t15294, int property, T808* stream) {
if (_t15294 == 0) {
return false;
}
stream->_m16035((short)property);
stream->_m16036(T809::_y15502);
int _m15289 = stream->_m16028();
stream->_m16029(4);
int _s15290 = _t15294->size();
stream->_m16035((short)_s15290);
for (unsigned int _b15291 = 0; _b15291 < (unsigned int)_s15290; _b15291++) {
short _s15300 = (*_t15294)[_b15291];
if (Utils::isNullShort(_s15300)) {
stream->_m16036(T809::_g15500);
} else {
_m17017(_s15300, stream);
}
}
stream->_m16038(_m15289, stream->_m16028() - _m15289);
return true;
}

bool T813::_m16044(T810* _o15293, std::vector<long long>* _m15302, int _z15295, T808* _v15296) {
if (_m15302 == 0) {
return false;
}
_v15296->_m16035((short)_z15295);
_v15296->_m16036(T809::_y15502);
int _t6979 = _v15296->_m16028();
_v15296->_m16029(4);
int _e6980 = _m15302->size();
_v15296->_m16035((short)_e6980);
for (unsigned int _c6981 = 0; _c6981 < (unsigned int)_e6980; _c6981++) {
long long _q15308 = (*_m15302)[_c6981];
if (Utils::isNullLong(_q15308)) {
_v15296->_m16036(T809::_g15500);
} else {
_m17018(_q15308, _v15296);
}
}
_v15296->_m16038(_t6979, _v15296->_m16028() - _t6979);
return true;
}

bool T813::_m16045(T810* factory, std::vector<float>* _h15310, int property, T808* stream) {
if (_h15310 == 0) {
return false;
}
stream->_m16035((short)property);
stream->_m16036(T809::_y15502);
int _w15297 = stream->_m16028();
stream->_m16029(4);
int _x15298 = _h15310->size();
stream->_m16035((short)_x15298);
for (unsigned int _s15299 = 0; _s15299 < (unsigned int)_x15298; _s15299++) {
float _j15316 = (*_h15310)[_s15299];
if (Utils::isNullFloat(_j15316)) {
stream->_m16036(T809::_g15500);
} else {
_m17019(_j15316, stream);
}
}
stream->_m16038(_w15297, stream->_m16028() - _w15297);
return true;
}

bool T813::_m16046(T810* _h15301, std::vector<double>* _n15318, int _e15303, T808* _p15304) {
if (_n15318 == 0) {
return false;
}
_p15304->_m16035((short)_e15303);
_p15304->_m16036(T809::_y15502);
int _f6987 = _p15304->_m16028();
_p15304->_m16029(4);
int _z6988 = _n15318->size();
_p15304->_m16035((short)_z6988);
for (unsigned int _p6989 = 0; _p6989 < (unsigned int)_z6988; _p6989++) {
double _s15324 = (*_n15318)[_p6989];
if (Utils::isNullDouble(_s15324)) {
_p15304->_m16036(T809::_g15500);
} else {
_m17020(_s15324, _p15304);
}
}
_p15304->_m16038(_f6987, _p15304->_m16028() - _f6987);
return true;
}

bool T813::_m16047(T810* factory, std::vector<bool>* _w15326, int property, T808* stream) {
if (_w15326 == 0) {
return false;
}
stream->_m16035((short)property);
stream->_m16036(T809::_y15502);
int _s15305 = stream->_m16028();
stream->_m16029(4);
int _n15306 = _w15326->size();
stream->_m16035((short)_n15306);
for (unsigned int _u15307 = 0; _u15307 < (unsigned int)_n15306; _u15307++) {
bool _y15332 = (*_w15326)[_u15307];
if (Utils::isNullBoolean(_y15332)) {
stream->_m16036(T809::_g15500);
} else {
_m17021(_y15332, stream);
}
}
stream->_m16038(_s15305, stream->_m16028() - _s15305);
return true;
}

bool T813::_m16041(T810* _d15333, std::vector<const char*>* _b15334, int _t15335, T808* _n15312) {
if (_b15334 == 0) {
return false;
}
_n15312->_m16035((short)_t15335);
_n15312->_m16036(T809::_y15502);
int _e15337 = _n15312->_m16028();
_n15312->_m16029(4);
int _r15338 = _b15334->size();
_n15312->_m16035((short)_r15338);
for (unsigned int _t15339 = 0; _t15339 < (unsigned int)_r15338; _t15339++) {
const char* _u15340 = (*_b15334)[_t15339];
if (_u15340 == 0) {
_n15312->_m16036(T809::_g15500);
} else {
_m17022(_u15340, _n15312);
}
}
_n15312->_m16038(_e15337, _n15312->_m16028() - _e15337);
return true;
}

bool T813::_m16030(const char* stringValue, int propertyId, T808* stream) {
if (Utils::isNull(stringValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17022(stringValue, stream);
return true;
}

bool T813::_m17022(const char* _e15344, T808* stream) {
if (Utils::isNull(_e15344)) {
return false;
}
stream->_m16036(T809::_p15510);
stream->_m16991(_e15344);
return true;
}

bool T813::_m16034(double doubleValue, int propertyId, T808* stream) {
if (Utils::isNullDouble(doubleValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17020(doubleValue, stream);
return true;
}

bool T813::_m17020(double _x15349, T808* stream) {
if (Utils::isNullDouble(_x15349)) {
return false;
}
stream->_m16036(T809::_d15509);
stream->_m16992(_x15349);
return true;
}

bool T813::_m16039(int intValue, int propertyId, T808* _w15320) {
if (Utils::isNullInteger(intValue)) {
return false;
}
_w15320->_m16035((short)propertyId);
_m16027(intValue, _w15320);
return true;
}

bool T813::_m16027(int _h15354, T808* stream) {
if (Utils::isNullInteger(_h15354)) {
return false;
}
stream->_m16036(T809::_o15505);
stream->_m16993(_h15354);
return true;
}

bool T813::_m17023(NDate* _v15356, int propertyId, T808* stream) {
if (Utils::isNullDate(_v15356)) {
return false;
}
_m16040(_v15356->getTime(), propertyId, stream);
return true;
}

bool T813::_m16040(long long longValue, int propertyId, T808* stream) {
if (Utils::isNullLong(longValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17018(longValue, stream);
return true;
}

bool T813::_m17018(long long _q15362, T808* stream) {
if (Utils::isNullLong(_q15362)) {
return false;
}
stream->_m16036(T809::_d15507);
stream->_m16994(_q15362);
return true;
}

bool T813::_m17024(unsigned char _s15364, T808* _g15328) {
if (Utils::isNullByte(_s15364)) {
return false;
}
_g15328->_m16036(T809::_r15504);
_g15328->_m16036(_s15364);
return true;
}

bool T813::_m17025(short shortValue, int propertyId, T808* stream) {
if (Utils::isNullShort(shortValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17017(shortValue, stream);
return true;
}

bool T813::_m17017(short _l15369, T808* stream) {
if (Utils::isNullShort(_l15369)) {
return false;
}
stream->_m16036(T809::_m15506);
stream->_m16035(_l15369);
return true;
}

bool T813::_m17026(float floatValue, int propertyId, T808* stream) {
if (Utils::isNullFloat(floatValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17019(floatValue, stream);
return true;
}

bool T813::_m17019(float _u15374, T808* stream) {
if (Utils::isNullFloat(_u15374)) {
return false;
}
stream->_m16036(T809::_f15508);
stream->_m16995(_u15374);
return true;
}

bool T813::_m16033(bool booleanValue, int _c15377, T808* _e15336) {
if (Utils::isNullBoolean(booleanValue)) {
return false;
}
_e15336->_m16035((short)_c15377);
_m17021(booleanValue, _e15336);
return true;
}

bool T813::_m17021(bool _w15379, T808* stream) {
if (Utils::isNullBoolean(_w15379)) {
return false;
}
stream->_m16036(T809::_m15512);
if (_w15379 == true) {
stream->_m16036((unsigned char)1);
} else if (_w15379 == false) {
stream->_m16036((unsigned char)0);
}
return true;
}

bool T813::_m16048(T810* _q15381, NMatrix2* _c15382, int _j15383, T808* _x15384) {
if (Utils::isNull(_c15382)) {
return false;
}
_x15384->_m16035((short)_j15383);
_x15384->_m16036(T809::_c15503);
int _x15385 = _x15384->_m16028();
_x15384->_m16029(4);
short _e15386 = _c15382->getRowCount();
short _e15387 = _c15382->getColumnCount();
_x15384->_m16035((short)_e15386);
_x15384->_m16035((short)_e15387);
for (unsigned short _p15388 = 0; _p15388 < (unsigned int)_e15386; _p15388++) {
for (unsigned short _q15389 = 0; _q15389 < (unsigned int)_e15387; _q15389++) {
Serializable* _y15390 = _c15382->getItem(_p15388, _q15389);
if (Utils::isNull(_y15390)) {
_x15384->_m16036(T809::_g15500);
} else {
_m16037(_q15381, _y15390, _x15384);
}
}
}
_x15384->_m16038(_x15385, _x15384->_m16028() - _x15385);
return true;
}

T813::T813(){
}

T813::~T813(){
}


#include "GetLeaderboardStatus.h"

std::vector<GetLeaderboardStatus*>* GetLeaderboardStatus::_values = new std::vector<GetLeaderboardStatus*>();

GetLeaderboardStatus* GetLeaderboardStatus::SUCCESS = new GetLeaderboardStatus("SUCCESS", 0);

GetLeaderboardStatus* GetLeaderboardStatus::FAILURE = new GetLeaderboardStatus("FAILURE", 1);

GetLeaderboardStatus* GetLeaderboardStatus::UNKNOWN_LEADERBOARD = new GetLeaderboardStatus("UNKNOWN_LEADERBOARD", 2);

GetLeaderboardStatus* GetLeaderboardStatus::INVALID_CALL = new GetLeaderboardStatus("INVALID_CALL", 3);

GetLeaderboardStatus* GetLeaderboardStatus::INTERNAL_ERROR = new GetLeaderboardStatus("INTERNAL_ERROR", 4);

std::vector<GetLeaderboardStatus*>* GetLeaderboardStatus::values() {
    return _values;
}





int GetLeaderboardStatus::getValue() {
return _value;
}

const char* GetLeaderboardStatus::name() {
return _name;
}

int GetLeaderboardStatus::ordinal() {
return _value;
}

GetLeaderboardStatus::GetLeaderboardStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetLeaderboardStatus* GetLeaderboardStatus::fromValue(int value) {
for (unsigned int _e6745 = 0; _e6745 < (unsigned int)_values->size(); _e6745++) {
GetLeaderboardStatus* _y6746 = (*_values)[_e6745];
if (_y6746->getValue() == value) {
return _y6746;
}
}
return 0;
}

GetLeaderboardStatus* GetLeaderboardStatus::valueOf(const char* name) {
for (unsigned int _p15015 = 0; _p15015 < (unsigned int)_values->size(); _p15015++) {
GetLeaderboardStatus* _y15016 = (*_values)[_p15015];
if (strcmp(name, _y15016->name()) == 0) {
return _y15016;
}
}
return 0;
}

//@Override
short GetLeaderboardStatus::getSerializerID() {
return -10318;
}

const char* GetLeaderboardStatus::toString() {
return NUtils::concat("GetLeaderboardStatus.", _name);
}

void* GetLeaderboardStatus::clone() {
return this;
}

GetLeaderboardStatus::~GetLeaderboardStatus(){
}


#include "InvalidVersion.h"

short InvalidVersion::serializerID = -3002;









const char* InvalidVersion::getMessageId() {
    return _MessageId;
}

void InvalidVersion::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InvalidVersion::isMessageIdSet() {
return _MessageIdSet;
}

void InvalidVersion::unSetMessageId() {
_MessageIdSet = false;
}

const char* InvalidVersion::getRequestId() {
return _RequestId;
}

void InvalidVersion::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InvalidVersion::isRequestIdSet() {
return _RequestIdSet;
}

void InvalidVersion::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short InvalidVersion::getSerializerID() {
return serializerID;
}

void* InvalidVersion::clone() {
InvalidVersion* _r15240 = new InvalidVersion();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r15240->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r15240->setRequestId(_RequestId);
}
return _r15240;
}

const char* InvalidVersion::toString() {
const char* _o15241 = "";
_o15241 = NUtils::concat(_o15241, NUtils::concat(NUtils::concat("[", "InvalidVersion"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o15241 = NUtils::concat(_o15241, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o15241 = NUtils::concat(_o15241, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_o15241 = NUtils::concat(_o15241, "]");
return _o15241;
}

InvalidVersion::InvalidVersion(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InvalidVersion::~InvalidVersion(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "RemoveStorableResponse.h"

short RemoveStorableResponse::serializerID = -10879;

















const char* RemoveStorableResponse::getMessageId() {
    return _MessageId;
}

void RemoveStorableResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RemoveStorableResponse::isMessageIdSet() {
return _MessageIdSet;
}

void RemoveStorableResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* RemoveStorableResponse::getRequestId() {
return _RequestId;
}

void RemoveStorableResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RemoveStorableResponse::isRequestIdSet() {
return _RequestIdSet;
}

void RemoveStorableResponse::unSetRequestId() {
_RequestIdSet = false;
}

RemoveStorableStatus* RemoveStorableResponse::getRemoveStorableStatus() {
return _RemoveStorableStatus;
}

void RemoveStorableResponse::setRemoveStorableStatus(RemoveStorableStatus* value) {
_RemoveStorableStatus = value;
_RemoveStorableStatusSet = true;
}

bool RemoveStorableResponse::isRemoveStorableStatusSet() {
return _RemoveStorableStatusSet;
}

void RemoveStorableResponse::unSetRemoveStorableStatus() {
_RemoveStorableStatusSet = false;
}

const char* RemoveStorableResponse::getStoreId() {
return _StoreId;
}

void RemoveStorableResponse::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
delete _StoreId;
}
if (value) {
_StoreId = strdup(value);
} else {
_StoreId = 0;
}
_StoreIdSet = true;
}

bool RemoveStorableResponse::isStoreIdSet() {
return _StoreIdSet;
}

void RemoveStorableResponse::unSetStoreId() {
_StoreIdSet = false;
}

//@Override
short RemoveStorableResponse::getSerializerID() {
return serializerID;
}

void* RemoveStorableResponse::clone() {
RemoveStorableResponse* _p13956 = new RemoveStorableResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p13956->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p13956->setRequestId(_RequestId);
}
if (_RemoveStorableStatusSet == true && Utils::isNull(_RemoveStorableStatus) == false) {
_p13956->setRemoveStorableStatus(_RemoveStorableStatus);
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_p13956->setStoreId(_StoreId);
}
return _p13956;
}

const char* RemoveStorableResponse::toString() {
const char* _r13957 = "";
_r13957 = NUtils::concat(_r13957, NUtils::concat(NUtils::concat("[", "RemoveStorableResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r13957 = NUtils::concat(_r13957, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r13957 = NUtils::concat(_r13957, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_RemoveStorableStatusSet == true && Utils::isNull(_RemoveStorableStatus) == false) {
_r13957 = NUtils::concat(_r13957, NUtils::concat(NUtils::concat("_RemoveStorableStatus=", _RemoveStorableStatus->toString()), "| "));
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_r13957 = NUtils::concat(_r13957, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
_r13957 = NUtils::concat(_r13957, "]");
return _r13957;
}

RemoveStorableResponse::RemoveStorableResponse(){
this->_StoreIdSet = false;
this->_StoreId = 0;
this->_RemoveStorableStatusSet = false;
this->_RemoveStorableStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RemoveStorableResponse::~RemoveStorableResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
}


#include "NAchievementType.h"

std::vector<NAchievementType*>* NAchievementType::_values = new std::vector<NAchievementType*>();

NAchievementType* NAchievementType::SIMPLE = new NAchievementType("SIMPLE", 0);

NAchievementType* NAchievementType::PROGRESS = new NAchievementType("PROGRESS", 1);

std::vector<NAchievementType*>* NAchievementType::values() {
    return _values;
}





int NAchievementType::getValue() {
return _value;
}

const char* NAchievementType::name() {
return _name;
}

int NAchievementType::ordinal() {
return _value;
}

NAchievementType::NAchievementType(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

NAchievementType* NAchievementType::fromValue(int value) {
for (unsigned int _s6865 = 0; _s6865 < (unsigned int)_values->size(); _s6865++) {
NAchievementType* _p6866 = (*_values)[_s6865];
if (_p6866->getValue() == value) {
return _p6866;
}
}
return 0;
}

NAchievementType* NAchievementType::valueOf(const char* name) {
for (unsigned int _v15163 = 0; _v15163 < (unsigned int)_values->size(); _v15163++) {
NAchievementType* _f15164 = (*_values)[_v15163];
if (strcmp(name, _f15164->name()) == 0) {
return _f15164;
}
}
return 0;
}

//@Override
short NAchievementType::getSerializerID() {
return -39;
}

const char* NAchievementType::toString() {
return NUtils::concat("NAchievementType.", _name);
}

void* NAchievementType::clone() {
return this;
}

NAchievementType::~NAchievementType(){
}


#include "GetGamesStatus.h"

std::vector<GetGamesStatus*>* GetGamesStatus::_values = new std::vector<GetGamesStatus*>();

GetGamesStatus* GetGamesStatus::SUCCESS = new GetGamesStatus("SUCCESS", 0);

GetGamesStatus* GetGamesStatus::INTERNAL_ERROR = new GetGamesStatus("INTERNAL_ERROR", 1);

GetGamesStatus* GetGamesStatus::INVALID_QUERY = new GetGamesStatus("INVALID_QUERY", 2);

std::vector<GetGamesStatus*>* GetGamesStatus::values() {
    return _values;
}





int GetGamesStatus::getValue() {
return _value;
}

const char* GetGamesStatus::name() {
return _name;
}

int GetGamesStatus::ordinal() {
return _value;
}

GetGamesStatus::GetGamesStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetGamesStatus* GetGamesStatus::fromValue(int value) {
for (unsigned int _u7151 = 0; _u7151 < (unsigned int)_values->size(); _u7151++) {
GetGamesStatus* _j7152 = (*_values)[_u7151];
if (_j7152->getValue() == value) {
return _j7152;
}
}
return 0;
}

GetGamesStatus* GetGamesStatus::valueOf(const char* name) {
for (unsigned int _q15544 = 0; _q15544 < (unsigned int)_values->size(); _q15544++) {
GetGamesStatus* _u15545 = (*_values)[_q15544];
if (strcmp(name, _u15545->name()) == 0) {
return _u15545;
}
}
return 0;
}

//@Override
short GetGamesStatus::getSerializerID() {
return -10678;
}

const char* GetGamesStatus::toString() {
return NUtils::concat("GetGamesStatus.", _name);
}

void* GetGamesStatus::clone() {
return this;
}

GetGamesStatus::~GetGamesStatus(){
}


#include "StartRequest.h"

short StartRequest::serializerID = -3180;









const char* StartRequest::getMessageId() {
    return _MessageId;
}

void StartRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StartRequest::isMessageIdSet() {
return _MessageIdSet;
}

void StartRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* StartRequest::getRequestId() {
return _RequestId;
}

void StartRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StartRequest::isRequestIdSet() {
return _RequestIdSet;
}

void StartRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short StartRequest::getSerializerID() {
return serializerID;
}

void* StartRequest::clone() {
StartRequest* _i15218 = new StartRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15218->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15218->setRequestId(_RequestId);
}
return _i15218;
}

const char* StartRequest::toString() {
const char* _g15219 = "";
_g15219 = NUtils::concat(_g15219, NUtils::concat(NUtils::concat("[", "StartRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15219 = NUtils::concat(_g15219, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15219 = NUtils::concat(_g15219, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_g15219 = NUtils::concat(_g15219, "]");
return _g15219;
}

StartRequest::StartRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StartRequest::~StartRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "ExecutionStatus.h"

std::vector<ExecutionStatus*>* ExecutionStatus::_values = new std::vector<ExecutionStatus*>();

ExecutionStatus* ExecutionStatus::OK = new ExecutionStatus("OK", 0);

ExecutionStatus* ExecutionStatus::FAILED = new ExecutionStatus("FAILED", 1);

std::vector<ExecutionStatus*>* ExecutionStatus::values() {
    return _values;
}





int ExecutionStatus::getValue() {
return _value;
}

const char* ExecutionStatus::name() {
return _name;
}

int ExecutionStatus::ordinal() {
return _value;
}

ExecutionStatus::ExecutionStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

ExecutionStatus* ExecutionStatus::fromValue(int value) {
for (unsigned int _c6906 = 0; _c6906 < (unsigned int)_values->size(); _c6906++) {
ExecutionStatus* _h6907 = (*_values)[_c6906];
if (_h6907->getValue() == value) {
return _h6907;
}
}
return 0;
}

ExecutionStatus* ExecutionStatus::valueOf(const char* name) {
for (unsigned int _f15204 = 0; _f15204 < (unsigned int)_values->size(); _f15204++) {
ExecutionStatus* _l15205 = (*_values)[_f15204];
if (strcmp(name, _l15205->name()) == 0) {
return _l15205;
}
}
return 0;
}

//@Override
short ExecutionStatus::getSerializerID() {
return -24;
}

const char* ExecutionStatus::toString() {
return NUtils::concat("ExecutionStatus.", _name);
}

void* ExecutionStatus::clone() {
return this;
}

ExecutionStatus::~ExecutionStatus(){
}


#include "NFriendDemandStatus.h"

std::vector<NFriendDemandStatus*>* NFriendDemandStatus::_values = new std::vector<NFriendDemandStatus*>();

NFriendDemandStatus* NFriendDemandStatus::PENDING = new NFriendDemandStatus("PENDING", 0);

NFriendDemandStatus* NFriendDemandStatus::ACCEPTED = new NFriendDemandStatus("ACCEPTED", 1);

std::vector<NFriendDemandStatus*>* NFriendDemandStatus::values() {
    return _values;
}





int NFriendDemandStatus::getValue() {
return _value;
}

const char* NFriendDemandStatus::name() {
return _name;
}

int NFriendDemandStatus::ordinal() {
return _value;
}

NFriendDemandStatus::NFriendDemandStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

NFriendDemandStatus* NFriendDemandStatus::fromValue(int value) {
for (unsigned int _o6861 = 0; _o6861 < (unsigned int)_values->size(); _o6861++) {
NFriendDemandStatus* _j6862 = (*_values)[_o6861];
if (_j6862->getValue() == value) {
return _j6862;
}
}
return 0;
}

NFriendDemandStatus* NFriendDemandStatus::valueOf(const char* name) {
for (unsigned int _g15159 = 0; _g15159 < (unsigned int)_values->size(); _g15159++) {
NFriendDemandStatus* _w15160 = (*_values)[_g15159];
if (strcmp(name, _w15160->name()) == 0) {
return _w15160;
}
}
return 0;
}

//@Override
short NFriendDemandStatus::getSerializerID() {
return -23;
}

const char* NFriendDemandStatus::toString() {
return NUtils::concat("NFriendDemandStatus.", _name);
}

void* NFriendDemandStatus::clone() {
return this;
}

NFriendDemandStatus::~NFriendDemandStatus(){
}


#include "GetStorablesStatus.h"

std::vector<GetStorablesStatus*>* GetStorablesStatus::_values = new std::vector<GetStorablesStatus*>();

GetStorablesStatus* GetStorablesStatus::SUCCESS = new GetStorablesStatus("SUCCESS", 0);

GetStorablesStatus* GetStorablesStatus::FAILURE = new GetStorablesStatus("FAILURE", 1);

GetStorablesStatus* GetStorablesStatus::INVALID_CALL = new GetStorablesStatus("INVALID_CALL", 2);

GetStorablesStatus* GetStorablesStatus::INTERNAL_ERROR = new GetStorablesStatus("INTERNAL_ERROR", 3);

GetStorablesStatus* GetStorablesStatus::INVALID_QUERY = new GetStorablesStatus("INVALID_QUERY", 4);

std::vector<GetStorablesStatus*>* GetStorablesStatus::values() {
    return _values;
}





int GetStorablesStatus::getValue() {
return _value;
}

const char* GetStorablesStatus::name() {
return _name;
}

int GetStorablesStatus::ordinal() {
return _value;
}

GetStorablesStatus::GetStorablesStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetStorablesStatus* GetStorablesStatus::fromValue(int value) {
for (unsigned int _d5824 = 0; _d5824 < (unsigned int)_values->size(); _d5824++) {
GetStorablesStatus* _l5825 = (*_values)[_d5824];
if (_l5825->getValue() == value) {
return _l5825;
}
}
return 0;
}

GetStorablesStatus* GetStorablesStatus::valueOf(const char* name) {
for (unsigned int _e13862 = 0; _e13862 < (unsigned int)_values->size(); _e13862++) {
GetStorablesStatus* _u13863 = (*_values)[_e13862];
if (strcmp(name, _u13863->name()) == 0) {
return _u13863;
}
}
return 0;
}

//@Override
short GetStorablesStatus::getSerializerID() {
return -10778;
}

const char* GetStorablesStatus::toString() {
return NUtils::concat("GetStorablesStatus.", _name);
}

void* GetStorablesStatus::clone() {
return this;
}

GetStorablesStatus::~GetStorablesStatus(){
}


#include "GetGamesRequest.h"

short GetGamesRequest::serializerID = -10677;













const char* GetGamesRequest::getMessageId() {
    return _MessageId;
}

void GetGamesRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetGamesRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetGamesRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetGamesRequest::getRequestId() {
return _RequestId;
}

void GetGamesRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetGamesRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetGamesRequest::unSetRequestId() {
_RequestIdSet = false;
}

NuggetaQuery* GetGamesRequest::getDbQuery() {
return _DbQuery;
}

void GetGamesRequest::setDbQuery(NuggetaQuery* value) {
if (_DbQuery && _DbQuery != value) {
delete _DbQuery;
}
_DbQuery = value;
_DbQuerySet = true;
}

bool GetGamesRequest::isDbQuerySet() {
return _DbQuerySet;
}

void GetGamesRequest::unSetDbQuery() {
_DbQuerySet = false;
}

//@Override
short GetGamesRequest::getSerializerID() {
return serializerID;
}

void* GetGamesRequest::clone() {
GetGamesRequest* _e13856 = new GetGamesRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e13856->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e13856->setRequestId(_RequestId);
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_e13856->setDbQuery((NuggetaQuery*)(_DbQuery->clone()));
}
return _e13856;
}

const char* GetGamesRequest::toString() {
const char* _g13857 = "";
_g13857 = NUtils::concat(_g13857, NUtils::concat(NUtils::concat("[", "GetGamesRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g13857 = NUtils::concat(_g13857, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g13857 = NUtils::concat(_g13857, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_g13857 = NUtils::concat(_g13857, NUtils::concat(NUtils::concat("_DbQuery=", _DbQuery->toString()), "| "));
}
_g13857 = NUtils::concat(_g13857, "]");
return _g13857;
}

GetGamesRequest::GetGamesRequest(){
this->_DbQuerySet = false;
this->_DbQuery = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetGamesRequest::~GetGamesRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_DbQuery) {
delete _DbQuery;
_DbQuery=0;
}
}


#include "ThirdPartySource.h"

std::vector<ThirdPartySource*>* ThirdPartySource::_values = new std::vector<ThirdPartySource*>();

ThirdPartySource* ThirdPartySource::FACEBOOK = new ThirdPartySource("FACEBOOK", 1);

ThirdPartySource* ThirdPartySource::GOOGLEPLUS = new ThirdPartySource("GOOGLEPLUS", 2);

std::vector<ThirdPartySource*>* ThirdPartySource::values() {
    return _values;
}





int ThirdPartySource::getValue() {
return _value;
}

const char* ThirdPartySource::name() {
return _name;
}

int ThirdPartySource::ordinal() {
return _value;
}

ThirdPartySource::ThirdPartySource(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

ThirdPartySource* ThirdPartySource::fromValue(int value) {
for (unsigned int _m5941 = 0; _m5941 < (unsigned int)_values->size(); _m5941++) {
ThirdPartySource* _b5942 = (*_values)[_m5941];
if (_b5942->getValue() == value) {
return _b5942;
}
}
return 0;
}

ThirdPartySource* ThirdPartySource::valueOf(const char* name) {
for (unsigned int _v14013 = 0; _v14013 < (unsigned int)_values->size(); _v14013++) {
ThirdPartySource* _s14014 = (*_values)[_v14013];
if (strcmp(name, _s14014->name()) == 0) {
return _s14014;
}
}
return 0;
}

//@Override
short ThirdPartySource::getSerializerID() {
return -9;
}

const char* ThirdPartySource::toString() {
return NUtils::concat("ThirdPartySource.", _name);
}

void* ThirdPartySource::clone() {
return this;
}

ThirdPartySource::~ThirdPartySource(){
}


#include "RemovePlayerStorableRequest.h"

short RemovePlayerStorableRequest::serializerID = -11037;













const char* RemovePlayerStorableRequest::getMessageId() {
    return _MessageId;
}

void RemovePlayerStorableRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RemovePlayerStorableRequest::isMessageIdSet() {
return _MessageIdSet;
}

void RemovePlayerStorableRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* RemovePlayerStorableRequest::getRequestId() {
return _RequestId;
}

void RemovePlayerStorableRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RemovePlayerStorableRequest::isRequestIdSet() {
return _RequestIdSet;
}

void RemovePlayerStorableRequest::unSetRequestId() {
_RequestIdSet = false;
}

Storable* RemovePlayerStorableRequest::getStorable() {
return _Storable;
}

void RemovePlayerStorableRequest::setStorable(Storable* value) {
if (_Storable && _Storable != value) {
delete _Storable;
}
_Storable = value;
_StorableSet = true;
}

bool RemovePlayerStorableRequest::isStorableSet() {
return _StorableSet;
}

void RemovePlayerStorableRequest::unSetStorable() {
_StorableSet = false;
}

//@Override
short RemovePlayerStorableRequest::getSerializerID() {
return serializerID;
}

void* RemovePlayerStorableRequest::clone() {
RemovePlayerStorableRequest* _q14871 = new RemovePlayerStorableRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q14871->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q14871->setRequestId(_RequestId);
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_q14871->setStorable((Storable*)(_Storable->clone()));
}
return _q14871;
}

const char* RemovePlayerStorableRequest::toString() {
const char* _y14872 = "";
_y14872 = NUtils::concat(_y14872, NUtils::concat(NUtils::concat("[", "RemovePlayerStorableRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y14872 = NUtils::concat(_y14872, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y14872 = NUtils::concat(_y14872, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_y14872 = NUtils::concat(_y14872, NUtils::concat(NUtils::concat("_Storable=", _Storable->toString()), "| "));
}
_y14872 = NUtils::concat(_y14872, "]");
return _y14872;
}

RemovePlayerStorableRequest::RemovePlayerStorableRequest(){
this->_StorableSet = false;
this->_Storable = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RemovePlayerStorableRequest::~RemovePlayerStorableRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storable) {
delete _Storable;
_Storable=0;
}
}


#include "RefuseInvitationRequest.h"

short RefuseInvitationRequest::serializerID = -11197;













const char* RefuseInvitationRequest::getMessageId() {
    return _MessageId;
}

void RefuseInvitationRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RefuseInvitationRequest::isMessageIdSet() {
return _MessageIdSet;
}

void RefuseInvitationRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* RefuseInvitationRequest::getRequestId() {
return _RequestId;
}

void RefuseInvitationRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RefuseInvitationRequest::isRequestIdSet() {
return _RequestIdSet;
}

void RefuseInvitationRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* RefuseInvitationRequest::getInvitationId() {
return _InvitationId;
}

void RefuseInvitationRequest::setInvitationId(const char* value) {
if (_InvitationId && _InvitationId != value) {
delete _InvitationId;
}
if (value) {
_InvitationId = strdup(value);
} else {
_InvitationId = 0;
}
_InvitationIdSet = true;
}

bool RefuseInvitationRequest::isInvitationIdSet() {
return _InvitationIdSet;
}

void RefuseInvitationRequest::unSetInvitationId() {
_InvitationIdSet = false;
}

//@Override
short RefuseInvitationRequest::getSerializerID() {
return serializerID;
}

void* RefuseInvitationRequest::clone() {
RefuseInvitationRequest* _q14703 = new RefuseInvitationRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q14703->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q14703->setRequestId(_RequestId);
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_q14703->setInvitationId(_InvitationId);
}
return _q14703;
}

const char* RefuseInvitationRequest::toString() {
const char* _k14704 = "";
_k14704 = NUtils::concat(_k14704, NUtils::concat(NUtils::concat("[", "RefuseInvitationRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k14704 = NUtils::concat(_k14704, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k14704 = NUtils::concat(_k14704, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_k14704 = NUtils::concat(_k14704, NUtils::concat(NUtils::concat("_InvitationId=", _InvitationId), "| "));
}
_k14704 = NUtils::concat(_k14704, "]");
return _k14704;
}

RefuseInvitationRequest::RefuseInvitationRequest(){
this->_InvitationIdSet = false;
this->_InvitationId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RefuseInvitationRequest::~RefuseInvitationRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_InvitationId) {
delete _InvitationId;
_InvitationId = 0;
}
}


#include "GetInvitationsRequest.h"

short GetInvitationsRequest::serializerID = -11157;













const char* GetInvitationsRequest::getMessageId() {
    return _MessageId;
}

void GetInvitationsRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetInvitationsRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetInvitationsRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetInvitationsRequest::getRequestId() {
return _RequestId;
}

void GetInvitationsRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetInvitationsRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetInvitationsRequest::unSetRequestId() {
_RequestIdSet = false;
}

NuggetaQuery* GetInvitationsRequest::getNuggetaQuery() {
return _NuggetaQuery;
}

void GetInvitationsRequest::setNuggetaQuery(NuggetaQuery* value) {
if (_NuggetaQuery && _NuggetaQuery != value) {
delete _NuggetaQuery;
}
_NuggetaQuery = value;
_NuggetaQuerySet = true;
}

bool GetInvitationsRequest::isNuggetaQuerySet() {
return _NuggetaQuerySet;
}

void GetInvitationsRequest::unSetNuggetaQuery() {
_NuggetaQuerySet = false;
}

//@Override
short GetInvitationsRequest::getSerializerID() {
return serializerID;
}

void* GetInvitationsRequest::clone() {
GetInvitationsRequest* _i15622 = new GetInvitationsRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15622->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15622->setRequestId(_RequestId);
}
if (_NuggetaQuerySet == true && Utils::isNull(_NuggetaQuery) == false) {
_i15622->setNuggetaQuery((NuggetaQuery*)(_NuggetaQuery->clone()));
}
return _i15622;
}

const char* GetInvitationsRequest::toString() {
const char* _y15623 = "";
_y15623 = NUtils::concat(_y15623, NUtils::concat(NUtils::concat("[", "GetInvitationsRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15623 = NUtils::concat(_y15623, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15623 = NUtils::concat(_y15623, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_NuggetaQuerySet == true && Utils::isNull(_NuggetaQuery) == false) {
_y15623 = NUtils::concat(_y15623, NUtils::concat(NUtils::concat("_NuggetaQuery=", _NuggetaQuery->toString()), "| "));
}
_y15623 = NUtils::concat(_y15623, "]");
return _y15623;
}

GetInvitationsRequest::GetInvitationsRequest(){
this->_NuggetaQuerySet = false;
this->_NuggetaQuery = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetInvitationsRequest::~GetInvitationsRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_NuggetaQuery) {
delete _NuggetaQuery;
_NuggetaQuery=0;
}
}


#include "JoinGameRequest.h"

short JoinGameRequest::serializerID = -10497;













const char* JoinGameRequest::getMessageId() {
    return _MessageId;
}

void JoinGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool JoinGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void JoinGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* JoinGameRequest::getRequestId() {
return _RequestId;
}

void JoinGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool JoinGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void JoinGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* JoinGameRequest::getGameId() {
return _GameId;
}

void JoinGameRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool JoinGameRequest::isGameIdSet() {
return _GameIdSet;
}

void JoinGameRequest::unSetGameId() {
_GameIdSet = false;
}

//@Override
short JoinGameRequest::getSerializerID() {
return serializerID;
}

void* JoinGameRequest::clone() {
JoinGameRequest* _d15618 = new JoinGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d15618->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d15618->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_d15618->setGameId(_GameId);
}
return _d15618;
}

const char* JoinGameRequest::toString() {
const char* _n15619 = "";
_n15619 = NUtils::concat(_n15619, NUtils::concat(NUtils::concat("[", "JoinGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n15619 = NUtils::concat(_n15619, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n15619 = NUtils::concat(_n15619, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_n15619 = NUtils::concat(_n15619, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_n15619 = NUtils::concat(_n15619, "]");
return _n15619;
}

JoinGameRequest::JoinGameRequest(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

JoinGameRequest::~JoinGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "GetGhostsStatus.h"

std::vector<GetGhostsStatus*>* GetGhostsStatus::_values = new std::vector<GetGhostsStatus*>();

GetGhostsStatus* GetGhostsStatus::SUCCESS = new GetGhostsStatus("SUCCESS", 0);

GetGhostsStatus* GetGhostsStatus::FAILURE = new GetGhostsStatus("FAILURE", 1);

GetGhostsStatus* GetGhostsStatus::INTERNAL_ERROR = new GetGhostsStatus("INTERNAL_ERROR", 2);

GetGhostsStatus* GetGhostsStatus::INVALID_QUERY = new GetGhostsStatus("INVALID_QUERY", 3);

std::vector<GetGhostsStatus*>* GetGhostsStatus::values() {
    return _values;
}





int GetGhostsStatus::getValue() {
return _value;
}

const char* GetGhostsStatus::name() {
return _name;
}

int GetGhostsStatus::ordinal() {
return _value;
}

GetGhostsStatus::GetGhostsStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetGhostsStatus* GetGhostsStatus::fromValue(int value) {
for (unsigned int _g6123 = 0; _g6123 < (unsigned int)_values->size(); _g6123++) {
GetGhostsStatus* _g6124 = (*_values)[_g6123];
if (_g6124->getValue() == value) {
return _g6124;
}
}
return 0;
}

GetGhostsStatus* GetGhostsStatus::valueOf(const char* name) {
for (unsigned int _c14233 = 0; _c14233 < (unsigned int)_values->size(); _c14233++) {
GetGhostsStatus* _e14234 = (*_values)[_c14233];
if (strcmp(name, _e14234->name()) == 0) {
return _e14234;
}
}
return 0;
}

//@Override
short GetGhostsStatus::getSerializerID() {
return -10718;
}

const char* GetGhostsStatus::toString() {
return NUtils::concat("GetGhostsStatus.", _name);
}

void* GetGhostsStatus::clone() {
return this;
}

GetGhostsStatus::~GetGhostsStatus(){
}


#include "SubmitScoreRequest.h"

short SubmitScoreRequest::serializerID = -10297;

















const char* SubmitScoreRequest::getMessageId() {
    return _MessageId;
}

void SubmitScoreRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SubmitScoreRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SubmitScoreRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SubmitScoreRequest::getRequestId() {
return _RequestId;
}

void SubmitScoreRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SubmitScoreRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SubmitScoreRequest::unSetRequestId() {
_RequestIdSet = false;
}

NScore* SubmitScoreRequest::getScore() {
return _Score;
}

void SubmitScoreRequest::setScore(NScore* value) {
if (_Score && _Score != value) {
delete _Score;
}
_Score = value;
_ScoreSet = true;
}

bool SubmitScoreRequest::isScoreSet() {
return _ScoreSet;
}

void SubmitScoreRequest::unSetScore() {
_ScoreSet = false;
}

const char* SubmitScoreRequest::getLeaderboardId() {
return _LeaderboardId;
}

void SubmitScoreRequest::setLeaderboardId(const char* value) {
if (_LeaderboardId && _LeaderboardId != value) {
delete _LeaderboardId;
}
if (value) {
_LeaderboardId = strdup(value);
} else {
_LeaderboardId = 0;
}
_LeaderboardIdSet = true;
}

bool SubmitScoreRequest::isLeaderboardIdSet() {
return _LeaderboardIdSet;
}

void SubmitScoreRequest::unSetLeaderboardId() {
_LeaderboardIdSet = false;
}

//@Override
short SubmitScoreRequest::getSerializerID() {
return serializerID;
}

void* SubmitScoreRequest::clone() {
SubmitScoreRequest* _k13988 = new SubmitScoreRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k13988->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k13988->setRequestId(_RequestId);
}
if (_ScoreSet == true && Utils::isNull(_Score) == false) {
_k13988->setScore((NScore*)(_Score->clone()));
}
if (_LeaderboardIdSet == true && Utils::isNull(_LeaderboardId) == false) {
_k13988->setLeaderboardId(_LeaderboardId);
}
return _k13988;
}

const char* SubmitScoreRequest::toString() {
const char* _w13989 = "";
_w13989 = NUtils::concat(_w13989, NUtils::concat(NUtils::concat("[", "SubmitScoreRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w13989 = NUtils::concat(_w13989, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w13989 = NUtils::concat(_w13989, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ScoreSet == true && Utils::isNull(_Score) == false) {
_w13989 = NUtils::concat(_w13989, NUtils::concat(NUtils::concat("_Score=", _Score->toString()), "| "));
}
if (_LeaderboardIdSet == true && Utils::isNull(_LeaderboardId) == false) {
_w13989 = NUtils::concat(_w13989, NUtils::concat(NUtils::concat("_LeaderboardId=", _LeaderboardId), "| "));
}
_w13989 = NUtils::concat(_w13989, "]");
return _w13989;
}

SubmitScoreRequest::SubmitScoreRequest(){
this->_LeaderboardIdSet = false;
this->_LeaderboardId = 0;
this->_ScoreSet = false;
this->_Score = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SubmitScoreRequest::~SubmitScoreRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Score) {
delete _Score;
_Score=0;
}
if (_LeaderboardId) {
delete _LeaderboardId;
_LeaderboardId = 0;
}
}


#include "T814.h"

const char* T814::_m16904(const char* _y14040, int _h14041) {
    int _h14042 = sizeof(_y14040);
    for (unsigned int _q14043 = _h14042; _q14043 < (unsigned int)_h14041; _q14043++) {
        _y14040 = NUtils::concat("0", _y14040);
    }
    return _y14040;
}

T814::T814(){
}

T814::~T814(){
}


#include "StopGameStatus.h"

std::vector<StopGameStatus*>* StopGameStatus::_values = new std::vector<StopGameStatus*>();

StopGameStatus* StopGameStatus::STOPPED = new StopGameStatus("STOPPED", 0);

StopGameStatus* StopGameStatus::ALREADY_STOPPED = new StopGameStatus("ALREADY_STOPPED", 1);

StopGameStatus* StopGameStatus::UNKNOWN_GAME = new StopGameStatus("UNKNOWN_GAME", 2);

StopGameStatus* StopGameStatus::INVALID_CALL = new StopGameStatus("INVALID_CALL", 3);

StopGameStatus* StopGameStatus::INTERNAL_ERROR = new StopGameStatus("INTERNAL_ERROR", 4);

std::vector<StopGameStatus*>* StopGameStatus::values() {
    return _values;
}





int StopGameStatus::getValue() {
return _value;
}

const char* StopGameStatus::name() {
return _name;
}

int StopGameStatus::ordinal() {
return _value;
}

StopGameStatus::StopGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

StopGameStatus* StopGameStatus::fromValue(int value) {
for (unsigned int _u7105 = 0; _u7105 < (unsigned int)_values->size(); _u7105++) {
StopGameStatus* _t7106 = (*_values)[_u7105];
if (_t7106->getValue() == value) {
return _t7106;
}
}
return 0;
}

StopGameStatus* StopGameStatus::valueOf(const char* name) {
for (unsigned int _s15498 = 0; _s15498 < (unsigned int)_values->size(); _s15498++) {
StopGameStatus* _h15499 = (*_values)[_s15498];
if (strcmp(name, _h15499->name()) == 0) {
return _h15499;
}
}
return 0;
}

//@Override
short StopGameStatus::getSerializerID() {
return -10638;
}

const char* StopGameStatus::toString() {
return NUtils::concat("StopGameStatus.", _name);
}

void* StopGameStatus::clone() {
return this;
}

StopGameStatus::~StopGameStatus(){
}


#include "PublicServer.h"

short PublicServer::serializerID = -3136;

















const char* PublicServer::getStoreId() {
    return _storeId;
}

void PublicServer::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool PublicServer::isstoreIdSet() {
return _storeIdSet;
}

void PublicServer::unSetstoreId() {
_storeIdSet = false;
}

const char* PublicServer::getId() {
return _Id;
}

void PublicServer::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool PublicServer::isIdSet() {
return _IdSet;
}

void PublicServer::unSetId() {
_IdSet = false;
}

const char* PublicServer::getLocation() {
return _Location;
}

void PublicServer::setLocation(const char* value) {
if (_Location && _Location != value) {
delete _Location;
}
if (value) {
_Location = strdup(value);
} else {
_Location = 0;
}
_LocationSet = true;
}

bool PublicServer::isLocationSet() {
return _LocationSet;
}

void PublicServer::unSetLocation() {
_LocationSet = false;
}

long long PublicServer::getPing() {
return _Ping;
}

void PublicServer::setPing(long long value) {
_Ping = value;
_PingSet = true;
}

bool PublicServer::isPingSet() {
return _PingSet;
}

void PublicServer::unSetPing() {
_PingSet = false;
}

//@Override
short PublicServer::getSerializerID() {
return serializerID;
}

void* PublicServer::clone() {
PublicServer* _k15521 = new PublicServer();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_k15521->setStoreId(_storeId);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_k15521->setId(_Id);
}
if (_LocationSet == true && Utils::isNull(_Location) == false) {
_k15521->setLocation(_Location);
}
if (_PingSet == true && Utils::isNullLong(_Ping) == false) {
_k15521->setPing(_Ping);
}
return _k15521;
}

const char* PublicServer::toString() {
const char* _w15522 = "";
_w15522 = NUtils::concat(_w15522, NUtils::concat(NUtils::concat("[", "PublicServer"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_w15522 = NUtils::concat(_w15522, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_w15522 = NUtils::concat(_w15522, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_LocationSet == true && Utils::isNull(_Location) == false) {
_w15522 = NUtils::concat(_w15522, NUtils::concat(NUtils::concat("_Location=", _Location), "| "));
}
if (_PingSet == true && Utils::isNullLong(_Ping) == false) {
_w15522 = NUtils::concat(_w15522, NUtils::concat(NUtils::concat("_Ping=", _Ping), "| "));
}
_w15522 = NUtils::concat(_w15522, "]");
return _w15522;
}

PublicServer::PublicServer(){
this->_PingSet = false;
this->_LocationSet = false;
this->_Location = 0;
this->_IdSet = false;
this->_Id = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

PublicServer::~PublicServer(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
if (_Location) {
delete _Location;
_Location = 0;
}
}


#include "PublishFriendThirdPartyMessageRequest.h"

short PublishFriendThirdPartyMessageRequest::serializerID = -11117;

































const char* PublishFriendThirdPartyMessageRequest::getMessageId() {
    return _MessageId;
}

void PublishFriendThirdPartyMessageRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isMessageIdSet() {
return _MessageIdSet;
}

void PublishFriendThirdPartyMessageRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* PublishFriendThirdPartyMessageRequest::getRequestId() {
return _RequestId;
}

void PublishFriendThirdPartyMessageRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isRequestIdSet() {
return _RequestIdSet;
}

void PublishFriendThirdPartyMessageRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* PublishFriendThirdPartyMessageRequest::getTitle() {
return _Title;
}

void PublishFriendThirdPartyMessageRequest::setTitle(const char* value) {
if (_Title && _Title != value) {
delete _Title;
}
if (value) {
_Title = strdup(value);
} else {
_Title = 0;
}
_TitleSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isTitleSet() {
return _TitleSet;
}

void PublishFriendThirdPartyMessageRequest::unSetTitle() {
_TitleSet = false;
}

const char* PublishFriendThirdPartyMessageRequest::getMessage() {
return _Message;
}

void PublishFriendThirdPartyMessageRequest::setMessage(const char* value) {
if (_Message && _Message != value) {
delete _Message;
}
if (value) {
_Message = strdup(value);
} else {
_Message = 0;
}
_MessageSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isMessageSet() {
return _MessageSet;
}

void PublishFriendThirdPartyMessageRequest::unSetMessage() {
_MessageSet = false;
}

const char* PublishFriendThirdPartyMessageRequest::getPictureUrl() {
return _PictureUrl;
}

void PublishFriendThirdPartyMessageRequest::setPictureUrl(const char* value) {
if (_PictureUrl && _PictureUrl != value) {
delete _PictureUrl;
}
if (value) {
_PictureUrl = strdup(value);
} else {
_PictureUrl = 0;
}
_PictureUrlSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isPictureUrlSet() {
return _PictureUrlSet;
}

void PublishFriendThirdPartyMessageRequest::unSetPictureUrl() {
_PictureUrlSet = false;
}

const char* PublishFriendThirdPartyMessageRequest::getLink() {
return _Link;
}

void PublishFriendThirdPartyMessageRequest::setLink(const char* value) {
if (_Link && _Link != value) {
delete _Link;
}
if (value) {
_Link = strdup(value);
} else {
_Link = 0;
}
_LinkSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isLinkSet() {
return _LinkSet;
}

void PublishFriendThirdPartyMessageRequest::unSetLink() {
_LinkSet = false;
}

const char* PublishFriendThirdPartyMessageRequest::getThirdPartyId() {
return _ThirdPartyId;
}

void PublishFriendThirdPartyMessageRequest::setThirdPartyId(const char* value) {
if (_ThirdPartyId && _ThirdPartyId != value) {
delete _ThirdPartyId;
}
if (value) {
_ThirdPartyId = strdup(value);
} else {
_ThirdPartyId = 0;
}
_ThirdPartyIdSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isThirdPartyIdSet() {
return _ThirdPartyIdSet;
}

void PublishFriendThirdPartyMessageRequest::unSetThirdPartyId() {
_ThirdPartyIdSet = false;
}

ThirdPartySource* PublishFriendThirdPartyMessageRequest::getThirdPartySource() {
return _ThirdPartySource;
}

void PublishFriendThirdPartyMessageRequest::setThirdPartySource(ThirdPartySource* value) {
_ThirdPartySource = value;
_ThirdPartySourceSet = true;
}

bool PublishFriendThirdPartyMessageRequest::isThirdPartySourceSet() {
return _ThirdPartySourceSet;
}

void PublishFriendThirdPartyMessageRequest::unSetThirdPartySource() {
_ThirdPartySourceSet = false;
}

//@Override
short PublishFriendThirdPartyMessageRequest::getSerializerID() {
return serializerID;
}

void* PublishFriendThirdPartyMessageRequest::clone() {
PublishFriendThirdPartyMessageRequest* _k15536 = new PublishFriendThirdPartyMessageRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k15536->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k15536->setRequestId(_RequestId);
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_k15536->setTitle(_Title);
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_k15536->setMessage(_Message);
}
if (_PictureUrlSet == true && Utils::isNull(_PictureUrl) == false) {
_k15536->setPictureUrl(_PictureUrl);
}
if (_LinkSet == true && Utils::isNull(_Link) == false) {
_k15536->setLink(_Link);
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_k15536->setThirdPartyId(_ThirdPartyId);
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_k15536->setThirdPartySource(_ThirdPartySource);
}
return _k15536;
}

const char* PublishFriendThirdPartyMessageRequest::toString() {
const char* _v15537 = "";
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("[", "PublishFriendThirdPartyMessageRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_Title=", _Title), "| "));
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_Message=", _Message), "| "));
}
if (_PictureUrlSet == true && Utils::isNull(_PictureUrl) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_PictureUrl=", _PictureUrl), "| "));
}
if (_LinkSet == true && Utils::isNull(_Link) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_Link=", _Link), "| "));
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_ThirdPartyId=", _ThirdPartyId), "| "));
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_v15537 = NUtils::concat(_v15537, NUtils::concat(NUtils::concat("_ThirdPartySource=", _ThirdPartySource->toString()), "| "));
}
_v15537 = NUtils::concat(_v15537, "]");
return _v15537;
}

PublishFriendThirdPartyMessageRequest::PublishFriendThirdPartyMessageRequest(){
this->_ThirdPartySourceSet = false;
this->_ThirdPartySource = 0;
this->_ThirdPartyIdSet = false;
this->_ThirdPartyId = 0;
this->_LinkSet = false;
this->_Link = 0;
this->_PictureUrlSet = false;
this->_PictureUrl = 0;
this->_MessageSet = false;
this->_Message = 0;
this->_TitleSet = false;
this->_Title = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PublishFriendThirdPartyMessageRequest::~PublishFriendThirdPartyMessageRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Title) {
delete _Title;
_Title = 0;
}
if (_Message) {
delete _Message;
_Message = 0;
}
if (_PictureUrl) {
delete _PictureUrl;
_PictureUrl = 0;
}
if (_Link) {
delete _Link;
_Link = 0;
}
if (_ThirdPartyId) {
delete _ThirdPartyId;
_ThirdPartyId = 0;
}
}


#include "GetPlayerStorablesStatus.h"

std::vector<GetPlayerStorablesStatus*>* GetPlayerStorablesStatus::_values = new std::vector<GetPlayerStorablesStatus*>();

GetPlayerStorablesStatus* GetPlayerStorablesStatus::SUCCESS = new GetPlayerStorablesStatus("SUCCESS", 0);

GetPlayerStorablesStatus* GetPlayerStorablesStatus::FAILURE = new GetPlayerStorablesStatus("FAILURE", 1);

GetPlayerStorablesStatus* GetPlayerStorablesStatus::INVALID_CALL = new GetPlayerStorablesStatus("INVALID_CALL", 2);

GetPlayerStorablesStatus* GetPlayerStorablesStatus::INTERNAL_ERROR = new GetPlayerStorablesStatus("INTERNAL_ERROR", 3);

GetPlayerStorablesStatus* GetPlayerStorablesStatus::INVALID_QUERY = new GetPlayerStorablesStatus("INVALID_QUERY", 4);

std::vector<GetPlayerStorablesStatus*>* GetPlayerStorablesStatus::values() {
    return _values;
}





int GetPlayerStorablesStatus::getValue() {
return _value;
}

const char* GetPlayerStorablesStatus::name() {
return _name;
}

int GetPlayerStorablesStatus::ordinal() {
return _value;
}

GetPlayerStorablesStatus::GetPlayerStorablesStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetPlayerStorablesStatus* GetPlayerStorablesStatus::fromValue(int value) {
for (unsigned int _n5780 = 0; _n5780 < (unsigned int)_values->size(); _n5780++) {
GetPlayerStorablesStatus* _v5781 = (*_values)[_n5780];
if (_v5781->getValue() == value) {
return _v5781;
}
}
return 0;
}

GetPlayerStorablesStatus* GetPlayerStorablesStatus::valueOf(const char* name) {
for (unsigned int _c13818 = 0; _c13818 < (unsigned int)_values->size(); _c13818++) {
GetPlayerStorablesStatus* _p13819 = (*_values)[_c13818];
if (strcmp(name, _p13819->name()) == 0) {
return _p13819;
}
}
return 0;
}

//@Override
short GetPlayerStorablesStatus::getSerializerID() {
return -11058;
}

const char* GetPlayerStorablesStatus::toString() {
return NUtils::concat("GetPlayerStorablesStatus.", _name);
}

void* GetPlayerStorablesStatus::clone() {
return this;
}

GetPlayerStorablesStatus::~GetPlayerStorablesStatus(){
}


#include "GetThirdPartyFriendsRequest.h"

short GetThirdPartyFriendsRequest::serializerID = -10217;













const char* GetThirdPartyFriendsRequest::getMessageId() {
    return _MessageId;
}

void GetThirdPartyFriendsRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetThirdPartyFriendsRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetThirdPartyFriendsRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetThirdPartyFriendsRequest::getRequestId() {
return _RequestId;
}

void GetThirdPartyFriendsRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetThirdPartyFriendsRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetThirdPartyFriendsRequest::unSetRequestId() {
_RequestIdSet = false;
}

ThirdPartySource* GetThirdPartyFriendsRequest::getThirdPartySource() {
return _ThirdPartySource;
}

void GetThirdPartyFriendsRequest::setThirdPartySource(ThirdPartySource* value) {
_ThirdPartySource = value;
_ThirdPartySourceSet = true;
}

bool GetThirdPartyFriendsRequest::isThirdPartySourceSet() {
return _ThirdPartySourceSet;
}

void GetThirdPartyFriendsRequest::unSetThirdPartySource() {
_ThirdPartySourceSet = false;
}

//@Override
short GetThirdPartyFriendsRequest::getSerializerID() {
return serializerID;
}

void* GetThirdPartyFriendsRequest::clone() {
GetThirdPartyFriendsRequest* _a13978 = new GetThirdPartyFriendsRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_a13978->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_a13978->setRequestId(_RequestId);
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_a13978->setThirdPartySource(_ThirdPartySource);
}
return _a13978;
}

const char* GetThirdPartyFriendsRequest::toString() {
const char* _l13979 = "";
_l13979 = NUtils::concat(_l13979, NUtils::concat(NUtils::concat("[", "GetThirdPartyFriendsRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l13979 = NUtils::concat(_l13979, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l13979 = NUtils::concat(_l13979, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_l13979 = NUtils::concat(_l13979, NUtils::concat(NUtils::concat("_ThirdPartySource=", _ThirdPartySource->toString()), "| "));
}
_l13979 = NUtils::concat(_l13979, "]");
return _l13979;
}

GetThirdPartyFriendsRequest::GetThirdPartyFriendsRequest(){
this->_ThirdPartySourceSet = false;
this->_ThirdPartySource = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetThirdPartyFriendsRequest::~GetThirdPartyFriendsRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "PlayerSessionType.h"

std::vector<PlayerSessionType*>* PlayerSessionType::_values = new std::vector<PlayerSessionType*>();

PlayerSessionType* PlayerSessionType::ANONYMOUS = new PlayerSessionType("ANONYMOUS", 0);

PlayerSessionType* PlayerSessionType::AUTHENTICATED = new PlayerSessionType("AUTHENTICATED", 1);

std::vector<PlayerSessionType*>* PlayerSessionType::values() {
    return _values;
}





int PlayerSessionType::getValue() {
return _value;
}

const char* PlayerSessionType::name() {
return _name;
}

int PlayerSessionType::ordinal() {
return _value;
}

PlayerSessionType::PlayerSessionType(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

PlayerSessionType* PlayerSessionType::fromValue(int value) {
for (unsigned int _l5810 = 0; _l5810 < (unsigned int)_values->size(); _l5810++) {
PlayerSessionType* _r5811 = (*_values)[_l5810];
if (_r5811->getValue() == value) {
return _r5811;
}
}
return 0;
}

PlayerSessionType* PlayerSessionType::valueOf(const char* name) {
for (unsigned int _i13848 = 0; _i13848 < (unsigned int)_values->size(); _i13848++) {
PlayerSessionType* _k13849 = (*_values)[_i13848];
if (strcmp(name, _k13849->name()) == 0) {
return _k13849;
}
}
return 0;
}

//@Override
short PlayerSessionType::getSerializerID() {
return -38;
}

const char* PlayerSessionType::toString() {
return NUtils::concat("PlayerSessionType.", _name);
}

void* PlayerSessionType::clone() {
return this;
}

PlayerSessionType::~PlayerSessionType(){
}


#include "GetThirdPartyFriendsResponse.h"

short GetThirdPartyFriendsResponse::serializerID = -10219;

















const char* GetThirdPartyFriendsResponse::getMessageId() {
    return _MessageId;
}

void GetThirdPartyFriendsResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetThirdPartyFriendsResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetThirdPartyFriendsResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetThirdPartyFriendsResponse::getRequestId() {
return _RequestId;
}

void GetThirdPartyFriendsResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetThirdPartyFriendsResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetThirdPartyFriendsResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetThirdPartyFriendsStatus* GetThirdPartyFriendsResponse::getGetThirdPartyFriendsStatus() {
return _GetThirdPartyFriendsStatus;
}

void GetThirdPartyFriendsResponse::setGetThirdPartyFriendsStatus(GetThirdPartyFriendsStatus* value) {
_GetThirdPartyFriendsStatus = value;
_GetThirdPartyFriendsStatusSet = true;
}

bool GetThirdPartyFriendsResponse::isGetThirdPartyFriendsStatusSet() {
return _GetThirdPartyFriendsStatusSet;
}

void GetThirdPartyFriendsResponse::unSetGetThirdPartyFriendsStatus() {
_GetThirdPartyFriendsStatusSet = false;
}

std::vector<NPlayer*>* GetThirdPartyFriendsResponse::getThirdPartyFriends() {
return _ThirdPartyFriends;
}

void GetThirdPartyFriendsResponse::setThirdPartyFriends(std::vector<NPlayer*>* value) {
if (_ThirdPartyFriends) {
for (unsigned int i=0; i < _ThirdPartyFriends->size(); i++) {
delete (*_ThirdPartyFriends)[i];
}
}
if (_ThirdPartyFriends && _ThirdPartyFriends != value) {
delete _ThirdPartyFriends;
}
_ThirdPartyFriends = value;
_ThirdPartyFriendsSet = true;
}

bool GetThirdPartyFriendsResponse::isThirdPartyFriendsSet() {
return _ThirdPartyFriendsSet;
}

void GetThirdPartyFriendsResponse::unSetThirdPartyFriends() {
_ThirdPartyFriendsSet = false;
}

//@Override
short GetThirdPartyFriendsResponse::getSerializerID() {
return serializerID;
}

void* GetThirdPartyFriendsResponse::clone() {
GetThirdPartyFriendsResponse* _p14832 = new GetThirdPartyFriendsResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p14832->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p14832->setRequestId(_RequestId);
}
if (_GetThirdPartyFriendsStatusSet == true && Utils::isNull(_GetThirdPartyFriendsStatus) == false) {
_p14832->setGetThirdPartyFriendsStatus(_GetThirdPartyFriendsStatus);
}
if (_ThirdPartyFriendsSet == true && Utils::isNull(_ThirdPartyFriends) == false) {
std::vector<NPlayer*>* _o14833 = new std::vector<NPlayer*>();
for (unsigned int i = 0; i < (unsigned int)_ThirdPartyFriends->size(); i++) {
void* _r14834 = _ThirdPartyFriends->at(i);
if (_r14834 != 0) {
_o14833->push_back((NPlayer*)((NPlayer*)_r14834)->clone());
} else {
_o14833->push_back((NPlayer*)_r14834);
}
}
_p14832->setThirdPartyFriends(_o14833);
}
return _p14832;
}

const char* GetThirdPartyFriendsResponse::toString() {
const char* _n14835 = "";
_n14835 = NUtils::concat(_n14835, NUtils::concat(NUtils::concat("[", "GetThirdPartyFriendsResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n14835 = NUtils::concat(_n14835, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n14835 = NUtils::concat(_n14835, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetThirdPartyFriendsStatusSet == true && Utils::isNull(_GetThirdPartyFriendsStatus) == false) {
_n14835 = NUtils::concat(_n14835, NUtils::concat(NUtils::concat("_GetThirdPartyFriendsStatus=", _GetThirdPartyFriendsStatus->toString()), "| "));
}
if (_ThirdPartyFriendsSet == true && Utils::isNull(_ThirdPartyFriends) == false) {
_n14835 = NUtils::concat(_n14835, NUtils::concat(NUtils::concat("_ThirdPartyFriends=", "N/A"), "| "));
}
_n14835 = NUtils::concat(_n14835, "]");
return _n14835;
}

GetThirdPartyFriendsResponse::GetThirdPartyFriendsResponse(){
this->_ThirdPartyFriendsSet = false;
this->_ThirdPartyFriends = new std::vector<NPlayer*>();
this->_GetThirdPartyFriendsStatusSet = false;
this->_GetThirdPartyFriendsStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetThirdPartyFriendsResponse::~GetThirdPartyFriendsResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_ThirdPartyFriends) {
for (unsigned int i=0; i < _ThirdPartyFriends->size(); i++) {
delete (*_ThirdPartyFriends)[i];
}
delete _ThirdPartyFriends;
_ThirdPartyFriends=0;;
}
}


#include "LoginStatus.h"

std::vector<LoginStatus*>* LoginStatus::_values = new std::vector<LoginStatus*>();

LoginStatus* LoginStatus::CONNECTED = new LoginStatus("CONNECTED", 0);

LoginStatus* LoginStatus::ALREADY_CONNECTED = new LoginStatus("ALREADY_CONNECTED", 2);

LoginStatus* LoginStatus::INTERNAL_ERROR = new LoginStatus("INTERNAL_ERROR", 4);

LoginStatus* LoginStatus::CANCELED = new LoginStatus("CANCELED", 5);

std::vector<LoginStatus*>* LoginStatus::values() {
    return _values;
}





int LoginStatus::getValue() {
return _value;
}

const char* LoginStatus::name() {
return _name;
}

int LoginStatus::ordinal() {
return _value;
}

LoginStatus::LoginStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

LoginStatus* LoginStatus::fromValue(int value) {
for (unsigned int _p6940 = 0; _p6940 < (unsigned int)_values->size(); _p6940++) {
LoginStatus* _p6941 = (*_values)[_p6940];
if (_p6941->getValue() == value) {
return _p6941;
}
}
return 0;
}

LoginStatus* LoginStatus::valueOf(const char* name) {
for (unsigned int _q15238 = 0; _q15238 < (unsigned int)_values->size(); _q15238++) {
LoginStatus* _x15239 = (*_values)[_q15238];
if (strcmp(name, _x15239->name()) == 0) {
return _x15239;
}
}
return 0;
}

//@Override
short LoginStatus::getSerializerID() {
return -10078;
}

const char* LoginStatus::toString() {
return NUtils::concat("LoginStatus.", _name);
}

void* LoginStatus::clone() {
return this;
}

LoginStatus::~LoginStatus(){
}


#include "LeaderboardPeriod.h"

std::vector<LeaderboardPeriod*>* LeaderboardPeriod::_values = new std::vector<LeaderboardPeriod*>();

LeaderboardPeriod* LeaderboardPeriod::DAY = new LeaderboardPeriod("DAY", 0);

LeaderboardPeriod* LeaderboardPeriod::MONTH = new LeaderboardPeriod("MONTH", 1);

LeaderboardPeriod* LeaderboardPeriod::ALL = new LeaderboardPeriod("ALL", 2);

LeaderboardPeriod* LeaderboardPeriod::WEEK = new LeaderboardPeriod("WEEK", 3);

std::vector<LeaderboardPeriod*>* LeaderboardPeriod::values() {
    return _values;
}





int LeaderboardPeriod::getValue() {
return _value;
}

const char* LeaderboardPeriod::name() {
return _name;
}

int LeaderboardPeriod::ordinal() {
return _value;
}

LeaderboardPeriod::LeaderboardPeriod(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

LeaderboardPeriod* LeaderboardPeriod::fromValue(int value) {
for (unsigned int _q7277 = 0; _q7277 < (unsigned int)_values->size(); _q7277++) {
LeaderboardPeriod* _q7278 = (*_values)[_q7277];
if (_q7278->getValue() == value) {
return _q7278;
}
}
return 0;
}

LeaderboardPeriod* LeaderboardPeriod::valueOf(const char* name) {
for (unsigned int _v15763 = 0; _v15763 < (unsigned int)_values->size(); _v15763++) {
LeaderboardPeriod* _t15764 = (*_values)[_v15763];
if (strcmp(name, _t15764->name()) == 0) {
return _t15764;
}
}
return 0;
}

//@Override
short LeaderboardPeriod::getSerializerID() {
return -4;
}

const char* LeaderboardPeriod::toString() {
return NUtils::concat("LeaderboardPeriod.", _name);
}

void* LeaderboardPeriod::clone() {
return this;
}

LeaderboardPeriod::~LeaderboardPeriod(){
}


#include "ResumeSessionMonitoringStatus.h"

std::vector<ResumeSessionMonitoringStatus*>* ResumeSessionMonitoringStatus::_values = new std::vector<ResumeSessionMonitoringStatus*>();

ResumeSessionMonitoringStatus* ResumeSessionMonitoringStatus::RESUMED = new ResumeSessionMonitoringStatus("RESUMED", 0);

ResumeSessionMonitoringStatus* ResumeSessionMonitoringStatus::INTERNAL_ERROR = new ResumeSessionMonitoringStatus("INTERNAL_ERROR", 1);

std::vector<ResumeSessionMonitoringStatus*>* ResumeSessionMonitoringStatus::values() {
    return _values;
}





int ResumeSessionMonitoringStatus::getValue() {
return _value;
}

const char* ResumeSessionMonitoringStatus::name() {
return _name;
}

int ResumeSessionMonitoringStatus::ordinal() {
return _value;
}

ResumeSessionMonitoringStatus::ResumeSessionMonitoringStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

ResumeSessionMonitoringStatus* ResumeSessionMonitoringStatus::fromValue(int value) {
for (unsigned int _n7009 = 0; _n7009 < (unsigned int)_values->size(); _n7009++) {
ResumeSessionMonitoringStatus* _w7010 = (*_values)[_n7009];
if (_w7010->getValue() == value) {
return _w7010;
}
}
return 0;
}

ResumeSessionMonitoringStatus* ResumeSessionMonitoringStatus::valueOf(const char* name) {
for (unsigned int _q15397 = 0; _q15397 < (unsigned int)_values->size(); _q15397++) {
ResumeSessionMonitoringStatus* _x15398 = (*_values)[_q15397];
if (strcmp(name, _x15398->name()) == 0) {
return _x15398;
}
}
return 0;
}

//@Override
short ResumeSessionMonitoringStatus::getSerializerID() {
return -11098;
}

const char* ResumeSessionMonitoringStatus::toString() {
return NUtils::concat("ResumeSessionMonitoringStatus.", _name);
}

void* ResumeSessionMonitoringStatus::clone() {
return this;
}

ResumeSessionMonitoringStatus::~ResumeSessionMonitoringStatus(){
}


#include "InvitationRefusedNotification.h"

short InvitationRefusedNotification::serializerID = -3236;













const char* InvitationRefusedNotification::getMessageId() {
    return _MessageId;
}

void InvitationRefusedNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InvitationRefusedNotification::isMessageIdSet() {
return _MessageIdSet;
}

void InvitationRefusedNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* InvitationRefusedNotification::getRequestId() {
return _RequestId;
}

void InvitationRefusedNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InvitationRefusedNotification::isRequestIdSet() {
return _RequestIdSet;
}

void InvitationRefusedNotification::unSetRequestId() {
_RequestIdSet = false;
}

NInvitation* InvitationRefusedNotification::getInvitation() {
return _Invitation;
}

void InvitationRefusedNotification::setInvitation(NInvitation* value) {
if (_Invitation && _Invitation != value) {
delete _Invitation;
}
_Invitation = value;
_InvitationSet = true;
}

bool InvitationRefusedNotification::isInvitationSet() {
return _InvitationSet;
}

void InvitationRefusedNotification::unSetInvitation() {
_InvitationSet = false;
}

//@Override
short InvitationRefusedNotification::getSerializerID() {
return serializerID;
}

void* InvitationRefusedNotification::clone() {
InvitationRefusedNotification* _b15133 = new InvitationRefusedNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b15133->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b15133->setRequestId(_RequestId);
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_b15133->setInvitation((NInvitation*)(_Invitation->clone()));
}
return _b15133;
}

const char* InvitationRefusedNotification::toString() {
const char* _q15134 = "";
_q15134 = NUtils::concat(_q15134, NUtils::concat(NUtils::concat("[", "InvitationRefusedNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15134 = NUtils::concat(_q15134, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15134 = NUtils::concat(_q15134, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_q15134 = NUtils::concat(_q15134, NUtils::concat(NUtils::concat("_Invitation=", _Invitation->toString()), "| "));
}
_q15134 = NUtils::concat(_q15134, "]");
return _q15134;
}

InvitationRefusedNotification::InvitationRefusedNotification(){
this->_InvitationSet = false;
this->_Invitation = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InvitationRefusedNotification::~InvitationRefusedNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Invitation) {
delete _Invitation;
_Invitation=0;
}
}


#include "RefuseInvitationStatus.h"

std::vector<RefuseInvitationStatus*>* RefuseInvitationStatus::_values = new std::vector<RefuseInvitationStatus*>();

RefuseInvitationStatus* RefuseInvitationStatus::SUCCESS = new RefuseInvitationStatus("SUCCESS", 0);

RefuseInvitationStatus* RefuseInvitationStatus::MISSING_INVITATION_ID = new RefuseInvitationStatus("MISSING_INVITATION_ID", 1);

RefuseInvitationStatus* RefuseInvitationStatus::UNKNOWN_INVITATION_ID = new RefuseInvitationStatus("UNKNOWN_INVITATION_ID", 2);

RefuseInvitationStatus* RefuseInvitationStatus::ALREADY_ACCEPTED = new RefuseInvitationStatus("ALREADY_ACCEPTED", 3);

RefuseInvitationStatus* RefuseInvitationStatus::ALREADY_REFUSED = new RefuseInvitationStatus("ALREADY_REFUSED", 4);

RefuseInvitationStatus* RefuseInvitationStatus::NOT_THE_INVITEE = new RefuseInvitationStatus("NOT_THE_INVITEE", 5);

RefuseInvitationStatus* RefuseInvitationStatus::INTERNAL_ERROR = new RefuseInvitationStatus("INTERNAL_ERROR", 6);

std::vector<RefuseInvitationStatus*>* RefuseInvitationStatus::values() {
    return _values;
}





int RefuseInvitationStatus::getValue() {
return _value;
}

const char* RefuseInvitationStatus::name() {
return _name;
}

int RefuseInvitationStatus::ordinal() {
return _value;
}

RefuseInvitationStatus::RefuseInvitationStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

RefuseInvitationStatus* RefuseInvitationStatus::fromValue(int value) {
for (unsigned int _n5804 = 0; _n5804 < (unsigned int)_values->size(); _n5804++) {
RefuseInvitationStatus* _y5805 = (*_values)[_n5804];
if (_y5805->getValue() == value) {
return _y5805;
}
}
return 0;
}

RefuseInvitationStatus* RefuseInvitationStatus::valueOf(const char* name) {
for (unsigned int _w13842 = 0; _w13842 < (unsigned int)_values->size(); _w13842++) {
RefuseInvitationStatus* _t13843 = (*_values)[_w13842];
if (strcmp(name, _t13843->name()) == 0) {
return _t13843;
}
}
return 0;
}

//@Override
short RefuseInvitationStatus::getSerializerID() {
return -11198;
}

const char* RefuseInvitationStatus::toString() {
return NUtils::concat("RefuseInvitationStatus.", _name);
}

void* RefuseInvitationStatus::clone() {
return this;
}

RefuseInvitationStatus::~RefuseInvitationStatus(){
}


#include "ErrorCode.h"

std::vector<ErrorCode*>* ErrorCode::_values = new std::vector<ErrorCode*>();

ErrorCode* ErrorCode::INVALID_MESSAGE = new ErrorCode("INVALID_MESSAGE", 0);

ErrorCode* ErrorCode::INTERNAL_ERROR = new ErrorCode("INTERNAL_ERROR", 1);

std::vector<ErrorCode*>* ErrorCode::values() {
    return _values;
}





int ErrorCode::getValue() {
return _value;
}

const char* ErrorCode::name() {
return _name;
}

int ErrorCode::ordinal() {
return _value;
}

ErrorCode::ErrorCode(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

ErrorCode* ErrorCode::fromValue(int value) {
for (unsigned int _g6960 = 0; _g6960 < (unsigned int)_values->size(); _g6960++) {
ErrorCode* _l6961 = (*_values)[_g6960];
if (_l6961->getValue() == value) {
return _l6961;
}
}
return 0;
}

ErrorCode* ErrorCode::valueOf(const char* name) {
for (unsigned int _k15269 = 0; _k15269 < (unsigned int)_values->size(); _k15269++) {
ErrorCode* _x15270 = (*_values)[_k15269];
if (strcmp(name, _x15270->name()) == 0) {
return _x15270;
}
}
return 0;
}

//@Override
short ErrorCode::getSerializerID() {
return -8;
}

const char* ErrorCode::toString() {
return NUtils::concat("ErrorCode.", _name);
}

void* ErrorCode::clone() {
return this;
}

ErrorCode::~ErrorCode(){
}


#include "NScore.h"

short NScore::serializerID = -3006;









const char* NScore::getStoreId() {
    return _storeId;
}

void NScore::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NScore::isstoreIdSet() {
return _storeIdSet;
}

void NScore::unSetstoreId() {
_storeIdSet = false;
}

double NScore::getValue() {
return _Value;
}

void NScore::setValue(double value) {
_Value = value;
_ValueSet = true;
}

bool NScore::isValueSet() {
return _ValueSet;
}

void NScore::unSetValue() {
_ValueSet = false;
}

//@Override
short NScore::getSerializerID() {
return serializerID;
}

void* NScore::clone() {
NScore* _e14885 = new NScore();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_e14885->setStoreId(_storeId);
}
if (_ValueSet == true && Utils::isNullDouble(_Value) == false) {
_e14885->setValue(_Value);
}
return _e14885;
}

const char* NScore::toString() {
const char* _k14886 = "";
_k14886 = NUtils::concat(_k14886, NUtils::concat(NUtils::concat("[", "NScore"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_k14886 = NUtils::concat(_k14886, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_ValueSet == true && Utils::isNullDouble(_Value) == false) {
_k14886 = NUtils::concat(_k14886, NUtils::concat(NUtils::concat("_Value=", _Value), "| "));
}
_k14886 = NUtils::concat(_k14886, "]");
return _k14886;
}

NScore::NScore(){
this->_ValueSet = false;
this->_Value = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NScore::~NScore(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
}


#include "T816.h"

const char* T816::_x15624 = "api-client-java";



bool T816::_m16603(T810* _d15626, void* _h15627, short _m15628, T808* _b15629) {
    if (_h15627 == 0) {
        return false;
    }
    _b15629->_m16035(_m15628);
    _m16606(_d15626, _h15627, _b15629);
    return true;
}

bool T816::_m16606(T810* factory, void* _d15631, T808* stream) {
if (_d15631 == 0) {
    return false;
}
stream->_m16036(T809::_v15501);
int _u15633 = stream->_m16028();
stream->_m16029(4);
int _w15634 = stream->_m16028();
Serializable* _s15635 = (Serializable*)_d15631;
short _d15636 = _s15635->getSerializerID();
stream->_m16035(_d15636);
factory->_m15769(_s15635, (T808*)stream);
stream->_m16038(_u15633, stream->_m16028() - _w15634);
return true;
}

bool T816::_m16610(T810* _q15637, std::vector<int>* _t15638, int _w15639, T808* _a15640) {
if (_t15638 == 0) {
return false;
}
_a15640->_m16035((short)_w15639);
_a15640->_m16036(T809::_y15502);
int _i7225 = _a15640->_m16028();
_a15640->_m16029(4);
int _b7226 = _t15638->size();
_a15640->_m16035((short)_b7226);
for (unsigned int _j7227 = 0; _j7227 < (unsigned int)_b7226; _j7227++) {
int _c15644 = (*_t15638)[_j7227];
if (Utils::isNullInteger(_c15644)) {
    _a15640->_m16036(T809::_g15500);
} else {
    _m16601(_c15644, _a15640);
}
}
_a15640->_m16038(_i7225, _a15640->_m16028() - _i7225);
return true;
}

bool T816::_m16611(T810* factory, std::vector<short>* _x15646, int property, T808* stream) {
if (_x15646 == 0) {
return false;
}
stream->_m16035((short)property);
stream->_m16036(T809::_y15502);
int _z15641 = stream->_m16028();
stream->_m16029(4);
int _m15642 = _x15646->size();
stream->_m16035((short)_m15642);
for (unsigned int _l15643 = 0; _l15643 < (unsigned int)_m15642; _l15643++) {
short _q15652 = (*_x15646)[_l15643];
if (Utils::isNullShort(_q15652)) {
stream->_m16036(T809::_g15500);
} else {
_m17033(_q15652, stream);
}
}
stream->_m16038(_z15641, stream->_m16028() - _z15641);
return true;
}

bool T816::_m16612(T810* _m15645, std::vector<long long>* _n15654, int _f15647, T808* _a15648) {
if (_n15654 == 0) {
return false;
}
_a15648->_m16035((short)_f15647);
_a15648->_m16036(T809::_y15502);
int _s7233 = _a15648->_m16028();
_a15648->_m16029(4);
int _v7234 = _n15654->size();
_a15648->_m16035((short)_v7234);
for (unsigned int _o7235 = 0; _o7235 < (unsigned int)_v7234; _o7235++) {
long long _o15660 = (*_n15654)[_o7235];
if (Utils::isNullLong(_o15660)) {
_a15648->_m16036(T809::_g15500);
} else {
_m17034(_o15660, _a15648);
}
}
_a15648->_m16038(_s7233, _a15648->_m16028() - _s7233);
return true;
}

bool T816::_m16613(T810* factory, std::vector<float>* _j15662, int property, T808* stream) {
if (_j15662 == 0) {
return false;
}
stream->_m16035((short)property);
stream->_m16036(T809::_y15502);
int _k15649 = stream->_m16028();
stream->_m16029(4);
int _d15650 = _j15662->size();
stream->_m16035((short)_d15650);
for (unsigned int _i15651 = 0; _i15651 < (unsigned int)_d15650; _i15651++) {
float _z15668 = (*_j15662)[_i15651];
if (Utils::isNullFloat(_z15668)) {
stream->_m16036(T809::_g15500);
} else {
_m17035(_z15668, stream);
}
}
stream->_m16038(_k15649, stream->_m16028() - _k15649);
return true;
}

bool T816::_m16614(T810* _z15653, std::vector<double>* _m15670, int _u15655, T808* _b15656) {
if (_m15670 == 0) {
return false;
}
_b15656->_m16035((short)_u15655);
_b15656->_m16036(T809::_y15502);
int _m7241 = _b15656->_m16028();
_b15656->_m16029(4);
int _h7242 = _m15670->size();
_b15656->_m16035((short)_h7242);
for (unsigned int _m7243 = 0; _m7243 < (unsigned int)_h7242; _m7243++) {
double _k15676 = (*_m15670)[_m7243];
if (Utils::isNullDouble(_k15676)) {
_b15656->_m16036(T809::_g15500);
} else {
_m17036(_k15676, _b15656);
}
}
_b15656->_m16038(_m7241, _b15656->_m16028() - _m7241);
return true;
}

bool T816::_m16615(T810* factory, std::vector<bool>* _s15678, int property, T808* stream) {
if (_s15678 == 0) {
return false;
}
stream->_m16035((short)property);
stream->_m16036(T809::_y15502);
int _k15657 = stream->_m16028();
stream->_m16029(4);
int _d15658 = _s15678->size();
stream->_m16035((short)_d15658);
for (unsigned int _j15659 = 0; _j15659 < (unsigned int)_d15658; _j15659++) {
bool _r15684 = (*_s15678)[_j15659];
if (Utils::isNullBoolean(_r15684)) {
stream->_m16036(T809::_g15500);
} else {
_m17037(_r15684, stream);
}
}
stream->_m16038(_k15657, stream->_m16028() - _k15657);
return true;
}

bool T816::_m16609(T810* _m15685, std::vector<const char*>* _n15686, int _u15687, T808* _j15664) {
if (_n15686 == 0) {
return false;
}
_j15664->_m16035((short)_u15687);
_j15664->_m16036(T809::_y15502);
int _c15689 = _j15664->_m16028();
_j15664->_m16029(4);
int _j15690 = _n15686->size();
_j15664->_m16035((short)_j15690);
for (unsigned int _v15691 = 0; _v15691 < (unsigned int)_j15690; _v15691++) {
const char* _c15692 = (*_n15686)[_v15691];
if (_c15692 == 0) {
_j15664->_m16036(T809::_g15500);
} else {
_m17038(_c15692, _j15664);
}
}
_j15664->_m16038(_c15689, _j15664->_m16028() - _c15689);
return true;
}

bool T816::_m16602(const char* stringValue, int propertyId, T808* stream) {
if (Utils::isNull(stringValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17038(stringValue, stream);
return true;
}

bool T816::_m17038(const char* _k15696, T808* stream) {
if (Utils::isNull(_k15696)) {
return false;
}
stream->_m16036(T809::_p15510);
stream->_m16991(_k15696);
return true;
}

bool T816::_m16605(double doubleValue, int propertyId, T808* stream) {
if (Utils::isNullDouble(doubleValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17036(doubleValue, stream);
return true;
}

bool T816::_m17036(double _a15701, T808* stream) {
if (Utils::isNullDouble(_a15701)) {
return false;
}
stream->_m16036(T809::_d15509);
stream->_m16992(_a15701);
return true;
}

bool T816::_m16607(int intValue, int propertyId, T808* _l15672) {
if (Utils::isNullInteger(intValue)) {
return false;
}
_l15672->_m16035((short)propertyId);
_m16601(intValue, _l15672);
return true;
}

bool T816::_m16601(int _f15706, T808* stream) {
if (Utils::isNullInteger(_f15706)) {
return false;
}
stream->_m16036(T809::_o15505);
stream->_m16993(_f15706);
return true;
}

bool T816::_m17039(NDate* _f15708, int propertyId, T808* stream) {
if (Utils::isNullDate(_f15708)) {
return false;
}
_m16608(_f15708->getTime(), propertyId, stream);
return true;
}

bool T816::_m16608(long long longValue, int propertyId, T808* stream) {
if (Utils::isNullLong(longValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17034(longValue, stream);
return true;
}

bool T816::_m17034(long long _i15714, T808* stream) {
if (Utils::isNullLong(_i15714)) {
return false;
}
stream->_m16036(T809::_d15507);
stream->_m16994(_i15714);
return true;
}

bool T816::_m17040(unsigned char _p15716, T808* _x15680) {
if (Utils::isNullByte(_p15716)) {
return false;
}
_x15680->_m16036(T809::_r15504);
_x15680->_m16036(_p15716);
return true;
}

bool T816::_m17041(short shortValue, int propertyId, T808* stream) {
if (Utils::isNullShort(shortValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17033(shortValue, stream);
return true;
}

bool T816::_m17033(short _y15721, T808* stream) {
if (Utils::isNullShort(_y15721)) {
return false;
}
stream->_m16036(T809::_m15506);
stream->_m16035(_y15721);
return true;
}

bool T816::_m17042(float floatValue, int propertyId, T808* stream) {
if (Utils::isNullFloat(floatValue)) {
return false;
}
stream->_m16035((short)propertyId);
_m17035(floatValue, stream);
return true;
}

bool T816::_m17035(float _l15726, T808* stream) {
if (Utils::isNullFloat(_l15726)) {
return false;
}
stream->_m16036(T809::_f15508);
stream->_m16995(_l15726);
return true;
}

bool T816::_m16604(bool booleanValue, int _b15729, T808* _r15688) {
if (Utils::isNullBoolean(booleanValue)) {
return false;
}
_r15688->_m16035((short)_b15729);
_m17037(booleanValue, _r15688);
return true;
}

bool T816::_m17037(bool _y15731, T808* stream) {
if (Utils::isNullBoolean(_y15731)) {
return false;
}
stream->_m16036(T809::_m15512);
if (_y15731 == true) {
stream->_m16036((unsigned char)1);
} else if (_y15731 == false) {
stream->_m16036((unsigned char)0);
}
return true;
}

bool T816::_m16616(T810* _e15733, NMatrix2* _u15734, int _p15735, T808* _g15736) {
if (Utils::isNull(_u15734)) {
return false;
}
_g15736->_m16035((short)_p15735);
_g15736->_m16036(T809::_c15503);
int _n15737 = _g15736->_m16028();
_g15736->_m16029(4);
short _o15738 = _u15734->getRowCount();
short _h15739 = _u15734->getColumnCount();
_g15736->_m16035((short)_o15738);
_g15736->_m16035((short)_h15739);
for (unsigned short _e15740 = 0; _e15740 < (unsigned int)_o15738; _e15740++) {
for (unsigned short _w15741 = 0; _w15741 < (unsigned int)_h15739; _w15741++) {
Serializable* _m15742 = _u15734->getItem(_e15740, _w15741);
if (Utils::isNull(_m15742)) {
_g15736->_m16036(T809::_g15500);
} else {
_m16606(_e15733, _m15742, _g15736);
}
}
}
_g15736->_m16038(_n15737, _g15736->_m16028() - _n15737);
return true;
}

T816::T816(){
}

T816::~T816(){
}


#include "T800.h"



T800::T800(const char* name, const char* gameId):T796(name){

    this->_y14689 = new std::vector<const char*>();
    _y14689->push_back(gameId);
}

void T800::_m16925(const char* gameId) {
    _y14689->push_back(gameId);
}

void T800::_m16956(const char* _e14690) {
_y14689->erase(std::find(_y14689->begin(), _y14689->end(), _e14690));
}

bool T800::_m16939(const char* _r14692) {
for (unsigned int _j14693 = 0; _j14693 < (unsigned int)_y14689->size(); _j14693++) {
const char* _b14694 = (*_y14689)[_j14693];
if (strcmp(_b14694, _r14692) == 0) {
    return true;
}
}
return false;
}

T800::~T800(){
if (_y14689) {
for (unsigned int i=0; i < _y14689->size(); i++) {
delete (*_y14689)[i];
}
delete _y14689;
_y14689=0;;
}
}


#include "StartGameResponse.h"

short StartGameResponse::serializerID = -10619;

















const char* StartGameResponse::getMessageId() {
    return _MessageId;
}

void StartGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StartGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void StartGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* StartGameResponse::getRequestId() {
return _RequestId;
}

void StartGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StartGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void StartGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

StartGameStatus* StartGameResponse::getStartGameStatus() {
return _StartGameStatus;
}

void StartGameResponse::setStartGameStatus(StartGameStatus* value) {
_StartGameStatus = value;
_StartGameStatusSet = true;
}

bool StartGameResponse::isStartGameStatusSet() {
return _StartGameStatusSet;
}

void StartGameResponse::unSetStartGameStatus() {
_StartGameStatusSet = false;
}

const char* StartGameResponse::getGameId() {
return _GameId;
}

void StartGameResponse::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool StartGameResponse::isGameIdSet() {
return _GameIdSet;
}

void StartGameResponse::unSetGameId() {
_GameIdSet = false;
}

//@Override
short StartGameResponse::getSerializerID() {
return serializerID;
}

void* StartGameResponse::clone() {
StartGameResponse* _h15576 = new StartGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15576->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15576->setRequestId(_RequestId);
}
if (_StartGameStatusSet == true && Utils::isNull(_StartGameStatus) == false) {
_h15576->setStartGameStatus(_StartGameStatus);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_h15576->setGameId(_GameId);
}
return _h15576;
}

const char* StartGameResponse::toString() {
const char* _g15577 = "";
_g15577 = NUtils::concat(_g15577, NUtils::concat(NUtils::concat("[", "StartGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15577 = NUtils::concat(_g15577, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15577 = NUtils::concat(_g15577, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StartGameStatusSet == true && Utils::isNull(_StartGameStatus) == false) {
_g15577 = NUtils::concat(_g15577, NUtils::concat(NUtils::concat("_StartGameStatus=", _StartGameStatus->toString()), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_g15577 = NUtils::concat(_g15577, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_g15577 = NUtils::concat(_g15577, "]");
return _g15577;
}

StartGameResponse::StartGameResponse(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_StartGameStatusSet = false;
this->_StartGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StartGameResponse::~StartGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "LoginRequest.h"

short LoginRequest::serializerID = -10077;









const char* LoginRequest::getMessageId() {
    return _MessageId;
}

void LoginRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LoginRequest::isMessageIdSet() {
return _MessageIdSet;
}

void LoginRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* LoginRequest::getRequestId() {
return _RequestId;
}

void LoginRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LoginRequest::isRequestIdSet() {
return _RequestIdSet;
}

void LoginRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short LoginRequest::getSerializerID() {
return serializerID;
}

void* LoginRequest::clone() {
LoginRequest* _q14217 = new LoginRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q14217->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q14217->setRequestId(_RequestId);
}
return _q14217;
}

const char* LoginRequest::toString() {
const char* _x14218 = "";
_x14218 = NUtils::concat(_x14218, NUtils::concat(NUtils::concat("[", "LoginRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x14218 = NUtils::concat(_x14218, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x14218 = NUtils::concat(_x14218, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_x14218 = NUtils::concat(_x14218, "]");
return _x14218;
}

LoginRequest::LoginRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LoginRequest::~LoginRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "AchieveWithProgressRequest.h"

short AchieveWithProgressRequest::serializerID = -10456;

















const char* AchieveWithProgressRequest::getMessageId() {
    return _MessageId;
}

void AchieveWithProgressRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AchieveWithProgressRequest::isMessageIdSet() {
return _MessageIdSet;
}

void AchieveWithProgressRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* AchieveWithProgressRequest::getRequestId() {
return _RequestId;
}

void AchieveWithProgressRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AchieveWithProgressRequest::isRequestIdSet() {
return _RequestIdSet;
}

void AchieveWithProgressRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* AchieveWithProgressRequest::getAchivementId() {
return _AchivementId;
}

void AchieveWithProgressRequest::setAchivementId(const char* value) {
if (_AchivementId && _AchivementId != value) {
delete _AchivementId;
}
if (value) {
_AchivementId = strdup(value);
} else {
_AchivementId = 0;
}
_AchivementIdSet = true;
}

bool AchieveWithProgressRequest::isAchivementIdSet() {
return _AchivementIdSet;
}

void AchieveWithProgressRequest::unSetAchivementId() {
_AchivementIdSet = false;
}

int AchieveWithProgressRequest::getValue() {
return _Value;
}

void AchieveWithProgressRequest::setValue(int value) {
_Value = value;
_ValueSet = true;
}

bool AchieveWithProgressRequest::isValueSet() {
return _ValueSet;
}

void AchieveWithProgressRequest::unSetValue() {
_ValueSet = false;
}

//@Override
short AchieveWithProgressRequest::getSerializerID() {
return serializerID;
}

void* AchieveWithProgressRequest::clone() {
AchieveWithProgressRequest* _x15556 = new AchieveWithProgressRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15556->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15556->setRequestId(_RequestId);
}
if (_AchivementIdSet == true && Utils::isNull(_AchivementId) == false) {
_x15556->setAchivementId(_AchivementId);
}
if (_ValueSet == true && Utils::isNullInteger(_Value) == false) {
_x15556->setValue(_Value);
}
return _x15556;
}

const char* AchieveWithProgressRequest::toString() {
const char* _v15557 = "";
_v15557 = NUtils::concat(_v15557, NUtils::concat(NUtils::concat("[", "AchieveWithProgressRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v15557 = NUtils::concat(_v15557, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v15557 = NUtils::concat(_v15557, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_AchivementIdSet == true && Utils::isNull(_AchivementId) == false) {
_v15557 = NUtils::concat(_v15557, NUtils::concat(NUtils::concat("_AchivementId=", _AchivementId), "| "));
}
if (_ValueSet == true && Utils::isNullInteger(_Value) == false) {
_v15557 = NUtils::concat(_v15557, NUtils::concat(NUtils::concat("_Value=", _Value), "| "));
}
_v15557 = NUtils::concat(_v15557, "]");
return _v15557;
}

AchieveWithProgressRequest::AchieveWithProgressRequest(){
this->_ValueSet = false;
this->_Value = 0;
this->_AchivementIdSet = false;
this->_AchivementId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AchieveWithProgressRequest::~AchieveWithProgressRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_AchivementId) {
delete _AchivementId;
_AchivementId = 0;
}
}


#include "NRawMessage.h"

short NRawMessage::serializerID = -3119;

























const char* NRawMessage::getMessageId() {
    return _MessageId;
}

void NRawMessage::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool NRawMessage::isMessageIdSet() {
return _MessageIdSet;
}

void NRawMessage::unSetMessageId() {
_MessageIdSet = false;
}

const char* NRawMessage::getSenderId() {
return _SenderId;
}

void NRawMessage::setSenderId(const char* value) {
if (_SenderId && _SenderId != value) {
delete _SenderId;
}
if (value) {
_SenderId = strdup(value);
} else {
_SenderId = 0;
}
_SenderIdSet = true;
}

bool NRawMessage::isSenderIdSet() {
return _SenderIdSet;
}

void NRawMessage::unSetSenderId() {
_SenderIdSet = false;
}

const char* NRawMessage::getStoreId() {
return _storeId;
}

void NRawMessage::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
delete _storeId;
}
if (value) {
_storeId = strdup(value);
} else {
_storeId = 0;
}
_storeIdSet = true;
}

bool NRawMessage::isstoreIdSet() {
return _storeIdSet;
}

void NRawMessage::unSetstoreId() {
_storeIdSet = false;
}

const char* NRawMessage::getRequestId() {
return _RequestId;
}

void NRawMessage::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool NRawMessage::isRequestIdSet() {
return _RequestIdSet;
}

void NRawMessage::unSetRequestId() {
_RequestIdSet = false;
}

const char* NRawMessage::getGameId() {
return _gameId;
}

void NRawMessage::setGameId(const char* value) {
if (_gameId && _gameId != value) {
delete _gameId;
}
if (value) {
_gameId = strdup(value);
} else {
_gameId = 0;
}
_gameIdSet = true;
}

bool NRawMessage::isgameIdSet() {
return _gameIdSet;
}

void NRawMessage::unSetgameId() {
_gameIdSet = false;
}

const char* NRawMessage::getContent() {
return _content;
}

void NRawMessage::setContent(const char* value) {
if (_content && _content != value) {
delete _content;
}
if (value) {
_content = strdup(value);
} else {
_content = 0;
}
_contentSet = true;
}

bool NRawMessage::iscontentSet() {
return _contentSet;
}

void NRawMessage::unSetcontent() {
_contentSet = false;
}

//@Override
short NRawMessage::getSerializerID() {
return serializerID;
}

void* NRawMessage::clone() {
NRawMessage* _q15190 = new NRawMessage();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15190->setMessageId(_MessageId);
}
if (_SenderIdSet == true && Utils::isNull(_SenderId) == false) {
_q15190->setSenderId(_SenderId);
}
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_q15190->setStoreId(_storeId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15190->setRequestId(_RequestId);
}
if (_gameIdSet == true && Utils::isNull(_gameId) == false) {
_q15190->setGameId(_gameId);
}
if (_contentSet == true && Utils::isNull(_content) == false) {
_q15190->setContent(_content);
}
return _q15190;
}

const char* NRawMessage::toString() {
const char* _g15191 = "";
_g15191 = NUtils::concat(_g15191, NUtils::concat(NUtils::concat("[", "NRawMessage"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15191 = NUtils::concat(_g15191, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_SenderIdSet == true && Utils::isNull(_SenderId) == false) {
_g15191 = NUtils::concat(_g15191, NUtils::concat(NUtils::concat("_SenderId=", _SenderId), "| "));
}
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_g15191 = NUtils::concat(_g15191, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15191 = NUtils::concat(_g15191, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_gameIdSet == true && Utils::isNull(_gameId) == false) {
_g15191 = NUtils::concat(_g15191, NUtils::concat(NUtils::concat("_gameId=", _gameId), "| "));
}
if (_contentSet == true && Utils::isNull(_content) == false) {
_g15191 = NUtils::concat(_g15191, NUtils::concat(NUtils::concat("_content=", _content), "| "));
}
_g15191 = NUtils::concat(_g15191, "]");
return _g15191;
}

NRawMessage::NRawMessage(){
this->_contentSet = false;
this->_content = 0;
this->_gameIdSet = false;
this->_gameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_storeIdSet = false;
this->_storeId = 0;
this->_SenderIdSet = false;
this->_SenderId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

NRawMessage::~NRawMessage(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_SenderId) {
delete _SenderId;
_SenderId = 0;
}
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_gameId) {
delete _gameId;
_gameId = 0;
}
if (_content) {
delete _content;
_content = 0;
}
}


#include "SavePlayerProfileResponse.h"

short SavePlayerProfileResponse::serializerID = -10099;













const char* SavePlayerProfileResponse::getMessageId() {
    return _MessageId;
}

void SavePlayerProfileResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SavePlayerProfileResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SavePlayerProfileResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SavePlayerProfileResponse::getRequestId() {
return _RequestId;
}

void SavePlayerProfileResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SavePlayerProfileResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SavePlayerProfileResponse::unSetRequestId() {
_RequestIdSet = false;
}

SavePlayerProfileStatus* SavePlayerProfileResponse::getSavePlayerProfileStatus() {
return _SavePlayerProfileStatus;
}

void SavePlayerProfileResponse::setSavePlayerProfileStatus(SavePlayerProfileStatus* value) {
_SavePlayerProfileStatus = value;
_SavePlayerProfileStatusSet = true;
}

bool SavePlayerProfileResponse::isSavePlayerProfileStatusSet() {
return _SavePlayerProfileStatusSet;
}

void SavePlayerProfileResponse::unSetSavePlayerProfileStatus() {
_SavePlayerProfileStatusSet = false;
}

//@Override
short SavePlayerProfileResponse::getSerializerID() {
return serializerID;
}

void* SavePlayerProfileResponse::clone() {
SavePlayerProfileResponse* _g14095 = new SavePlayerProfileResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g14095->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g14095->setRequestId(_RequestId);
}
if (_SavePlayerProfileStatusSet == true && Utils::isNull(_SavePlayerProfileStatus) == false) {
_g14095->setSavePlayerProfileStatus(_SavePlayerProfileStatus);
}
return _g14095;
}

const char* SavePlayerProfileResponse::toString() {
const char* _m14096 = "";
_m14096 = NUtils::concat(_m14096, NUtils::concat(NUtils::concat("[", "SavePlayerProfileResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m14096 = NUtils::concat(_m14096, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m14096 = NUtils::concat(_m14096, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SavePlayerProfileStatusSet == true && Utils::isNull(_SavePlayerProfileStatus) == false) {
_m14096 = NUtils::concat(_m14096, NUtils::concat(NUtils::concat("_SavePlayerProfileStatus=", _SavePlayerProfileStatus->toString()), "| "));
}
_m14096 = NUtils::concat(_m14096, "]");
return _m14096;
}

SavePlayerProfileResponse::SavePlayerProfileResponse(){
this->_SavePlayerProfileStatusSet = false;
this->_SavePlayerProfileStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SavePlayerProfileResponse::~SavePlayerProfileResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "GetPlayerProfileResponse.h"

short GetPlayerProfileResponse::serializerID = -10119;

















const char* GetPlayerProfileResponse::getMessageId() {
    return _MessageId;
}

void GetPlayerProfileResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetPlayerProfileResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetPlayerProfileResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetPlayerProfileResponse::getRequestId() {
return _RequestId;
}

void GetPlayerProfileResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetPlayerProfileResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetPlayerProfileResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetPlayerProfileStatus* GetPlayerProfileResponse::getGetPlayerProfileStatus() {
return _GetPlayerProfileStatus;
}

void GetPlayerProfileResponse::setGetPlayerProfileStatus(GetPlayerProfileStatus* value) {
_GetPlayerProfileStatus = value;
_GetPlayerProfileStatusSet = true;
}

bool GetPlayerProfileResponse::isGetPlayerProfileStatusSet() {
return _GetPlayerProfileStatusSet;
}

void GetPlayerProfileResponse::unSetGetPlayerProfileStatus() {
_GetPlayerProfileStatusSet = false;
}

NPlayerProfile* GetPlayerProfileResponse::getProfile() {
return _Profile;
}

void GetPlayerProfileResponse::setProfile(NPlayerProfile* value) {
if (_Profile && _Profile != value) {
delete _Profile;
}
_Profile = value;
_ProfileSet = true;
}

bool GetPlayerProfileResponse::isProfileSet() {
return _ProfileSet;
}

void GetPlayerProfileResponse::unSetProfile() {
_ProfileSet = false;
}

//@Override
short GetPlayerProfileResponse::getSerializerID() {
return serializerID;
}

void* GetPlayerProfileResponse::clone() {
GetPlayerProfileResponse* _e14968 = new GetPlayerProfileResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e14968->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e14968->setRequestId(_RequestId);
}
if (_GetPlayerProfileStatusSet == true && Utils::isNull(_GetPlayerProfileStatus) == false) {
_e14968->setGetPlayerProfileStatus(_GetPlayerProfileStatus);
}
if (_ProfileSet == true && Utils::isNull(_Profile) == false) {
_e14968->setProfile((NPlayerProfile*)(_Profile->clone()));
}
return _e14968;
}

const char* GetPlayerProfileResponse::toString() {
const char* _u14969 = "";
_u14969 = NUtils::concat(_u14969, NUtils::concat(NUtils::concat("[", "GetPlayerProfileResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u14969 = NUtils::concat(_u14969, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u14969 = NUtils::concat(_u14969, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetPlayerProfileStatusSet == true && Utils::isNull(_GetPlayerProfileStatus) == false) {
_u14969 = NUtils::concat(_u14969, NUtils::concat(NUtils::concat("_GetPlayerProfileStatus=", _GetPlayerProfileStatus->toString()), "| "));
}
if (_ProfileSet == true && Utils::isNull(_Profile) == false) {
_u14969 = NUtils::concat(_u14969, NUtils::concat(NUtils::concat("_Profile=", _Profile->toString()), "| "));
}
_u14969 = NUtils::concat(_u14969, "]");
return _u14969;
}

GetPlayerProfileResponse::GetPlayerProfileResponse(){
this->_ProfileSet = false;
this->_Profile = 0;
this->_GetPlayerProfileStatusSet = false;
this->_GetPlayerProfileStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetPlayerProfileResponse::~GetPlayerProfileResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Profile) {
delete _Profile;
_Profile=0;
}
}


#include "GetAchievementBoardRequest.h"

short GetAchievementBoardRequest::serializerID = -10437;









const char* GetAchievementBoardRequest::getMessageId() {
    return _MessageId;
}

void GetAchievementBoardRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetAchievementBoardRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetAchievementBoardRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetAchievementBoardRequest::getRequestId() {
return _RequestId;
}

void GetAchievementBoardRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetAchievementBoardRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetAchievementBoardRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short GetAchievementBoardRequest::getSerializerID() {
return serializerID;
}

void* GetAchievementBoardRequest::clone() {
GetAchievementBoardRequest* _m15415 = new GetAchievementBoardRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m15415->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m15415->setRequestId(_RequestId);
}
return _m15415;
}

const char* GetAchievementBoardRequest::toString() {
const char* _x15416 = "";
_x15416 = NUtils::concat(_x15416, NUtils::concat(NUtils::concat("[", "GetAchievementBoardRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15416 = NUtils::concat(_x15416, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15416 = NUtils::concat(_x15416, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_x15416 = NUtils::concat(_x15416, "]");
return _x15416;
}

GetAchievementBoardRequest::GetAchievementBoardRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetAchievementBoardRequest::~GetAchievementBoardRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "LoadGhostResponse.h"

short LoadGhostResponse::serializerID = -10739;

















const char* LoadGhostResponse::getMessageId() {
    return _MessageId;
}

void LoadGhostResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LoadGhostResponse::isMessageIdSet() {
return _MessageIdSet;
}

void LoadGhostResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* LoadGhostResponse::getRequestId() {
return _RequestId;
}

void LoadGhostResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LoadGhostResponse::isRequestIdSet() {
return _RequestIdSet;
}

void LoadGhostResponse::unSetRequestId() {
_RequestIdSet = false;
}

LoadGhostStatus* LoadGhostResponse::getLoadGhostStatus() {
return _LoadGhostStatus;
}

void LoadGhostResponse::setLoadGhostStatus(LoadGhostStatus* value) {
_LoadGhostStatus = value;
_LoadGhostStatusSet = true;
}

bool LoadGhostResponse::isLoadGhostStatusSet() {
return _LoadGhostStatusSet;
}

void LoadGhostResponse::unSetLoadGhostStatus() {
_LoadGhostStatusSet = false;
}

NGame* LoadGhostResponse::getGame() {
return _Game;
}

void LoadGhostResponse::setGame(NGame* value) {
if (_Game && _Game != value) {
delete _Game;
}
_Game = value;
_GameSet = true;
}

bool LoadGhostResponse::isGameSet() {
return _GameSet;
}

void LoadGhostResponse::unSetGame() {
_GameSet = false;
}

//@Override
short LoadGhostResponse::getSerializerID() {
return serializerID;
}

void* LoadGhostResponse::clone() {
LoadGhostResponse* _x15009 = new LoadGhostResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15009->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15009->setRequestId(_RequestId);
}
if (_LoadGhostStatusSet == true && Utils::isNull(_LoadGhostStatus) == false) {
_x15009->setLoadGhostStatus(_LoadGhostStatus);
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_x15009->setGame((NGame*)(_Game->clone()));
}
return _x15009;
}

const char* LoadGhostResponse::toString() {
const char* _v15010 = "";
_v15010 = NUtils::concat(_v15010, NUtils::concat(NUtils::concat("[", "LoadGhostResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v15010 = NUtils::concat(_v15010, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v15010 = NUtils::concat(_v15010, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_LoadGhostStatusSet == true && Utils::isNull(_LoadGhostStatus) == false) {
_v15010 = NUtils::concat(_v15010, NUtils::concat(NUtils::concat("_LoadGhostStatus=", _LoadGhostStatus->toString()), "| "));
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_v15010 = NUtils::concat(_v15010, NUtils::concat(NUtils::concat("_Game=", _Game->toString()), "| "));
}
_v15010 = NUtils::concat(_v15010, "]");
return _v15010;
}

LoadGhostResponse::LoadGhostResponse(){
this->_GameSet = false;
this->_Game = 0;
this->_LoadGhostStatusSet = false;
this->_LoadGhostStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LoadGhostResponse::~LoadGhostResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Game) {
delete _Game;
_Game=0;
}
}


#include "GetInvitationsResponse.h"

short GetInvitationsResponse::serializerID = -11159;

















const char* GetInvitationsResponse::getMessageId() {
    return _MessageId;
}

void GetInvitationsResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetInvitationsResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetInvitationsResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetInvitationsResponse::getRequestId() {
return _RequestId;
}

void GetInvitationsResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetInvitationsResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetInvitationsResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetInvitationsStatus* GetInvitationsResponse::getGetInvitationsStatus() {
return _GetInvitationsStatus;
}

void GetInvitationsResponse::setGetInvitationsStatus(GetInvitationsStatus* value) {
_GetInvitationsStatus = value;
_GetInvitationsStatusSet = true;
}

bool GetInvitationsResponse::isGetInvitationsStatusSet() {
return _GetInvitationsStatusSet;
}

void GetInvitationsResponse::unSetGetInvitationsStatus() {
_GetInvitationsStatusSet = false;
}

std::vector<NInvitation*>* GetInvitationsResponse::getInvitations() {
return _Invitations;
}

void GetInvitationsResponse::setInvitations(std::vector<NInvitation*>* value) {
if (_Invitations) {
for (unsigned int i=0; i < _Invitations->size(); i++) {
delete (*_Invitations)[i];
}
}
if (_Invitations && _Invitations != value) {
delete _Invitations;
}
_Invitations = value;
_InvitationsSet = true;
}

bool GetInvitationsResponse::isInvitationsSet() {
return _InvitationsSet;
}

void GetInvitationsResponse::unSetInvitations() {
_InvitationsSet = false;
}

//@Override
short GetInvitationsResponse::getSerializerID() {
return serializerID;
}

void* GetInvitationsResponse::clone() {
GetInvitationsResponse* _u15168 = new GetInvitationsResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15168->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15168->setRequestId(_RequestId);
}
if (_GetInvitationsStatusSet == true && Utils::isNull(_GetInvitationsStatus) == false) {
_u15168->setGetInvitationsStatus(_GetInvitationsStatus);
}
if (_InvitationsSet == true && Utils::isNull(_Invitations) == false) {
std::vector<NInvitation*>* _y15169 = new std::vector<NInvitation*>();
for (unsigned int i = 0; i < (unsigned int)_Invitations->size(); i++) {
void* _t15170 = _Invitations->at(i);
if (_t15170 != 0) {
_y15169->push_back((NInvitation*)((NInvitation*)_t15170)->clone());
} else {
_y15169->push_back((NInvitation*)_t15170);
}
}
_u15168->setInvitations(_y15169);
}
return _u15168;
}

const char* GetInvitationsResponse::toString() {
const char* _o15171 = "";
_o15171 = NUtils::concat(_o15171, NUtils::concat(NUtils::concat("[", "GetInvitationsResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o15171 = NUtils::concat(_o15171, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o15171 = NUtils::concat(_o15171, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetInvitationsStatusSet == true && Utils::isNull(_GetInvitationsStatus) == false) {
_o15171 = NUtils::concat(_o15171, NUtils::concat(NUtils::concat("_GetInvitationsStatus=", _GetInvitationsStatus->toString()), "| "));
}
if (_InvitationsSet == true && Utils::isNull(_Invitations) == false) {
_o15171 = NUtils::concat(_o15171, NUtils::concat(NUtils::concat("_Invitations=", "N/A"), "| "));
}
_o15171 = NUtils::concat(_o15171, "]");
return _o15171;
}

GetInvitationsResponse::GetInvitationsResponse(){
this->_InvitationsSet = false;
this->_Invitations = new std::vector<NInvitation*>();
this->_GetInvitationsStatusSet = false;
this->_GetInvitationsStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetInvitationsResponse::~GetInvitationsResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Invitations) {
for (unsigned int i=0; i < _Invitations->size(); i++) {
delete (*_Invitations)[i];
}
delete _Invitations;
_Invitations=0;;
}
}


#include "ConnectionLost.h"

short ConnectionLost::serializerID = -3021;









const char* ConnectionLost::getMessageId() {
    return _MessageId;
}

void ConnectionLost::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ConnectionLost::isMessageIdSet() {
return _MessageIdSet;
}

void ConnectionLost::unSetMessageId() {
_MessageIdSet = false;
}

const char* ConnectionLost::getRequestId() {
return _RequestId;
}

void ConnectionLost::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ConnectionLost::isRequestIdSet() {
return _RequestIdSet;
}

void ConnectionLost::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short ConnectionLost::getSerializerID() {
return serializerID;
}

void* ConnectionLost::clone() {
ConnectionLost* _w13984 = new ConnectionLost();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w13984->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w13984->setRequestId(_RequestId);
}
return _w13984;
}

const char* ConnectionLost::toString() {
const char* _b13985 = "";
_b13985 = NUtils::concat(_b13985, NUtils::concat(NUtils::concat("[", "ConnectionLost"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b13985 = NUtils::concat(_b13985, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b13985 = NUtils::concat(_b13985, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_b13985 = NUtils::concat(_b13985, "]");
return _b13985;
}

ConnectionLost::ConnectionLost(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ConnectionLost::~ConnectionLost(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "RemoveStorableRequest.h"

short RemoveStorableRequest::serializerID = -10877;













const char* RemoveStorableRequest::getMessageId() {
    return _MessageId;
}

void RemoveStorableRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RemoveStorableRequest::isMessageIdSet() {
return _MessageIdSet;
}

void RemoveStorableRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* RemoveStorableRequest::getRequestId() {
return _RequestId;
}

void RemoveStorableRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RemoveStorableRequest::isRequestIdSet() {
return _RequestIdSet;
}

void RemoveStorableRequest::unSetRequestId() {
_RequestIdSet = false;
}

Storable* RemoveStorableRequest::getStorable() {
return _Storable;
}

void RemoveStorableRequest::setStorable(Storable* value) {
if (_Storable && _Storable != value) {
delete _Storable;
}
_Storable = value;
_StorableSet = true;
}

bool RemoveStorableRequest::isStorableSet() {
return _StorableSet;
}

void RemoveStorableRequest::unSetStorable() {
_StorableSet = false;
}

//@Override
short RemoveStorableRequest::getSerializerID() {
return serializerID;
}

void* RemoveStorableRequest::clone() {
RemoveStorableRequest* _t14852 = new RemoveStorableRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_t14852->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_t14852->setRequestId(_RequestId);
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_t14852->setStorable((Storable*)(_Storable->clone()));
}
return _t14852;
}

const char* RemoveStorableRequest::toString() {
const char* _b14853 = "";
_b14853 = NUtils::concat(_b14853, NUtils::concat(NUtils::concat("[", "RemoveStorableRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b14853 = NUtils::concat(_b14853, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b14853 = NUtils::concat(_b14853, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_b14853 = NUtils::concat(_b14853, NUtils::concat(NUtils::concat("_Storable=", _Storable->toString()), "| "));
}
_b14853 = NUtils::concat(_b14853, "]");
return _b14853;
}

RemoveStorableRequest::RemoveStorableRequest(){
this->_StorableSet = false;
this->_Storable = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RemoveStorableRequest::~RemoveStorableRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storable) {
delete _Storable;
_Storable=0;
}
}


#include "LoadGameStatus.h"

std::vector<LoadGameStatus*>* LoadGameStatus::_values = new std::vector<LoadGameStatus*>();

LoadGameStatus* LoadGameStatus::SUCCESS = new LoadGameStatus("SUCCESS", 0);

LoadGameStatus* LoadGameStatus::INVALID_CALL = new LoadGameStatus("INVALID_CALL", 1);

LoadGameStatus* LoadGameStatus::INTERNAL_ERROR = new LoadGameStatus("INTERNAL_ERROR", 2);

LoadGameStatus* LoadGameStatus::UNKNOWN_GAME_ID = new LoadGameStatus("UNKNOWN_GAME_ID", 4);

std::vector<LoadGameStatus*>* LoadGameStatus::values() {
    return _values;
}





int LoadGameStatus::getValue() {
return _value;
}

const char* LoadGameStatus::name() {
return _name;
}

int LoadGameStatus::ordinal() {
return _value;
}

LoadGameStatus::LoadGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

LoadGameStatus* LoadGameStatus::fromValue(int value) {
for (unsigned int _h6113 = 0; _h6113 < (unsigned int)_values->size(); _h6113++) {
LoadGameStatus* _n6114 = (*_values)[_h6113];
if (_n6114->getValue() == value) {
return _n6114;
}
}
return 0;
}

LoadGameStatus* LoadGameStatus::valueOf(const char* name) {
for (unsigned int _n14223 = 0; _n14223 < (unsigned int)_values->size(); _n14223++) {
LoadGameStatus* _o14224 = (*_values)[_n14223];
if (strcmp(name, _o14224->name()) == 0) {
return _o14224;
}
}
return 0;
}

//@Override
short LoadGameStatus::getSerializerID() {
return -10978;
}

const char* LoadGameStatus::toString() {
return NUtils::concat("LoadGameStatus.", _name);
}

void* LoadGameStatus::clone() {
return this;
}

LoadGameStatus::~LoadGameStatus(){
}


#include "ConsumeItemRequest.h"

short ConsumeItemRequest::serializerID = -10377;

















const char* ConsumeItemRequest::getMessageId() {
    return _MessageId;
}

void ConsumeItemRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ConsumeItemRequest::isMessageIdSet() {
return _MessageIdSet;
}

void ConsumeItemRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* ConsumeItemRequest::getRequestId() {
return _RequestId;
}

void ConsumeItemRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ConsumeItemRequest::isRequestIdSet() {
return _RequestIdSet;
}

void ConsumeItemRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* ConsumeItemRequest::getItemId() {
return _ItemId;
}

void ConsumeItemRequest::setItemId(const char* value) {
if (_ItemId && _ItemId != value) {
delete _ItemId;
}
if (value) {
_ItemId = strdup(value);
} else {
_ItemId = 0;
}
_ItemIdSet = true;
}

bool ConsumeItemRequest::isItemIdSet() {
return _ItemIdSet;
}

void ConsumeItemRequest::unSetItemId() {
_ItemIdSet = false;
}

int ConsumeItemRequest::getQuantity() {
return _Quantity;
}

void ConsumeItemRequest::setQuantity(int value) {
_Quantity = value;
_QuantitySet = true;
}

bool ConsumeItemRequest::isQuantitySet() {
return _QuantitySet;
}

void ConsumeItemRequest::unSetQuantity() {
_QuantitySet = false;
}

//@Override
short ConsumeItemRequest::getSerializerID() {
return serializerID;
}

void* ConsumeItemRequest::clone() {
ConsumeItemRequest* _p15017 = new ConsumeItemRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p15017->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p15017->setRequestId(_RequestId);
}
if (_ItemIdSet == true && Utils::isNull(_ItemId) == false) {
_p15017->setItemId(_ItemId);
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_p15017->setQuantity(_Quantity);
}
return _p15017;
}

const char* ConsumeItemRequest::toString() {
const char* _d15018 = "";
_d15018 = NUtils::concat(_d15018, NUtils::concat(NUtils::concat("[", "ConsumeItemRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d15018 = NUtils::concat(_d15018, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d15018 = NUtils::concat(_d15018, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ItemIdSet == true && Utils::isNull(_ItemId) == false) {
_d15018 = NUtils::concat(_d15018, NUtils::concat(NUtils::concat("_ItemId=", _ItemId), "| "));
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_d15018 = NUtils::concat(_d15018, NUtils::concat(NUtils::concat("_Quantity=", _Quantity), "| "));
}
_d15018 = NUtils::concat(_d15018, "]");
return _d15018;
}

ConsumeItemRequest::ConsumeItemRequest(){
this->_QuantitySet = false;
this->_Quantity = 0;
this->_ItemIdSet = false;
this->_ItemId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ConsumeItemRequest::~ConsumeItemRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_ItemId) {
delete _ItemId;
_ItemId = 0;
}
}


#include "GetLeaderboardRequest.h"

short GetLeaderboardRequest::serializerID = -10317;

























const char* GetLeaderboardRequest::getMessageId() {
    return _MessageId;
}

void GetLeaderboardRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetLeaderboardRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetLeaderboardRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetLeaderboardRequest::getRequestId() {
return _RequestId;
}

void GetLeaderboardRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetLeaderboardRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetLeaderboardRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* GetLeaderboardRequest::getLeaderboardId() {
return _LeaderboardId;
}

void GetLeaderboardRequest::setLeaderboardId(const char* value) {
if (_LeaderboardId && _LeaderboardId != value) {
delete _LeaderboardId;
}
if (value) {
_LeaderboardId = strdup(value);
} else {
_LeaderboardId = 0;
}
_LeaderboardIdSet = true;
}

bool GetLeaderboardRequest::isLeaderboardIdSet() {
return _LeaderboardIdSet;
}

void GetLeaderboardRequest::unSetLeaderboardId() {
_LeaderboardIdSet = false;
}

LeaderboardPeriod* GetLeaderboardRequest::getPeriod() {
return _Period;
}

void GetLeaderboardRequest::setPeriod(LeaderboardPeriod* value) {
_Period = value;
_PeriodSet = true;
}

bool GetLeaderboardRequest::isPeriodSet() {
return _PeriodSet;
}

void GetLeaderboardRequest::unSetPeriod() {
_PeriodSet = false;
}

int GetLeaderboardRequest::getStart() {
return _Start;
}

void GetLeaderboardRequest::setStart(int value) {
_Start = value;
_StartSet = true;
}

bool GetLeaderboardRequest::isStartSet() {
return _StartSet;
}

void GetLeaderboardRequest::unSetStart() {
_StartSet = false;
}

int GetLeaderboardRequest::getLimit() {
return _Limit;
}

void GetLeaderboardRequest::setLimit(int value) {
_Limit = value;
_LimitSet = true;
}

bool GetLeaderboardRequest::isLimitSet() {
return _LimitSet;
}

void GetLeaderboardRequest::unSetLimit() {
_LimitSet = false;
}

//@Override
short GetLeaderboardRequest::getSerializerID() {
return serializerID;
}

void* GetLeaderboardRequest::clone() {
GetLeaderboardRequest* _i15121 = new GetLeaderboardRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15121->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15121->setRequestId(_RequestId);
}
if (_LeaderboardIdSet == true && Utils::isNull(_LeaderboardId) == false) {
_i15121->setLeaderboardId(_LeaderboardId);
}
if (_PeriodSet == true && Utils::isNull(_Period) == false) {
_i15121->setPeriod(_Period);
}
if (_StartSet == true && Utils::isNullInteger(_Start) == false) {
_i15121->setStart(_Start);
}
if (_LimitSet == true && Utils::isNullInteger(_Limit) == false) {
_i15121->setLimit(_Limit);
}
return _i15121;
}

const char* GetLeaderboardRequest::toString() {
const char* _w15122 = "";
_w15122 = NUtils::concat(_w15122, NUtils::concat(NUtils::concat("[", "GetLeaderboardRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w15122 = NUtils::concat(_w15122, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w15122 = NUtils::concat(_w15122, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_LeaderboardIdSet == true && Utils::isNull(_LeaderboardId) == false) {
_w15122 = NUtils::concat(_w15122, NUtils::concat(NUtils::concat("_LeaderboardId=", _LeaderboardId), "| "));
}
if (_PeriodSet == true && Utils::isNull(_Period) == false) {
_w15122 = NUtils::concat(_w15122, NUtils::concat(NUtils::concat("_Period=", _Period->toString()), "| "));
}
if (_StartSet == true && Utils::isNullInteger(_Start) == false) {
_w15122 = NUtils::concat(_w15122, NUtils::concat(NUtils::concat("_Start=", _Start), "| "));
}
if (_LimitSet == true && Utils::isNullInteger(_Limit) == false) {
_w15122 = NUtils::concat(_w15122, NUtils::concat(NUtils::concat("_Limit=", _Limit), "| "));
}
_w15122 = NUtils::concat(_w15122, "]");
return _w15122;
}

GetLeaderboardRequest::GetLeaderboardRequest(){
this->_LimitSet = false;
this->_Limit = 0;
this->_StartSet = false;
this->_Start = 0;
this->_PeriodSet = false;
this->_Period = 0;
this->_LeaderboardIdSet = false;
this->_LeaderboardId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetLeaderboardRequest::~GetLeaderboardRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_LeaderboardId) {
delete _LeaderboardId;
_LeaderboardId = 0;
}
}


#include "T812.h"

Serializable* T812::readObject(T810* factory, T808* stream) {
    Serializable* _g13872 = 0;
    try {
        unsigned char _x13873 = stream->_m16314();
        if (_x13873 == T809::_g15500) {
            return 0;
        }
        stream->_m16315();
        short _m13874 = stream->_m16316();
        _g13872 = factory->_m16050(stream, _m13874);
    } catch (std::exception* e) {
        throw new std::exception();
    }
    return _g13872;
}

std::vector<int>* T812::_m16319(T810* _u13875, T808* _c13876) {
unsigned char _n5839 = _c13876->_m16314();
if (_n5839 == T809::_g15500) {
    return 0;
}
_c13876->_m16315();
short _c5840 = _c13876->_m16316();
std::vector<int>* _m13879 = new std::vector<int>();
for (unsigned int _h5842 = 0; _h5842 < (unsigned int)_c5840; _h5842++) {
    unsigned char _g5843 = _c13876->_m16314();
    if (_g5843 == T809::_g15500) {
        _m13879->push_back(Utils::NULL_INTEGER);
    } else {
        _m13879->push_back(_c13876->_m16315());
    }
}
return _m13879;
}

std::vector<short>* T812::_m16320(T810* factory, T808* stream) {
unsigned char _m13877 = stream->_m16314();
if (_m13877 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _p13878 = stream->_m16316();
std::vector<short>* _n13886 = new std::vector<short>();
for (unsigned int _s13880 = 0; _s13880 < (unsigned int)_p13878; _s13880++) {
unsigned char _g13881 = stream->_m16314();
if (_g13881 == T809::_g15500) {
    _n13886->push_back(Utils::NULL_SHORT);
} else {
    _n13886->push_back(stream->_m16316());
}
}
return _n13886;
}

std::vector<long long>* T812::_m16321(T810* _e13882, T808* _p13883) {
unsigned char _t5849 = _p13883->_m16314();
if (_t5849 == T809::_g15500) {
return 0;
}
_p13883->_m16315();
short _l5850 = _p13883->_m16316();
std::vector<long long>* _r13893 = new std::vector<long long>();
for (unsigned int _y5852 = 0; _y5852 < (unsigned int)_l5850; _y5852++) {
unsigned char _u5853 = _p13883->_m16314();
if (_u5853 == T809::_g15500) {
_r13893->push_back(Utils::NULL_LONG);
} else {
_r13893->push_back(_p13883->_m16890());
}
}
return _r13893;
}

std::vector<float>* T812::_m16322(T810* factory, T808* stream) {
unsigned char _o13884 = stream->_m16314();
if (_o13884 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _v13885 = stream->_m16316();
std::vector<float>* _q13900 = new std::vector<float>();
for (unsigned int _y13887 = 0; _y13887 < (unsigned int)_v13885; _y13887++) {
unsigned char _j13888 = stream->_m16314();
if (_j13888 == T809::_g15500) {
_q13900->push_back(Utils::NULL_FLOAT);
} else {
_q13900->push_back(stream->_m16891());
}
}
return _q13900;
}

std::vector<double>* T812::_m16323(T810* _w13889, T808* _o13890) {
unsigned char _j5859 = _o13890->_m16314();
if (_j5859 == T809::_g15500) {
return 0;
}
_o13890->_m16315();
short _w5860 = _o13890->_m16316();
std::vector<double>* _c13907 = new std::vector<double>();
for (unsigned int _n5862 = 0; _n5862 < (unsigned int)_w5860; _n5862++) {
unsigned char _y13895 = _o13890->_m16314();
if (_y13895 == T809::_g15500) {
_c13907->push_back(Utils::NULL_DOUBLE);
} else {
_c13907->push_back(_o13890->_m16892());
}
}
return _c13907;
}

std::vector<const char*>* T812::_m16318(T810* factory, T808* stream) {
unsigned char _u13891 = stream->_m16314();
if (_u13891 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _u13892 = stream->_m16316();
std::vector<const char*>* _m13914 = new std::vector<const char*>();
for (unsigned int _w13894 = 0; _w13894 < (unsigned int)_u13892; _w13894++) {
_m13914->push_back(_m16310(stream));
}
return _m13914;
}

std::vector<bool>* T812::_m16324(T810* factory, T808* stream) {
unsigned char _o5868 = stream->_m16314();
if (_o5868 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _p13919 = stream->_m16316();
std::vector<bool>* _l13920 = new std::vector<bool>();
for (unsigned int _x13921 = 0; _x13921 < (unsigned int)_p13919; _x13921++) {
unsigned char _u13922 = stream->_m16314();
if (_u13922 == T809::_g15500) {
_l13920->push_back(Utils::NULL_BOOLEAN);
} else {
_l13920->push_back(stream->_m16314() == (unsigned char)1);
}
}
return _l13920;
}

NMatrix2* T812::_m16325(T810* _s13923, T808* _w13897) {
unsigned char _r13898 = _w13897->_m16314();
if (_r13898 == T809::_g15500) {
return 0;
}
_w13897->_m16315();
short _b13926 = _w13897->_m16316();
short _r13927 = _w13897->_m16316();
NMatrix2* _x13928 = new NMatrix2(_b13926, _r13927);
int _j13929 = _b13926 * _r13927;
for (unsigned int _n13930 = 0; _n13930 < (unsigned int)_j13929; _n13930++) {
_x13928->addItem(readObject(_s13923, _w13897));
}
return _x13928;
}

const char* T812::_m16310(T808* stream) {
unsigned char _c5879 = stream->_m16314();
if (_c5879 == T809::_g15500) {
return 0;
}
return stream->_m16893();
}

NDate* T812::_m16894(T808* stream) {
unsigned char _m5880 = stream->_m16314();
if (_m5880 == T809::_g15500) {
return Utils::NULL_DATE;
}
return new NDate(stream->_m16890());
}

double T812::_m16313(T808* stream) {
unsigned char _h5881 = stream->_m16314();
if (_h5881 == T809::_g15500) {
return Utils::NULL_DOUBLE;
}
return stream->_m16892();
}

int T812::_m16308(T808* stream) {
unsigned char _t5882 = stream->_m16314();
if (_t5882 == T809::_g15500) {
return Utils::NULL_INTEGER;
}
return stream->_m16315();
}

long long T812::_m16317(T808* _d13904) {
unsigned char _l13905 = _d13904->_m16314();
if (_l13905 == T809::_g15500) {
return Utils::NULL_LONG;
}
return _d13904->_m16890();
}

unsigned char T812::_m16895(T808* stream) {
unsigned char _e5884 = stream->_m16314();
if (_e5884 == T809::_g15500) {
return Utils::NULL_BYTE;
}
return stream->_m16314();
}

short T812::_m16896(T808* stream) {
unsigned char _h5885 = stream->_m16314();
if (_h5885 == T809::_g15500) {
return Utils::NULL_SHORT;
}
return stream->_m16316();
}

float T812::_m16897(T808* stream) {
unsigned char _c5886 = stream->_m16314();
if (_c5886 == T809::_g15500) {
return Utils::NULL_FLOAT;
}
return stream->_m16891();
}

bool T812::_m16312(T808* stream) {
unsigned char _q13912 = stream->_m16314();
if (_q13912 == T809::_g15500) {
return Utils::NULL_BOOLEAN;
}
return stream->_m16314() == (unsigned char)1;
}

int T812::_m16898(T808* _r13911) {
return _r13911->_m16315();
}

long long T812::_m16899(T808* stream) {
return stream->_m16890();
}

short T812::_m16309(T808* stream) {
return stream->_m16316();
}

void T812::_m16311(T808* _e13952) {
unsigned char _p13953 = _e13952->_m16314();
if (_p13953 == T809::_g15500) {
return;
}
if (_p13953 == T809::_o15505) {
_e13952->_m16029(4);
return;
}
if (_p13953 == T809::_m15506) {
_e13952->_m16029(2);
return;
}
if (_p13953 == T809::_d15507) {
_e13952->_m16029(8);
return;
}
if (_p13953 == T809::_f15508) {
_e13952->_m16029(4);
return;
}
if (_p13953 == T809::_d15509) {
_e13952->_m16029(8);
return;
}
if (_p13953 == T809::_m15512) {
_e13952->_m16029(1);
return;
}
if (_p13953 == T809::_p15510) {
short _m13954 = _e13952->_m16316();
_e13952->_m16029(_m13954);
return;
}
if (_p13953 == T809::_v15501) {
int _h13955 = _e13952->_m16315();
_e13952->_m16029(_h13955);
return;
}
}

T812::T812(){
}

T812::~T812(){
}


#include "T805.h"















T805::T805(const char* name, T810* serializerFactory, MessageListener* messageListener, const char* host, int hostPort, const char* url):AbstractNetworkConnection(name, serializerFactory, messageListener){

    this->_response = 0;
    this->connectionReceivedHandler = 0;
    this->wsUrl = 0;
    this->port = 0;
    this->server = 0;
    this->network = 0;
    this->socket = 0;
    log = NLoggerFactory::getLogger("SocketConnection");
    server = NUtils::nstrdup(host);
    port = hostPort;
    wsUrl = NUtils::nstrdup(url);
}

//@Override
void T805::_m16331() {
    if (connectionState != ConnectionState::INITIAL) {
        return;
    }
    connectionState = ConnectionState::STARTING;
    try {
        network = new T802(serializerFactory, messageListener, connectionInvalidVersionDetectedListenerCollection, connectionLostListenerCollection);
        connectionReceivedHandler = new NetConnectionReceivedHandler(this, &T805::onData10);
        NetConnectionFailHandler* connectionFailHandler = new NetConnectionFailHandler(this, &T805::onConnectionFail11);
        NetConnectionOpenedHandler* connectionOpenedHandler = new NetConnectionOpenedHandler(this, &T805::onConnectionOpened12);
        socket = new NSocketImpl();
        socket->openConnection(name, server, port, wsUrl, connectionOpenedHandler, connectionLostHandler, connectionFailHandler, connectionReceivedHandler);
    } catch (std::exception* e) {
        log->errorCause(NUtils::concat(NUtils::concat(NUtils::concat("Can't connect to server  url ", server), ":"), port), e);
        connectionFailListenerCollection->fireConnectionFail();
    }
}

void T805::_m16341(Message* msg) {
if (connectionState != ConnectionState::STARTED) {
    return;
}
_m17029(msg);
}

void T805::_m17029(Message* msg) {
if (wsUrl != 0) {
const char* msgStr = network->_m16954(msg);
socket->sendString(msgStr, 0, connectionSendFailHandler);
} else {
T811* binaryStream = network->_m16980(msg);
socket->sendBytes(binaryStream->_m17030(), 0, connectionSendFailHandler);
delete binaryStream;
}
}

void T805::_m16342(Message* msg, Message* resp) {
_response = resp;
connectionState = ConnectionState::STOPPING;
_m17029(msg);
socket->drain(new NetConnectionDrainHandler(this, &T805::onDrain13));
}

void T805::_m16332() {
tryStop();
}

//@Override
void T805::tryStop() {
try {
socket->close();
} catch (std::exception* e) {
}
}

T805::~T805(){
if (socket) {
delete socket;
socket=0;
}
if (network) {
delete network;
network=0;
}
if (server) {
delete server;
server = 0;
}
if (wsUrl) {
delete wsUrl;
wsUrl = 0;
}
if (connectionReceivedHandler) {
delete connectionReceivedHandler;
connectionReceivedHandler=0;
}
}

//@Override
void T805::onData10(unsigned char data) {
if (connectionState == ConnectionState::STARTING || connectionState == ConnectionState::STARTED) {
if (wsUrl != 0) {
network->_m16952((const char*)data);
} else {
network->_m16983((unsigned char)data);
}
}
}

//@Override
void T805::onConnectionFail11() {
if (connectionState == ConnectionState::STARTING) {
connectionFailListenerCollection->fireConnectionFail();
} else {
log->error("invalid connection status");
}
}

//@Override
void T805::onConnectionOpened12() {
connectionState = ConnectionState::STARTED;
connectionReadyListenerCollection->fireConnectionReady();
}

//@Override
void T805::onDrain13() {
try {
(*messageListener)(_response);
} catch (std::exception* e) {
log->errorCause("Error occured while processing message : ", e);
}
}


#include "AskForFriendByIdRequest.h"

short AskForFriendByIdRequest::serializerID = -10017;













const char* AskForFriendByIdRequest::getMessageId() {
    return _MessageId;
}

void AskForFriendByIdRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AskForFriendByIdRequest::isMessageIdSet() {
return _MessageIdSet;
}

void AskForFriendByIdRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* AskForFriendByIdRequest::getRequestId() {
return _RequestId;
}

void AskForFriendByIdRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AskForFriendByIdRequest::isRequestIdSet() {
return _RequestIdSet;
}

void AskForFriendByIdRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* AskForFriendByIdRequest::getId() {
return _Id;
}

void AskForFriendByIdRequest::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool AskForFriendByIdRequest::isIdSet() {
return _IdSet;
}

void AskForFriendByIdRequest::unSetId() {
_IdSet = false;
}

//@Override
short AskForFriendByIdRequest::getSerializerID() {
return serializerID;
}

void* AskForFriendByIdRequest::clone() {
AskForFriendByIdRequest* _q15210 = new AskForFriendByIdRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15210->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15210->setRequestId(_RequestId);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_q15210->setId(_Id);
}
return _q15210;
}

const char* AskForFriendByIdRequest::toString() {
const char* _a15211 = "";
_a15211 = NUtils::concat(_a15211, NUtils::concat(NUtils::concat("[", "AskForFriendByIdRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_a15211 = NUtils::concat(_a15211, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_a15211 = NUtils::concat(_a15211, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_a15211 = NUtils::concat(_a15211, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
_a15211 = NUtils::concat(_a15211, "]");
return _a15211;
}

AskForFriendByIdRequest::AskForFriendByIdRequest(){
this->_IdSet = false;
this->_Id = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AskForFriendByIdRequest::~AskForFriendByIdRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
}


#include "AchieveResponse.h"

short AchieveResponse::serializerID = -10459;





















const char* AchieveResponse::getMessageId() {
    return _MessageId;
}

void AchieveResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AchieveResponse::isMessageIdSet() {
return _MessageIdSet;
}

void AchieveResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* AchieveResponse::getRequestId() {
return _RequestId;
}

void AchieveResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AchieveResponse::isRequestIdSet() {
return _RequestIdSet;
}

void AchieveResponse::unSetRequestId() {
_RequestIdSet = false;
}

AchieveStatus* AchieveResponse::getAchieveStatus() {
return _AchieveStatus;
}

void AchieveResponse::setAchieveStatus(AchieveStatus* value) {
_AchieveStatus = value;
_AchieveStatusSet = true;
}

bool AchieveResponse::isAchieveStatusSet() {
return _AchieveStatusSet;
}

void AchieveResponse::unSetAchieveStatus() {
_AchieveStatusSet = false;
}

const char* AchieveResponse::getAchivementId() {
return _AchivementId;
}

void AchieveResponse::setAchivementId(const char* value) {
if (_AchivementId && _AchivementId != value) {
delete _AchivementId;
}
if (value) {
_AchivementId = strdup(value);
} else {
_AchivementId = 0;
}
_AchivementIdSet = true;
}

bool AchieveResponse::isAchivementIdSet() {
return _AchivementIdSet;
}

void AchieveResponse::unSetAchivementId() {
_AchivementIdSet = false;
}

int AchieveResponse::getProgress() {
return _Progress;
}

void AchieveResponse::setProgress(int value) {
_Progress = value;
_ProgressSet = true;
}

bool AchieveResponse::isProgressSet() {
return _ProgressSet;
}

void AchieveResponse::unSetProgress() {
_ProgressSet = false;
}

//@Override
short AchieveResponse::getSerializerID() {
return serializerID;
}

void* AchieveResponse::clone() {
AchieveResponse* _j14712 = new AchieveResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j14712->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j14712->setRequestId(_RequestId);
}
if (_AchieveStatusSet == true && Utils::isNull(_AchieveStatus) == false) {
_j14712->setAchieveStatus(_AchieveStatus);
}
if (_AchivementIdSet == true && Utils::isNull(_AchivementId) == false) {
_j14712->setAchivementId(_AchivementId);
}
if (_ProgressSet == true && Utils::isNullInteger(_Progress) == false) {
_j14712->setProgress(_Progress);
}
return _j14712;
}

const char* AchieveResponse::toString() {
const char* _x14713 = "";
_x14713 = NUtils::concat(_x14713, NUtils::concat(NUtils::concat("[", "AchieveResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x14713 = NUtils::concat(_x14713, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x14713 = NUtils::concat(_x14713, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_AchieveStatusSet == true && Utils::isNull(_AchieveStatus) == false) {
_x14713 = NUtils::concat(_x14713, NUtils::concat(NUtils::concat("_AchieveStatus=", _AchieveStatus->toString()), "| "));
}
if (_AchivementIdSet == true && Utils::isNull(_AchivementId) == false) {
_x14713 = NUtils::concat(_x14713, NUtils::concat(NUtils::concat("_AchivementId=", _AchivementId), "| "));
}
if (_ProgressSet == true && Utils::isNullInteger(_Progress) == false) {
_x14713 = NUtils::concat(_x14713, NUtils::concat(NUtils::concat("_Progress=", _Progress), "| "));
}
_x14713 = NUtils::concat(_x14713, "]");
return _x14713;
}

AchieveResponse::AchieveResponse(){
this->_ProgressSet = false;
this->_Progress = 0;
this->_AchivementIdSet = false;
this->_AchivementId = 0;
this->_AchieveStatusSet = false;
this->_AchieveStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AchieveResponse::~AchieveResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_AchivementId) {
delete _AchivementId;
_AchivementId = 0;
}
}


#include "PauseSessionMonitoringRequest.h"

short PauseSessionMonitoringRequest::serializerID = -11077;









const char* PauseSessionMonitoringRequest::getMessageId() {
    return _MessageId;
}

void PauseSessionMonitoringRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PauseSessionMonitoringRequest::isMessageIdSet() {
return _MessageIdSet;
}

void PauseSessionMonitoringRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* PauseSessionMonitoringRequest::getRequestId() {
return _RequestId;
}

void PauseSessionMonitoringRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PauseSessionMonitoringRequest::isRequestIdSet() {
return _RequestIdSet;
}

void PauseSessionMonitoringRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short PauseSessionMonitoringRequest::getSerializerID() {
return serializerID;
}

void* PauseSessionMonitoringRequest::clone() {
PauseSessionMonitoringRequest* _u15214 = new PauseSessionMonitoringRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15214->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15214->setRequestId(_RequestId);
}
return _u15214;
}

const char* PauseSessionMonitoringRequest::toString() {
const char* _y15215 = "";
_y15215 = NUtils::concat(_y15215, NUtils::concat(NUtils::concat("[", "PauseSessionMonitoringRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15215 = NUtils::concat(_y15215, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15215 = NUtils::concat(_y15215, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_y15215 = NUtils::concat(_y15215, "]");
return _y15215;
}

PauseSessionMonitoringRequest::PauseSessionMonitoringRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PauseSessionMonitoringRequest::~PauseSessionMonitoringRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "PlayerEnterGame.h"

short PlayerEnterGame::serializerID = -3011;

















const char* PlayerEnterGame::getMessageId() {
    return _MessageId;
}

void PlayerEnterGame::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PlayerEnterGame::isMessageIdSet() {
return _MessageIdSet;
}

void PlayerEnterGame::unSetMessageId() {
_MessageIdSet = false;
}

const char* PlayerEnterGame::getRequestId() {
return _RequestId;
}

void PlayerEnterGame::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PlayerEnterGame::isRequestIdSet() {
return _RequestIdSet;
}

void PlayerEnterGame::unSetRequestId() {
_RequestIdSet = false;
}

const char* PlayerEnterGame::getGameId() {
return _GameId;
}

void PlayerEnterGame::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool PlayerEnterGame::isGameIdSet() {
return _GameIdSet;
}

void PlayerEnterGame::unSetGameId() {
_GameIdSet = false;
}

NPlayer* PlayerEnterGame::getPlayer() {
return _Player;
}

void PlayerEnterGame::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool PlayerEnterGame::isPlayerSet() {
return _PlayerSet;
}

void PlayerEnterGame::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short PlayerEnterGame::getSerializerID() {
return serializerID;
}

void* PlayerEnterGame::clone() {
PlayerEnterGame* _z15470 = new PlayerEnterGame();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_z15470->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_z15470->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_z15470->setGameId(_GameId);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_z15470->setPlayer((NPlayer*)(_Player->clone()));
}
return _z15470;
}

const char* PlayerEnterGame::toString() {
const char* _l15471 = "";
_l15471 = NUtils::concat(_l15471, NUtils::concat(NUtils::concat("[", "PlayerEnterGame"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l15471 = NUtils::concat(_l15471, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l15471 = NUtils::concat(_l15471, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_l15471 = NUtils::concat(_l15471, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_l15471 = NUtils::concat(_l15471, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_l15471 = NUtils::concat(_l15471, "]");
return _l15471;
}

PlayerEnterGame::PlayerEnterGame(){
this->_PlayerSet = false;
this->_Player = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PlayerEnterGame::~PlayerEnterGame(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "SavePlayerStorableResponse.h"

short SavePlayerStorableResponse::serializerID = -10999;

















const char* SavePlayerStorableResponse::getMessageId() {
    return _MessageId;
}

void SavePlayerStorableResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SavePlayerStorableResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SavePlayerStorableResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SavePlayerStorableResponse::getRequestId() {
return _RequestId;
}

void SavePlayerStorableResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SavePlayerStorableResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SavePlayerStorableResponse::unSetRequestId() {
_RequestIdSet = false;
}

SavePlayerStorableStatus* SavePlayerStorableResponse::getSavePlayerStorableStatus() {
return _SavePlayerStorableStatus;
}

void SavePlayerStorableResponse::setSavePlayerStorableStatus(SavePlayerStorableStatus* value) {
_SavePlayerStorableStatus = value;
_SavePlayerStorableStatusSet = true;
}

bool SavePlayerStorableResponse::isSavePlayerStorableStatusSet() {
return _SavePlayerStorableStatusSet;
}

void SavePlayerStorableResponse::unSetSavePlayerStorableStatus() {
_SavePlayerStorableStatusSet = false;
}

const char* SavePlayerStorableResponse::getStoreId() {
return _StoreId;
}

void SavePlayerStorableResponse::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
delete _StoreId;
}
if (value) {
_StoreId = strdup(value);
} else {
_StoreId = 0;
}
_StoreIdSet = true;
}

bool SavePlayerStorableResponse::isStoreIdSet() {
return _StoreIdSet;
}

void SavePlayerStorableResponse::unSetStoreId() {
_StoreIdSet = false;
}

//@Override
short SavePlayerStorableResponse::getSerializerID() {
return serializerID;
}

void* SavePlayerStorableResponse::clone() {
SavePlayerStorableResponse* _z15578 = new SavePlayerStorableResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_z15578->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_z15578->setRequestId(_RequestId);
}
if (_SavePlayerStorableStatusSet == true && Utils::isNull(_SavePlayerStorableStatus) == false) {
_z15578->setSavePlayerStorableStatus(_SavePlayerStorableStatus);
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_z15578->setStoreId(_StoreId);
}
return _z15578;
}

const char* SavePlayerStorableResponse::toString() {
const char* _p15579 = "";
_p15579 = NUtils::concat(_p15579, NUtils::concat(NUtils::concat("[", "SavePlayerStorableResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p15579 = NUtils::concat(_p15579, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p15579 = NUtils::concat(_p15579, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SavePlayerStorableStatusSet == true && Utils::isNull(_SavePlayerStorableStatus) == false) {
_p15579 = NUtils::concat(_p15579, NUtils::concat(NUtils::concat("_SavePlayerStorableStatus=", _SavePlayerStorableStatus->toString()), "| "));
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_p15579 = NUtils::concat(_p15579, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
_p15579 = NUtils::concat(_p15579, "]");
return _p15579;
}

SavePlayerStorableResponse::SavePlayerStorableResponse(){
this->_StoreIdSet = false;
this->_StoreId = 0;
this->_SavePlayerStorableStatusSet = false;
this->_SavePlayerStorableStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SavePlayerStorableResponse::~SavePlayerStorableResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
}


#include "GetFriendDemandsStatus.h"

std::vector<GetFriendDemandsStatus*>* GetFriendDemandsStatus::_values = new std::vector<GetFriendDemandsStatus*>();

GetFriendDemandsStatus* GetFriendDemandsStatus::AUTHENTICATION_REQUIRED = new GetFriendDemandsStatus("AUTHENTICATION_REQUIRED", 0);

GetFriendDemandsStatus* GetFriendDemandsStatus::SUCCESS = new GetFriendDemandsStatus("SUCCESS", 1);

GetFriendDemandsStatus* GetFriendDemandsStatus::INTERNAL_ERROR = new GetFriendDemandsStatus("INTERNAL_ERROR", 3);

std::vector<GetFriendDemandsStatus*>* GetFriendDemandsStatus::values() {
    return _values;
}





int GetFriendDemandsStatus::getValue() {
return _value;
}

const char* GetFriendDemandsStatus::name() {
return _name;
}

int GetFriendDemandsStatus::ordinal() {
return _value;
}

GetFriendDemandsStatus::GetFriendDemandsStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetFriendDemandsStatus* GetFriendDemandsStatus::fromValue(int value) {
for (unsigned int _o5959 = 0; _o5959 < (unsigned int)_values->size(); _o5959++) {
GetFriendDemandsStatus* _l5960 = (*_values)[_o5959];
if (_l5960->getValue() == value) {
return _l5960;
}
}
return 0;
}

GetFriendDemandsStatus* GetFriendDemandsStatus::valueOf(const char* name) {
for (unsigned int _p14038 = 0; _p14038 < (unsigned int)_values->size(); _p14038++) {
GetFriendDemandsStatus* _g14039 = (*_values)[_p14038];
if (strcmp(name, _g14039->name()) == 0) {
return _g14039;
}
}
return 0;
}

//@Override
short GetFriendDemandsStatus::getSerializerID() {
return -10238;
}

const char* GetFriendDemandsStatus::toString() {
return NUtils::concat("GetFriendDemandsStatus.", _name);
}

void* GetFriendDemandsStatus::clone() {
return this;
}

GetFriendDemandsStatus::~GetFriendDemandsStatus(){
}


#include "T807.h"



T807::T807(){
    this->_f10395 = new NuggetaDispatcher();
}

const char* T807::_sendMessage0(Message* message) {
    return 0;
}

const char* T807::_request0(Message* message, void* handler) {
return 0;
}

void* T807::_cloneSerializable(Serializable* serializable) {
return 0;
}

//@Override
const char* T807::askForFriendById(const char* id) {
AskForFriendByIdRequest* _p3152 = new AskForFriendByIdRequest();
_p3152->setId(id);
const char* _o3153 = _sendMessage0(_p3152);
return _o3153;
}

//@Override
const char* T807::askForFriendByIdRequest(const char* id, AskForFriendResponseHandler* askForFriendResponseHandler) {
AskForFriendByIdRequest* _n10398 = new AskForFriendByIdRequest();
_n10398->setId(id);
const char* _q3155 = _request0(_n10398, askForFriendResponseHandler);
return _q3155;
}

//@Override
const char* T807::askForFriendByLogin(const char* login) {
AskForFriendByLoginRequest* _p3156 = new AskForFriendByLoginRequest();
_p3156->setLogin(login);
const char* _u3157 = _sendMessage0(_p3156);
return _u3157;
}

//@Override
const char* T807::askForFriendByLoginRequest(const char* login, AskForFriendResponseHandler* askForFriendResponseHandler) {
AskForFriendByLoginRequest* _x10402 = new AskForFriendByLoginRequest();
_x10402->setLogin(login);
const char* _v3159 = _request0(_x10402, askForFriendResponseHandler);
return _v3159;
}

//@Override
const char* T807::signUp() {
SignUpRequest* _h3160 = new SignUpRequest();
const char* _x3161 = _sendMessage0(_h3160);
return _x3161;
}

//@Override
const char* T807::signUpRequest(SignUpResponseHandler* signUpResponseHandler) {
SignUpRequest* _x10406 = new SignUpRequest();
const char* _t10397 = _request0(_x10406, signUpResponseHandler);
return _t10397;
}

//@Override
const char* T807::login() {
LoginRequest* _x3164 = new LoginRequest();
const char* _s3165 = _sendMessage0(_x3164);
return _s3165;
}

//@Override
const char* T807::loginRequest(LoginResponseHandler* loginResponseHandler) {
LoginRequest* _s10410 = new LoginRequest();
const char* _e10399 = _request0(_s10410, loginResponseHandler);
return _e10399;
}

//@Override
const char* T807::savePlayerProfile(NPlayerProfile* profile) {
SavePlayerProfileRequest* _l3168 = new SavePlayerProfileRequest();
_l3168->setProfile((NPlayerProfile*)_cloneSerializable(profile));
const char* _e3169 = _sendMessage0(_l3168);
return _e3169;
}

//@Override
const char* T807::savePlayerProfileRequest(NPlayerProfile* profile, SavePlayerProfileResponseHandler* savePlayerProfileResponseHandler) {
SavePlayerProfileRequest* _y10414 = new SavePlayerProfileRequest();
_y10414->setProfile((NPlayerProfile*)_cloneSerializable(profile));
const char* _h10401 = _request0(_y10414, savePlayerProfileResponseHandler);
return _h10401;
}

//@Override
const char* T807::getPlayerProfile() {
GetPlayerProfileRequest* _c3172 = new GetPlayerProfileRequest();
const char* _x3173 = _sendMessage0(_c3172);
return _x3173;
}

//@Override
const char* T807::getPlayerProfileRequest(GetPlayerProfileResponseHandler* getPlayerProfileResponseHandler) {
GetPlayerProfileRequest* _e10418 = new GetPlayerProfileRequest();
const char* _e10403 = _request0(_e10418, getPlayerProfileResponseHandler);
return _e10403;
}

//@Override
const char* T807::getPlayerProfileByPlayerId(const char* playerId) {
GetPlayerProfileByPlayerIdRequest* _w3176 = new GetPlayerProfileByPlayerIdRequest();
_w3176->setPlayerId(playerId);
const char* _e3177 = _sendMessage0(_w3176);
return _e3177;
}

//@Override
const char* T807::getPlayerProfileByPlayerIdRequest(const char* playerId, GetPlayerProfileResponseHandler* getPlayerProfileResponseHandler) {
GetPlayerProfileByPlayerIdRequest* _b10422 = new GetPlayerProfileByPlayerIdRequest();
_b10422->setPlayerId(playerId);
const char* _i10405 = _request0(_b10422, getPlayerProfileResponseHandler);
return _i10405;
}

//@Override
const char* T807::logout() {
LogoutRequest* _z3180 = new LogoutRequest();
const char* _e3181 = _sendMessage0(_z3180);
return _e3181;
}

//@Override
const char* T807::logoutRequest(LogoutResponseHandler* logoutResponseHandler) {
LogoutRequest* _k10426 = new LogoutRequest();
const char* _q10407 = _request0(_k10426, logoutResponseHandler);
return _q10407;
}

//@Override
const char* T807::getFriends() {
GetFriendsRequest* _a3184 = new GetFriendsRequest();
const char* _v3185 = _sendMessage0(_a3184);
return _v3185;
}

//@Override
const char* T807::getFriendsRequest(GetFriendsResponseHandler* getFriendsResponseHandler) {
GetFriendsRequest* _o10430 = new GetFriendsRequest();
const char* _w10409 = _request0(_o10430, getFriendsResponseHandler);
return _w10409;
}

//@Override
const char* T807::getFriendsByPlayerId(const char* playerId) {
GetFriendsByPlayerIdRequest* _w3188 = new GetFriendsByPlayerIdRequest();
_w3188->setPlayerId(playerId);
const char* _a3189 = _sendMessage0(_w3188);
return _a3189;
}

//@Override
const char* T807::getFriendsByPlayerIdRequest(const char* playerId, GetFriendsResponseHandler* getFriendsResponseHandler) {
GetFriendsByPlayerIdRequest* _h10434 = new GetFriendsByPlayerIdRequest();
_h10434->setPlayerId(playerId);
const char* _u10411 = _request0(_h10434, getFriendsResponseHandler);
return _u10411;
}

//@Override
const char* T807::getThirdPartyFriends(ThirdPartySource* thirdPartySource) {
GetThirdPartyFriendsRequest* _f3192 = new GetThirdPartyFriendsRequest();
_f3192->setThirdPartySource(thirdPartySource);
const char* _x3193 = _sendMessage0(_f3192);
return _x3193;
}

//@Override
const char* T807::getThirdPartyFriendsRequest(ThirdPartySource* thirdPartySource, GetThirdPartyFriendsResponseHandler* getThirdPartyFriendsResponseHandler) {
GetThirdPartyFriendsRequest* _v10438 = new GetThirdPartyFriendsRequest();
_v10438->setThirdPartySource(thirdPartySource);
const char* _k10413 = _request0(_v10438, getThirdPartyFriendsResponseHandler);
return _k10413;
}

//@Override
const char* T807::getFriendDemands() {
GetFriendDemandsRequest* _l3196 = new GetFriendDemandsRequest();
const char* _y3197 = _sendMessage0(_l3196);
return _y3197;
}

//@Override
const char* T807::getFriendDemandsRequest(GetFriendDemandsResponseHandler* getFriendDemandsResponseHandler) {
GetFriendDemandsRequest* _n10442 = new GetFriendDemandsRequest();
const char* _l10415 = _request0(_n10442, getFriendDemandsResponseHandler);
return _l10415;
}

//@Override
const char* T807::acceptFriendDemand(const char* friendDemandId) {
AcceptFriendDemandRequest* _f3200 = new AcceptFriendDemandRequest();
_f3200->setFriendDemandId(friendDemandId);
const char* _r3201 = _sendMessage0(_f3200);
return _r3201;
}

//@Override
const char* T807::acceptFriendDemandRequest(const char* friendDemandId, AcceptFriendDemandResponseHandler* acceptFriendDemandResponseHandler) {
AcceptFriendDemandRequest* _m10446 = new AcceptFriendDemandRequest();
_m10446->setFriendDemandId(friendDemandId);
const char* _q10417 = _request0(_m10446, acceptFriendDemandResponseHandler);
return _q10417;
}

//@Override
const char* T807::refuseFriendDemand(const char* friendDemandId) {
RefuseFriendDemandRequest* _y3204 = new RefuseFriendDemandRequest();
_y3204->setFriendDemandId(friendDemandId);
const char* _q3205 = _sendMessage0(_y3204);
return _q3205;
}

//@Override
const char* T807::refuseFriendDemandRequest(const char* friendDemandId, RefuseFriendDemandResponseHandler* refuseFriendDemandResponseHandler) {
RefuseFriendDemandRequest* _c10450 = new RefuseFriendDemandRequest();
_c10450->setFriendDemandId(friendDemandId);
const char* _l10419 = _request0(_c10450, refuseFriendDemandResponseHandler);
return _l10419;
}

//@Override
const char* T807::submitScore(NScore* score, const char* leaderboardId) {
SubmitScoreRequest* _q3208 = new SubmitScoreRequest();
_q3208->setScore((NScore*)_cloneSerializable(score));
_q3208->setLeaderboardId(leaderboardId);
const char* _p3209 = _sendMessage0(_q3208);
return _p3209;
}

//@Override
const char* T807::submitScoreRequest(NScore* score, const char* leaderboardId, SubmitScoreResponseHandler* submitScoreResponseHandler) {
SubmitScoreRequest* _i10454 = new SubmitScoreRequest();
_i10454->setScore((NScore*)_cloneSerializable(score));
_i10454->setLeaderboardId(leaderboardId);
const char* _o10421 = _request0(_i10454, submitScoreResponseHandler);
return _o10421;
}

//@Override
const char* T807::submitScoreWithPlayerName(const char* name, NScore* score, const char* leaderboardId) {
SubmitScoreWithPlayerNameRequest* _p3212 = new SubmitScoreWithPlayerNameRequest();
_p3212->setName(name);
_p3212->setScore((NScore*)_cloneSerializable(score));
_p3212->setLeaderboardId(leaderboardId);
const char* _f3213 = _sendMessage0(_p3212);
return _f3213;
}

//@Override
const char* T807::submitScoreWithPlayerNameRequest(const char* name, NScore* score, const char* leaderboardId, SubmitScoreResponseHandler* submitScoreResponseHandler) {
SubmitScoreWithPlayerNameRequest* _q10458 = new SubmitScoreWithPlayerNameRequest();
_q10458->setName(name);
_q10458->setScore((NScore*)_cloneSerializable(score));
_q10458->setLeaderboardId(leaderboardId);
const char* _f10423 = _request0(_q10458, submitScoreResponseHandler);
return _f10423;
}

//@Override
const char* T807::getLeaderboard(const char* leaderboardId, LeaderboardPeriod* period, int start, int limit) {
GetLeaderboardRequest* _o3216 = new GetLeaderboardRequest();
_o3216->setLeaderboardId(leaderboardId);
_o3216->setPeriod(period);
_o3216->setStart(start);
_o3216->setLimit(limit);
const char* _u3217 = _sendMessage0(_o3216);
return _u3217;
}

//@Override
const char* T807::getLeaderboardRequest(const char* leaderboardId, LeaderboardPeriod* period, int start, int limit, GetLeaderboardResponseHandler* getLeaderboardResponseHandler) {
GetLeaderboardRequest* _i10462 = new GetLeaderboardRequest();
_i10462->setLeaderboardId(leaderboardId);
_i10462->setPeriod(period);
_i10462->setStart(start);
_i10462->setLimit(limit);
const char* _x10425 = _request0(_i10462, getLeaderboardResponseHandler);
return _x10425;
}

//@Override
const char* T807::buyItem(const char* itemId, int quantity) {
BuyItemRequest* _s3220 = new BuyItemRequest();
_s3220->setItemId(itemId);
_s3220->setQuantity(quantity);
const char* _f3221 = _sendMessage0(_s3220);
return _f3221;
}

//@Override
const char* T807::buyItemRequest(const char* itemId, int quantity, BuyItemResponseHandler* buyItemResponseHandler) {
BuyItemRequest* _q10466 = new BuyItemRequest();
_q10466->setItemId(itemId);
_q10466->setQuantity(quantity);
const char* _m10427 = _request0(_q10466, buyItemResponseHandler);
return _m10427;
}

//@Override
const char* T807::getStore() {
GetStoreRequest* _b3224 = new GetStoreRequest();
const char* _r3225 = _sendMessage0(_b3224);
return _r3225;
}

//@Override
const char* T807::getStoreRequest(GetStoreResponseHandler* getStoreResponseHandler) {
GetStoreRequest* _q10470 = new GetStoreRequest();
const char* _h10429 = _request0(_q10470, getStoreResponseHandler);
return _h10429;
}

//@Override
const char* T807::consumeItem(const char* itemId, int quantity) {
ConsumeItemRequest* _q3228 = new ConsumeItemRequest();
_q3228->setItemId(itemId);
_q3228->setQuantity(quantity);
const char* _f3229 = _sendMessage0(_q3228);
return _f3229;
}

//@Override
const char* T807::consumeItemRequest(const char* itemId, int quantity, ConsumeItemResponseHandler* consumeItemResponseHandler) {
ConsumeItemRequest* _u10474 = new ConsumeItemRequest();
_u10474->setItemId(itemId);
_u10474->setQuantity(quantity);
const char* _o10431 = _request0(_u10474, consumeItemResponseHandler);
return _o10431;
}

//@Override
const char* T807::increasePlayerWallet(int value) {
IncreasePlayerWalletRequest* _m3232 = new IncreasePlayerWalletRequest();
_m3232->setValue(value);
const char* _k3233 = _sendMessage0(_m3232);
return _k3233;
}

//@Override
const char* T807::increasePlayerWalletRequest(int value, IncreasePlayerWalletResponseHandler* increasePlayerWalletResponseHandler) {
IncreasePlayerWalletRequest* _d10478 = new IncreasePlayerWalletRequest();
_d10478->setValue(value);
const char* _j10433 = _request0(_d10478, increasePlayerWalletResponseHandler);
return _j10433;
}

//@Override
const char* T807::getPlayerWallet() {
GetPlayerWalletRequest* _e3236 = new GetPlayerWalletRequest();
const char* _g3237 = _sendMessage0(_e3236);
return _g3237;
}

//@Override
const char* T807::getPlayerWalletRequest(GetPlayerWalletResponseHandler* getPlayerWalletResponseHandler) {
GetPlayerWalletRequest* _z10482 = new GetPlayerWalletRequest();
const char* _w10435 = _request0(_z10482, getPlayerWalletResponseHandler);
return _w10435;
}

//@Override
const char* T807::getAchievementBoard() {
GetAchievementBoardRequest* _b3240 = new GetAchievementBoardRequest();
const char* _e3241 = _sendMessage0(_b3240);
return _e3241;
}

//@Override
const char* T807::getAchievementBoardRequest(GetAchievementBoardResponseHandler* getAchievementBoardResponseHandler) {
GetAchievementBoardRequest* _f10486 = new GetAchievementBoardRequest();
const char* _h10437 = _request0(_f10486, getAchievementBoardResponseHandler);
return _h10437;
}

//@Override
const char* T807::achieve(const char* achivementId) {
AchieveRequest* _g3244 = new AchieveRequest();
_g3244->setAchivementId(achivementId);
const char* _i3245 = _sendMessage0(_g3244);
return _i3245;
}

//@Override
const char* T807::achieveRequest(const char* achivementId, AchieveResponseHandler* achieveResponseHandler) {
AchieveRequest* _f10490 = new AchieveRequest();
_f10490->setAchivementId(achivementId);
const char* _w10439 = _request0(_f10490, achieveResponseHandler);
return _w10439;
}

//@Override
const char* T807::achieveWithProgress(const char* achivementId, int value) {
AchieveWithProgressRequest* _w3248 = new AchieveWithProgressRequest();
_w3248->setAchivementId(achivementId);
_w3248->setValue(value);
const char* _v3249 = _sendMessage0(_w3248);
return _v3249;
}

//@Override
const char* T807::achieveWithProgressRequest(const char* achivementId, int value, AchieveResponseHandler* achieveResponseHandler) {
AchieveWithProgressRequest* _b10494 = new AchieveWithProgressRequest();
_b10494->setAchivementId(achivementId);
_b10494->setValue(value);
const char* _l10441 = _request0(_b10494, achieveResponseHandler);
return _l10441;
}

//@Override
const char* T807::searchImmediateGame() {
SearchImmediateGameRequest* _p3252 = new SearchImmediateGameRequest();
const char* _c3253 = _sendMessage0(_p3252);
return _c3253;
}

//@Override
const char* T807::searchImmediateGameRequest(SearchImmediateGameResponseHandler* searchImmediateGameResponseHandler) {
SearchImmediateGameRequest* _u10498 = new SearchImmediateGameRequest();
const char* _l10443 = _request0(_u10498, searchImmediateGameResponseHandler);
return _l10443;
}

//@Override
const char* T807::searchImmediateGameByConditions(NuggetaQuery* query, NMatchMakingConditions* matchMakingConditions) {
SearchImmediateGameByConditionsRequest* _f3256 = new SearchImmediateGameByConditionsRequest();
_f3256->setQuery((NuggetaQuery*)_cloneSerializable(query));
_f3256->setMatchMakingConditions((NMatchMakingConditions*)_cloneSerializable(matchMakingConditions));
const char* _z3257 = _sendMessage0(_f3256);
return _z3257;
}

//@Override
const char* T807::searchImmediateGameByConditionsRequest(NuggetaQuery* query, NMatchMakingConditions* matchMakingConditions, SearchImmediateGameResponseHandler* searchImmediateGameResponseHandler) {
SearchImmediateGameByConditionsRequest* _g10502 = new SearchImmediateGameByConditionsRequest();
_g10502->setQuery((NuggetaQuery*)_cloneSerializable(query));
_g10502->setMatchMakingConditions((NMatchMakingConditions*)_cloneSerializable(matchMakingConditions));
const char* _o10445 = _request0(_g10502, searchImmediateGameResponseHandler);
return _o10445;
}

//@Override
const char* T807::joinGame(const char* gameId) {
JoinGameRequest* _b3260 = new JoinGameRequest();
_b3260->setGameId(gameId);
const char* _j3261 = _sendMessage0(_b3260);
return _j3261;
}

//@Override
const char* T807::joinGameRequest(const char* gameId, JoinGameResponseHandler* joinGameResponseHandler) {
JoinGameRequest* _m10506 = new JoinGameRequest();
_m10506->setGameId(gameId);
const char* _q10447 = _request0(_m10506, joinGameResponseHandler);
return _q10447;
}

//@Override
const char* T807::unjoinGame(const char* gameId) {
UnjoinGameRequest* _e3264 = new UnjoinGameRequest();
_e3264->setGameId(gameId);
const char* _j3265 = _sendMessage0(_e3264);
return _j3265;
}

//@Override
const char* T807::unjoinGameRequest(const char* gameId, UnjoinGameResponseHandler* unjoinGameResponseHandler) {
UnjoinGameRequest* _r10510 = new UnjoinGameRequest();
_r10510->setGameId(gameId);
const char* _m10449 = _request0(_r10510, unjoinGameResponseHandler);
return _m10449;
}

//@Override
const char* T807::startGame(const char* gameId) {
StartGameRequest* _p3268 = new StartGameRequest();
_p3268->setGameId(gameId);
const char* _b3269 = _sendMessage0(_p3268);
return _b3269;
}

//@Override
const char* T807::startGameRequest(const char* gameId, StartGameResponseHandler* startGameResponseHandler) {
StartGameRequest* _j10514 = new StartGameRequest();
_j10514->setGameId(gameId);
const char* _w10451 = _request0(_j10514, startGameResponseHandler);
return _w10451;
}

//@Override
const char* T807::stopGame(const char* gameId) {
StopGameRequest* _q3272 = new StopGameRequest();
_q3272->setGameId(gameId);
const char* _w3273 = _sendMessage0(_q3272);
return _w3273;
}

//@Override
const char* T807::stopGameRequest(const char* gameId, StopGameResponseHandler* stopGameResponseHandler) {
StopGameRequest* _t10518 = new StopGameRequest();
_t10518->setGameId(gameId);
const char* _r10453 = _request0(_t10518, stopGameResponseHandler);
return _r10453;
}

//@Override
const char* T807::createGame(NGame* game) {
CreateGameRequest* _r3276 = new CreateGameRequest();
_r3276->setGame((NGame*)_cloneSerializable(game));
const char* _b3277 = _sendMessage0(_r3276);
return _b3277;
}

//@Override
const char* T807::createGameRequest(NGame* game, CreateGameResponseHandler* createGameResponseHandler) {
CreateGameRequest* _f10522 = new CreateGameRequest();
_f10522->setGame((NGame*)_cloneSerializable(game));
const char* _w10455 = _request0(_f10522, createGameResponseHandler);
return _w10455;
}

//@Override
const char* T807::getGames(NuggetaQuery* dbQuery) {
GetGamesRequest* _j3280 = new GetGamesRequest();
_j3280->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _e3281 = _sendMessage0(_j3280);
return _e3281;
}

//@Override
const char* T807::getGamesRequest(NuggetaQuery* dbQuery, GetGamesResponseHandler* getGamesResponseHandler) {
GetGamesRequest* _w10526 = new GetGamesRequest();
_w10526->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _l10457 = _request0(_w10526, getGamesResponseHandler);
return _l10457;
}

//@Override
const char* T807::saveAsGhost(NGame* game) {
SaveAsGhostRequest* _y3284 = new SaveAsGhostRequest();
_y3284->setGame((NGame*)_cloneSerializable(game));
const char* _f3285 = _sendMessage0(_y3284);
return _f3285;
}

//@Override
const char* T807::saveAsGhostRequest(NGame* game, SaveAsGhostResponseHandler* saveAsGhostResponseHandler) {
SaveAsGhostRequest* _u10530 = new SaveAsGhostRequest();
_u10530->setGame((NGame*)_cloneSerializable(game));
const char* _b10459 = _request0(_u10530, saveAsGhostResponseHandler);
return _b10459;
}

//@Override
const char* T807::getGhosts(NuggetaQuery* dbQuery) {
GetGhostsRequest* _o3288 = new GetGhostsRequest();
_o3288->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _z3289 = _sendMessage0(_o3288);
return _z3289;
}

//@Override
const char* T807::getGhostsRequest(NuggetaQuery* dbQuery, GetGhostsResponseHandler* getGhostsResponseHandler) {
GetGhostsRequest* _m10534 = new GetGhostsRequest();
_m10534->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _k10461 = _request0(_m10534, getGhostsResponseHandler);
return _k10461;
}

//@Override
const char* T807::loadGhost(const char* gameId) {
LoadGhostRequest* _c3292 = new LoadGhostRequest();
_c3292->setGameId(gameId);
const char* _z3293 = _sendMessage0(_c3292);
return _z3293;
}

//@Override
const char* T807::loadGhostRequest(const char* gameId, LoadGhostResponseHandler* loadGhostResponseHandler) {
LoadGhostRequest* _d10538 = new LoadGhostRequest();
_d10538->setGameId(gameId);
const char* _y10463 = _request0(_d10538, loadGhostResponseHandler);
return _y10463;
}

//@Override
const char* T807::sendGameChat(const char* gameId, const char* message) {
SendGameChatRequest* _f3296 = new SendGameChatRequest();
_f3296->setGameId(gameId);
_f3296->setMessage(message);
const char* _b3297 = _sendMessage0(_f3296);
return _b3297;
}

//@Override
const char* T807::sendGameChatRequest(const char* gameId, const char* message, SendGameChatResponseHandler* sendGameChatResponseHandler) {
SendGameChatRequest* _b10542 = new SendGameChatRequest();
_b10542->setGameId(gameId);
_b10542->setMessage(message);
const char* _j10465 = _request0(_b10542, sendGameChatResponseHandler);
return _j10465;
}

//@Override
const char* T807::sendGameChatToPlayer(const char* gameId, const char* playerId, const char* message) {
SendGameChatToPlayerRequest* _n3300 = new SendGameChatToPlayerRequest();
_n3300->setGameId(gameId);
_n3300->setPlayerId(playerId);
_n3300->setMessage(message);
const char* _w3301 = _sendMessage0(_n3300);
return _w3301;
}

//@Override
const char* T807::sendGameChatToPlayerRequest(const char* gameId, const char* playerId, const char* message, SendGameChatResponseHandler* sendGameChatResponseHandler) {
SendGameChatToPlayerRequest* _k10546 = new SendGameChatToPlayerRequest();
_k10546->setGameId(gameId);
_k10546->setPlayerId(playerId);
_k10546->setMessage(message);
const char* _j10467 = _request0(_k10546, sendGameChatResponseHandler);
return _j10467;
}

//@Override
const char* T807::sendGameChatToPlayerList(const char* gameId, const char* message) {
SendGameChatToPlayerListRequest* _b3304 = new SendGameChatToPlayerListRequest();
_b3304->setGameId(gameId);
_b3304->setMessage(message);
const char* _f3305 = _sendMessage0(_b3304);
return _f3305;
}

//@Override
const char* T807::sendGameChatToPlayerListRequest(const char* gameId, const char* message, SendGameChatResponseHandler* sendGameChatResponseHandler) {
SendGameChatToPlayerListRequest* _q10550 = new SendGameChatToPlayerListRequest();
_q10550->setGameId(gameId);
_q10550->setMessage(message);
const char* _q10469 = _request0(_q10550, sendGameChatResponseHandler);
return _q10469;
}

//@Override
const char* T807::getStorables(NuggetaQuery* dbQuery) {
GetStorablesRequest* _y3308 = new GetStorablesRequest();
_y3308->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _q3309 = _sendMessage0(_y3308);
return _q3309;
}

//@Override
const char* T807::getStorablesRequest(NuggetaQuery* dbQuery, GetStorablesResponseHandler* getStorablesResponseHandler) {
GetStorablesRequest* _n10554 = new GetStorablesRequest();
_n10554->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _c10471 = _request0(_n10554, getStorablesResponseHandler);
return _c10471;
}

//@Override
const char* T807::saveStorable(Storable* storable) {
SaveStorableRequest* _b3312 = new SaveStorableRequest();
_b3312->setStorable((Storable*)_cloneSerializable(storable));
const char* _b3313 = _sendMessage0(_b3312);
return _b3313;
}

//@Override
const char* T807::saveStorableRequest(Storable* storable, SaveStorableResponseHandler* saveStorableResponseHandler) {
SaveStorableRequest* _i10558 = new SaveStorableRequest();
_i10558->setStorable((Storable*)_cloneSerializable(storable));
const char* _v10473 = _request0(_i10558, saveStorableResponseHandler);
return _v10473;
}

//@Override
const char* T807::nextPlayerTurn(const char* gameId) {
NextPlayerTurnRequest* _d3316 = new NextPlayerTurnRequest();
_d3316->setGameId(gameId);
const char* _f3317 = _sendMessage0(_d3316);
return _f3317;
}

//@Override
const char* T807::nextPlayerTurnRequest(const char* gameId, NextPlayerTurnResponseHandler* nextPlayerTurnResponseHandler) {
NextPlayerTurnRequest* _i10562 = new NextPlayerTurnRequest();
_i10562->setGameId(gameId);
const char* _h10475 = _request0(_i10562, nextPlayerTurnResponseHandler);
return _h10475;
}

//@Override
const char* T807::setPlayerName(const char* name) {
SetPlayerNameRequest* _z3320 = new SetPlayerNameRequest();
_z3320->setName(name);
const char* _b3321 = _sendMessage0(_z3320);
return _b3321;
}

//@Override
const char* T807::setPlayerNameRequest(const char* name, SetPlayerNameResponseHandler* setPlayerNameResponseHandler) {
SetPlayerNameRequest* _q10566 = new SetPlayerNameRequest();
_q10566->setName(name);
const char* _p10477 = _request0(_q10566, setPlayerNameResponseHandler);
return _p10477;
}

//@Override
const char* T807::updateStorable(Storable* storable) {
UpdateStorableRequest* _n3324 = new UpdateStorableRequest();
_n3324->setStorable((Storable*)_cloneSerializable(storable));
const char* _c3325 = _sendMessage0(_n3324);
return _c3325;
}

//@Override
const char* T807::updateStorableRequest(Storable* storable, UpdateStorableResponseHandler* updateStorableResponseHandler) {
UpdateStorableRequest* _p10570 = new UpdateStorableRequest();
_p10570->setStorable((Storable*)_cloneSerializable(storable));
const char* _g10479 = _request0(_p10570, updateStorableResponseHandler);
return _g10479;
}

//@Override
const char* T807::removeStorable(Storable* storable) {
RemoveStorableRequest* _n3328 = new RemoveStorableRequest();
_n3328->setStorable((Storable*)_cloneSerializable(storable));
const char* _e3329 = _sendMessage0(_n3328);
return _e3329;
}

//@Override
const char* T807::removeStorableRequest(Storable* storable, RemoveStorableResponseHandler* removeStorableResponseHandler) {
RemoveStorableRequest* _b10574 = new RemoveStorableRequest();
_b10574->setStorable((Storable*)_cloneSerializable(storable));
const char* _f10481 = _request0(_b10574, removeStorableResponseHandler);
return _f10481;
}

//@Override
const char* T807::inviteThirdPartyFriend(const char* thirdPartyId, const char* title, const char* inviteMessage, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource) {
InviteThirdPartyFriendRequest* _s3332 = new InviteThirdPartyFriendRequest();
_s3332->setThirdPartyId(thirdPartyId);
_s3332->setTitle(title);
_s3332->setInviteMessage(inviteMessage);
_s3332->setPictureUrl(pictureUrl);
_s3332->setLink(link);
_s3332->setThirdPartySource(thirdPartySource);
const char* _v3333 = _sendMessage0(_s3332);
return _v3333;
}

//@Override
const char* T807::inviteThirdPartyFriendRequest(const char* thirdPartyId, const char* title, const char* inviteMessage, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource, InviteThirdPartyFriendResponseHandler* inviteThirdPartyFriendResponseHandler) {
InviteThirdPartyFriendRequest* _h10578 = new InviteThirdPartyFriendRequest();
_h10578->setThirdPartyId(thirdPartyId);
_h10578->setTitle(title);
_h10578->setInviteMessage(inviteMessage);
_h10578->setPictureUrl(pictureUrl);
_h10578->setLink(link);
_h10578->setThirdPartySource(thirdPartySource);
const char* _q10483 = _request0(_h10578, inviteThirdPartyFriendResponseHandler);
return _q10483;
}

//@Override
const char* T807::publishThirdPartyMessage(const char* title, const char* message, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource) {
PublishThirdPartyMessageRequest* _e3336 = new PublishThirdPartyMessageRequest();
_e3336->setTitle(title);
_e3336->setMessage(message);
_e3336->setPictureUrl(pictureUrl);
_e3336->setLink(link);
_e3336->setThirdPartySource(thirdPartySource);
const char* _m3337 = _sendMessage0(_e3336);
return _m3337;
}

//@Override
const char* T807::publishThirdPartyMessageRequest(const char* title, const char* message, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource, PublishThirdPartyMessageResponseHandler* publishThirdPartyMessageResponseHandler) {
PublishThirdPartyMessageRequest* _h10582 = new PublishThirdPartyMessageRequest();
_h10582->setTitle(title);
_h10582->setMessage(message);
_h10582->setPictureUrl(pictureUrl);
_h10582->setLink(link);
_h10582->setThirdPartySource(thirdPartySource);
const char* _e10485 = _request0(_h10582, publishThirdPartyMessageResponseHandler);
return _e10485;
}

//@Override
const char* T807::thirdPartyLogin(ThirdPartySource* thirdPartySource) {
ThirdPartyLoginRequest* _o3340 = new ThirdPartyLoginRequest();
_o3340->setThirdPartySource(thirdPartySource);
const char* _l3341 = _sendMessage0(_o3340);
return _l3341;
}

//@Override
const char* T807::thirdPartyLoginRequest(ThirdPartySource* thirdPartySource, ThirdPartyLoginResponseHandler* thirdPartyLoginResponseHandler) {
ThirdPartyLoginRequest* _m10586 = new ThirdPartyLoginRequest();
_m10586->setThirdPartySource(thirdPartySource);
const char* _b10487 = _request0(_m10586, thirdPartyLoginResponseHandler);
return _b10487;
}

//@Override
const char* T807::thirdPartyLoginWithToken(ThirdPartySource* thirdPartySource, const char* accessToken) {
ThirdPartyLoginWithTokenRequest* _j3344 = new ThirdPartyLoginWithTokenRequest();
_j3344->setThirdPartySource(thirdPartySource);
_j3344->setAccessToken(accessToken);
const char* _y3345 = _sendMessage0(_j3344);
return _y3345;
}

//@Override
const char* T807::thirdPartyLoginWithTokenRequest(ThirdPartySource* thirdPartySource, const char* accessToken, ThirdPartyLoginResponseHandler* thirdPartyLoginResponseHandler) {
ThirdPartyLoginWithTokenRequest* _x10590 = new ThirdPartyLoginWithTokenRequest();
_x10590->setThirdPartySource(thirdPartySource);
_x10590->setAccessToken(accessToken);
const char* _c10489 = _request0(_x10590, thirdPartyLoginResponseHandler);
return _c10489;
}

//@Override
const char* T807::saveGame(NGame* game) {
SaveGameRequest* _f3348 = new SaveGameRequest();
_f3348->setGame((NGame*)_cloneSerializable(game));
const char* _u3349 = _sendMessage0(_f3348);
return _u3349;
}

//@Override
const char* T807::saveGameRequest(NGame* game, SaveGameResponseHandler* saveGameResponseHandler) {
SaveGameRequest* _q10594 = new SaveGameRequest();
_q10594->setGame((NGame*)_cloneSerializable(game));
const char* _e10491 = _request0(_q10594, saveGameResponseHandler);
return _e10491;
}

//@Override
const char* T807::loadGame(const char* gameId) {
LoadGameRequest* _i3352 = new LoadGameRequest();
_i3352->setGameId(gameId);
const char* _z3353 = _sendMessage0(_i3352);
return _z3353;
}

//@Override
const char* T807::loadGameRequest(const char* gameId, LoadGameResponseHandler* loadGameResponseHandler) {
LoadGameRequest* _j10598 = new LoadGameRequest();
_j10598->setGameId(gameId);
const char* _f10493 = _request0(_j10598, loadGameResponseHandler);
return _f10493;
}

//@Override
const char* T807::savePlayerStorable(Storable* storable) {
SavePlayerStorableRequest* _s3356 = new SavePlayerStorableRequest();
_s3356->setStorable((Storable*)_cloneSerializable(storable));
const char* _h3357 = _sendMessage0(_s3356);
return _h3357;
}

//@Override
const char* T807::savePlayerStorableRequest(Storable* storable, SavePlayerStorableResponseHandler* savePlayerStorableResponseHandler) {
SavePlayerStorableRequest* _l10602 = new SavePlayerStorableRequest();
_l10602->setStorable((Storable*)_cloneSerializable(storable));
const char* _y10495 = _request0(_l10602, savePlayerStorableResponseHandler);
return _y10495;
}

//@Override
const char* T807::updatePlayerStorable(Storable* storable) {
UpdatePlayerStorableRequest* _x3360 = new UpdatePlayerStorableRequest();
_x3360->setStorable((Storable*)_cloneSerializable(storable));
const char* _u3361 = _sendMessage0(_x3360);
return _u3361;
}

//@Override
const char* T807::updatePlayerStorableRequest(Storable* storable, UpdatePlayerStorableResponseHandler* updatePlayerStorableResponseHandler) {
UpdatePlayerStorableRequest* _u10606 = new UpdatePlayerStorableRequest();
_u10606->setStorable((Storable*)_cloneSerializable(storable));
const char* _k10497 = _request0(_u10606, updatePlayerStorableResponseHandler);
return _k10497;
}

//@Override
const char* T807::removePlayerStorable(Storable* storable) {
RemovePlayerStorableRequest* _o3364 = new RemovePlayerStorableRequest();
_o3364->setStorable((Storable*)_cloneSerializable(storable));
const char* _d3365 = _sendMessage0(_o3364);
return _d3365;
}

//@Override
const char* T807::removePlayerStorableRequest(Storable* storable, RemovePlayerStorableResponseHandler* removePlayerStorableResponseHandler) {
RemovePlayerStorableRequest* _n10610 = new RemovePlayerStorableRequest();
_n10610->setStorable((Storable*)_cloneSerializable(storable));
const char* _h10499 = _request0(_n10610, removePlayerStorableResponseHandler);
return _h10499;
}

//@Override
const char* T807::getPlayerStorables(NuggetaQuery* dbQuery) {
GetPlayerStorablesRequest* _q3368 = new GetPlayerStorablesRequest();
_q3368->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _w3369 = _sendMessage0(_q3368);
return _w3369;
}

//@Override
const char* T807::getPlayerStorablesRequest(NuggetaQuery* dbQuery, GetPlayerStorablesResponseHandler* getPlayerStorablesResponseHandler) {
GetPlayerStorablesRequest* _m10614 = new GetPlayerStorablesRequest();
_m10614->setDbQuery((NuggetaQuery*)_cloneSerializable(dbQuery));
const char* _p10501 = _request0(_m10614, getPlayerStorablesResponseHandler);
return _p10501;
}

//@Override
const char* T807::pauseSessionMonitoring() {
PauseSessionMonitoringRequest* _e3372 = new PauseSessionMonitoringRequest();
const char* _r3373 = _sendMessage0(_e3372);
return _r3373;
}

//@Override
const char* T807::pauseSessionMonitoringRequest(PauseSessionMonitoringResponseHandler* pauseSessionMonitoringResponseHandler) {
PauseSessionMonitoringRequest* _f10618 = new PauseSessionMonitoringRequest();
const char* _i10503 = _request0(_f10618, pauseSessionMonitoringResponseHandler);
return _i10503;
}

//@Override
const char* T807::resumeSessionMonitoring() {
ResumeSessionMonitoringRequest* _s3376 = new ResumeSessionMonitoringRequest();
const char* _n3377 = _sendMessage0(_s3376);
return _n3377;
}

//@Override
const char* T807::resumeSessionMonitoringRequest(ResumeSessionMonitoringResponseHandler* resumeSessionMonitoringResponseHandler) {
ResumeSessionMonitoringRequest* _z10622 = new ResumeSessionMonitoringRequest();
const char* _p10505 = _request0(_z10622, resumeSessionMonitoringResponseHandler);
return _p10505;
}

//@Override
const char* T807::publishFriendThirdPartyMessage(const char* title, const char* message, const char* pictureUrl, const char* link, const char* thirdPartyId, ThirdPartySource* thirdPartySource) {
PublishFriendThirdPartyMessageRequest* _s3380 = new PublishFriendThirdPartyMessageRequest();
_s3380->setTitle(title);
_s3380->setMessage(message);
_s3380->setPictureUrl(pictureUrl);
_s3380->setLink(link);
_s3380->setThirdPartyId(thirdPartyId);
_s3380->setThirdPartySource(thirdPartySource);
const char* _s3381 = _sendMessage0(_s3380);
return _s3381;
}

//@Override
const char* T807::publishFriendThirdPartyMessageRequest(const char* title, const char* message, const char* pictureUrl, const char* link, const char* thirdPartyId, ThirdPartySource* thirdPartySource, PublishFriendThirdPartyMessageResponseHandler* publishFriendThirdPartyMessageResponseHandler) {
PublishFriendThirdPartyMessageRequest* _k10626 = new PublishFriendThirdPartyMessageRequest();
_k10626->setTitle(title);
_k10626->setMessage(message);
_k10626->setPictureUrl(pictureUrl);
_k10626->setLink(link);
_k10626->setThirdPartyId(thirdPartyId);
_k10626->setThirdPartySource(thirdPartySource);
const char* _c10507 = _request0(_k10626, publishFriendThirdPartyMessageResponseHandler);
return _c10507;
}

//@Override
const char* T807::invitePlayer(const char* playerId, Message* invitationContent) {
InvitePlayerRequest* _e3384 = new InvitePlayerRequest();
_e3384->setPlayerId(playerId);
_e3384->setInvitationContent((Message*)_cloneSerializable(invitationContent));
const char* _q3385 = _sendMessage0(_e3384);
return _q3385;
}

//@Override
const char* T807::invitePlayerRequest(const char* playerId, Message* invitationContent, InvitePlayerResponseHandler* invitePlayerResponseHandler) {
InvitePlayerRequest* _d10630 = new InvitePlayerRequest();
_d10630->setPlayerId(playerId);
_d10630->setInvitationContent((Message*)_cloneSerializable(invitationContent));
const char* _n10509 = _request0(_d10630, invitePlayerResponseHandler);
return _n10509;
}

//@Override
const char* T807::getInvitations(NuggetaQuery* nuggetaQuery) {
GetInvitationsRequest* _i3388 = new GetInvitationsRequest();
_i3388->setNuggetaQuery((NuggetaQuery*)_cloneSerializable(nuggetaQuery));
const char* _f3389 = _sendMessage0(_i3388);
return _f3389;
}

//@Override
const char* T807::getInvitationsRequest(NuggetaQuery* nuggetaQuery, GetInvitationsResponseHandler* getInvitationsResponseHandler) {
GetInvitationsRequest* _w10634 = new GetInvitationsRequest();
_w10634->setNuggetaQuery((NuggetaQuery*)_cloneSerializable(nuggetaQuery));
const char* _b10511 = _request0(_w10634, getInvitationsResponseHandler);
return _b10511;
}

//@Override
const char* T807::acceptInvitation(const char* invitationId) {
AcceptInvitationRequest* _p3392 = new AcceptInvitationRequest();
_p3392->setInvitationId(invitationId);
const char* _n3393 = _sendMessage0(_p3392);
return _n3393;
}

//@Override
const char* T807::acceptInvitationRequest(const char* invitationId, AcceptInvitationResponseHandler* acceptInvitationResponseHandler) {
AcceptInvitationRequest* _f10638 = new AcceptInvitationRequest();
_f10638->setInvitationId(invitationId);
const char* _v10513 = _request0(_f10638, acceptInvitationResponseHandler);
return _v10513;
}

//@Override
const char* T807::refuseInvitation(const char* invitationId) {
RefuseInvitationRequest* _u3396 = new RefuseInvitationRequest();
_u3396->setInvitationId(invitationId);
const char* _i3397 = _sendMessage0(_u3396);
return _i3397;
}

//@Override
const char* T807::refuseInvitationRequest(const char* invitationId, RefuseInvitationResponseHandler* refuseInvitationResponseHandler) {
RefuseInvitationRequest* _q10642 = new RefuseInvitationRequest();
_q10642->setInvitationId(invitationId);
const char* _n10643 = _request0(_q10642, refuseInvitationResponseHandler);
return _n10643;
}

const char* T807::_m16329(Message* message, void* handler) {
return 0;
}

void T807::_m16330(Message* _i10646, void* handler) {
if (dynamic_cast<GameStateChange*>(_i10646) != 0) {
GameStateChangeHandler* _g10648 = (GameStateChangeHandler*)handler;
(*_g10648)((GameStateChange*)_i10646);
return;
}
if (dynamic_cast<PlayerEnterGame*>(_i10646) != 0) {
PlayerEnterGameHandler* _w10649 = (PlayerEnterGameHandler*)handler;
(*_w10649)((PlayerEnterGame*)_i10646);
return;
}
if (dynamic_cast<FriendshipNotification*>(_i10646) != 0) {
FriendshipNotificationHandler* _b10650 = (FriendshipNotificationHandler*)handler;
(*_b10650)((FriendshipNotification*)_i10646);
return;
}
if (dynamic_cast<PlayerUnjoinGame*>(_i10646) != 0) {
PlayerUnjoinGameHandler* _h10651 = (PlayerUnjoinGameHandler*)handler;
(*_h10651)((PlayerUnjoinGame*)_i10646);
return;
}
if (dynamic_cast<ConnectionLost*>(_i10646) != 0) {
ConnectionLostHandler* _n10652 = (ConnectionLostHandler*)handler;
(*_n10652)((ConnectionLost*)_i10646);
return;
}
if (dynamic_cast<ConnectionInterrupted*>(_i10646) != 0) {
ConnectionInterruptedHandler* _m10653 = (ConnectionInterruptedHandler*)handler;
(*_m10653)((ConnectionInterrupted*)_i10646);
return;
}
if (dynamic_cast<ConnectionResumed*>(_i10646) != 0) {
ConnectionResumedHandler* _x10654 = (ConnectionResumedHandler*)handler;
(*_x10654)((ConnectionResumed*)_i10646);
return;
}
if (dynamic_cast<ConnectionStop*>(_i10646) != 0) {
ConnectionStopHandler* _i10655 = (ConnectionStopHandler*)handler;
(*_i10655)((ConnectionStop*)_i10646);
return;
}
if (dynamic_cast<FriendConnectedNotification*>(_i10646) != 0) {
FriendConnectedNotificationHandler* _r10656 = (FriendConnectedNotificationHandler*)handler;
(*_r10656)((FriendConnectedNotification*)_i10646);
return;
}
if (dynamic_cast<FriendDisconnectedNotification*>(_i10646) != 0) {
FriendDisconnectedNotificationHandler* _v10657 = (FriendDisconnectedNotificationHandler*)handler;
(*_v10657)((FriendDisconnectedNotification*)_i10646);
return;
}
if (dynamic_cast<NuggetaException*>(_i10646) != 0) {
NuggetaExceptionHandler* _g10658 = (NuggetaExceptionHandler*)handler;
(*_g10658)((NuggetaException*)_i10646);
return;
}
if (dynamic_cast<NRawMessage*>(_i10646) != 0) {
RawMessageHandler* _k10659 = (RawMessageHandler*)handler;
(*_k10659)((NRawMessage*)_i10646);
return;
}
if (dynamic_cast<SessionExpired*>(_i10646) != 0) {
SessionExpiredHandler* _p10660 = (SessionExpiredHandler*)handler;
(*_p10660)((SessionExpired*)_i10646);
return;
}
if (dynamic_cast<GameMessageError*>(_i10646) != 0) {
GameMessageErrorHandler* _r10661 = (GameMessageErrorHandler*)handler;
(*_r10661)((GameMessageError*)_i10646);
return;
}
if (dynamic_cast<FriendDemandNotification*>(_i10646) != 0) {
FriendDemandNotificationHandler* _k10662 = (FriendDemandNotificationHandler*)handler;
(*_k10662)((FriendDemandNotification*)_i10646);
return;
}
if (dynamic_cast<MyTurnNotification*>(_i10646) != 0) {
MyTurnNotificationHandler* _c10663 = (MyTurnNotificationHandler*)handler;
(*_c10663)((MyTurnNotification*)_i10646);
return;
}
if (dynamic_cast<PlayerTurnNotification*>(_i10646) != 0) {
PlayerTurnNotificationHandler* _v10664 = (PlayerTurnNotificationHandler*)handler;
(*_v10664)((PlayerTurnNotification*)_i10646);
return;
}
if (dynamic_cast<StartResponse*>(_i10646) != 0) {
StartResponseHandler* _t10665 = (StartResponseHandler*)handler;
(*_t10665)((StartResponse*)_i10646);
return;
}
if (dynamic_cast<AskForFriendResponse*>(_i10646) != 0) {
AskForFriendResponseHandler* _t10666 = (AskForFriendResponseHandler*)handler;
(*_t10666)((AskForFriendResponse*)_i10646);
return;
}
if (dynamic_cast<SignUpResponse*>(_i10646) != 0) {
SignUpResponseHandler* _v10667 = (SignUpResponseHandler*)handler;
(*_v10667)((SignUpResponse*)_i10646);
return;
}
if (dynamic_cast<LoginResponse*>(_i10646) != 0) {
LoginResponseHandler* _w10668 = (LoginResponseHandler*)handler;
(*_w10668)((LoginResponse*)_i10646);
return;
}
if (dynamic_cast<SavePlayerProfileResponse*>(_i10646) != 0) {
SavePlayerProfileResponseHandler* _p10669 = (SavePlayerProfileResponseHandler*)handler;
(*_p10669)((SavePlayerProfileResponse*)_i10646);
return;
}
if (dynamic_cast<GetPlayerProfileResponse*>(_i10646) != 0) {
GetPlayerProfileResponseHandler* _r10670 = (GetPlayerProfileResponseHandler*)handler;
(*_r10670)((GetPlayerProfileResponse*)_i10646);
return;
}
if (dynamic_cast<LogoutResponse*>(_i10646) != 0) {
LogoutResponseHandler* _q10671 = (LogoutResponseHandler*)handler;
(*_q10671)((LogoutResponse*)_i10646);
return;
}
if (dynamic_cast<GetFriendsResponse*>(_i10646) != 0) {
GetFriendsResponseHandler* _d10672 = (GetFriendsResponseHandler*)handler;
(*_d10672)((GetFriendsResponse*)_i10646);
return;
}
if (dynamic_cast<GetThirdPartyFriendsResponse*>(_i10646) != 0) {
GetThirdPartyFriendsResponseHandler* _e10673 = (GetThirdPartyFriendsResponseHandler*)handler;
(*_e10673)((GetThirdPartyFriendsResponse*)_i10646);
return;
}
if (dynamic_cast<GetFriendDemandsResponse*>(_i10646) != 0) {
GetFriendDemandsResponseHandler* _d10674 = (GetFriendDemandsResponseHandler*)handler;
(*_d10674)((GetFriendDemandsResponse*)_i10646);
return;
}
if (dynamic_cast<AcceptFriendDemandResponse*>(_i10646) != 0) {
AcceptFriendDemandResponseHandler* _c10675 = (AcceptFriendDemandResponseHandler*)handler;
(*_c10675)((AcceptFriendDemandResponse*)_i10646);
return;
}
if (dynamic_cast<RefuseFriendDemandResponse*>(_i10646) != 0) {
RefuseFriendDemandResponseHandler* _l10676 = (RefuseFriendDemandResponseHandler*)handler;
(*_l10676)((RefuseFriendDemandResponse*)_i10646);
return;
}
if (dynamic_cast<SubmitScoreResponse*>(_i10646) != 0) {
SubmitScoreResponseHandler* _j10677 = (SubmitScoreResponseHandler*)handler;
(*_j10677)((SubmitScoreResponse*)_i10646);
return;
}
if (dynamic_cast<GetLeaderboardResponse*>(_i10646) != 0) {
GetLeaderboardResponseHandler* _e10678 = (GetLeaderboardResponseHandler*)handler;
(*_e10678)((GetLeaderboardResponse*)_i10646);
return;
}
if (dynamic_cast<BuyItemResponse*>(_i10646) != 0) {
BuyItemResponseHandler* _f10679 = (BuyItemResponseHandler*)handler;
(*_f10679)((BuyItemResponse*)_i10646);
return;
}
if (dynamic_cast<GetStoreResponse*>(_i10646) != 0) {
GetStoreResponseHandler* _n10680 = (GetStoreResponseHandler*)handler;
(*_n10680)((GetStoreResponse*)_i10646);
return;
}
if (dynamic_cast<ConsumeItemResponse*>(_i10646) != 0) {
ConsumeItemResponseHandler* _g10681 = (ConsumeItemResponseHandler*)handler;
(*_g10681)((ConsumeItemResponse*)_i10646);
return;
}
if (dynamic_cast<IncreasePlayerWalletResponse*>(_i10646) != 0) {
IncreasePlayerWalletResponseHandler* _m10682 = (IncreasePlayerWalletResponseHandler*)handler;
(*_m10682)((IncreasePlayerWalletResponse*)_i10646);
return;
}
if (dynamic_cast<GetPlayerWalletResponse*>(_i10646) != 0) {
GetPlayerWalletResponseHandler* _b10683 = (GetPlayerWalletResponseHandler*)handler;
(*_b10683)((GetPlayerWalletResponse*)_i10646);
return;
}
if (dynamic_cast<GetAchievementBoardResponse*>(_i10646) != 0) {
GetAchievementBoardResponseHandler* _c10684 = (GetAchievementBoardResponseHandler*)handler;
(*_c10684)((GetAchievementBoardResponse*)_i10646);
return;
}
if (dynamic_cast<AchieveResponse*>(_i10646) != 0) {
AchieveResponseHandler* _z10685 = (AchieveResponseHandler*)handler;
(*_z10685)((AchieveResponse*)_i10646);
return;
}
if (dynamic_cast<SearchImmediateGameResponse*>(_i10646) != 0) {
SearchImmediateGameResponseHandler* _m10686 = (SearchImmediateGameResponseHandler*)handler;
(*_m10686)((SearchImmediateGameResponse*)_i10646);
return;
}
if (dynamic_cast<JoinGameResponse*>(_i10646) != 0) {
JoinGameResponseHandler* _n10687 = (JoinGameResponseHandler*)handler;
(*_n10687)((JoinGameResponse*)_i10646);
return;
}
if (dynamic_cast<UnjoinGameResponse*>(_i10646) != 0) {
UnjoinGameResponseHandler* _e10688 = (UnjoinGameResponseHandler*)handler;
(*_e10688)((UnjoinGameResponse*)_i10646);
return;
}
if (dynamic_cast<StartGameResponse*>(_i10646) != 0) {
StartGameResponseHandler* _l10689 = (StartGameResponseHandler*)handler;
(*_l10689)((StartGameResponse*)_i10646);
return;
}
if (dynamic_cast<StopGameResponse*>(_i10646) != 0) {
StopGameResponseHandler* _c10690 = (StopGameResponseHandler*)handler;
(*_c10690)((StopGameResponse*)_i10646);
return;
}
if (dynamic_cast<CreateGameResponse*>(_i10646) != 0) {
CreateGameResponseHandler* _b10691 = (CreateGameResponseHandler*)handler;
(*_b10691)((CreateGameResponse*)_i10646);
return;
}
if (dynamic_cast<GetGamesResponse*>(_i10646) != 0) {
GetGamesResponseHandler* _o10692 = (GetGamesResponseHandler*)handler;
(*_o10692)((GetGamesResponse*)_i10646);
return;
}
if (dynamic_cast<SaveAsGhostResponse*>(_i10646) != 0) {
SaveAsGhostResponseHandler* _g10693 = (SaveAsGhostResponseHandler*)handler;
(*_g10693)((SaveAsGhostResponse*)_i10646);
return;
}
if (dynamic_cast<GetGhostsResponse*>(_i10646) != 0) {
GetGhostsResponseHandler* _m10694 = (GetGhostsResponseHandler*)handler;
(*_m10694)((GetGhostsResponse*)_i10646);
return;
}
if (dynamic_cast<LoadGhostResponse*>(_i10646) != 0) {
LoadGhostResponseHandler* _j10695 = (LoadGhostResponseHandler*)handler;
(*_j10695)((LoadGhostResponse*)_i10646);
return;
}
if (dynamic_cast<SendGameChatResponse*>(_i10646) != 0) {
SendGameChatResponseHandler* _g10696 = (SendGameChatResponseHandler*)handler;
(*_g10696)((SendGameChatResponse*)_i10646);
return;
}
if (dynamic_cast<GetStorablesResponse*>(_i10646) != 0) {
GetStorablesResponseHandler* _e10697 = (GetStorablesResponseHandler*)handler;
(*_e10697)((GetStorablesResponse*)_i10646);
return;
}
if (dynamic_cast<SaveStorableResponse*>(_i10646) != 0) {
SaveStorableResponseHandler* _d10698 = (SaveStorableResponseHandler*)handler;
(*_d10698)((SaveStorableResponse*)_i10646);
return;
}
if (dynamic_cast<NextPlayerTurnResponse*>(_i10646) != 0) {
NextPlayerTurnResponseHandler* _x10699 = (NextPlayerTurnResponseHandler*)handler;
(*_x10699)((NextPlayerTurnResponse*)_i10646);
return;
}
if (dynamic_cast<SetPlayerNameResponse*>(_i10646) != 0) {
SetPlayerNameResponseHandler* _i10700 = (SetPlayerNameResponseHandler*)handler;
(*_i10700)((SetPlayerNameResponse*)_i10646);
return;
}
if (dynamic_cast<UpdateStorableResponse*>(_i10646) != 0) {
UpdateStorableResponseHandler* _j10701 = (UpdateStorableResponseHandler*)handler;
(*_j10701)((UpdateStorableResponse*)_i10646);
return;
}
if (dynamic_cast<RemoveStorableResponse*>(_i10646) != 0) {
RemoveStorableResponseHandler* _g10702 = (RemoveStorableResponseHandler*)handler;
(*_g10702)((RemoveStorableResponse*)_i10646);
return;
}
if (dynamic_cast<InviteThirdPartyFriendResponse*>(_i10646) != 0) {
InviteThirdPartyFriendResponseHandler* _b10703 = (InviteThirdPartyFriendResponseHandler*)handler;
(*_b10703)((InviteThirdPartyFriendResponse*)_i10646);
return;
}
if (dynamic_cast<PublishThirdPartyMessageResponse*>(_i10646) != 0) {
PublishThirdPartyMessageResponseHandler* _u10704 = (PublishThirdPartyMessageResponseHandler*)handler;
(*_u10704)((PublishThirdPartyMessageResponse*)_i10646);
return;
}
if (dynamic_cast<ThirdPartyLoginResponse*>(_i10646) != 0) {
ThirdPartyLoginResponseHandler* _k10705 = (ThirdPartyLoginResponseHandler*)handler;
(*_k10705)((ThirdPartyLoginResponse*)_i10646);
return;
}
if (dynamic_cast<SaveGameResponse*>(_i10646) != 0) {
SaveGameResponseHandler* _o10706 = (SaveGameResponseHandler*)handler;
(*_o10706)((SaveGameResponse*)_i10646);
return;
}
if (dynamic_cast<LoadGameResponse*>(_i10646) != 0) {
LoadGameResponseHandler* _y10707 = (LoadGameResponseHandler*)handler;
(*_y10707)((LoadGameResponse*)_i10646);
return;
}
if (dynamic_cast<SavePlayerStorableResponse*>(_i10646) != 0) {
SavePlayerStorableResponseHandler* _y10708 = (SavePlayerStorableResponseHandler*)handler;
(*_y10708)((SavePlayerStorableResponse*)_i10646);
return;
}
if (dynamic_cast<UpdatePlayerStorableResponse*>(_i10646) != 0) {
UpdatePlayerStorableResponseHandler* _i10709 = (UpdatePlayerStorableResponseHandler*)handler;
(*_i10709)((UpdatePlayerStorableResponse*)_i10646);
return;
}
if (dynamic_cast<RemovePlayerStorableResponse*>(_i10646) != 0) {
RemovePlayerStorableResponseHandler* _b10710 = (RemovePlayerStorableResponseHandler*)handler;
(*_b10710)((RemovePlayerStorableResponse*)_i10646);
return;
}
if (dynamic_cast<GetPlayerStorablesResponse*>(_i10646) != 0) {
GetPlayerStorablesResponseHandler* _d10711 = (GetPlayerStorablesResponseHandler*)handler;
(*_d10711)((GetPlayerStorablesResponse*)_i10646);
return;
}
if (dynamic_cast<PauseSessionMonitoringResponse*>(_i10646) != 0) {
PauseSessionMonitoringResponseHandler* _w10712 = (PauseSessionMonitoringResponseHandler*)handler;
(*_w10712)((PauseSessionMonitoringResponse*)_i10646);
return;
}
if (dynamic_cast<ResumeSessionMonitoringResponse*>(_i10646) != 0) {
ResumeSessionMonitoringResponseHandler* _c10713 = (ResumeSessionMonitoringResponseHandler*)handler;
(*_c10713)((ResumeSessionMonitoringResponse*)_i10646);
return;
}
if (dynamic_cast<PublishFriendThirdPartyMessageResponse*>(_i10646) != 0) {
PublishFriendThirdPartyMessageResponseHandler* _s10714 = (PublishFriendThirdPartyMessageResponseHandler*)handler;
(*_s10714)((PublishFriendThirdPartyMessageResponse*)_i10646);
return;
}
if (dynamic_cast<InvitePlayerResponse*>(_i10646) != 0) {
InvitePlayerResponseHandler* _l10715 = (InvitePlayerResponseHandler*)handler;
(*_l10715)((InvitePlayerResponse*)_i10646);
return;
}
if (dynamic_cast<GetInvitationsResponse*>(_i10646) != 0) {
GetInvitationsResponseHandler* _r10716 = (GetInvitationsResponseHandler*)handler;
(*_r10716)((GetInvitationsResponse*)_i10646);
return;
}
if (dynamic_cast<AcceptInvitationResponse*>(_i10646) != 0) {
AcceptInvitationResponseHandler* _f10717 = (AcceptInvitationResponseHandler*)handler;
(*_f10717)((AcceptInvitationResponse*)_i10646);
return;
}
if (dynamic_cast<RefuseInvitationResponse*>(_i10646) != 0) {
RefuseInvitationResponseHandler* _l10718 = (RefuseInvitationResponseHandler*)handler;
(*_l10718)((RefuseInvitationResponse*)_i10646);
return;
}
}

//@Override
void T807::addGameStateChangeHandler(GameStateChangeHandler* handler) {
_f10395->addGameStateChangeHandler(handler);
}

//@Override
void T807::removeGameStateChangeHandler(GameStateChangeHandler* handler) {
_f10395->removeGameStateChangeHandler(handler);
}

//@Override
void T807::addPlayerEnterGameHandler(PlayerEnterGameHandler* handler) {
_f10395->addPlayerEnterGameHandler(handler);
}

//@Override
void T807::removePlayerEnterGameHandler(PlayerEnterGameHandler* handler) {
_f10395->removePlayerEnterGameHandler(handler);
}

//@Override
void T807::addFriendshipNotificationHandler(FriendshipNotificationHandler* handler) {
_f10395->addFriendshipNotificationHandler(handler);
}

//@Override
void T807::removeFriendshipNotificationHandler(FriendshipNotificationHandler* handler) {
_f10395->removeFriendshipNotificationHandler(handler);
}

//@Override
void T807::addPlayerUnjoinGameHandler(PlayerUnjoinGameHandler* handler) {
_f10395->addPlayerUnjoinGameHandler(handler);
}

//@Override
void T807::removePlayerUnjoinGameHandler(PlayerUnjoinGameHandler* handler) {
_f10395->removePlayerUnjoinGameHandler(handler);
}

//@Override
void T807::addConnectionLostHandler(ConnectionLostHandler* handler) {
_f10395->addConnectionLostHandler(handler);
}

//@Override
void T807::removeConnectionLostHandler(ConnectionLostHandler* handler) {
_f10395->removeConnectionLostHandler(handler);
}

//@Override
void T807::addConnectionInterruptedHandler(ConnectionInterruptedHandler* handler) {
_f10395->addConnectionInterruptedHandler(handler);
}

//@Override
void T807::removeConnectionInterruptedHandler(ConnectionInterruptedHandler* handler) {
_f10395->removeConnectionInterruptedHandler(handler);
}

//@Override
void T807::addConnectionResumedHandler(ConnectionResumedHandler* handler) {
_f10395->addConnectionResumedHandler(handler);
}

//@Override
void T807::removeConnectionResumedHandler(ConnectionResumedHandler* handler) {
_f10395->removeConnectionResumedHandler(handler);
}

//@Override
void T807::addConnectionStopHandler(ConnectionStopHandler* handler) {
_f10395->addConnectionStopHandler(handler);
}

//@Override
void T807::removeConnectionStopHandler(ConnectionStopHandler* handler) {
_f10395->removeConnectionStopHandler(handler);
}

//@Override
void T807::addFriendConnectedNotificationHandler(FriendConnectedNotificationHandler* handler) {
_f10395->addFriendConnectedNotificationHandler(handler);
}

//@Override
void T807::removeFriendConnectedNotificationHandler(FriendConnectedNotificationHandler* handler) {
_f10395->removeFriendConnectedNotificationHandler(handler);
}

//@Override
void T807::addFriendDisconnectedNotificationHandler(FriendDisconnectedNotificationHandler* handler) {
_f10395->addFriendDisconnectedNotificationHandler(handler);
}

//@Override
void T807::removeFriendDisconnectedNotificationHandler(FriendDisconnectedNotificationHandler* handler) {
_f10395->removeFriendDisconnectedNotificationHandler(handler);
}

//@Override
void T807::addNuggetaExceptionHandler(NuggetaExceptionHandler* handler) {
_f10395->addNuggetaExceptionHandler(handler);
}

//@Override
void T807::removeNuggetaExceptionHandler(NuggetaExceptionHandler* handler) {
_f10395->removeNuggetaExceptionHandler(handler);
}

//@Override
void T807::addRawMessageHandler(RawMessageHandler* handler) {
_f10395->addRawMessageHandler(handler);
}

//@Override
void T807::removeRawMessageHandler(RawMessageHandler* handler) {
_f10395->removeRawMessageHandler(handler);
}

//@Override
void T807::addSessionExpiredHandler(SessionExpiredHandler* handler) {
_f10395->addSessionExpiredHandler(handler);
}

//@Override
void T807::removeSessionExpiredHandler(SessionExpiredHandler* handler) {
_f10395->removeSessionExpiredHandler(handler);
}

//@Override
void T807::addGameMessageErrorHandler(GameMessageErrorHandler* handler) {
_f10395->addGameMessageErrorHandler(handler);
}

//@Override
void T807::removeGameMessageErrorHandler(GameMessageErrorHandler* handler) {
_f10395->removeGameMessageErrorHandler(handler);
}

//@Override
void T807::addFriendDemandNotificationHandler(FriendDemandNotificationHandler* handler) {
_f10395->addFriendDemandNotificationHandler(handler);
}

//@Override
void T807::removeFriendDemandNotificationHandler(FriendDemandNotificationHandler* handler) {
_f10395->removeFriendDemandNotificationHandler(handler);
}

//@Override
void T807::addMyTurnNotificationHandler(MyTurnNotificationHandler* handler) {
_f10395->addMyTurnNotificationHandler(handler);
}

//@Override
void T807::removeMyTurnNotificationHandler(MyTurnNotificationHandler* handler) {
_f10395->removeMyTurnNotificationHandler(handler);
}

//@Override
void T807::addPlayerTurnNotificationHandler(PlayerTurnNotificationHandler* handler) {
_f10395->addPlayerTurnNotificationHandler(handler);
}

//@Override
void T807::removePlayerTurnNotificationHandler(PlayerTurnNotificationHandler* handler) {
_f10395->removePlayerTurnNotificationHandler(handler);
}

//@Override
void T807::addStartResponseHandler(StartResponseHandler* handler) {
_f10395->addStartResponseHandler(handler);
}

//@Override
void T807::removeStartResponseHandler(StartResponseHandler* handler) {
_f10395->removeStartResponseHandler(handler);
}

//@Override
void T807::addAskForFriendResponseHandler(AskForFriendResponseHandler* handler) {
_f10395->addAskForFriendResponseHandler(handler);
}

//@Override
void T807::removeAskForFriendResponseHandler(AskForFriendResponseHandler* handler) {
_f10395->removeAskForFriendResponseHandler(handler);
}

//@Override
void T807::addSignUpResponseHandler(SignUpResponseHandler* handler) {
_f10395->addSignUpResponseHandler(handler);
}

//@Override
void T807::removeSignUpResponseHandler(SignUpResponseHandler* handler) {
_f10395->removeSignUpResponseHandler(handler);
}

//@Override
void T807::addLoginResponseHandler(LoginResponseHandler* handler) {
_f10395->addLoginResponseHandler(handler);
}

//@Override
void T807::removeLoginResponseHandler(LoginResponseHandler* handler) {
_f10395->removeLoginResponseHandler(handler);
}

//@Override
void T807::addSavePlayerProfileResponseHandler(SavePlayerProfileResponseHandler* handler) {
_f10395->addSavePlayerProfileResponseHandler(handler);
}

//@Override
void T807::removeSavePlayerProfileResponseHandler(SavePlayerProfileResponseHandler* handler) {
_f10395->removeSavePlayerProfileResponseHandler(handler);
}

//@Override
void T807::addGetPlayerProfileResponseHandler(GetPlayerProfileResponseHandler* handler) {
_f10395->addGetPlayerProfileResponseHandler(handler);
}

//@Override
void T807::removeGetPlayerProfileResponseHandler(GetPlayerProfileResponseHandler* handler) {
_f10395->removeGetPlayerProfileResponseHandler(handler);
}

//@Override
void T807::addLogoutResponseHandler(LogoutResponseHandler* handler) {
_f10395->addLogoutResponseHandler(handler);
}

//@Override
void T807::removeLogoutResponseHandler(LogoutResponseHandler* handler) {
_f10395->removeLogoutResponseHandler(handler);
}

//@Override
void T807::addGetFriendsResponseHandler(GetFriendsResponseHandler* handler) {
_f10395->addGetFriendsResponseHandler(handler);
}

//@Override
void T807::removeGetFriendsResponseHandler(GetFriendsResponseHandler* handler) {
_f10395->removeGetFriendsResponseHandler(handler);
}

//@Override
void T807::addGetThirdPartyFriendsResponseHandler(GetThirdPartyFriendsResponseHandler* handler) {
_f10395->addGetThirdPartyFriendsResponseHandler(handler);
}

//@Override
void T807::removeGetThirdPartyFriendsResponseHandler(GetThirdPartyFriendsResponseHandler* handler) {
_f10395->removeGetThirdPartyFriendsResponseHandler(handler);
}

//@Override
void T807::addGetFriendDemandsResponseHandler(GetFriendDemandsResponseHandler* handler) {
_f10395->addGetFriendDemandsResponseHandler(handler);
}

//@Override
void T807::removeGetFriendDemandsResponseHandler(GetFriendDemandsResponseHandler* handler) {
_f10395->removeGetFriendDemandsResponseHandler(handler);
}

//@Override
void T807::addAcceptFriendDemandResponseHandler(AcceptFriendDemandResponseHandler* handler) {
_f10395->addAcceptFriendDemandResponseHandler(handler);
}

//@Override
void T807::removeAcceptFriendDemandResponseHandler(AcceptFriendDemandResponseHandler* _w10645) {
_f10395->removeAcceptFriendDemandResponseHandler(_w10645);
}

//@Override
void T807::addRefuseFriendDemandResponseHandler(RefuseFriendDemandResponseHandler* handler) {
_f10395->addRefuseFriendDemandResponseHandler(handler);
}

//@Override
void T807::removeRefuseFriendDemandResponseHandler(RefuseFriendDemandResponseHandler* _f10647) {
_f10395->removeRefuseFriendDemandResponseHandler(_f10647);
}

//@Override
void T807::addSubmitScoreResponseHandler(SubmitScoreResponseHandler* handler) {
_f10395->addSubmitScoreResponseHandler(handler);
}

//@Override
void T807::removeSubmitScoreResponseHandler(SubmitScoreResponseHandler* handler) {
_f10395->removeSubmitScoreResponseHandler(handler);
}

//@Override
void T807::addGetLeaderboardResponseHandler(GetLeaderboardResponseHandler* handler) {
_f10395->addGetLeaderboardResponseHandler(handler);
}

//@Override
void T807::removeGetLeaderboardResponseHandler(GetLeaderboardResponseHandler* handler) {
_f10395->removeGetLeaderboardResponseHandler(handler);
}

//@Override
void T807::addBuyItemResponseHandler(BuyItemResponseHandler* handler) {
_f10395->addBuyItemResponseHandler(handler);
}

//@Override
void T807::removeBuyItemResponseHandler(BuyItemResponseHandler* handler) {
_f10395->removeBuyItemResponseHandler(handler);
}

//@Override
void T807::addGetStoreResponseHandler(GetStoreResponseHandler* handler) {
_f10395->addGetStoreResponseHandler(handler);
}

//@Override
void T807::removeGetStoreResponseHandler(GetStoreResponseHandler* handler) {
_f10395->removeGetStoreResponseHandler(handler);
}

//@Override
void T807::addConsumeItemResponseHandler(ConsumeItemResponseHandler* handler) {
_f10395->addConsumeItemResponseHandler(handler);
}

//@Override
void T807::removeConsumeItemResponseHandler(ConsumeItemResponseHandler* handler) {
_f10395->removeConsumeItemResponseHandler(handler);
}

//@Override
void T807::addIncreasePlayerWalletResponseHandler(IncreasePlayerWalletResponseHandler* handler) {
_f10395->addIncreasePlayerWalletResponseHandler(handler);
}

//@Override
void T807::removeIncreasePlayerWalletResponseHandler(IncreasePlayerWalletResponseHandler* handler) {
_f10395->removeIncreasePlayerWalletResponseHandler(handler);
}

//@Override
void T807::addGetPlayerWalletResponseHandler(GetPlayerWalletResponseHandler* handler) {
_f10395->addGetPlayerWalletResponseHandler(handler);
}

//@Override
void T807::removeGetPlayerWalletResponseHandler(GetPlayerWalletResponseHandler* handler) {
_f10395->removeGetPlayerWalletResponseHandler(handler);
}

//@Override
void T807::addGetAchievementBoardResponseHandler(GetAchievementBoardResponseHandler* handler) {
_f10395->addGetAchievementBoardResponseHandler(handler);
}

//@Override
void T807::removeGetAchievementBoardResponseHandler(GetAchievementBoardResponseHandler* handler) {
_f10395->removeGetAchievementBoardResponseHandler(handler);
}

//@Override
void T807::addAchieveResponseHandler(AchieveResponseHandler* handler) {
_f10395->addAchieveResponseHandler(handler);
}

//@Override
void T807::removeAchieveResponseHandler(AchieveResponseHandler* handler) {
_f10395->removeAchieveResponseHandler(handler);
}

//@Override
void T807::addSearchImmediateGameResponseHandler(SearchImmediateGameResponseHandler* handler) {
_f10395->addSearchImmediateGameResponseHandler(handler);
}

//@Override
void T807::removeSearchImmediateGameResponseHandler(SearchImmediateGameResponseHandler* handler) {
_f10395->removeSearchImmediateGameResponseHandler(handler);
}

//@Override
void T807::addJoinGameResponseHandler(JoinGameResponseHandler* handler) {
_f10395->addJoinGameResponseHandler(handler);
}

//@Override
void T807::removeJoinGameResponseHandler(JoinGameResponseHandler* handler) {
_f10395->removeJoinGameResponseHandler(handler);
}

//@Override
void T807::addUnjoinGameResponseHandler(UnjoinGameResponseHandler* handler) {
_f10395->addUnjoinGameResponseHandler(handler);
}

//@Override
void T807::removeUnjoinGameResponseHandler(UnjoinGameResponseHandler* handler) {
_f10395->removeUnjoinGameResponseHandler(handler);
}

//@Override
void T807::addStartGameResponseHandler(StartGameResponseHandler* handler) {
_f10395->addStartGameResponseHandler(handler);
}

//@Override
void T807::removeStartGameResponseHandler(StartGameResponseHandler* handler) {
_f10395->removeStartGameResponseHandler(handler);
}

//@Override
void T807::addStopGameResponseHandler(StopGameResponseHandler* handler) {
_f10395->addStopGameResponseHandler(handler);
}

//@Override
void T807::removeStopGameResponseHandler(StopGameResponseHandler* handler) {
_f10395->removeStopGameResponseHandler(handler);
}

//@Override
void T807::addCreateGameResponseHandler(CreateGameResponseHandler* handler) {
_f10395->addCreateGameResponseHandler(handler);
}

//@Override
void T807::removeCreateGameResponseHandler(CreateGameResponseHandler* handler) {
_f10395->removeCreateGameResponseHandler(handler);
}

//@Override
void T807::addGetGamesResponseHandler(GetGamesResponseHandler* handler) {
_f10395->addGetGamesResponseHandler(handler);
}

//@Override
void T807::removeGetGamesResponseHandler(GetGamesResponseHandler* handler) {
_f10395->removeGetGamesResponseHandler(handler);
}

//@Override
void T807::addSaveAsGhostResponseHandler(SaveAsGhostResponseHandler* handler) {
_f10395->addSaveAsGhostResponseHandler(handler);
}

//@Override
void T807::removeSaveAsGhostResponseHandler(SaveAsGhostResponseHandler* handler) {
_f10395->removeSaveAsGhostResponseHandler(handler);
}

//@Override
void T807::addGetGhostsResponseHandler(GetGhostsResponseHandler* handler) {
_f10395->addGetGhostsResponseHandler(handler);
}

//@Override
void T807::removeGetGhostsResponseHandler(GetGhostsResponseHandler* handler) {
_f10395->removeGetGhostsResponseHandler(handler);
}

//@Override
void T807::addLoadGhostResponseHandler(LoadGhostResponseHandler* handler) {
_f10395->addLoadGhostResponseHandler(handler);
}

//@Override
void T807::removeLoadGhostResponseHandler(LoadGhostResponseHandler* handler) {
_f10395->removeLoadGhostResponseHandler(handler);
}

//@Override
void T807::addSendGameChatResponseHandler(SendGameChatResponseHandler* handler) {
_f10395->addSendGameChatResponseHandler(handler);
}

//@Override
void T807::removeSendGameChatResponseHandler(SendGameChatResponseHandler* handler) {
_f10395->removeSendGameChatResponseHandler(handler);
}

//@Override
void T807::addGetStorablesResponseHandler(GetStorablesResponseHandler* handler) {
_f10395->addGetStorablesResponseHandler(handler);
}

//@Override
void T807::removeGetStorablesResponseHandler(GetStorablesResponseHandler* handler) {
_f10395->removeGetStorablesResponseHandler(handler);
}

//@Override
void T807::addSaveStorableResponseHandler(SaveStorableResponseHandler* handler) {
_f10395->addSaveStorableResponseHandler(handler);
}

//@Override
void T807::removeSaveStorableResponseHandler(SaveStorableResponseHandler* handler) {
_f10395->removeSaveStorableResponseHandler(handler);
}

//@Override
void T807::addNextPlayerTurnResponseHandler(NextPlayerTurnResponseHandler* handler) {
_f10395->addNextPlayerTurnResponseHandler(handler);
}

//@Override
void T807::removeNextPlayerTurnResponseHandler(NextPlayerTurnResponseHandler* handler) {
_f10395->removeNextPlayerTurnResponseHandler(handler);
}

//@Override
void T807::addSetPlayerNameResponseHandler(SetPlayerNameResponseHandler* handler) {
_f10395->addSetPlayerNameResponseHandler(handler);
}

//@Override
void T807::removeSetPlayerNameResponseHandler(SetPlayerNameResponseHandler* handler) {
_f10395->removeSetPlayerNameResponseHandler(handler);
}

//@Override
void T807::addUpdateStorableResponseHandler(UpdateStorableResponseHandler* handler) {
_f10395->addUpdateStorableResponseHandler(handler);
}

//@Override
void T807::removeUpdateStorableResponseHandler(UpdateStorableResponseHandler* handler) {
_f10395->removeUpdateStorableResponseHandler(handler);
}

//@Override
void T807::addRemoveStorableResponseHandler(RemoveStorableResponseHandler* handler) {
_f10395->addRemoveStorableResponseHandler(handler);
}

//@Override
void T807::removeRemoveStorableResponseHandler(RemoveStorableResponseHandler* handler) {
_f10395->removeRemoveStorableResponseHandler(handler);
}

//@Override
void T807::addInviteThirdPartyFriendResponseHandler(InviteThirdPartyFriendResponseHandler* handler) {
_f10395->addInviteThirdPartyFriendResponseHandler(handler);
}

//@Override
void T807::removeInviteThirdPartyFriendResponseHandler(InviteThirdPartyFriendResponseHandler* handler) {
_f10395->removeInviteThirdPartyFriendResponseHandler(handler);
}

//@Override
void T807::addPublishThirdPartyMessageResponseHandler(PublishThirdPartyMessageResponseHandler* handler) {
_f10395->addPublishThirdPartyMessageResponseHandler(handler);
}

//@Override
void T807::removePublishThirdPartyMessageResponseHandler(PublishThirdPartyMessageResponseHandler* handler) {
_f10395->removePublishThirdPartyMessageResponseHandler(handler);
}

//@Override
void T807::addThirdPartyLoginResponseHandler(ThirdPartyLoginResponseHandler* handler) {
_f10395->addThirdPartyLoginResponseHandler(handler);
}

//@Override
void T807::removeThirdPartyLoginResponseHandler(ThirdPartyLoginResponseHandler* handler) {
_f10395->removeThirdPartyLoginResponseHandler(handler);
}

//@Override
void T807::addSaveGameResponseHandler(SaveGameResponseHandler* handler) {
_f10395->addSaveGameResponseHandler(handler);
}

//@Override
void T807::removeSaveGameResponseHandler(SaveGameResponseHandler* handler) {
_f10395->removeSaveGameResponseHandler(handler);
}

//@Override
void T807::addLoadGameResponseHandler(LoadGameResponseHandler* handler) {
_f10395->addLoadGameResponseHandler(handler);
}

//@Override
void T807::removeLoadGameResponseHandler(LoadGameResponseHandler* handler) {
_f10395->removeLoadGameResponseHandler(handler);
}

//@Override
void T807::addSavePlayerStorableResponseHandler(SavePlayerStorableResponseHandler* handler) {
_f10395->addSavePlayerStorableResponseHandler(handler);
}

//@Override
void T807::removeSavePlayerStorableResponseHandler(SavePlayerStorableResponseHandler* handler) {
_f10395->removeSavePlayerStorableResponseHandler(handler);
}

//@Override
void T807::addUpdatePlayerStorableResponseHandler(UpdatePlayerStorableResponseHandler* handler) {
_f10395->addUpdatePlayerStorableResponseHandler(handler);
}

//@Override
void T807::removeUpdatePlayerStorableResponseHandler(UpdatePlayerStorableResponseHandler* handler) {
_f10395->removeUpdatePlayerStorableResponseHandler(handler);
}

//@Override
void T807::addRemovePlayerStorableResponseHandler(RemovePlayerStorableResponseHandler* handler) {
_f10395->addRemovePlayerStorableResponseHandler(handler);
}

//@Override
void T807::removeRemovePlayerStorableResponseHandler(RemovePlayerStorableResponseHandler* handler) {
_f10395->removeRemovePlayerStorableResponseHandler(handler);
}

//@Override
void T807::addGetPlayerStorablesResponseHandler(GetPlayerStorablesResponseHandler* handler) {
_f10395->addGetPlayerStorablesResponseHandler(handler);
}

//@Override
void T807::removeGetPlayerStorablesResponseHandler(GetPlayerStorablesResponseHandler* handler) {
_f10395->removeGetPlayerStorablesResponseHandler(handler);
}

//@Override
void T807::addPauseSessionMonitoringResponseHandler(PauseSessionMonitoringResponseHandler* handler) {
_f10395->addPauseSessionMonitoringResponseHandler(handler);
}

//@Override
void T807::removePauseSessionMonitoringResponseHandler(PauseSessionMonitoringResponseHandler* handler) {
_f10395->removePauseSessionMonitoringResponseHandler(handler);
}

//@Override
void T807::addResumeSessionMonitoringResponseHandler(ResumeSessionMonitoringResponseHandler* handler) {
_f10395->addResumeSessionMonitoringResponseHandler(handler);
}

//@Override
void T807::removeResumeSessionMonitoringResponseHandler(ResumeSessionMonitoringResponseHandler* handler) {
_f10395->removeResumeSessionMonitoringResponseHandler(handler);
}

//@Override
void T807::addPublishFriendThirdPartyMessageResponseHandler(PublishFriendThirdPartyMessageResponseHandler* handler) {
_f10395->addPublishFriendThirdPartyMessageResponseHandler(handler);
}

//@Override
void T807::removePublishFriendThirdPartyMessageResponseHandler(PublishFriendThirdPartyMessageResponseHandler* handler) {
_f10395->removePublishFriendThirdPartyMessageResponseHandler(handler);
}

//@Override
void T807::addInvitePlayerResponseHandler(InvitePlayerResponseHandler* handler) {
_f10395->addInvitePlayerResponseHandler(handler);
}

//@Override
void T807::removeInvitePlayerResponseHandler(InvitePlayerResponseHandler* handler) {
_f10395->removeInvitePlayerResponseHandler(handler);
}

//@Override
void T807::addGetInvitationsResponseHandler(GetInvitationsResponseHandler* handler) {
_f10395->addGetInvitationsResponseHandler(handler);
}

//@Override
void T807::removeGetInvitationsResponseHandler(GetInvitationsResponseHandler* handler) {
_f10395->removeGetInvitationsResponseHandler(handler);
}

//@Override
void T807::addAcceptInvitationResponseHandler(AcceptInvitationResponseHandler* handler) {
_f10395->addAcceptInvitationResponseHandler(handler);
}

//@Override
void T807::removeAcceptInvitationResponseHandler(AcceptInvitationResponseHandler* handler) {
_f10395->removeAcceptInvitationResponseHandler(handler);
}

//@Override
void T807::addRefuseInvitationResponseHandler(RefuseInvitationResponseHandler* handler) {
_f10395->addRefuseInvitationResponseHandler(handler);
}

//@Override
void T807::removeRefuseInvitationResponseHandler(RefuseInvitationResponseHandler* handler) {
_f10395->removeRefuseInvitationResponseHandler(handler);
}

T807::~T807(){
if (_f10395) {
delete _f10395;
_f10395=0;
}
}


#include "FriendDisconnectedNotification.h"

short FriendDisconnectedNotification::serializerID = -3099;













const char* FriendDisconnectedNotification::getMessageId() {
    return _MessageId;
}

void FriendDisconnectedNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool FriendDisconnectedNotification::isMessageIdSet() {
return _MessageIdSet;
}

void FriendDisconnectedNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* FriendDisconnectedNotification::getRequestId() {
return _RequestId;
}

void FriendDisconnectedNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool FriendDisconnectedNotification::isRequestIdSet() {
return _RequestIdSet;
}

void FriendDisconnectedNotification::unSetRequestId() {
_RequestIdSet = false;
}

NPlayer* FriendDisconnectedNotification::getFriend() {
return _friend;
}

void FriendDisconnectedNotification::setFriend(NPlayer* value) {
if (_friend && _friend != value) {
delete _friend;
}
_friend = value;
_friendSet = true;
}

bool FriendDisconnectedNotification::isfriendSet() {
return _friendSet;
}

void FriendDisconnectedNotification::unSetfriend() {
_friendSet = false;
}

//@Override
short FriendDisconnectedNotification::getSerializerID() {
return serializerID;
}

void* FriendDisconnectedNotification::clone() {
FriendDisconnectedNotification* _i13868 = new FriendDisconnectedNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i13868->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i13868->setRequestId(_RequestId);
}
if (_friendSet == true && Utils::isNull(_friend) == false) {
_i13868->setFriend((NPlayer*)(_friend->clone()));
}
return _i13868;
}

const char* FriendDisconnectedNotification::toString() {
const char* _h13869 = "";
_h13869 = NUtils::concat(_h13869, NUtils::concat(NUtils::concat("[", "FriendDisconnectedNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h13869 = NUtils::concat(_h13869, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h13869 = NUtils::concat(_h13869, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_friendSet == true && Utils::isNull(_friend) == false) {
_h13869 = NUtils::concat(_h13869, NUtils::concat(NUtils::concat("_friend=", _friend->toString()), "| "));
}
_h13869 = NUtils::concat(_h13869, "]");
return _h13869;
}

FriendDisconnectedNotification::FriendDisconnectedNotification(){
this->_friendSet = false;
this->_friend = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

FriendDisconnectedNotification::~FriendDisconnectedNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_friend) {
delete _friend;
_friend=0;
}
}


#include "GetPlayerProfileByPlayerIdRequest.h"

short GetPlayerProfileByPlayerIdRequest::serializerID = -10116;













const char* GetPlayerProfileByPlayerIdRequest::getMessageId() {
    return _MessageId;
}

void GetPlayerProfileByPlayerIdRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetPlayerProfileByPlayerIdRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetPlayerProfileByPlayerIdRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetPlayerProfileByPlayerIdRequest::getRequestId() {
return _RequestId;
}

void GetPlayerProfileByPlayerIdRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetPlayerProfileByPlayerIdRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetPlayerProfileByPlayerIdRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* GetPlayerProfileByPlayerIdRequest::getPlayerId() {
return _PlayerId;
}

void GetPlayerProfileByPlayerIdRequest::setPlayerId(const char* value) {
if (_PlayerId && _PlayerId != value) {
delete _PlayerId;
}
if (value) {
_PlayerId = strdup(value);
} else {
_PlayerId = 0;
}
_PlayerIdSet = true;
}

bool GetPlayerProfileByPlayerIdRequest::isPlayerIdSet() {
return _PlayerIdSet;
}

void GetPlayerProfileByPlayerIdRequest::unSetPlayerId() {
_PlayerIdSet = false;
}

//@Override
short GetPlayerProfileByPlayerIdRequest::getSerializerID() {
return serializerID;
}

void* GetPlayerProfileByPlayerIdRequest::clone() {
GetPlayerProfileByPlayerIdRequest* _g15417 = new GetPlayerProfileByPlayerIdRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15417->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15417->setRequestId(_RequestId);
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_g15417->setPlayerId(_PlayerId);
}
return _g15417;
}

const char* GetPlayerProfileByPlayerIdRequest::toString() {
const char* _b15418 = "";
_b15418 = NUtils::concat(_b15418, NUtils::concat(NUtils::concat("[", "GetPlayerProfileByPlayerIdRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b15418 = NUtils::concat(_b15418, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b15418 = NUtils::concat(_b15418, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_b15418 = NUtils::concat(_b15418, NUtils::concat(NUtils::concat("_PlayerId=", _PlayerId), "| "));
}
_b15418 = NUtils::concat(_b15418, "]");
return _b15418;
}

GetPlayerProfileByPlayerIdRequest::GetPlayerProfileByPlayerIdRequest(){
this->_PlayerIdSet = false;
this->_PlayerId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetPlayerProfileByPlayerIdRequest::~GetPlayerProfileByPlayerIdRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_PlayerId) {
delete _PlayerId;
_PlayerId = 0;
}
}


#include "JoinGameResponse.h"

short JoinGameResponse::serializerID = -10499;

















const char* JoinGameResponse::getMessageId() {
    return _MessageId;
}

void JoinGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool JoinGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void JoinGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* JoinGameResponse::getRequestId() {
return _RequestId;
}

void JoinGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool JoinGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void JoinGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

JoinGameStatus* JoinGameResponse::getJoinGameStatus() {
return _JoinGameStatus;
}

void JoinGameResponse::setJoinGameStatus(JoinGameStatus* value) {
_JoinGameStatus = value;
_JoinGameStatusSet = true;
}

bool JoinGameResponse::isJoinGameStatusSet() {
return _JoinGameStatusSet;
}

void JoinGameResponse::unSetJoinGameStatus() {
_JoinGameStatusSet = false;
}

NGame* JoinGameResponse::getGame() {
return _Game;
}

void JoinGameResponse::setGame(NGame* value) {
if (_Game && _Game != value) {
delete _Game;
}
_Game = value;
_GameSet = true;
}

bool JoinGameResponse::isGameSet() {
return _GameSet;
}

void JoinGameResponse::unSetGame() {
_GameSet = false;
}

//@Override
short JoinGameResponse::getSerializerID() {
return serializerID;
}

void* JoinGameResponse::clone() {
JoinGameResponse* _w15399 = new JoinGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w15399->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w15399->setRequestId(_RequestId);
}
if (_JoinGameStatusSet == true && Utils::isNull(_JoinGameStatus) == false) {
_w15399->setJoinGameStatus(_JoinGameStatus);
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_w15399->setGame((NGame*)(_Game->clone()));
}
return _w15399;
}

const char* JoinGameResponse::toString() {
const char* _u15400 = "";
_u15400 = NUtils::concat(_u15400, NUtils::concat(NUtils::concat("[", "JoinGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15400 = NUtils::concat(_u15400, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15400 = NUtils::concat(_u15400, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_JoinGameStatusSet == true && Utils::isNull(_JoinGameStatus) == false) {
_u15400 = NUtils::concat(_u15400, NUtils::concat(NUtils::concat("_JoinGameStatus=", _JoinGameStatus->toString()), "| "));
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_u15400 = NUtils::concat(_u15400, NUtils::concat(NUtils::concat("_Game=", _Game->toString()), "| "));
}
_u15400 = NUtils::concat(_u15400, "]");
return _u15400;
}

JoinGameResponse::JoinGameResponse(){
this->_GameSet = false;
this->_Game = 0;
this->_JoinGameStatusSet = false;
this->_JoinGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

JoinGameResponse::~JoinGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Game) {
delete _Game;
_Game=0;
}
}


#include "StopGameRequest.h"

short StopGameRequest::serializerID = -10637;













const char* StopGameRequest::getMessageId() {
    return _MessageId;
}

void StopGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StopGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void StopGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* StopGameRequest::getRequestId() {
return _RequestId;
}

void StopGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StopGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void StopGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* StopGameRequest::getGameId() {
return _GameId;
}

void StopGameRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool StopGameRequest::isGameIdSet() {
return _GameIdSet;
}

void StopGameRequest::unSetGameId() {
_GameIdSet = false;
}

//@Override
short StopGameRequest::getSerializerID() {
return serializerID;
}

void* StopGameRequest::clone() {
StopGameRequest* _e14708 = new StopGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e14708->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e14708->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_e14708->setGameId(_GameId);
}
return _e14708;
}

const char* StopGameRequest::toString() {
const char* _x14709 = "";
_x14709 = NUtils::concat(_x14709, NUtils::concat(NUtils::concat("[", "StopGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x14709 = NUtils::concat(_x14709, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x14709 = NUtils::concat(_x14709, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_x14709 = NUtils::concat(_x14709, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_x14709 = NUtils::concat(_x14709, "]");
return _x14709;
}

StopGameRequest::StopGameRequest(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StopGameRequest::~StopGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "PlayerUnjoinGame.h"

short PlayerUnjoinGame::serializerID = -3017;

















const char* PlayerUnjoinGame::getMessageId() {
    return _MessageId;
}

void PlayerUnjoinGame::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PlayerUnjoinGame::isMessageIdSet() {
return _MessageIdSet;
}

void PlayerUnjoinGame::unSetMessageId() {
_MessageIdSet = false;
}

const char* PlayerUnjoinGame::getRequestId() {
return _RequestId;
}

void PlayerUnjoinGame::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PlayerUnjoinGame::isRequestIdSet() {
return _RequestIdSet;
}

void PlayerUnjoinGame::unSetRequestId() {
_RequestIdSet = false;
}

const char* PlayerUnjoinGame::getGameId() {
return _GameId;
}

void PlayerUnjoinGame::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool PlayerUnjoinGame::isGameIdSet() {
return _GameIdSet;
}

void PlayerUnjoinGame::unSetGameId() {
_GameIdSet = false;
}

NPlayer* PlayerUnjoinGame::getPlayer() {
return _Player;
}

void PlayerUnjoinGame::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool PlayerUnjoinGame::isPlayerSet() {
return _PlayerSet;
}

void PlayerUnjoinGame::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short PlayerUnjoinGame::getSerializerID() {
return serializerID;
}

void* PlayerUnjoinGame::clone() {
PlayerUnjoinGame* _o15194 = new PlayerUnjoinGame();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o15194->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o15194->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_o15194->setGameId(_GameId);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_o15194->setPlayer((NPlayer*)(_Player->clone()));
}
return _o15194;
}

const char* PlayerUnjoinGame::toString() {
const char* _j15195 = "";
_j15195 = NUtils::concat(_j15195, NUtils::concat(NUtils::concat("[", "PlayerUnjoinGame"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j15195 = NUtils::concat(_j15195, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j15195 = NUtils::concat(_j15195, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_j15195 = NUtils::concat(_j15195, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_j15195 = NUtils::concat(_j15195, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_j15195 = NUtils::concat(_j15195, "]");
return _j15195;
}

PlayerUnjoinGame::PlayerUnjoinGame(){
this->_PlayerSet = false;
this->_Player = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PlayerUnjoinGame::~PlayerUnjoinGame(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "RefuseInvitationResponse.h"

short RefuseInvitationResponse::serializerID = -11199;

















const char* RefuseInvitationResponse::getMessageId() {
    return _MessageId;
}

void RefuseInvitationResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RefuseInvitationResponse::isMessageIdSet() {
return _MessageIdSet;
}

void RefuseInvitationResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* RefuseInvitationResponse::getRequestId() {
return _RequestId;
}

void RefuseInvitationResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RefuseInvitationResponse::isRequestIdSet() {
return _RequestIdSet;
}

void RefuseInvitationResponse::unSetRequestId() {
_RequestIdSet = false;
}

RefuseInvitationStatus* RefuseInvitationResponse::getRefuseInvitationStatus() {
return _RefuseInvitationStatus;
}

void RefuseInvitationResponse::setRefuseInvitationStatus(RefuseInvitationStatus* value) {
_RefuseInvitationStatus = value;
_RefuseInvitationStatusSet = true;
}

bool RefuseInvitationResponse::isRefuseInvitationStatusSet() {
return _RefuseInvitationStatusSet;
}

void RefuseInvitationResponse::unSetRefuseInvitationStatus() {
_RefuseInvitationStatusSet = false;
}

const char* RefuseInvitationResponse::getInvitationId() {
return _InvitationId;
}

void RefuseInvitationResponse::setInvitationId(const char* value) {
if (_InvitationId && _InvitationId != value) {
delete _InvitationId;
}
if (value) {
_InvitationId = strdup(value);
} else {
_InvitationId = 0;
}
_InvitationIdSet = true;
}

bool RefuseInvitationResponse::isInvitationIdSet() {
return _InvitationIdSet;
}

void RefuseInvitationResponse::unSetInvitationId() {
_InvitationIdSet = false;
}

//@Override
short RefuseInvitationResponse::getSerializerID() {
return serializerID;
}

void* RefuseInvitationResponse::clone() {
RefuseInvitationResponse* _j10721 = new RefuseInvitationResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j10721->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j10721->setRequestId(_RequestId);
}
if (_RefuseInvitationStatusSet == true && Utils::isNull(_RefuseInvitationStatus) == false) {
_j10721->setRefuseInvitationStatus(_RefuseInvitationStatus);
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_j10721->setInvitationId(_InvitationId);
}
return _j10721;
}

const char* RefuseInvitationResponse::toString() {
const char* _a10722 = "";
_a10722 = NUtils::concat(_a10722, NUtils::concat(NUtils::concat("[", "RefuseInvitationResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_a10722 = NUtils::concat(_a10722, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_a10722 = NUtils::concat(_a10722, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_RefuseInvitationStatusSet == true && Utils::isNull(_RefuseInvitationStatus) == false) {
_a10722 = NUtils::concat(_a10722, NUtils::concat(NUtils::concat("_RefuseInvitationStatus=", _RefuseInvitationStatus->toString()), "| "));
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_a10722 = NUtils::concat(_a10722, NUtils::concat(NUtils::concat("_InvitationId=", _InvitationId), "| "));
}
_a10722 = NUtils::concat(_a10722, "]");
return _a10722;
}

RefuseInvitationResponse::RefuseInvitationResponse(){
this->_InvitationIdSet = false;
this->_InvitationId = 0;
this->_RefuseInvitationStatusSet = false;
this->_RefuseInvitationStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RefuseInvitationResponse::~RefuseInvitationResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_InvitationId) {
delete _InvitationId;
_InvitationId = 0;
}
}


#include "ConsumeItemResponse.h"

short ConsumeItemResponse::serializerID = -10379;





















const char* ConsumeItemResponse::getMessageId() {
    return _MessageId;
}

void ConsumeItemResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ConsumeItemResponse::isMessageIdSet() {
return _MessageIdSet;
}

void ConsumeItemResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* ConsumeItemResponse::getRequestId() {
return _RequestId;
}

void ConsumeItemResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ConsumeItemResponse::isRequestIdSet() {
return _RequestIdSet;
}

void ConsumeItemResponse::unSetRequestId() {
_RequestIdSet = false;
}

ConsumeItemStatus* ConsumeItemResponse::getConsumeItemStatus() {
return _ConsumeItemStatus;
}

void ConsumeItemResponse::setConsumeItemStatus(ConsumeItemStatus* value) {
_ConsumeItemStatus = value;
_ConsumeItemStatusSet = true;
}

bool ConsumeItemResponse::isConsumeItemStatusSet() {
return _ConsumeItemStatusSet;
}

void ConsumeItemResponse::unSetConsumeItemStatus() {
_ConsumeItemStatusSet = false;
}

NItem* ConsumeItemResponse::getConsumedItem() {
return _ConsumedItem;
}

void ConsumeItemResponse::setConsumedItem(NItem* value) {
if (_ConsumedItem && _ConsumedItem != value) {
delete _ConsumedItem;
}
_ConsumedItem = value;
_ConsumedItemSet = true;
}

bool ConsumeItemResponse::isConsumedItemSet() {
return _ConsumedItemSet;
}

void ConsumeItemResponse::unSetConsumedItem() {
_ConsumedItemSet = false;
}

int ConsumeItemResponse::getQuantity() {
return _Quantity;
}

void ConsumeItemResponse::setQuantity(int value) {
_Quantity = value;
_QuantitySet = true;
}

bool ConsumeItemResponse::isQuantitySet() {
return _QuantitySet;
}

void ConsumeItemResponse::unSetQuantity() {
_QuantitySet = false;
}

//@Override
short ConsumeItemResponse::getSerializerID() {
return serializerID;
}

void* ConsumeItemResponse::clone() {
ConsumeItemResponse* _y14009 = new ConsumeItemResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y14009->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y14009->setRequestId(_RequestId);
}
if (_ConsumeItemStatusSet == true && Utils::isNull(_ConsumeItemStatus) == false) {
_y14009->setConsumeItemStatus(_ConsumeItemStatus);
}
if (_ConsumedItemSet == true && Utils::isNull(_ConsumedItem) == false) {
_y14009->setConsumedItem((NItem*)(_ConsumedItem->clone()));
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_y14009->setQuantity(_Quantity);
}
return _y14009;
}

const char* ConsumeItemResponse::toString() {
const char* _h14010 = "";
_h14010 = NUtils::concat(_h14010, NUtils::concat(NUtils::concat("[", "ConsumeItemResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h14010 = NUtils::concat(_h14010, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h14010 = NUtils::concat(_h14010, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ConsumeItemStatusSet == true && Utils::isNull(_ConsumeItemStatus) == false) {
_h14010 = NUtils::concat(_h14010, NUtils::concat(NUtils::concat("_ConsumeItemStatus=", _ConsumeItemStatus->toString()), "| "));
}
if (_ConsumedItemSet == true && Utils::isNull(_ConsumedItem) == false) {
_h14010 = NUtils::concat(_h14010, NUtils::concat(NUtils::concat("_ConsumedItem=", _ConsumedItem->toString()), "| "));
}
if (_QuantitySet == true && Utils::isNullInteger(_Quantity) == false) {
_h14010 = NUtils::concat(_h14010, NUtils::concat(NUtils::concat("_Quantity=", _Quantity), "| "));
}
_h14010 = NUtils::concat(_h14010, "]");
return _h14010;
}

ConsumeItemResponse::ConsumeItemResponse(){
this->_QuantitySet = false;
this->_Quantity = 0;
this->_ConsumedItemSet = false;
this->_ConsumedItem = 0;
this->_ConsumeItemStatusSet = false;
this->_ConsumeItemStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ConsumeItemResponse::~ConsumeItemResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_ConsumedItem) {
delete _ConsumedItem;
_ConsumedItem=0;
}
}


#include "RemovePlayerStorableResponse.h"

short RemovePlayerStorableResponse::serializerID = -11039;

















const char* RemovePlayerStorableResponse::getMessageId() {
    return _MessageId;
}

void RemovePlayerStorableResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RemovePlayerStorableResponse::isMessageIdSet() {
return _MessageIdSet;
}

void RemovePlayerStorableResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* RemovePlayerStorableResponse::getRequestId() {
return _RequestId;
}

void RemovePlayerStorableResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RemovePlayerStorableResponse::isRequestIdSet() {
return _RequestIdSet;
}

void RemovePlayerStorableResponse::unSetRequestId() {
_RequestIdSet = false;
}

RemovePlayerStorableStatus* RemovePlayerStorableResponse::getRemovePlayerStorableStatus() {
return _RemovePlayerStorableStatus;
}

void RemovePlayerStorableResponse::setRemovePlayerStorableStatus(RemovePlayerStorableStatus* value) {
_RemovePlayerStorableStatus = value;
_RemovePlayerStorableStatusSet = true;
}

bool RemovePlayerStorableResponse::isRemovePlayerStorableStatusSet() {
return _RemovePlayerStorableStatusSet;
}

void RemovePlayerStorableResponse::unSetRemovePlayerStorableStatus() {
_RemovePlayerStorableStatusSet = false;
}

const char* RemovePlayerStorableResponse::getStoreId() {
return _StoreId;
}

void RemovePlayerStorableResponse::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
delete _StoreId;
}
if (value) {
_StoreId = strdup(value);
} else {
_StoreId = 0;
}
_StoreIdSet = true;
}

bool RemovePlayerStorableResponse::isStoreIdSet() {
return _StoreIdSet;
}

void RemovePlayerStorableResponse::unSetStoreId() {
_StoreIdSet = false;
}

//@Override
short RemovePlayerStorableResponse::getSerializerID() {
return serializerID;
}

void* RemovePlayerStorableResponse::clone() {
RemovePlayerStorableResponse* _l14116 = new RemovePlayerStorableResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l14116->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l14116->setRequestId(_RequestId);
}
if (_RemovePlayerStorableStatusSet == true && Utils::isNull(_RemovePlayerStorableStatus) == false) {
_l14116->setRemovePlayerStorableStatus(_RemovePlayerStorableStatus);
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_l14116->setStoreId(_StoreId);
}
return _l14116;
}

const char* RemovePlayerStorableResponse::toString() {
const char* _b14117 = "";
_b14117 = NUtils::concat(_b14117, NUtils::concat(NUtils::concat("[", "RemovePlayerStorableResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b14117 = NUtils::concat(_b14117, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b14117 = NUtils::concat(_b14117, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_RemovePlayerStorableStatusSet == true && Utils::isNull(_RemovePlayerStorableStatus) == false) {
_b14117 = NUtils::concat(_b14117, NUtils::concat(NUtils::concat("_RemovePlayerStorableStatus=", _RemovePlayerStorableStatus->toString()), "| "));
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_b14117 = NUtils::concat(_b14117, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
_b14117 = NUtils::concat(_b14117, "]");
return _b14117;
}

RemovePlayerStorableResponse::RemovePlayerStorableResponse(){
this->_StoreIdSet = false;
this->_StoreId = 0;
this->_RemovePlayerStorableStatusSet = false;
this->_RemovePlayerStorableStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RemovePlayerStorableResponse::~RemovePlayerStorableResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
}


#include "ThirdPartyLoginRequest.h"

short ThirdPartyLoginRequest::serializerID = -10937;













const char* ThirdPartyLoginRequest::getMessageId() {
    return _MessageId;
}

void ThirdPartyLoginRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ThirdPartyLoginRequest::isMessageIdSet() {
return _MessageIdSet;
}

void ThirdPartyLoginRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* ThirdPartyLoginRequest::getRequestId() {
return _RequestId;
}

void ThirdPartyLoginRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ThirdPartyLoginRequest::isRequestIdSet() {
return _RequestIdSet;
}

void ThirdPartyLoginRequest::unSetRequestId() {
_RequestIdSet = false;
}

ThirdPartySource* ThirdPartyLoginRequest::getThirdPartySource() {
return _ThirdPartySource;
}

void ThirdPartyLoginRequest::setThirdPartySource(ThirdPartySource* value) {
_ThirdPartySource = value;
_ThirdPartySourceSet = true;
}

bool ThirdPartyLoginRequest::isThirdPartySourceSet() {
return _ThirdPartySourceSet;
}

void ThirdPartyLoginRequest::unSetThirdPartySource() {
_ThirdPartySourceSet = false;
}

//@Override
short ThirdPartyLoginRequest::getSerializerID() {
return serializerID;
}

void* ThirdPartyLoginRequest::clone() {
ThirdPartyLoginRequest* _f13972 = new ThirdPartyLoginRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f13972->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f13972->setRequestId(_RequestId);
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_f13972->setThirdPartySource(_ThirdPartySource);
}
return _f13972;
}

const char* ThirdPartyLoginRequest::toString() {
const char* _r13973 = "";
_r13973 = NUtils::concat(_r13973, NUtils::concat(NUtils::concat("[", "ThirdPartyLoginRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r13973 = NUtils::concat(_r13973, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r13973 = NUtils::concat(_r13973, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_r13973 = NUtils::concat(_r13973, NUtils::concat(NUtils::concat("_ThirdPartySource=", _ThirdPartySource->toString()), "| "));
}
_r13973 = NUtils::concat(_r13973, "]");
return _r13973;
}

ThirdPartyLoginRequest::ThirdPartyLoginRequest(){
this->_ThirdPartySourceSet = false;
this->_ThirdPartySource = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ThirdPartyLoginRequest::~ThirdPartyLoginRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "GetFriendsResponse.h"

short GetFriendsResponse::serializerID = -10199;

















const char* GetFriendsResponse::getMessageId() {
    return _MessageId;
}

void GetFriendsResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetFriendsResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetFriendsResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetFriendsResponse::getRequestId() {
return _RequestId;
}

void GetFriendsResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetFriendsResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetFriendsResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetFriendsStatus* GetFriendsResponse::getGetFriendsStatus() {
return _GetFriendsStatus;
}

void GetFriendsResponse::setGetFriendsStatus(GetFriendsStatus* value) {
_GetFriendsStatus = value;
_GetFriendsStatusSet = true;
}

bool GetFriendsResponse::isGetFriendsStatusSet() {
return _GetFriendsStatusSet;
}

void GetFriendsResponse::unSetGetFriendsStatus() {
_GetFriendsStatusSet = false;
}

std::vector<NPlayer*>* GetFriendsResponse::getFriends() {
return _Friends;
}

void GetFriendsResponse::setFriends(std::vector<NPlayer*>* value) {
if (_Friends) {
for (unsigned int i=0; i < _Friends->size(); i++) {
delete (*_Friends)[i];
}
}
if (_Friends && _Friends != value) {
delete _Friends;
}
_Friends = value;
_FriendsSet = true;
}

bool GetFriendsResponse::isFriendsSet() {
return _FriendsSet;
}

void GetFriendsResponse::unSetFriends() {
_FriendsSet = false;
}

//@Override
short GetFriendsResponse::getSerializerID() {
return serializerID;
}

void* GetFriendsResponse::clone() {
GetFriendsResponse* _h10340 = new GetFriendsResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h10340->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h10340->setRequestId(_RequestId);
}
if (_GetFriendsStatusSet == true && Utils::isNull(_GetFriendsStatus) == false) {
_h10340->setGetFriendsStatus(_GetFriendsStatus);
}
if (_FriendsSet == true && Utils::isNull(_Friends) == false) {
std::vector<NPlayer*>* _w10341 = new std::vector<NPlayer*>();
for (unsigned int i = 0; i < (unsigned int)_Friends->size(); i++) {
void* _n10342 = _Friends->at(i);
if (_n10342 != 0) {
_w10341->push_back((NPlayer*)((NPlayer*)_n10342)->clone());
} else {
_w10341->push_back((NPlayer*)_n10342);
}
}
_h10340->setFriends(_w10341);
}
return _h10340;
}

const char* GetFriendsResponse::toString() {
const char* _n10343 = "";
_n10343 = NUtils::concat(_n10343, NUtils::concat(NUtils::concat("[", "GetFriendsResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n10343 = NUtils::concat(_n10343, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n10343 = NUtils::concat(_n10343, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetFriendsStatusSet == true && Utils::isNull(_GetFriendsStatus) == false) {
_n10343 = NUtils::concat(_n10343, NUtils::concat(NUtils::concat("_GetFriendsStatus=", _GetFriendsStatus->toString()), "| "));
}
if (_FriendsSet == true && Utils::isNull(_Friends) == false) {
_n10343 = NUtils::concat(_n10343, NUtils::concat(NUtils::concat("_Friends=", "N/A"), "| "));
}
_n10343 = NUtils::concat(_n10343, "]");
return _n10343;
}

GetFriendsResponse::GetFriendsResponse(){
this->_FriendsSet = false;
this->_Friends = new std::vector<NPlayer*>();
this->_GetFriendsStatusSet = false;
this->_GetFriendsStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetFriendsResponse::~GetFriendsResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Friends) {
for (unsigned int i=0; i < _Friends->size(); i++) {
delete (*_Friends)[i];
}
delete _Friends;
_Friends=0;;
}
}


#include "AskForFriendByLoginRequest.h"

short AskForFriendByLoginRequest::serializerID = -10016;













const char* AskForFriendByLoginRequest::getMessageId() {
    return _MessageId;
}

void AskForFriendByLoginRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AskForFriendByLoginRequest::isMessageIdSet() {
return _MessageIdSet;
}

void AskForFriendByLoginRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* AskForFriendByLoginRequest::getRequestId() {
return _RequestId;
}

void AskForFriendByLoginRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AskForFriendByLoginRequest::isRequestIdSet() {
return _RequestIdSet;
}

void AskForFriendByLoginRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* AskForFriendByLoginRequest::getLogin() {
return _Login;
}

void AskForFriendByLoginRequest::setLogin(const char* value) {
if (_Login && _Login != value) {
delete _Login;
}
if (value) {
_Login = strdup(value);
} else {
_Login = 0;
}
_LoginSet = true;
}

bool AskForFriendByLoginRequest::isLoginSet() {
return _LoginSet;
}

void AskForFriendByLoginRequest::unSetLogin() {
_LoginSet = false;
}

//@Override
short AskForFriendByLoginRequest::getSerializerID() {
return serializerID;
}

void* AskForFriendByLoginRequest::clone() {
AskForFriendByLoginRequest* _b10393 = new AskForFriendByLoginRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b10393->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b10393->setRequestId(_RequestId);
}
if (_LoginSet == true && Utils::isNull(_Login) == false) {
_b10393->setLogin(_Login);
}
return _b10393;
}

const char* AskForFriendByLoginRequest::toString() {
const char* _a10394 = "";
_a10394 = NUtils::concat(_a10394, NUtils::concat(NUtils::concat("[", "AskForFriendByLoginRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_a10394 = NUtils::concat(_a10394, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_a10394 = NUtils::concat(_a10394, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_LoginSet == true && Utils::isNull(_Login) == false) {
_a10394 = NUtils::concat(_a10394, NUtils::concat(NUtils::concat("_Login=", _Login), "| "));
}
_a10394 = NUtils::concat(_a10394, "]");
return _a10394;
}

AskForFriendByLoginRequest::AskForFriendByLoginRequest(){
this->_LoginSet = false;
this->_Login = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AskForFriendByLoginRequest::~AskForFriendByLoginRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Login) {
delete _Login;
_Login = 0;
}
}


#include "RemovePlayerStorableStatus.h"

std::vector<RemovePlayerStorableStatus*>* RemovePlayerStorableStatus::_values = new std::vector<RemovePlayerStorableStatus*>();

RemovePlayerStorableStatus* RemovePlayerStorableStatus::SUCCESS = new RemovePlayerStorableStatus("SUCCESS", 0);

RemovePlayerStorableStatus* RemovePlayerStorableStatus::FAILURE = new RemovePlayerStorableStatus("FAILURE", 1);

RemovePlayerStorableStatus* RemovePlayerStorableStatus::INVALID_CALL = new RemovePlayerStorableStatus("INVALID_CALL", 2);

RemovePlayerStorableStatus* RemovePlayerStorableStatus::INTERNAL_ERROR = new RemovePlayerStorableStatus("INTERNAL_ERROR", 3);

std::vector<RemovePlayerStorableStatus*>* RemovePlayerStorableStatus::values() {
    return _values;
}





int RemovePlayerStorableStatus::getValue() {
return _value;
}

const char* RemovePlayerStorableStatus::name() {
return _name;
}

int RemovePlayerStorableStatus::ordinal() {
return _value;
}

RemovePlayerStorableStatus::RemovePlayerStorableStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

RemovePlayerStorableStatus* RemovePlayerStorableStatus::fromValue(int value) {
for (unsigned int _k6936 = 0; _k6936 < (unsigned int)_values->size(); _k6936++) {
RemovePlayerStorableStatus* _n6937 = (*_values)[_k6936];
if (_n6937->getValue() == value) {
return _n6937;
}
}
return 0;
}

RemovePlayerStorableStatus* RemovePlayerStorableStatus::valueOf(const char* name) {
for (unsigned int _m15234 = 0; _m15234 < (unsigned int)_values->size(); _m15234++) {
RemovePlayerStorableStatus* _v15235 = (*_values)[_m15234];
if (strcmp(name, _v15235->name()) == 0) {
return _v15235;
}
}
return 0;
}

//@Override
short RemovePlayerStorableStatus::getSerializerID() {
return -11038;
}

const char* RemovePlayerStorableStatus::toString() {
return NUtils::concat("RemovePlayerStorableStatus.", _name);
}

void* RemovePlayerStorableStatus::clone() {
return this;
}

RemovePlayerStorableStatus::~RemovePlayerStorableStatus(){
}


#include "T792.h"















CppByteArray* T792::_m16997(CppByteArray* _b15026, CppByteArray* _h15027) {
    CppByteArray* _q15028 = new CppByteArray(_b15026->size());
    for (unsigned int _e15029 = 0; _e15029 < (unsigned int)_b15026->size(); _e15029++) {
        (*_q15028)[_e15029] = (unsigned char)((*_b15026)[_e15029] ^ (*_h15027)[_e15029]);
    }
    return _q15028;
}

T793* T792::_m16998(CppByteArray* _l15030) {
T793* _s15031 = new T793(_t15019 * (_b15021 + 1), 4);
int _p15032 = 0;
while (_p15032 < _b15020) {
    _s15031->_m16974(_p15032, 0, (*_l15030)[_p15032 * 4]);
    _s15031->_m16974(_p15032, 1, (*_l15030)[_p15032 * 4 + 1]);
    _s15031->_m16974(_p15032, 2, (*_l15030)[_p15032 * 4 + 2]);
    _s15031->_m16974(_p15032, 3, (*_l15030)[_p15032 * 4 + 3]);
    _p15032++;
}
_p15032 = _b15020;
while (_p15032 < _t15019 * (_b15021 + 1)) {
    CppByteArray* _f15033 = new CppByteArray(4);
    for (unsigned int _e15034 = 0; _e15034 < (unsigned int)4; _e15034++) (*_f15033)[_e15034] = _s15031->_m16975(_p15032 - 1, _e15034);
    if (_p15032 % _b15020 == 0) {
        _f15033 = _m16999(_m17000(_f15033));
        (*_f15033)[0] = (unsigned char)((*_f15033)[0] ^ ((*_r15025)[(int)(_p15032 / _b15020)] & 0xff));
    } else if (_b15020 > 6 && _p15032 % _b15020 == 4) {
        _f15033 = _m16999(_f15033);
    }
    _s15031->_m16977(_m16997(_s15031->_m16976(_p15032 - _b15020), _f15033), _p15032);
    _p15032++;
}
return _s15031;
}

CppByteArray* T792::_m16999(CppByteArray* _r15035) {
CppByteArray* _i15036 = new CppByteArray(_r15035->size());
for (unsigned int _i15037 = 0; _i15037 < (unsigned int)_i15036->size(); _i15037++) (*_i15036)[_i15037] = (unsigned char)((*_c15023)[(*_r15035)[_i15037] & 0xff] & 0xff);
return _i15036;
}

CppByteArray* T792::_m17000(CppByteArray* _f15038) {
CppByteArray* _l15039 = new CppByteArray(_f15038->size());
(*_l15039)[0] = (*_f15038)[1];
(*_l15039)[1] = (*_f15038)[2];
(*_l15039)[2] = (*_f15038)[3];
(*_l15039)[3] = (*_f15038)[0];
return _l15039;
}

T793* T792::_m17001(T793* state, T793* _c15041, int _v15042) {
T793* _b15043 = new T793(state->_m16978(), state->_m16979());
for (unsigned int _l6768 = 0; _l6768 < (unsigned int)_t15019; _l6768++) {
for (unsigned int _e15045 = 0; _e15045 < (unsigned int)4; _e15045++) _b15043->_m16974(_e15045, _l6768, (unsigned char)(state->_m16975(_e15045, _l6768) ^ _c15041->_m16975(_v15042 * _t15019 + _l6768, _e15045)));
}
return _b15043;
}

T793* T792::_m17002(T793* state) {
T793* _r15047 = new T793(state->_m16978(), state->_m16979());
for (unsigned int _o6771 = 0; _o6771 < (unsigned int)4; _o6771++) for (unsigned int _k6772 = 0; _k6772 < (unsigned int)_t15019; _k6772++) _r15047->_m16974(_o6771, _k6772, (unsigned char)((*_c15023)[(state->_m16975(_o6771, _k6772) & 0xff)] & 0xff));
return _r15047;
}

T793* T792::_m17003(T793* state) {
for (unsigned int _f15051 = 0; _f15051 < (unsigned int)4; _f15051++) for (unsigned int _j15052 = 0; _j15052 < (unsigned int)_t15019; _j15052++) state->_m16974(_f15051, _j15052, (unsigned char)((*_j15024)[(state->_m16975(_f15051, _j15052) & 0xff)] & 0xff));
return state;
}

T793* T792::_m17004(T793* state) {
CppByteArray* _u15054 = new CppByteArray(4);
for (unsigned int _u6776 = 1; _u6776 < (unsigned int)4; _u6776++) {
for (unsigned int _c6777 = 0; _c6777 < (unsigned int)_t15019; _c6777++) (*_u15054)[_c6777] = state->_m16975(_u6776, (_c6777 + _u6776) % _t15019);
for (unsigned int _q6778 = 0; _q6778 < (unsigned int)_t15019; _q6778++) state->_m16974(_u6776, _q6778, (*_u15054)[_q6778]);
}
return state;
}

T793* T792::_m17005(T793* _i15046) {
CppByteArray* _d15059 = new CppByteArray(4);
for (unsigned int _x6780 = 1; _x6780 < (unsigned int)4; _x6780++) {
for (unsigned int _h6781 = 0; _h6781 < (unsigned int)_t15019; _h6781++) (*_d15059)[(_h6781 + _x6780) % _t15019] = _i15046->_m16975(_x6780, _h6781);
for (unsigned int _m6782 = 0; _m6782 < (unsigned int)_t15019; _m6782++) _i15046->_m16974(_x6780, _m6782, (*_d15059)[_m6782]);
}
return _i15046;
}

T793* T792::_m17006(T793* s) {
CppIntArray* _k15064 = new CppIntArray(4);
unsigned char _c6784 = (unsigned char)0x0e;
unsigned char _v6785 = (unsigned char)0x0b;
unsigned char _p15067 = (unsigned char)0x0d;
unsigned char _a15068 = (unsigned char)0x09;
for (unsigned int _s6788 = 0; _s6788 < (unsigned int)4; _s6788++) {
(*_k15064)[0] = _m17007(_c6784, s->_m16975(0, _s6788)) ^ _m17007(_v6785, s->_m16975(1, _s6788)) ^ _m17007(_p15067, s->_m16975(2, _s6788)) ^ _m17007(_a15068, s->_m16975(3, _s6788));
(*_k15064)[1] = _m17007(_a15068, s->_m16975(0, _s6788)) ^ _m17007(_c6784, s->_m16975(1, _s6788)) ^ _m17007(_v6785, s->_m16975(2, _s6788)) ^ _m17007(_p15067, s->_m16975(3, _s6788));
(*_k15064)[2] = _m17007(_p15067, s->_m16975(0, _s6788)) ^ _m17007(_a15068, s->_m16975(1, _s6788)) ^ _m17007(_c6784, s->_m16975(2, _s6788)) ^ _m17007(_v6785, s->_m16975(3, _s6788));
(*_k15064)[3] = _m17007(_v6785, s->_m16975(0, _s6788)) ^ _m17007(_p15067, s->_m16975(1, _s6788)) ^ _m17007(_a15068, s->_m16975(2, _s6788)) ^ _m17007(_c6784, s->_m16975(3, _s6788));
for (unsigned int _i6789 = 0; _i6789 < (unsigned int)4; _i6789++) s->_m16974(_i6789, _s6788, (unsigned char)((*_k15064)[_i6789]));
}
return s;
}

T793* T792::_m17008(T793* _o15071) {
CppIntArray* _i15072 = new CppIntArray(4);
unsigned char _s15073 = (unsigned char)0x02;
unsigned char _f15074 = (unsigned char)0x03;
for (unsigned int _k15075 = 0; _k15075 < (unsigned int)4; _k15075++) {
(*_i15072)[0] = _m17007(_s15073, _o15071->_m16975(0, _k15075)) ^ _m17007(_f15074, _o15071->_m16975(1, _k15075)) ^ _o15071->_m16975(2, _k15075) ^ _o15071->_m16975(3, _k15075);
(*_i15072)[1] = _o15071->_m16975(0, _k15075) ^ _m17007(_s15073, _o15071->_m16975(1, _k15075)) ^ _m17007(_f15074, _o15071->_m16975(2, _k15075)) ^ _o15071->_m16975(3, _k15075);
(*_i15072)[2] = _o15071->_m16975(0, _k15075) ^ _o15071->_m16975(1, _k15075) ^ _m17007(_s15073, _o15071->_m16975(2, _k15075)) ^ _m17007(_f15074, _o15071->_m16975(3, _k15075));
(*_i15072)[3] = _m17007(_f15074, _o15071->_m16975(0, _k15075)) ^ _o15071->_m16975(1, _k15075) ^ _o15071->_m16975(2, _k15075) ^ _m17007(_s15073, _o15071->_m16975(3, _k15075));
for (unsigned int _p6794 = 0; _p6794 < (unsigned int)4; _p6794++) _o15071->_m16974(_p6794, _k15075, (unsigned char)((*_i15072)[_p6794]));
}
return _o15071;
}

unsigned char T792::_m17007(unsigned char _f15077, unsigned char _j15078) {
unsigned char _v15079 = _f15077;
unsigned char _n15080 = _j15078;
unsigned char _z15081 = 0;
unsigned char _k15082;
while (_v15079 != 0) {
if ((_v15079 & 1) != 0)
_z15081 = (unsigned char)(_z15081 ^ _n15080);
_k15082 = (unsigned char)(_n15080 & 0x80);
_n15080 = (unsigned char)(_n15080 << 1);
if (_k15082 != 0)
_n15080 = (unsigned char)(_n15080 ^ 0x1b);
_v15079 = (unsigned char)((_v15079 & 0xff) >> 1);
}
return _z15081;
}

CppByteArray* T792::_m17009(CppByteArray* _in) {
CppByteArray* _y15084 = new CppByteArray(_in->size());
T793* _n15050 = new T793(4, _t15019);
for (unsigned int _d6801 = 0; _d6801 < (unsigned int)_in->size(); _d6801++) _n15050->_m16974((int)floor((double)_d6801 / 4), _d6801 % 4, (*_in)[(_d6801 % 4 * 4 + (int)floor((double)_d6801 / 4))]);
_n15050 = _m17001(_n15050, _b15022, 0);
for (unsigned int _o6802 = 1; _o6802 < (unsigned int)_b15021; _o6802++) {
_n15050 = _m17002(_n15050);
_n15050 = _m17004(_n15050);
_n15050 = _m17008(_n15050);
_n15050 = _m17001(_n15050, _b15022, _o6802);
}
_n15050 = _m17002(_n15050);
_n15050 = _m17004(_n15050);
_n15050 = _m17001(_n15050, _b15022, _b15021);
for (unsigned int _e6803 = 0; _e6803 < (unsigned int)_in->size(); _e6803++) (*_y15084)[_e6803 % 4 * 4 + (int)floor((double)_e6803 / 4)] = _n15050->_m16975((int)floor((double)_e6803 / 4), _e6803 % 4);
return _y15084;
}

CppByteArray* T792::_m17010(CppByteArray* _in) {
CppByteArray* _s15090 = new CppByteArray(_in->size());
T793* _c15091 = new T793(4, _t15019);
for (unsigned int _b6806 = 0; _b6806 < (unsigned int)_in->size(); _b6806++) _c15091->_m16974((int)floor((double)_b6806 / 4), _b6806 % 4, (*_in)[_b6806 % 4 * 4 + (int)floor((double)_b6806 / 4)]);
_c15091 = _m17001(_c15091, _b15022, _b15021);
int _w15093 = _b15021 - 1;
while (_w15093 >= 1) {
_c15091 = _m17003(_c15091);
_c15091 = _m17005(_c15091);
_c15091 = _m17001(_c15091, _b15022, _w15093);
_c15091 = _m17006(_c15091);
_w15093--;
}
_c15091 = _m17003(_c15091);
_c15091 = _m17005(_c15091);
_c15091 = _m17001(_c15091, _b15022, 0);
for (unsigned int _x6808 = 0; _x6808 < (unsigned int)_in->size(); _x6808++) (*_s15090)[_x6808 % 4 * 4 + (int)floor((double)_x6808 / 4)] = _c15091->_m16975((int)floor((double)_x6808 / 4), _x6808 % 4);
return _s15090;
}

CppByteArray* T792::_m17011(CppByteArray* _in, CppByteArray* key) {
_t15019 = 4;
_b15020 = (int)(key->size() / 4);
_b15021 = _b15020 + 6;
int _c15097 = 0;
CppByteArray* _n15098 = new CppByteArray(1);
int _d6811 = 0;
_c15097 = 16 - _in->size() % 16;
_n15098 = new CppByteArray(_c15097);
(*_n15098)[0] = (unsigned char)0x80;
for (unsigned _d6811 = 1; _d6811 < (unsigned int)_c15097; _d6811++) (*_n15098)[_d6811] = 0;
CppByteArray* _t15100 = new CppByteArray(_in->size() + _c15097);
CppByteArray* _j15101 = new CppByteArray(16);
_b15022 = _m16998(key);
int _i6814 = 0;
for (unsigned int _h6815 = 0; _h6815 < (unsigned int)_in->size() + _c15097; _h6815++) {
_d6811 = _h6815;
if (_d6811 > 0 && _d6811 % 16 == 0) {
_j15101 = _m17009(_j15101);
_m17012(_j15101, 0, _t15100, _d6811 - 16, _j15101->size());
}
if (_d6811 < _in->size())
(*_j15101)[_d6811 % 16] = (*_in)[_d6811];
else {
(*_j15101)[_d6811 % 16] = (*_n15098)[_i6814 % 16];
_i6814++;
}
}
if (_j15101->size() == 16) {
_j15101 = _m17009(_j15101);
_m17012(_j15101, 0, _t15100, _d6811 + 1 - 16, _j15101->size());
}
return _t15100;
}

CppByteArray* T792::_m17013(CppByteArray* _v15104, CppByteArray* _v15105) {
int _t6816 = 0;
CppByteArray* _v15107 = new CppByteArray(_v15104->size());
CppByteArray* _p15108 = new CppByteArray(16);
_t15019 = 4;
_b15020 = (int)(_v15105->size() / 4);
_b15021 = _b15020 + 6;
_b15022 = _m16998(_v15105);
for (unsigned int _y15109 = 0; _y15109 < (unsigned int)_v15104->size(); _y15109++) {
_t6816 = _y15109;
if (_t6816 > 0 && _t6816 % 16 == 0) {
_p15108 = _m17010(_p15108);
_m17012(_p15108, 0, _v15107, _t6816 - 16, _p15108->size());
}
if (_t6816 < _v15104->size())
(*_p15108)[_t6816 % 16] = (*_v15104)[_t6816];
}
_p15108 = _m17010(_p15108);
_m17012(_p15108, 0, _v15107, _t6816 + 1 - 16, _p15108->size());
_v15107 = _m17014(_v15107);
return _v15107;
}

CppByteArray* T792::_m17014(CppByteArray* _u15110) {
int _r15111 = 0;
int _m6821 = _u15110->size() - 1;
while ((*_u15110)[_m6821] == 0) {
_r15111++;
_m6821--;
}
CppByteArray* _b15113 = new CppByteArray(_u15110->size() - _r15111 - 1);
_m17012(_u15110, 0, _b15113, 0, _u15110->size() - _r15111 - 1);
return _b15113;
}

void T792::_m17012(CppByteArray* _l15114, int _p15115, CppByteArray* _i15116, int _h15117, int _j15118) {
int _f15119 = _h15117;
for (unsigned int _u15120 = 0; _u15120 < (unsigned int)_j15118; _u15120++) {
(*_i15116)[_f15119] = (*_l15114)[_u15120];
_f15119++;
}
}

void T792::_m17015() {
(*_r15025)[0] = 141;
(*_r15025)[1] = 1;
(*_r15025)[2] = 2;
(*_r15025)[3] = 4;
(*_r15025)[4] = 8;
(*_r15025)[5] = 16;
(*_r15025)[6] = 32;
(*_r15025)[7] = 64;
(*_r15025)[8] = 128;
(*_r15025)[9] = 27;
(*_r15025)[10] = 54;
(*_r15025)[11] = 108;
(*_r15025)[12] = 216;
(*_r15025)[13] = 171;
(*_r15025)[14] = 77;
(*_r15025)[15] = 154;
(*_r15025)[16] = 47;
(*_r15025)[17] = 94;
(*_r15025)[18] = 188;
(*_r15025)[19] = 99;
(*_r15025)[20] = 198;
(*_r15025)[21] = 151;
(*_r15025)[22] = 53;
(*_r15025)[23] = 106;
(*_r15025)[24] = 212;
(*_r15025)[25] = 179;
(*_r15025)[26] = 125;
(*_r15025)[27] = 250;
(*_r15025)[28] = 239;
(*_r15025)[29] = 197;
(*_r15025)[30] = 145;
(*_r15025)[31] = 57;
(*_r15025)[32] = 114;
(*_r15025)[33] = 228;
(*_r15025)[34] = 211;
(*_r15025)[35] = 189;
(*_r15025)[36] = 97;
(*_r15025)[37] = 194;
(*_r15025)[38] = 159;
(*_r15025)[39] = 37;
(*_r15025)[40] = 74;
(*_r15025)[41] = 148;
(*_r15025)[42] = 51;
(*_r15025)[43] = 102;
(*_r15025)[44] = 204;
(*_r15025)[45] = 131;
(*_r15025)[46] = 29;
(*_r15025)[47] = 58;
(*_r15025)[48] = 116;
(*_r15025)[49] = 232;
(*_r15025)[50] = 203;
(*_r15025)[51] = 141;
(*_r15025)[52] = 1;
(*_r15025)[53] = 2;
(*_r15025)[54] = 4;
(*_r15025)[55] = 8;
(*_r15025)[56] = 16;
(*_r15025)[57] = 32;
(*_r15025)[58] = 64;
(*_r15025)[59] = 128;
(*_r15025)[60] = 27;
(*_r15025)[61] = 54;
(*_r15025)[62] = 108;
(*_r15025)[63] = 216;
(*_r15025)[64] = 171;
(*_r15025)[65] = 77;
(*_r15025)[66] = 154;
(*_r15025)[67] = 47;
(*_r15025)[68] = 94;
(*_r15025)[69] = 188;
(*_r15025)[70] = 99;
(*_r15025)[71] = 198;
(*_r15025)[72] = 151;
(*_r15025)[73] = 53;
(*_r15025)[74] = 106;
(*_r15025)[75] = 212;
(*_r15025)[76] = 179;
(*_r15025)[77] = 125;
(*_r15025)[78] = 250;
(*_r15025)[79] = 239;
(*_r15025)[80] = 197;
(*_r15025)[81] = 145;
(*_r15025)[82] = 57;
(*_r15025)[83] = 114;
(*_r15025)[84] = 228;
(*_r15025)[85] = 211;
(*_r15025)[86] = 189;
(*_r15025)[87] = 97;
(*_r15025)[88] = 194;
(*_r15025)[89] = 159;
(*_r15025)[90] = 37;
(*_r15025)[91] = 74;
(*_r15025)[92] = 148;
(*_r15025)[93] = 51;
(*_r15025)[94] = 102;
(*_r15025)[95] = 204;
(*_r15025)[96] = 131;
(*_r15025)[97] = 29;
(*_r15025)[98] = 58;
(*_r15025)[99] = 116;
(*_r15025)[100] = 232;
(*_r15025)[101] = 203;
(*_r15025)[102] = 141;
(*_r15025)[103] = 1;
(*_r15025)[104] = 2;
(*_r15025)[105] = 4;
(*_r15025)[106] = 8;
(*_r15025)[107] = 16;
(*_r15025)[108] = 32;
(*_r15025)[109] = 64;
(*_r15025)[110] = 128;
(*_r15025)[111] = 27;
(*_r15025)[112] = 54;
(*_r15025)[113] = 108;
(*_r15025)[114] = 216;
(*_r15025)[115] = 171;
(*_r15025)[116] = 77;
(*_r15025)[117] = 154;
(*_r15025)[118] = 47;
(*_r15025)[119] = 94;
(*_r15025)[120] = 188;
(*_r15025)[121] = 99;
(*_r15025)[122] = 198;
(*_r15025)[123] = 151;
(*_r15025)[124] = 53;
(*_r15025)[125] = 106;
(*_r15025)[126] = 212;
(*_r15025)[127] = 179;
(*_r15025)[128] = 125;
(*_r15025)[129] = 250;
(*_r15025)[130] = 239;
(*_r15025)[131] = 197;
(*_r15025)[132] = 145;
(*_r15025)[133] = 57;
(*_r15025)[134] = 114;
(*_r15025)[135] = 228;
(*_r15025)[136] = 211;
(*_r15025)[137] = 189;
(*_r15025)[138] = 97;
(*_r15025)[139] = 194;
(*_r15025)[140] = 159;
(*_r15025)[141] = 37;
(*_r15025)[142] = 74;
(*_r15025)[143] = 148;
(*_r15025)[144] = 51;
(*_r15025)[145] = 102;
(*_r15025)[146] = 204;
(*_r15025)[147] = 131;
(*_r15025)[148] = 29;
(*_r15025)[149] = 58;
(*_r15025)[150] = 116;
(*_r15025)[151] = 232;
(*_r15025)[152] = 203;
(*_r15025)[153] = 141;
(*_r15025)[154] = 1;
(*_r15025)[155] = 2;
(*_r15025)[156] = 4;
(*_r15025)[157] = 8;
(*_r15025)[158] = 16;
(*_r15025)[159] = 32;
(*_r15025)[160] = 64;
(*_r15025)[161] = 128;
(*_r15025)[162] = 27;
(*_r15025)[163] = 54;
(*_r15025)[164] = 108;
(*_r15025)[165] = 216;
(*_r15025)[166] = 171;
(*_r15025)[167] = 77;
(*_r15025)[168] = 154;
(*_r15025)[169] = 47;
(*_r15025)[170] = 94;
(*_r15025)[171] = 188;
(*_r15025)[172] = 99;
(*_r15025)[173] = 198;
(*_r15025)[174] = 151;
(*_r15025)[175] = 53;
(*_r15025)[176] = 106;
(*_r15025)[177] = 212;
(*_r15025)[178] = 179;
(*_r15025)[179] = 125;
(*_r15025)[180] = 250;
(*_r15025)[181] = 239;
(*_r15025)[182] = 197;
(*_r15025)[183] = 145;
(*_r15025)[184] = 57;
(*_r15025)[185] = 114;
(*_r15025)[186] = 228;
(*_r15025)[187] = 211;
(*_r15025)[188] = 189;
(*_r15025)[189] = 97;
(*_r15025)[190] = 194;
(*_r15025)[191] = 159;
(*_r15025)[192] = 37;
(*_r15025)[193] = 74;
(*_r15025)[194] = 148;
(*_r15025)[195] = 51;
(*_r15025)[196] = 102;
(*_r15025)[197] = 204;
(*_r15025)[198] = 131;
(*_r15025)[199] = 29;
(*_r15025)[200] = 58;
(*_r15025)[201] = 116;
(*_r15025)[202] = 232;
(*_r15025)[203] = 203;
(*_r15025)[204] = 141;
(*_r15025)[205] = 1;
(*_r15025)[206] = 2;
(*_r15025)[207] = 4;
(*_r15025)[208] = 8;
(*_r15025)[209] = 16;
(*_r15025)[210] = 32;
(*_r15025)[211] = 64;
(*_r15025)[212] = 128;
(*_r15025)[213] = 27;
(*_r15025)[214] = 54;
(*_r15025)[215] = 108;
(*_r15025)[216] = 216;
(*_r15025)[217] = 171;
(*_r15025)[218] = 77;
(*_r15025)[219] = 154;
(*_r15025)[220] = 47;
(*_r15025)[221] = 94;
(*_r15025)[222] = 188;
(*_r15025)[223] = 99;
(*_r15025)[224] = 198;
(*_r15025)[225] = 151;
(*_r15025)[226] = 53;
(*_r15025)[227] = 106;
(*_r15025)[228] = 212;
(*_r15025)[229] = 179;
(*_r15025)[230] = 125;
(*_r15025)[231] = 250;
(*_r15025)[232] = 239;
(*_r15025)[233] = 197;
(*_r15025)[234] = 145;
(*_r15025)[235] = 57;
(*_r15025)[236] = 114;
(*_r15025)[237] = 228;
(*_r15025)[238] = 211;
(*_r15025)[239] = 189;
(*_r15025)[240] = 97;
(*_r15025)[241] = 194;
(*_r15025)[242] = 159;
(*_r15025)[243] = 37;
(*_r15025)[244] = 74;
(*_r15025)[245] = 148;
(*_r15025)[246] = 51;
(*_r15025)[247] = 102;
(*_r15025)[248] = 204;
(*_r15025)[249] = 131;
(*_r15025)[250] = 29;
(*_r15025)[251] = 58;
(*_r15025)[252] = 116;
(*_r15025)[253] = 232;
(*_r15025)[254] = 203;
(*_j15024)[0] = 82;
(*_j15024)[1] = 9;
(*_j15024)[2] = 106;
(*_j15024)[3] = 213;
(*_j15024)[4] = 48;
(*_j15024)[5] = 54;
(*_j15024)[6] = 165;
(*_j15024)[7] = 56;
(*_j15024)[8] = 191;
(*_j15024)[9] = 64;
(*_j15024)[10] = 163;
(*_j15024)[11] = 158;
(*_j15024)[12] = 129;
(*_j15024)[13] = 243;
(*_j15024)[14] = 215;
(*_j15024)[15] = 251;
(*_j15024)[16] = 124;
(*_j15024)[17] = 227;
(*_j15024)[18] = 57;
(*_j15024)[19] = 130;
(*_j15024)[20] = 155;
(*_j15024)[21] = 47;
(*_j15024)[22] = 255;
(*_j15024)[23] = 135;
(*_j15024)[24] = 52;
(*_j15024)[25] = 142;
(*_j15024)[26] = 67;
(*_j15024)[27] = 68;
(*_j15024)[28] = 196;
(*_j15024)[29] = 222;
(*_j15024)[30] = 233;
(*_j15024)[31] = 203;
(*_j15024)[32] = 84;
(*_j15024)[33] = 123;
(*_j15024)[34] = 148;
(*_j15024)[35] = 50;
(*_j15024)[36] = 166;
(*_j15024)[37] = 194;
(*_j15024)[38] = 35;
(*_j15024)[39] = 61;
(*_j15024)[40] = 238;
(*_j15024)[41] = 76;
(*_j15024)[42] = 149;
(*_j15024)[43] = 11;
(*_j15024)[44] = 66;
(*_j15024)[45] = 250;
(*_j15024)[46] = 195;
(*_j15024)[47] = 78;
(*_j15024)[48] = 8;
(*_j15024)[49] = 46;
(*_j15024)[50] = 161;
(*_j15024)[51] = 102;
(*_j15024)[52] = 40;
(*_j15024)[53] = 217;
(*_j15024)[54] = 36;
(*_j15024)[55] = 178;
(*_j15024)[56] = 118;
(*_j15024)[57] = 91;
(*_j15024)[58] = 162;
(*_j15024)[59] = 73;
(*_j15024)[60] = 109;
(*_j15024)[61] = 139;
(*_j15024)[62] = 209;
(*_j15024)[63] = 37;
(*_j15024)[64] = 114;
(*_j15024)[65] = 248;
(*_j15024)[66] = 246;
(*_j15024)[67] = 100;
(*_j15024)[68] = 134;
(*_j15024)[69] = 104;
(*_j15024)[70] = 152;
(*_j15024)[71] = 22;
(*_j15024)[72] = 212;
(*_j15024)[73] = 164;
(*_j15024)[74] = 92;
(*_j15024)[75] = 204;
(*_j15024)[76] = 93;
(*_j15024)[77] = 101;
(*_j15024)[78] = 182;
(*_j15024)[79] = 146;
(*_j15024)[80] = 108;
(*_j15024)[81] = 112;
(*_j15024)[82] = 72;
(*_j15024)[83] = 80;
(*_j15024)[84] = 253;
(*_j15024)[85] = 237;
(*_j15024)[86] = 185;
(*_j15024)[87] = 218;
(*_j15024)[88] = 94;
(*_j15024)[89] = 21;
(*_j15024)[90] = 70;
(*_j15024)[91] = 87;
(*_j15024)[92] = 167;
(*_j15024)[93] = 141;
(*_j15024)[94] = 157;
(*_j15024)[95] = 132;
(*_j15024)[96] = 144;
(*_j15024)[97] = 216;
(*_j15024)[98] = 171;
(*_j15024)[99] = 0;
(*_j15024)[100] = 140;
(*_j15024)[101] = 188;
(*_j15024)[102] = 211;
(*_j15024)[103] = 10;
(*_j15024)[104] = 247;
(*_j15024)[105] = 228;
(*_j15024)[106] = 88;
(*_j15024)[107] = 5;
(*_j15024)[108] = 184;
(*_j15024)[109] = 179;
(*_j15024)[110] = 69;
(*_j15024)[111] = 6;
(*_j15024)[112] = 208;
(*_j15024)[113] = 44;
(*_j15024)[114] = 30;
(*_j15024)[115] = 143;
(*_j15024)[116] = 202;
(*_j15024)[117] = 63;
(*_j15024)[118] = 15;
(*_j15024)[119] = 2;
(*_j15024)[120] = 193;
(*_j15024)[121] = 175;
(*_j15024)[122] = 189;
(*_j15024)[123] = 3;
(*_j15024)[124] = 1;
(*_j15024)[125] = 19;
(*_j15024)[126] = 138;
(*_j15024)[127] = 107;
(*_j15024)[128] = 58;
(*_j15024)[129] = 145;
(*_j15024)[130] = 17;
(*_j15024)[131] = 65;
(*_j15024)[132] = 79;
(*_j15024)[133] = 103;
(*_j15024)[134] = 220;
(*_j15024)[135] = 234;
(*_j15024)[136] = 151;
(*_j15024)[137] = 242;
(*_j15024)[138] = 207;
(*_j15024)[139] = 206;
(*_j15024)[140] = 240;
(*_j15024)[141] = 180;
(*_j15024)[142] = 230;
(*_j15024)[143] = 115;
(*_j15024)[144] = 150;
(*_j15024)[145] = 172;
(*_j15024)[146] = 116;
(*_j15024)[147] = 34;
(*_j15024)[148] = 231;
(*_j15024)[149] = 173;
(*_j15024)[150] = 53;
(*_j15024)[151] = 133;
(*_j15024)[152] = 226;
(*_j15024)[153] = 249;
(*_j15024)[154] = 55;
(*_j15024)[155] = 232;
(*_j15024)[156] = 28;
(*_j15024)[157] = 117;
(*_j15024)[158] = 223;
(*_j15024)[159] = 110;
(*_j15024)[160] = 71;
(*_j15024)[161] = 241;
(*_j15024)[162] = 26;
(*_j15024)[163] = 113;
(*_j15024)[164] = 29;
(*_j15024)[165] = 41;
(*_j15024)[166] = 197;
(*_j15024)[167] = 137;
(*_j15024)[168] = 111;
(*_j15024)[169] = 183;
(*_j15024)[170] = 98;
(*_j15024)[171] = 14;
(*_j15024)[172] = 170;
(*_j15024)[173] = 24;
(*_j15024)[174] = 190;
(*_j15024)[175] = 27;
(*_j15024)[176] = 252;
(*_j15024)[177] = 86;
(*_j15024)[178] = 62;
(*_j15024)[179] = 75;
(*_j15024)[180] = 198;
(*_j15024)[181] = 210;
(*_j15024)[182] = 121;
(*_j15024)[183] = 32;
(*_j15024)[184] = 154;
(*_j15024)[185] = 219;
(*_j15024)[186] = 192;
(*_j15024)[187] = 254;
(*_j15024)[188] = 120;
(*_j15024)[189] = 205;
(*_j15024)[190] = 90;
(*_j15024)[191] = 244;
(*_j15024)[192] = 31;
(*_j15024)[193] = 221;
(*_j15024)[194] = 168;
(*_j15024)[195] = 51;
(*_j15024)[196] = 136;
(*_j15024)[197] = 7;
(*_j15024)[198] = 199;
(*_j15024)[199] = 49;
(*_j15024)[200] = 177;
(*_j15024)[201] = 18;
(*_j15024)[202] = 16;
(*_j15024)[203] = 89;
(*_j15024)[204] = 39;
(*_j15024)[205] = 128;
(*_j15024)[206] = 236;
(*_j15024)[207] = 95;
(*_j15024)[208] = 96;
(*_j15024)[209] = 81;
(*_j15024)[210] = 127;
(*_j15024)[211] = 169;
(*_j15024)[212] = 25;
(*_j15024)[213] = 181;
(*_j15024)[214] = 74;
(*_j15024)[215] = 13;
(*_j15024)[216] = 45;
(*_j15024)[217] = 229;
(*_j15024)[218] = 122;
(*_j15024)[219] = 159;
(*_j15024)[220] = 147;
(*_j15024)[221] = 201;
(*_j15024)[222] = 156;
(*_j15024)[223] = 239;
(*_j15024)[224] = 160;
(*_j15024)[225] = 224;
(*_j15024)[226] = 59;
(*_j15024)[227] = 77;
(*_j15024)[228] = 174;
(*_j15024)[229] = 42;
(*_j15024)[230] = 245;
(*_j15024)[231] = 176;
(*_j15024)[232] = 200;
(*_j15024)[233] = 235;
(*_j15024)[234] = 187;
(*_j15024)[235] = 60;
(*_j15024)[236] = 131;
(*_j15024)[237] = 83;
(*_j15024)[238] = 153;
(*_j15024)[239] = 97;
(*_j15024)[240] = 23;
(*_j15024)[241] = 43;
(*_j15024)[242] = 4;
(*_j15024)[243] = 126;
(*_j15024)[244] = 186;
(*_j15024)[245] = 119;
(*_j15024)[246] = 214;
(*_j15024)[247] = 38;
(*_j15024)[248] = 225;
(*_j15024)[249] = 105;
(*_j15024)[250] = 20;
(*_j15024)[251] = 99;
(*_j15024)[252] = 85;
(*_j15024)[253] = 33;
(*_j15024)[254] = 12;
(*_j15024)[255] = 125;
(*_c15023)[0] = 99;
(*_c15023)[1] = 124;
(*_c15023)[2] = 119;
(*_c15023)[3] = 123;
(*_c15023)[4] = 242;
(*_c15023)[5] = 107;
(*_c15023)[6] = 111;
(*_c15023)[7] = 197;
(*_c15023)[8] = 48;
(*_c15023)[9] = 1;
(*_c15023)[10] = 103;
(*_c15023)[11] = 43;
(*_c15023)[12] = 254;
(*_c15023)[13] = 215;
(*_c15023)[14] = 171;
(*_c15023)[15] = 118;
(*_c15023)[16] = 202;
(*_c15023)[17] = 130;
(*_c15023)[18] = 201;
(*_c15023)[19] = 125;
(*_c15023)[20] = 250;
(*_c15023)[21] = 89;
(*_c15023)[22] = 71;
(*_c15023)[23] = 240;
(*_c15023)[24] = 173;
(*_c15023)[25] = 212;
(*_c15023)[26] = 162;
(*_c15023)[27] = 175;
(*_c15023)[28] = 156;
(*_c15023)[29] = 164;
(*_c15023)[30] = 114;
(*_c15023)[31] = 192;
(*_c15023)[32] = 183;
(*_c15023)[33] = 253;
(*_c15023)[34] = 147;
(*_c15023)[35] = 38;
(*_c15023)[36] = 54;
(*_c15023)[37] = 63;
(*_c15023)[38] = 247;
(*_c15023)[39] = 204;
(*_c15023)[40] = 52;
(*_c15023)[41] = 165;
(*_c15023)[42] = 229;
(*_c15023)[43] = 241;
(*_c15023)[44] = 113;
(*_c15023)[45] = 216;
(*_c15023)[46] = 49;
(*_c15023)[47] = 21;
(*_c15023)[48] = 4;
(*_c15023)[49] = 199;
(*_c15023)[50] = 35;
(*_c15023)[51] = 195;
(*_c15023)[52] = 24;
(*_c15023)[53] = 150;
(*_c15023)[54] = 5;
(*_c15023)[55] = 154;
(*_c15023)[56] = 7;
(*_c15023)[57] = 18;
(*_c15023)[58] = 128;
(*_c15023)[59] = 226;
(*_c15023)[60] = 235;
(*_c15023)[61] = 39;
(*_c15023)[62] = 178;
(*_c15023)[63] = 117;
(*_c15023)[64] = 9;
(*_c15023)[65] = 131;
(*_c15023)[66] = 44;
(*_c15023)[67] = 26;
(*_c15023)[68] = 27;
(*_c15023)[69] = 110;
(*_c15023)[70] = 90;
(*_c15023)[71] = 160;
(*_c15023)[72] = 82;
(*_c15023)[73] = 59;
(*_c15023)[74] = 214;
(*_c15023)[75] = 179;
(*_c15023)[76] = 41;
(*_c15023)[77] = 227;
(*_c15023)[78] = 47;
(*_c15023)[79] = 132;
(*_c15023)[80] = 83;
(*_c15023)[81] = 209;
(*_c15023)[82] = 0;
(*_c15023)[83] = 237;
(*_c15023)[84] = 32;
(*_c15023)[85] = 252;
(*_c15023)[86] = 177;
(*_c15023)[87] = 91;
(*_c15023)[88] = 106;
(*_c15023)[89] = 203;
(*_c15023)[90] = 190;
(*_c15023)[91] = 57;
(*_c15023)[92] = 74;
(*_c15023)[93] = 76;
(*_c15023)[94] = 88;
(*_c15023)[95] = 207;
(*_c15023)[96] = 208;
(*_c15023)[97] = 239;
(*_c15023)[98] = 170;
(*_c15023)[99] = 251;
(*_c15023)[100] = 67;
(*_c15023)[101] = 77;
(*_c15023)[102] = 51;
(*_c15023)[103] = 133;
(*_c15023)[104] = 69;
(*_c15023)[105] = 249;
(*_c15023)[106] = 2;
(*_c15023)[107] = 127;
(*_c15023)[108] = 80;
(*_c15023)[109] = 60;
(*_c15023)[110] = 159;
(*_c15023)[111] = 168;
(*_c15023)[112] = 81;
(*_c15023)[113] = 163;
(*_c15023)[114] = 64;
(*_c15023)[115] = 143;
(*_c15023)[116] = 146;
(*_c15023)[117] = 157;
(*_c15023)[118] = 56;
(*_c15023)[119] = 245;
(*_c15023)[120] = 188;
(*_c15023)[121] = 182;
(*_c15023)[122] = 218;
(*_c15023)[123] = 33;
(*_c15023)[124] = 16;
(*_c15023)[125] = 255;
(*_c15023)[126] = 243;
(*_c15023)[127] = 210;
(*_c15023)[128] = 205;
(*_c15023)[129] = 12;
(*_c15023)[130] = 19;
(*_c15023)[131] = 236;
(*_c15023)[132] = 95;
(*_c15023)[133] = 151;
(*_c15023)[134] = 68;
(*_c15023)[135] = 23;
(*_c15023)[136] = 196;
(*_c15023)[137] = 167;
(*_c15023)[138] = 126;
(*_c15023)[139] = 61;
(*_c15023)[140] = 100;
(*_c15023)[141] = 93;
(*_c15023)[142] = 25;
(*_c15023)[143] = 115;
(*_c15023)[144] = 96;
(*_c15023)[145] = 129;
(*_c15023)[146] = 79;
(*_c15023)[147] = 220;
(*_c15023)[148] = 34;
(*_c15023)[149] = 42;
(*_c15023)[150] = 144;
(*_c15023)[151] = 136;
(*_c15023)[152] = 70;
(*_c15023)[153] = 238;
(*_c15023)[154] = 184;
(*_c15023)[155] = 20;
(*_c15023)[156] = 222;
(*_c15023)[157] = 94;
(*_c15023)[158] = 11;
(*_c15023)[159] = 219;
(*_c15023)[160] = 224;
(*_c15023)[161] = 50;
(*_c15023)[162] = 58;
(*_c15023)[163] = 10;
(*_c15023)[164] = 73;
(*_c15023)[165] = 6;
(*_c15023)[166] = 36;
(*_c15023)[167] = 92;
(*_c15023)[168] = 194;
(*_c15023)[169] = 211;
(*_c15023)[170] = 172;
(*_c15023)[171] = 98;
(*_c15023)[172] = 145;
(*_c15023)[173] = 149;
(*_c15023)[174] = 228;
(*_c15023)[175] = 121;
(*_c15023)[176] = 231;
(*_c15023)[177] = 200;
(*_c15023)[178] = 55;
(*_c15023)[179] = 109;
(*_c15023)[180] = 141;
(*_c15023)[181] = 213;
(*_c15023)[182] = 78;
(*_c15023)[183] = 169;
(*_c15023)[184] = 108;
(*_c15023)[185] = 86;
(*_c15023)[186] = 244;
(*_c15023)[187] = 234;
(*_c15023)[188] = 101;
(*_c15023)[189] = 122;
(*_c15023)[190] = 174;
(*_c15023)[191] = 8;
(*_c15023)[192] = 186;
(*_c15023)[193] = 120;
(*_c15023)[194] = 37;
(*_c15023)[195] = 46;
(*_c15023)[196] = 28;
(*_c15023)[197] = 166;
(*_c15023)[198] = 180;
(*_c15023)[199] = 198;
(*_c15023)[200] = 232;
(*_c15023)[201] = 221;
(*_c15023)[202] = 116;
(*_c15023)[203] = 31;
(*_c15023)[204] = 75;
(*_c15023)[205] = 189;
(*_c15023)[206] = 139;
(*_c15023)[207] = 138;
(*_c15023)[208] = 112;
(*_c15023)[209] = 62;
(*_c15023)[210] = 181;
(*_c15023)[211] = 102;
(*_c15023)[212] = 72;
(*_c15023)[213] = 3;
(*_c15023)[214] = 246;
(*_c15023)[215] = 14;
(*_c15023)[216] = 97;
(*_c15023)[217] = 53;
(*_c15023)[218] = 87;
(*_c15023)[219] = 185;
(*_c15023)[220] = 134;
(*_c15023)[221] = 193;
(*_c15023)[222] = 29;
(*_c15023)[223] = 158;
(*_c15023)[224] = 225;
(*_c15023)[225] = 248;
(*_c15023)[226] = 152;
(*_c15023)[227] = 17;
(*_c15023)[228] = 105;
(*_c15023)[229] = 217;
(*_c15023)[230] = 142;
(*_c15023)[231] = 148;
(*_c15023)[232] = 155;
(*_c15023)[233] = 30;
(*_c15023)[234] = 135;
(*_c15023)[235] = 233;
(*_c15023)[236] = 206;
(*_c15023)[237] = 85;
(*_c15023)[238] = 40;
(*_c15023)[239] = 223;
(*_c15023)[240] = 140;
(*_c15023)[241] = 161;
(*_c15023)[242] = 137;
(*_c15023)[243] = 13;
(*_c15023)[244] = 191;
(*_c15023)[245] = 230;
(*_c15023)[246] = 66;
(*_c15023)[247] = 104;
(*_c15023)[248] = 65;
(*_c15023)[249] = 153;
(*_c15023)[250] = 45;
(*_c15023)[251] = 15;
(*_c15023)[252] = 176;
(*_c15023)[253] = 84;
(*_c15023)[254] = 187;
(*_c15023)[255] = 22;
}

T792::T792(){
this->_r15025 = new CppIntArray(255);
this->_j15024 = new CppIntArray(256);
this->_c15023 = new CppIntArray(256);
this->_b15022 = 0;
this->_b15021 = 0;
this->_b15020 = 0;
this->_t15019 = 0;
_m17015();
}

T792::~T792(){
if (_b15022) {
delete _b15022;
_b15022=0;
}
}


#include "LeaderboardOrder.h"

std::vector<LeaderboardOrder*>* LeaderboardOrder::_values = new std::vector<LeaderboardOrder*>();

LeaderboardOrder* LeaderboardOrder::ASCENDING = new LeaderboardOrder("ASCENDING", 0);

LeaderboardOrder* LeaderboardOrder::DESCENDING = new LeaderboardOrder("DESCENDING", 1);

std::vector<LeaderboardOrder*>* LeaderboardOrder::values() {
    return _values;
}





int LeaderboardOrder::getValue() {
return _value;
}

const char* LeaderboardOrder::name() {
return _name;
}

int LeaderboardOrder::ordinal() {
return _value;
}

LeaderboardOrder::LeaderboardOrder(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

LeaderboardOrder* LeaderboardOrder::fromValue(int value) {
for (unsigned int _g6876 = 0; _g6876 < (unsigned int)_values->size(); _g6876++) {
LeaderboardOrder* _k6877 = (*_values)[_g6876];
if (_k6877->getValue() == value) {
return _k6877;
}
}
return 0;
}

LeaderboardOrder* LeaderboardOrder::valueOf(const char* name) {
for (unsigned int _q15174 = 0; _q15174 < (unsigned int)_values->size(); _q15174++) {
LeaderboardOrder* _b15175 = (*_values)[_q15174];
if (strcmp(name, _b15175->name()) == 0) {
return _b15175;
}
}
return 0;
}

//@Override
short LeaderboardOrder::getSerializerID() {
return -3;
}

const char* LeaderboardOrder::toString() {
return NUtils::concat("LeaderboardOrder.", _name);
}

void* LeaderboardOrder::clone() {
return this;
}

LeaderboardOrder::~LeaderboardOrder(){
}


#include "LogoutResponse.h"

short LogoutResponse::serializerID = -10139;

















const char* LogoutResponse::getMessageId() {
    return _MessageId;
}

void LogoutResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LogoutResponse::isMessageIdSet() {
return _MessageIdSet;
}

void LogoutResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* LogoutResponse::getRequestId() {
return _RequestId;
}

void LogoutResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LogoutResponse::isRequestIdSet() {
return _RequestIdSet;
}

void LogoutResponse::unSetRequestId() {
_RequestIdSet = false;
}

LogoutStatus* LogoutResponse::getLogoutStatus() {
return _LogoutStatus;
}

void LogoutResponse::setLogoutStatus(LogoutStatus* value) {
_LogoutStatus = value;
_LogoutStatusSet = true;
}

bool LogoutResponse::isLogoutStatusSet() {
return _LogoutStatusSet;
}

void LogoutResponse::unSetLogoutStatus() {
_LogoutStatusSet = false;
}

NPlayer* LogoutResponse::getPlayer() {
return _Player;
}

void LogoutResponse::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool LogoutResponse::isPlayerSet() {
return _PlayerSet;
}

void LogoutResponse::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short LogoutResponse::getSerializerID() {
return serializerID;
}

void* LogoutResponse::clone() {
LogoutResponse* _i14710 = new LogoutResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i14710->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i14710->setRequestId(_RequestId);
}
if (_LogoutStatusSet == true && Utils::isNull(_LogoutStatus) == false) {
_i14710->setLogoutStatus(_LogoutStatus);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_i14710->setPlayer((NPlayer*)(_Player->clone()));
}
return _i14710;
}

const char* LogoutResponse::toString() {
const char* _y14711 = "";
_y14711 = NUtils::concat(_y14711, NUtils::concat(NUtils::concat("[", "LogoutResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y14711 = NUtils::concat(_y14711, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y14711 = NUtils::concat(_y14711, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_LogoutStatusSet == true && Utils::isNull(_LogoutStatus) == false) {
_y14711 = NUtils::concat(_y14711, NUtils::concat(NUtils::concat("_LogoutStatus=", _LogoutStatus->toString()), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_y14711 = NUtils::concat(_y14711, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_y14711 = NUtils::concat(_y14711, "]");
return _y14711;
}

LogoutResponse::LogoutResponse(){
this->_PlayerSet = false;
this->_Player = 0;
this->_LogoutStatusSet = false;
this->_LogoutStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LogoutResponse::~LogoutResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "SignUpRequest.h"

short SignUpRequest::serializerID = -10037;









const char* SignUpRequest::getMessageId() {
    return _MessageId;
}

void SignUpRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SignUpRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SignUpRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SignUpRequest::getRequestId() {
return _RequestId;
}

void SignUpRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SignUpRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SignUpRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short SignUpRequest::getSerializerID() {
return serializerID;
}

void* SignUpRequest::clone() {
SignUpRequest* _g15184 = new SignUpRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15184->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15184->setRequestId(_RequestId);
}
return _g15184;
}

const char* SignUpRequest::toString() {
const char* _f15185 = "";
_f15185 = NUtils::concat(_f15185, NUtils::concat(NUtils::concat("[", "SignUpRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f15185 = NUtils::concat(_f15185, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f15185 = NUtils::concat(_f15185, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_f15185 = NUtils::concat(_f15185, "]");
return _f15185;
}

SignUpRequest::SignUpRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SignUpRequest::~SignUpRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "PublishThirdPartyMessageStatus.h"

std::vector<PublishThirdPartyMessageStatus*>* PublishThirdPartyMessageStatus::_values = new std::vector<PublishThirdPartyMessageStatus*>();

PublishThirdPartyMessageStatus* PublishThirdPartyMessageStatus::SUCCESS = new PublishThirdPartyMessageStatus("SUCCESS", 1);

PublishThirdPartyMessageStatus* PublishThirdPartyMessageStatus::INVALID_CALL = new PublishThirdPartyMessageStatus("INVALID_CALL", 2);

PublishThirdPartyMessageStatus* PublishThirdPartyMessageStatus::INTERNAL_ERROR = new PublishThirdPartyMessageStatus("INTERNAL_ERROR", 3);

PublishThirdPartyMessageStatus* PublishThirdPartyMessageStatus::CANCELED = new PublishThirdPartyMessageStatus("CANCELED", 4);

std::vector<PublishThirdPartyMessageStatus*>* PublishThirdPartyMessageStatus::values() {
    return _values;
}





int PublishThirdPartyMessageStatus::getValue() {
return _value;
}

const char* PublishThirdPartyMessageStatus::name() {
return _name;
}

int PublishThirdPartyMessageStatus::ordinal() {
return _value;
}

PublishThirdPartyMessageStatus::PublishThirdPartyMessageStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

PublishThirdPartyMessageStatus* PublishThirdPartyMessageStatus::fromValue(int value) {
for (unsigned int _r6193 = 0; _r6193 < (unsigned int)_values->size(); _r6193++) {
PublishThirdPartyMessageStatus* _j6194 = (*_values)[_r6193];
if (_j6194->getValue() == value) {
return _j6194;
}
}
return 0;
}

PublishThirdPartyMessageStatus* PublishThirdPartyMessageStatus::valueOf(const char* name) {
for (unsigned int _j14334 = 0; _j14334 < (unsigned int)_values->size(); _j14334++) {
PublishThirdPartyMessageStatus* _j14335 = (*_values)[_j14334];
if (strcmp(name, _j14335->name()) == 0) {
return _j14335;
}
}
return 0;
}

//@Override
short PublishThirdPartyMessageStatus::getSerializerID() {
return -10918;
}

const char* PublishThirdPartyMessageStatus::toString() {
return NUtils::concat("PublishThirdPartyMessageStatus.", _name);
}

void* PublishThirdPartyMessageStatus::clone() {
return this;
}

PublishThirdPartyMessageStatus::~PublishThirdPartyMessageStatus(){
}


#include "SignUpStatus.h"

std::vector<SignUpStatus*>* SignUpStatus::_values = new std::vector<SignUpStatus*>();

SignUpStatus* SignUpStatus::ACCOUNT_CREATED = new SignUpStatus("ACCOUNT_CREATED", 0);

SignUpStatus* SignUpStatus::INTERNAL_ERROR = new SignUpStatus("INTERNAL_ERROR", 3);

SignUpStatus* SignUpStatus::CANCELED = new SignUpStatus("CANCELED", 4);

std::vector<SignUpStatus*>* SignUpStatus::values() {
    return _values;
}





int SignUpStatus::getValue() {
return _value;
}

const char* SignUpStatus::name() {
return _name;
}

int SignUpStatus::ordinal() {
return _value;
}

SignUpStatus::SignUpStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SignUpStatus* SignUpStatus::fromValue(int value) {
for (unsigned int _f6737 = 0; _f6737 < (unsigned int)_values->size(); _f6737++) {
SignUpStatus* _y6738 = (*_values)[_f6737];
if (_y6738->getValue() == value) {
return _y6738;
}
}
return 0;
}

SignUpStatus* SignUpStatus::valueOf(const char* name) {
for (unsigned int _e15007 = 0; _e15007 < (unsigned int)_values->size(); _e15007++) {
SignUpStatus* _y15008 = (*_values)[_e15007];
if (strcmp(name, _y15008->name()) == 0) {
return _y15008;
}
}
return 0;
}

//@Override
short SignUpStatus::getSerializerID() {
return -10038;
}

const char* SignUpStatus::toString() {
return NUtils::concat("SignUpStatus.", _name);
}

void* SignUpStatus::clone() {
return this;
}

SignUpStatus::~SignUpStatus(){
}


#include "NPlayerWallet.h"

short NPlayerWallet::serializerID = -3100;









const char* NPlayerWallet::getStoreId() {
    return _storeId;
}

void NPlayerWallet::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NPlayerWallet::isstoreIdSet() {
return _storeIdSet;
}

void NPlayerWallet::unSetstoreId() {
_storeIdSet = false;
}

int NPlayerWallet::getNbCoins() {
return _NbCoins;
}

void NPlayerWallet::setNbCoins(int value) {
_NbCoins = value;
_NbCoinsSet = true;
}

bool NPlayerWallet::isNbCoinsSet() {
return _NbCoinsSet;
}

void NPlayerWallet::unSetNbCoins() {
_NbCoinsSet = false;
}

//@Override
short NPlayerWallet::getSerializerID() {
return serializerID;
}

void* NPlayerWallet::clone() {
NPlayerWallet* _p15476 = new NPlayerWallet();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_p15476->setStoreId(_storeId);
}
if (_NbCoinsSet == true && Utils::isNullInteger(_NbCoins) == false) {
_p15476->setNbCoins(_NbCoins);
}
return _p15476;
}

const char* NPlayerWallet::toString() {
const char* _m15477 = "";
_m15477 = NUtils::concat(_m15477, NUtils::concat(NUtils::concat("[", "NPlayerWallet"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_m15477 = NUtils::concat(_m15477, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_NbCoinsSet == true && Utils::isNullInteger(_NbCoins) == false) {
_m15477 = NUtils::concat(_m15477, NUtils::concat(NUtils::concat("_NbCoins=", _NbCoins), "| "));
}
_m15477 = NUtils::concat(_m15477, "]");
return _m15477;
}

NPlayerWallet::NPlayerWallet(){
this->_NbCoinsSet = false;
this->_NbCoins = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NPlayerWallet::~NPlayerWallet(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
}


#include "InvitationRequestNotification.h"

short InvitationRequestNotification::serializerID = -3234;













const char* InvitationRequestNotification::getMessageId() {
    return _MessageId;
}

void InvitationRequestNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InvitationRequestNotification::isMessageIdSet() {
return _MessageIdSet;
}

void InvitationRequestNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* InvitationRequestNotification::getRequestId() {
return _RequestId;
}

void InvitationRequestNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InvitationRequestNotification::isRequestIdSet() {
return _RequestIdSet;
}

void InvitationRequestNotification::unSetRequestId() {
_RequestIdSet = false;
}

NInvitation* InvitationRequestNotification::getInvitation() {
return _Invitation;
}

void InvitationRequestNotification::setInvitation(NInvitation* value) {
if (_Invitation && _Invitation != value) {
delete _Invitation;
}
_Invitation = value;
_InvitationSet = true;
}

bool InvitationRequestNotification::isInvitationSet() {
return _InvitationSet;
}

void InvitationRequestNotification::unSetInvitation() {
_InvitationSet = false;
}

//@Override
short InvitationRequestNotification::getSerializerID() {
return serializerID;
}

void* InvitationRequestNotification::clone() {
InvitationRequestNotification* _i15246 = new InvitationRequestNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15246->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15246->setRequestId(_RequestId);
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_i15246->setInvitation((NInvitation*)(_Invitation->clone()));
}
return _i15246;
}

const char* InvitationRequestNotification::toString() {
const char* _o15247 = "";
_o15247 = NUtils::concat(_o15247, NUtils::concat(NUtils::concat("[", "InvitationRequestNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o15247 = NUtils::concat(_o15247, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o15247 = NUtils::concat(_o15247, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_o15247 = NUtils::concat(_o15247, NUtils::concat(NUtils::concat("_Invitation=", _Invitation->toString()), "| "));
}
_o15247 = NUtils::concat(_o15247, "]");
return _o15247;
}

InvitationRequestNotification::InvitationRequestNotification(){
this->_InvitationSet = false;
this->_Invitation = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InvitationRequestNotification::~InvitationRequestNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Invitation) {
delete _Invitation;
_Invitation=0;
}
}


#include "SaveStorableResponse.h"

short SaveStorableResponse::serializerID = -10799;

















const char* SaveStorableResponse::getMessageId() {
    return _MessageId;
}

void SaveStorableResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SaveStorableResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SaveStorableResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SaveStorableResponse::getRequestId() {
return _RequestId;
}

void SaveStorableResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SaveStorableResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SaveStorableResponse::unSetRequestId() {
_RequestIdSet = false;
}

SaveStorableStatus* SaveStorableResponse::getSaveStorableStatus() {
return _SaveStorableStatus;
}

void SaveStorableResponse::setSaveStorableStatus(SaveStorableStatus* value) {
_SaveStorableStatus = value;
_SaveStorableStatusSet = true;
}

bool SaveStorableResponse::isSaveStorableStatusSet() {
return _SaveStorableStatusSet;
}

void SaveStorableResponse::unSetSaveStorableStatus() {
_SaveStorableStatusSet = false;
}

const char* SaveStorableResponse::getStoreId() {
return _StoreId;
}

void SaveStorableResponse::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
delete _StoreId;
}
if (value) {
_StoreId = strdup(value);
} else {
_StoreId = 0;
}
_StoreIdSet = true;
}

bool SaveStorableResponse::isStoreIdSet() {
return _StoreIdSet;
}

void SaveStorableResponse::unSetStoreId() {
_StoreIdSet = false;
}

//@Override
short SaveStorableResponse::getSerializerID() {
return serializerID;
}

void* SaveStorableResponse::clone() {
SaveStorableResponse* _g15228 = new SaveStorableResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15228->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15228->setRequestId(_RequestId);
}
if (_SaveStorableStatusSet == true && Utils::isNull(_SaveStorableStatus) == false) {
_g15228->setSaveStorableStatus(_SaveStorableStatus);
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_g15228->setStoreId(_StoreId);
}
return _g15228;
}

const char* SaveStorableResponse::toString() {
const char* _l15229 = "";
_l15229 = NUtils::concat(_l15229, NUtils::concat(NUtils::concat("[", "SaveStorableResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l15229 = NUtils::concat(_l15229, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l15229 = NUtils::concat(_l15229, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SaveStorableStatusSet == true && Utils::isNull(_SaveStorableStatus) == false) {
_l15229 = NUtils::concat(_l15229, NUtils::concat(NUtils::concat("_SaveStorableStatus=", _SaveStorableStatus->toString()), "| "));
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_l15229 = NUtils::concat(_l15229, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
_l15229 = NUtils::concat(_l15229, "]");
return _l15229;
}

SaveStorableResponse::SaveStorableResponse(){
this->_StoreIdSet = false;
this->_StoreId = 0;
this->_SaveStorableStatusSet = false;
this->_SaveStorableStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SaveStorableResponse::~SaveStorableResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
}


#include "GetFriendsRequest.h"

short GetFriendsRequest::serializerID = -10197;









const char* GetFriendsRequest::getMessageId() {
    return _MessageId;
}

void GetFriendsRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetFriendsRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetFriendsRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetFriendsRequest::getRequestId() {
return _RequestId;
}

void GetFriendsRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetFriendsRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetFriendsRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short GetFriendsRequest::getSerializerID() {
return serializerID;
}

void* GetFriendsRequest::clone() {
GetFriendsRequest* _c10738 = new GetFriendsRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c10738->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c10738->setRequestId(_RequestId);
}
return _c10738;
}

const char* GetFriendsRequest::toString() {
const char* _t10739 = "";
_t10739 = NUtils::concat(_t10739, NUtils::concat(NUtils::concat("[", "GetFriendsRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_t10739 = NUtils::concat(_t10739, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_t10739 = NUtils::concat(_t10739, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_t10739 = NUtils::concat(_t10739, "]");
return _t10739;
}

GetFriendsRequest::GetFriendsRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetFriendsRequest::~GetFriendsRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "CreateGameRequest.h"

short CreateGameRequest::serializerID = -10657;













const char* CreateGameRequest::getMessageId() {
    return _MessageId;
}

void CreateGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool CreateGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void CreateGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* CreateGameRequest::getRequestId() {
return _RequestId;
}

void CreateGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool CreateGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void CreateGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

NGame* CreateGameRequest::getGame() {
return _Game;
}

void CreateGameRequest::setGame(NGame* value) {
if (_Game && _Game != value) {
delete _Game;
}
_Game = value;
_GameSet = true;
}

bool CreateGameRequest::isGameSet() {
return _GameSet;
}

void CreateGameRequest::unSetGame() {
_GameSet = false;
}

//@Override
short CreateGameRequest::getSerializerID() {
return serializerID;
}

void* CreateGameRequest::clone() {
CreateGameRequest* _t13844 = new CreateGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_t13844->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_t13844->setRequestId(_RequestId);
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_t13844->setGame((NGame*)(_Game->clone()));
}
return _t13844;
}

const char* CreateGameRequest::toString() {
const char* _q13845 = "";
_q13845 = NUtils::concat(_q13845, NUtils::concat(NUtils::concat("[", "CreateGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q13845 = NUtils::concat(_q13845, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q13845 = NUtils::concat(_q13845, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_q13845 = NUtils::concat(_q13845, NUtils::concat(NUtils::concat("_Game=", _Game->toString()), "| "));
}
_q13845 = NUtils::concat(_q13845, "]");
return _q13845;
}

CreateGameRequest::CreateGameRequest(){
this->_GameSet = false;
this->_Game = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

CreateGameRequest::~CreateGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Game) {
delete _Game;
_Game=0;
}
}


#include "ConnectionFailListenerCollection.h"



void ConnectionFailListenerCollection::fireConnectionFail() {
    int _n10362 = connectionFailListeners->size();
    for (unsigned int _u10363 = 0; _u10363 < (unsigned int)_n10362; _u10363++) {
        ConnectionFailListener* _e10364 = (*connectionFailListeners)[_u10363];
        (*_e10364)();
    }
}

std::vector<ConnectionFailListener*>* ConnectionFailListenerCollection::getListeners() {
return connectionFailListeners;
}

void ConnectionFailListenerCollection::add(ConnectionFailListener* listener) {
connectionFailListeners->push_back(listener);
}

void ConnectionFailListenerCollection::remove(ConnectionFailListener* listener) {
int _i10365 = connectionFailListeners->size();
if (_i10365 > 0) {
int _u10366 = std::distance(connectionFailListeners->begin(), std::find(connectionFailListeners->begin(), connectionFailListeners->end(), listener));
if (_u10366 >= 0)
connectionFailListeners->erase(connectionFailListeners->begin() + _u10366);
}
}

ConnectionFailListenerCollection::ConnectionFailListenerCollection(){
this->connectionFailListeners = new std::vector<ConnectionFailListener*>();
}

ConnectionFailListenerCollection::~ConnectionFailListenerCollection(){
if (connectionFailListeners) {
for (unsigned int i=0; i < connectionFailListeners->size(); i++) {
delete (*connectionFailListeners)[i];
}
delete connectionFailListeners;
connectionFailListeners=0;;
}
}


#include "GetGhostsRequest.h"

short GetGhostsRequest::serializerID = -10717;













const char* GetGhostsRequest::getMessageId() {
    return _MessageId;
}

void GetGhostsRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetGhostsRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetGhostsRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetGhostsRequest::getRequestId() {
return _RequestId;
}

void GetGhostsRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetGhostsRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetGhostsRequest::unSetRequestId() {
_RequestIdSet = false;
}

NuggetaQuery* GetGhostsRequest::getDbQuery() {
return _DbQuery;
}

void GetGhostsRequest::setDbQuery(NuggetaQuery* value) {
if (_DbQuery && _DbQuery != value) {
delete _DbQuery;
}
_DbQuery = value;
_DbQuerySet = true;
}

bool GetGhostsRequest::isDbQuerySet() {
return _DbQuerySet;
}

void GetGhostsRequest::unSetDbQuery() {
_DbQuerySet = false;
}

//@Override
short GetGhostsRequest::getSerializerID() {
return serializerID;
}

void* GetGhostsRequest::clone() {
GetGhostsRequest* _k15548 = new GetGhostsRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k15548->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k15548->setRequestId(_RequestId);
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_k15548->setDbQuery((NuggetaQuery*)(_DbQuery->clone()));
}
return _k15548;
}

const char* GetGhostsRequest::toString() {
const char* _q15549 = "";
_q15549 = NUtils::concat(_q15549, NUtils::concat(NUtils::concat("[", "GetGhostsRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15549 = NUtils::concat(_q15549, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15549 = NUtils::concat(_q15549, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_q15549 = NUtils::concat(_q15549, NUtils::concat(NUtils::concat("_DbQuery=", _DbQuery->toString()), "| "));
}
_q15549 = NUtils::concat(_q15549, "]");
return _q15549;
}

GetGhostsRequest::GetGhostsRequest(){
this->_DbQuerySet = false;
this->_DbQuery = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetGhostsRequest::~GetGhostsRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_DbQuery) {
delete _DbQuery;
_DbQuery=0;
}
}


#include "UpdateStorableRequest.h"

short UpdateStorableRequest::serializerID = -10857;













const char* UpdateStorableRequest::getMessageId() {
    return _MessageId;
}

void UpdateStorableRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool UpdateStorableRequest::isMessageIdSet() {
return _MessageIdSet;
}

void UpdateStorableRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* UpdateStorableRequest::getRequestId() {
return _RequestId;
}

void UpdateStorableRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool UpdateStorableRequest::isRequestIdSet() {
return _RequestIdSet;
}

void UpdateStorableRequest::unSetRequestId() {
_RequestIdSet = false;
}

Storable* UpdateStorableRequest::getStorable() {
return _Storable;
}

void UpdateStorableRequest::setStorable(Storable* value) {
if (_Storable && _Storable != value) {
delete _Storable;
}
_Storable = value;
_StorableSet = true;
}

bool UpdateStorableRequest::isStorableSet() {
return _StorableSet;
}

void UpdateStorableRequest::unSetStorable() {
_StorableSet = false;
}

//@Override
short UpdateStorableRequest::getSerializerID() {
return serializerID;
}

void* UpdateStorableRequest::clone() {
UpdateStorableRequest* _y14034 = new UpdateStorableRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y14034->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y14034->setRequestId(_RequestId);
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_y14034->setStorable((Storable*)(_Storable->clone()));
}
return _y14034;
}

const char* UpdateStorableRequest::toString() {
const char* _n14035 = "";
_n14035 = NUtils::concat(_n14035, NUtils::concat(NUtils::concat("[", "UpdateStorableRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n14035 = NUtils::concat(_n14035, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n14035 = NUtils::concat(_n14035, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StorableSet == true && Utils::isNull(_Storable) == false) {
_n14035 = NUtils::concat(_n14035, NUtils::concat(NUtils::concat("_Storable=", _Storable->toString()), "| "));
}
_n14035 = NUtils::concat(_n14035, "]");
return _n14035;
}

UpdateStorableRequest::UpdateStorableRequest(){
this->_StorableSet = false;
this->_Storable = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

UpdateStorableRequest::~UpdateStorableRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storable) {
delete _Storable;
_Storable=0;
}
}


#include "T801.h"

int T801::_j14118 = 100;

const char* T801::_i14119 = "connectionId";

































const char* T801::_o14136 = "a12-plug";

const char* T801::_t14137 = "gs-plug";













T801::T801(const char* _x14131):T806(){

    this->_y14143 = 0;
    this->_c14142 = 0;
    this->_b14141 = 0;
    this->_k14140 = false;
    this->_q14139 = false;
    this->_j14138 = false;
    this->_s14135 = 0;
    this->_q14134 = HandshakeState::INIT;
    this->_r14133 = 0;
    this->_v14132 = 0;
    this->_f6037 = 0;
    this->_t14130 = 0;
    this->_p14129 = 0;
    this->_y14128 = new Pump(10000);
    this->_r14127 = new NMap();
    this->_v14126 = 0;
    this->_f14125 = 0;
    this->_v14124 = 0;
    this->_k14123 = new std::vector<T800*>();
    this->_e14122 = 0;
    this->_h14121 = new GameDispatcher();
    this->_w14120 = NLoggerFactory::getLogger("AbstractNuggetaPlug");
    if (std::strstr(_x14131, "nuggeta") == _x14131) {
        std::vector<const char*>* _r14144 = NUtils::split(_x14131, "://");
        if (_r14144->size() == 2) {
            this->_f6037 = "5.153.16.122:3010";
            this->_s14135 = (*_r14144)[1];
        } else {
            _w14120->error(NUtils::concat("Malformed URL : ", _x14131));
        }
    } else {
        _q14139 = true;
        _c14142 = DnsStatus::SUCCESS;
        this->_f6037 = _x14131;
    }
    _w14120 = NLoggerFactory::getLogger("NuggetaPlug");
    _f14125 = new T796("DCM");
    _e14122 = new T796("GSMC");
}

void T801::_m16917(Message* _o14145) {
    if (_j14138) {
        return;
    }
    ;
    const char* _w14146 = _o14145->getRequestId();
    if (_w14146 != 0) {
        void* _t14147 = (*_r14127)[_w14146];
        if (_t14147 != 0) {
            _r14127->erase(_w14146);
            T807::_m16330(_o14145, _t14147);
            return;
        }
    }
    if (dynamic_cast<DnsResponse*>(_o14145) != 0) {
        DnsResponse* _s14148 = (DnsResponse*)_o14145;
        StartDetails* _i14149 = _s14148->getStartDetails();
        _c14142 = _s14148->getDnsStatus();
        _y14143 = (StartDetails*)_cloneSerializable(_i14149);
        if (_s14148->getDnsStatus() == DnsStatus::SUCCESS) {
            _c14142 = DnsStatus::SUCCESS;
            _f14125->_m16903();
            const char* _d6055 = NUtils::concat(NUtils::concat(_s14148->getIpAddress(), ":"), _s14148->getTcpPort());
            _m16918(_d6055);
        } else if (_s14148->getDnsStatus() == DnsStatus::WARNED) {
            _c14142 = DnsStatus::WARNED;
            _f14125->_m16903();
            const char* _w6056 = NUtils::concat(NUtils::concat(_s14148->getIpAddress(), ":"), _s14148->getTcpPort());
            _m16918(_w6056);
        } else if (_s14148->getDnsStatus() == DnsStatus::REFUSED) {
            StartResponse* _p6057 = new StartResponse();
            _p6057->setStartStatus(StartStatus::REFUSED);
            _p6057->setStartDetails(_i14149);
            if (_i14149 != 0 && _i14149->isUseDefaultImpl() == true) {
                _m16919(_i14149);
            }
            _m16920(_p6057, true, false, true);
            return;
        } else if (_s14148->getDnsStatus() == DnsStatus::FAILED) {
            DnsRequest* _d14153 = new DnsRequest();
            _d14153->setGameId(_s14135);
            _d14153->setGameVersion(_m16921());
            _d14153->setGameDeployedVersion(_m16922());
            _d14153->setPlatform(Platform::get());
            _f14125->_m16905(_d14153);
        } else if (_s14148->getDnsStatus() == DnsStatus::FAILED_TRY_LATER) {
            _f14125->_m16903();
            if (_q14134 == HandshakeState::BALANCE) {
                _j14138 = true;
                ConnectionLost* _r14154 = new ConnectionLost();
                _m16920(_r14154, true, false, true);
            } else {
                StartResponse* _p14155 = new StartResponse();
                _p14155->setStartStatus(StartStatus::FAILED);
                _m16920(_p14155, true, false, true);
            }
        }
    }
}

void T801::_m16918(const char* _y14156) {
MessageListener* _p14157 = new MessageListener(this, &T801::onMessage14);
;
if (!_j14138) {
    _e14122->_m16901(_v14126->_m16326(T801::_t14137, _p14157, _y14156));
}
}

void T801::_m16923(Message* _n14158) {
;
if (_j14138 && !(dynamic_cast<StopPlugConnectionResponse*>(_n14158) != 0)) {
return;
}
if (dynamic_cast<SessionExpired*>(_n14158) != 0) {
_j14138 = true;
}
if (dynamic_cast<HeartBeatRequest*>(_n14158) != 0) {
HeartBeatResponse* _u14159 = new HeartBeatResponse();
_sendMessage0(_u14159);
delete _n14158;
return;
}
if (dynamic_cast<LoginResponse*>(_n14158) != 0 || dynamic_cast<SignUpResponse*>(_n14158) != 0 || dynamic_cast<ThirdPartyLoginResponse*>(_n14158) != 0 || dynamic_cast<InviteThirdPartyFriendResponse*>(_n14158) != 0 || dynamic_cast<PublishThirdPartyMessageResponse*>(_n14158) != 0 || dynamic_cast<GetThirdPartyFriendsResponse*>(_n14158) != 0) {
if (_k14140 == true) {
    _k14140 = false;
    Net::closeWebView();
}
}
if (dynamic_cast<StopPlugConnectionResponse*>(_n14158) != 0) {
delete _n14158;
_m16924();
} else if (dynamic_cast<OpenConnection*>(_n14158) != 0) {
OpenConnection* _g14160 = (OpenConnection*)_n14158;
const char* _r14161 = _g14160->getIpAddress();
int _r14162 = _g14160->getTcpPort();
const char* _g14163 = NUtils::concat(NUtils::concat(_r14161, ":"), _r14162);
const char* _h14164 = "";
_v14124 = new T800("gs-plug-slave-", _dupString(_h14164));
_v14124->_m16906(new ConnectionReadyListener(this, &T801::onConnectionReady15));
_v14124->_m16908(new ConnectionLostListener(this, &T801::onConnectionLost16));
_v14124->_m16910(new ConnectionFailListener(this, &T801::onConnectionFail17));
MessageListener* _y14166 = new MessageListener(this, &T801::onMessage18);
_v14124->_m16901(_v14126->_m16326("gs-plug", _y14166, _g14163));
_k14123->push_back(_v14124);
delete _n14158;
return;
} else if (dynamic_cast<SwitchToServerInformation*>(_n14158) != 0) {
_e14122->_m16903();
_q14134 = HandshakeState::SWITCH;
SwitchToServerInformation* _e14169 = (SwitchToServerInformation*)_n14158;
_m16918(_e14169->getAddress());
delete _n14158;
return;
} else if (dynamic_cast<HandshakeResponse*>(_n14158) != 0) {
HandshakeResponse* _t14170 = (HandshakeResponse*)_n14158;
if (_t14170->getExecutionStatus() == ExecutionStatus::OK) {
    _m16926(_t14170->getSessionId());
    if (_t14170->getReason() == HandshakeState::BALANCE) {
        _q14134 = HandshakeState::INIT;
        ConnectionResumed* _e14171 = new ConnectionResumed();
        _m16920(_e14171, true, false, true);
    } else if (_t14170->getReason() == HandshakeState::SWITCH) {
    } else if (_t14170->getReason() == HandshakeState::INIT) {
        _q14134 = HandshakeState::INIT;
        _m16927(_t14170->getPlayerIdsStored());
        StartResponse* _r6075 = new StartResponse();
        if (_c14142 == DnsStatus::SUCCESS) {
            _r6075->setStartStatus(StartStatus::READY);
            NPlayer* _b6076 = (NPlayer*)_cloneSerializable(_t14170->getPlayer());
            _r6075->setPlayer(_b6076);
            PlayerSessionType* _d6077 = (PlayerSessionType*)_cloneSerializable(_t14170->getPlayerSessionType());
            _r6075->setPlayerSessionType(_d6077);
        } else if (_c14142 == DnsStatus::WARNED) {
            _r6075->setStartStatus(StartStatus::WARNED);
            NPlayer* _l14175 = (NPlayer*)_cloneSerializable(_t14170->getPlayer());
            _r6075->setPlayer(_l14175);
            PlayerSessionType* _k14176 = (PlayerSessionType*)_cloneSerializable(_t14170->getPlayerSessionType());
            _r6075->setPlayerSessionType(_k14176);
            StartDetails* _k14177 = (StartDetails*)_cloneSerializable(_y14143);
            _r6075->setStartDetails(_k14177);
            if (_y14143 != 0 && _y14143->isUseDefaultImpl() == true) {
                _m16928(_k14177);
            }
        }
        _m16920(_r6075, true, false, true);
    }
} else {
    if (_t14170->getReason() == HandshakeState::BALANCE) {
        _j14138 = true;
        ConnectionLost* _p14178 = new ConnectionLost();
        _m16920(_p14178, true, false, true);
    } else {
        StartResponse* _f6082 = new StartResponse();
        _f6082->setStartStatus(StartStatus::FAILED);
        _m16920(_f6082, true, false, true);
    }
}
delete _n14158;
return;
} else if (dynamic_cast<BuyProductUrl*>(_n14158) != 0) {
_m16929((BuyProductUrl*)_n14158);
delete _n14158;
} else if (dynamic_cast<OpenUrl*>(_n14158) != 0) {
_k14140 = true;
OpenUrl* _r14180 = (OpenUrl*)_n14158;
openWebView(_r14180);
} else {
const char* _g6084 = _n14158->getRequestId();
if (_g6084 != 0) {
    void* _o6085 = (*_r14127)[_g6084];
    if (_o6085 != 0) {
        _r14127->erase(_g6084);
        T807::_m16330(_n14158, _o6085);
        return;
    }
} else {
    _m16920(_n14158, true, true, true);
}
}
}

void T801::_m16920(Message* message, bool _y14184, bool _t14185, bool _i14186) {
;
if (_y14184) {
_f10395->fireMessage(message);
}
if (_t14185) {
_h14121->fireMessage(message);
}
if (_i14186) {
_y14128->add(message);
}
}

//@Override
void T801::addGameMessageListener(GameMessageListener* listener) {
_h14121->addGameMessageListener(listener);
}

//@Override
void T801::removeGameMessageListener(GameMessageListener* listener) {
_h14121->removeGameMessageListener(listener);
}

//@Override
void T801::addNuggetaMessageListener(NuggetaMessageListener* listener) {
_f10395->addNuggetaMessageListener(listener);
}

//@Override
void T801::removeNuggetaMessageListener(NuggetaMessageListener* listener) {
_f10395->removeNuggetaMessageListener(listener);
}

void T801::_m16930() {
_b14141 = _m16931();
_j14138 = false;
if (_q14139) {
_m16932();
_m16918(_f6037);
} else {
_m16933();
_m16932();
_m16934();
}
}

//@Override
void T801::start() {
_m16930();
}

void T801::_m16935() {
;
if (_j14138) {
return;
}
if (_q14139) {
_m16918(_f6037);
} else {
_m16934();
}
}

void T801::_m16934() {
;
MessageListener* _x14187 = new MessageListener(this, &T801::onMessage19);
_f14125->_m16901(_v14126->_m16326(T801::_o14136, _x14187, _f6037));
}

void T801::_m16933() {
_f14125->_m16906(new ConnectionReadyListener(this, &T801::onConnectionReady20));
_f14125->_m16908(new ConnectionLostListener(this, &T801::onConnectionLost21));
_f14125->_m16910(new ConnectionFailListener(this, &T801::onConnectionFail22));
_f14125->_m16912(new ConnectionInvalidVersionDetectedListener(this, &T801::onInvalidVersionDetected23));
}

void T801::_m16932() {
_e14122->_m16906(new ConnectionReadyListener(this, &T801::onConnectionReady24));
_e14122->_m16910(new ConnectionFailListener(this, &T801::onConnectionFail25));
_e14122->_m16908(new ConnectionLostListener(this, &T801::onConnectionLost26));
_e14122->_m16912(new ConnectionInvalidVersionDetectedListener(this, &T801::onInvalidVersionDetected27));
}

//@Override
void T801::stop() {
;
_j14138 = true;
if (_e14122 != 0 && _e14122->_m16915() != 0) {
_e14122->_m16916(new StopPlugConnectionRequest(), new StopPlugConnectionResponse());
} else {
_m16924();
}
}

void T801::_m16924() {
;
_j14138 = true;
if (_f14125 != 0) {
_f14125->_m16903();
}
if (_e14122 != 0) {
_e14122->_m16903();
}
for (unsigned int _j6094 = 0; _j6094 < (unsigned int)_k14123->size(); _j6094++) {
T800* _i6095 = (*_k14123)[_j6094];
_i6095->_m16903();
}
ConnectionStop* _i14197 = new ConnectionStop();
_m16920(_i14197, true, false, true);
}

//@Override
const char* T801::sendMessage(Message* message) {
void* _w6097 = _cloneSerializable(message);
return _sendMessage0((Message*)_w6097);
}

//@Override
const char* T801::_sendMessage0(Message* message) {
const char* _k6098 = _m16936();
message->setMessageId(_k6098);
;
_e14122->_m16905(message);
delete message;
return _k6098;
}

const char* T801::_request0(Message* message, void* handler) {
;
_m16937(message, handler);
return _sendMessage0(message);
}

Message* T801::_m16937(Message* _e14200, void* _n14201) {
const char* _o14202 = _m16938();
_e14200->setRequestId(_o14202);
(*_r14127)[_o14202] = _n14201;
return _e14200;
}

const char* T801::_m16938() {
return NUtils::concat("", _p14129++);
}

const char* T801::_m16936() {
if (_v14132 != 0) {
const char* _b14203 = NUtils::concat(_v14132, "_");
const char* _j6101 = NUtils::concat(_b14203, _t14130++);
delete _b14203;
return _j6101;
} else {
return NUtils::concat("", _t14130++);
}
}

//@Override
const char* T801::sendGameMessage(GameMessage* gameMessage, const char* gameId) {
;
const char* _w14205 = _m16936();
gameMessage->setMessageId(_w14205);
gameMessage->setGameId(gameId);
T800* _r14206 = 0;
for (unsigned int _y14207 = 0; _y14207 < (unsigned int)_k14123->size(); _y14207++) {
T800* _o14208 = (*_k14123)[_y14207];
if (_o14208->_m16939(gameId)) {
_r14206 = _o14208;
}
}
if (_r14206 != 0) {
_r14206->_m16905(gameMessage);
} else {
_e14122->_m16905(gameMessage);
}
return _w14205;
}

void* T801::_cloneSerializable(Serializable* _h14198) {
if(_h14198){return _h14198->clone();}return 0;
}

//@Override
std::vector<Message*>* T801::pump() {
return _y14128->pump();
}

void T801::_m16928(StartDetails* warningDetails) {
Notifications::toast("A new version is available ! , you should download it");
}

void T801::_m16919(StartDetails* _c14210) {
const char* _f14211 = "A new version is available ! , you need to download it";
Notifications::toast(_f14211);
}

const char* T801::_m16931() {
return NStorage::getItem(T801::_i14119);
}

int T801::_m16921() {
return 1;
}

int T801::_m16922() {
return 1;
}

void T801::_m16927(const char* _o14212) {
_b14141 = _dupString(_o14212);
NStorage::setItem(T801::_i14119, _b14141);
}

const char* T801::_dupString(const char* str) {
if(str){return strdup(str);}return 0;
}

void T801::_m16929(BuyProductUrl* _s14213) {
}

void T801::openWebView(OpenUrl* openUrl) {
Net::openWebView(openUrl->getUrl());
delete openUrl;
}

void T801::_m16926(const char* _y14214) {
this->_v14132 = _dupString(_y14214);
}

void T801::setPlayerDebugId(const char* playerDebugId) {
this->_r14133 = playerDebugId;
}

T801::~T801(){
if (_w14120) {
delete _w14120;
_w14120=0;
}
if (_h14121) {
delete _h14121;
_h14121=0;
}
if (_e14122) {
delete _e14122;
_e14122=0;
}
if (_k14123) {
for (unsigned int i=0; i < _k14123->size(); i++) {
delete (*_k14123)[i];
}
delete _k14123;
_k14123=0;;
}
if (_f14125) {
delete _f14125;
_f14125=0;
}
if (_v14126) {
delete _v14126;
_v14126=0;
}
if (_y14128) {
delete _y14128;
_y14128=0;
}
if (_f6037) {
delete _f6037;
_f6037 = 0;
}
if (_v14132) {
delete _v14132;
_v14132 = 0;
}
if (_r14133) {
delete _r14133;
_r14133 = 0;
}
if (_s14135) {
delete _s14135;
_s14135 = 0;
}
if (_b14141) {
delete _b14141;
_b14141 = 0;
}
if (_y14143) {
delete _y14143;
_y14143=0;
}
}

//@Override
void T801::onMessage14(Message* message2) {
_m16923(message2);
}

//@Override
void T801::onConnectionReady15() {
Handshake* _i14165 = new Handshake();
_i14165->setReason(HandshakeState::OPEN_SLAVE_CONNECTION);
_i14165->setPlayerIdsStored(_b14141);
_i14165->setSessionId(_v14132);
_v14124->_m16905(_i14165);
delete _i14165;
}

//@Override
void T801::onConnectionLost16() {
_k14123->erase(std::find(_k14123->begin(), _k14123->end(), _v14124));
}

//@Override
void T801::onConnectionFail17() {
_k14123->erase(std::find(_k14123->begin(), _k14123->end(), _v14124));
}

//@Override
void T801::onMessage18(Message* message2) {
;
if (dynamic_cast<OpenConnection*>(message2) != 0 || dynamic_cast<HandshakeResponse*>(message2) != 0 || dynamic_cast<BuyProductUrl*>(message2) != 0) {
delete message2;
return;
}
if (dynamic_cast<JoinGameResponse*>(message2) != 0) {
JoinGameResponse* _l14167 = (JoinGameResponse*)message2;
NGame* _y14168 = _l14167->getGame();
_v14124->_m16925(_dupString(_y14168->getId()));
}
_m16920(message2, true, true, true);
}

//@Override
void T801::onMessage19(Message* message) {
_m16917(message);
}

//@Override
void T801::onConnectionReady20() {
;
DnsRequest* _y14188 = new DnsRequest();
_y14188->setGameId(_s14135);
_y14188->setGameVersion(_m16921());
_y14188->setGameDeployedVersion(_m16922());
_y14188->setPlatform(Platform::get());
_f14125->_m16905(_y14188);
delete _y14188;
}

//@Override
void T801::onConnectionLost21() {
_w14120->error("x12-plug lost");
_f14125->_m16903();
_m16935();
}

//@Override
void T801::onConnectionFail22() {
_w14120->error("x12-plug fail");
_f14125->_m16903();
if (_q14134 == HandshakeState::BALANCE) {
_m16935();
} else {
StartResponse* _h14172 = new StartResponse();
_h14172->setStartStatus(StartStatus::FAILED);
_m16920(_h14172, true, false, true);
}
}

//@Override
void T801::onInvalidVersionDetected23() {
_w14120->error("x12-plug invalid version detected");
InvalidVersion* _x6089 = new InvalidVersion();
_m16920(_x6089, true, false, true);
}

//@Override
void T801::onConnectionReady24() {
;
Handshake* _n14191 = new Handshake();
_n14191->setReason(_q14134);
_n14191->setSessionId(_v14132);
_n14191->setSpId(GameStore::getSPId());
_n14191->setDebugSpId(_r14133);
_n14191->setPlayerIdsStored(_b14141);
_n14191->setPlatform(Platform::get());
_sendMessage0(_n14191);
}

//@Override
void T801::onConnectionFail25() {
;
_e14122->_m16903();
if (!_q14139) {
_m16935();
} else {
StartResponse* _q14192 = new StartResponse();
_q14192->setStartStatus(StartStatus::FAILED);
_m16920(_q14192, true, false, true);
}
}

//@Override
void T801::onConnectionLost26() {
if (_j14138) {
return;
}
_w14120->error("gs-plug lost");
_e14122->_m16903();
if (_q14134 != HandshakeState::BALANCE) {
_q14134 = HandshakeState::BALANCE;
ConnectionInterrupted* _d14193 = new ConnectionInterrupted();
_m16920(_d14193, true, false, true);
} else {
_w14120->error("Balance failed : onConnectionLost - Retry to balance connection");
}
_m16935();
}

//@Override
void T801::onInvalidVersionDetected27() {
_w14120->error("gs-plug  invalid version detected");
InvalidVersion* _c14194 = new InvalidVersion();
_m16920(_c14194, true, false, true);
}


#include "GetFriendsByPlayerIdRequest.h"

short GetFriendsByPlayerIdRequest::serializerID = -10196;













const char* GetFriendsByPlayerIdRequest::getMessageId() {
    return _MessageId;
}

void GetFriendsByPlayerIdRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetFriendsByPlayerIdRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetFriendsByPlayerIdRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetFriendsByPlayerIdRequest::getRequestId() {
return _RequestId;
}

void GetFriendsByPlayerIdRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetFriendsByPlayerIdRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetFriendsByPlayerIdRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* GetFriendsByPlayerIdRequest::getPlayerId() {
return _PlayerId;
}

void GetFriendsByPlayerIdRequest::setPlayerId(const char* value) {
if (_PlayerId && _PlayerId != value) {
delete _PlayerId;
}
if (value) {
_PlayerId = strdup(value);
} else {
_PlayerId = 0;
}
_PlayerIdSet = true;
}

bool GetFriendsByPlayerIdRequest::isPlayerIdSet() {
return _PlayerIdSet;
}

void GetFriendsByPlayerIdRequest::unSetPlayerId() {
_PlayerIdSet = false;
}

//@Override
short GetFriendsByPlayerIdRequest::getSerializerID() {
return serializerID;
}

void* GetFriendsByPlayerIdRequest::clone() {
GetFriendsByPlayerIdRequest* _h15123 = new GetFriendsByPlayerIdRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15123->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15123->setRequestId(_RequestId);
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_h15123->setPlayerId(_PlayerId);
}
return _h15123;
}

const char* GetFriendsByPlayerIdRequest::toString() {
const char* _i15124 = "";
_i15124 = NUtils::concat(_i15124, NUtils::concat(NUtils::concat("[", "GetFriendsByPlayerIdRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15124 = NUtils::concat(_i15124, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15124 = NUtils::concat(_i15124, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_i15124 = NUtils::concat(_i15124, NUtils::concat(NUtils::concat("_PlayerId=", _PlayerId), "| "));
}
_i15124 = NUtils::concat(_i15124, "]");
return _i15124;
}

GetFriendsByPlayerIdRequest::GetFriendsByPlayerIdRequest(){
this->_PlayerIdSet = false;
this->_PlayerId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetFriendsByPlayerIdRequest::~GetFriendsByPlayerIdRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_PlayerId) {
delete _PlayerId;
_PlayerId = 0;
}
}


#include "StartGameStatus.h"

std::vector<StartGameStatus*>* StartGameStatus::_values = new std::vector<StartGameStatus*>();

StartGameStatus* StartGameStatus::STARTED = new StartGameStatus("STARTED", 0);

StartGameStatus* StartGameStatus::ALREADY_STARTED = new StartGameStatus("ALREADY_STARTED", 1);

StartGameStatus* StartGameStatus::UNKNOWN_GAME = new StartGameStatus("UNKNOWN_GAME", 2);

StartGameStatus* StartGameStatus::INVALID_CALL = new StartGameStatus("INVALID_CALL", 3);

StartGameStatus* StartGameStatus::INTERNAL_ERROR = new StartGameStatus("INTERNAL_ERROR", 4);

std::vector<StartGameStatus*>* StartGameStatus::values() {
    return _values;
}





int StartGameStatus::getValue() {
return _value;
}

const char* StartGameStatus::name() {
return _name;
}

int StartGameStatus::ordinal() {
return _value;
}

StartGameStatus::StartGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

StartGameStatus* StartGameStatus::fromValue(int value) {
for (unsigned int _x5993 = 0; _x5993 < (unsigned int)_values->size(); _x5993++) {
StartGameStatus* _u5994 = (*_values)[_x5993];
if (_u5994->getValue() == value) {
return _u5994;
}
}
return 0;
}

StartGameStatus* StartGameStatus::valueOf(const char* name) {
for (unsigned int _x14089 = 0; _x14089 < (unsigned int)_values->size(); _x14089++) {
StartGameStatus* _n14090 = (*_values)[_x14089];
if (strcmp(name, _n14090->name()) == 0) {
return _n14090;
}
}
return 0;
}

//@Override
short StartGameStatus::getSerializerID() {
return -10618;
}

const char* StartGameStatus::toString() {
return NUtils::concat("StartGameStatus.", _name);
}

void* StartGameStatus::clone() {
return this;
}

StartGameStatus::~StartGameStatus(){
}


#include "BuyProductUrl.h"

short BuyProductUrl::serializerID = -3109;













const char* BuyProductUrl::getMessageId() {
    return _MessageId;
}

void BuyProductUrl::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool BuyProductUrl::isMessageIdSet() {
return _MessageIdSet;
}

void BuyProductUrl::unSetMessageId() {
_MessageIdSet = false;
}

const char* BuyProductUrl::getRequestId() {
return _RequestId;
}

void BuyProductUrl::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool BuyProductUrl::isRequestIdSet() {
return _RequestIdSet;
}

void BuyProductUrl::unSetRequestId() {
_RequestIdSet = false;
}

const char* BuyProductUrl::getUrl() {
return _url;
}

void BuyProductUrl::setUrl(const char* value) {
if (_url && _url != value) {
delete _url;
}
if (value) {
_url = strdup(value);
} else {
_url = 0;
}
_urlSet = true;
}

bool BuyProductUrl::isurlSet() {
return _urlSet;
}

void BuyProductUrl::unSeturl() {
_urlSet = false;
}

//@Override
short BuyProductUrl::getSerializerID() {
return serializerID;
}

void* BuyProductUrl::clone() {
BuyProductUrl* _f10385 = new BuyProductUrl();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f10385->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f10385->setRequestId(_RequestId);
}
if (_urlSet == true && Utils::isNull(_url) == false) {
_f10385->setUrl(_url);
}
return _f10385;
}

const char* BuyProductUrl::toString() {
const char* _r10386 = "";
_r10386 = NUtils::concat(_r10386, NUtils::concat(NUtils::concat("[", "BuyProductUrl"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r10386 = NUtils::concat(_r10386, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r10386 = NUtils::concat(_r10386, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_urlSet == true && Utils::isNull(_url) == false) {
_r10386 = NUtils::concat(_r10386, NUtils::concat(NUtils::concat("_url=", _url), "| "));
}
_r10386 = NUtils::concat(_r10386, "]");
return _r10386;
}

BuyProductUrl::BuyProductUrl(){
this->_urlSet = false;
this->_url = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

BuyProductUrl::~BuyProductUrl(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_url) {
delete _url;
_url = 0;
}
}


#include "GetStorablesRequest.h"

short GetStorablesRequest::serializerID = -10777;













const char* GetStorablesRequest::getMessageId() {
    return _MessageId;
}

void GetStorablesRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetStorablesRequest::isMessageIdSet() {
return _MessageIdSet;
}

void GetStorablesRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetStorablesRequest::getRequestId() {
return _RequestId;
}

void GetStorablesRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetStorablesRequest::isRequestIdSet() {
return _RequestIdSet;
}

void GetStorablesRequest::unSetRequestId() {
_RequestIdSet = false;
}

NuggetaQuery* GetStorablesRequest::getDbQuery() {
return _DbQuery;
}

void GetStorablesRequest::setDbQuery(NuggetaQuery* value) {
if (_DbQuery && _DbQuery != value) {
delete _DbQuery;
}
_DbQuery = value;
_DbQuerySet = true;
}

bool GetStorablesRequest::isDbQuerySet() {
return _DbQuerySet;
}

void GetStorablesRequest::unSetDbQuery() {
_DbQuerySet = false;
}

//@Override
short GetStorablesRequest::getSerializerID() {
return serializerID;
}

void* GetStorablesRequest::clone() {
GetStorablesRequest* _s14229 = new GetStorablesRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s14229->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s14229->setRequestId(_RequestId);
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_s14229->setDbQuery((NuggetaQuery*)(_DbQuery->clone()));
}
return _s14229;
}

const char* GetStorablesRequest::toString() {
const char* _e14230 = "";
_e14230 = NUtils::concat(_e14230, NUtils::concat(NUtils::concat("[", "GetStorablesRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e14230 = NUtils::concat(_e14230, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e14230 = NUtils::concat(_e14230, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_DbQuerySet == true && Utils::isNull(_DbQuery) == false) {
_e14230 = NUtils::concat(_e14230, NUtils::concat(NUtils::concat("_DbQuery=", _DbQuery->toString()), "| "));
}
_e14230 = NUtils::concat(_e14230, "]");
return _e14230;
}

GetStorablesRequest::GetStorablesRequest(){
this->_DbQuerySet = false;
this->_DbQuery = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetStorablesRequest::~GetStorablesRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_DbQuery) {
delete _DbQuery;
_DbQuery=0;
}
}


#include "MatchMakingType.h"

std::vector<MatchMakingType*>* MatchMakingType::_values = new std::vector<MatchMakingType*>();

MatchMakingType* MatchMakingType::CHALLENGE = new MatchMakingType("CHALLENGE", 0);

MatchMakingType* MatchMakingType::SEARCH_GAME = new MatchMakingType("SEARCH_GAME", 1);

std::vector<MatchMakingType*>* MatchMakingType::values() {
    return _values;
}





int MatchMakingType::getValue() {
return _value;
}

const char* MatchMakingType::name() {
return _name;
}

int MatchMakingType::ordinal() {
return _value;
}

MatchMakingType::MatchMakingType(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

MatchMakingType* MatchMakingType::fromValue(int value) {
for (unsigned int _o6652 = 0; _o6652 < (unsigned int)_values->size(); _o6652++) {
MatchMakingType* _x6653 = (*_values)[_o6652];
if (_x6653->getValue() == value) {
return _x6653;
}
}
return 0;
}

MatchMakingType* MatchMakingType::valueOf(const char* name) {
for (unsigned int _h14881 = 0; _h14881 < (unsigned int)_values->size(); _h14881++) {
MatchMakingType* _s14882 = (*_values)[_h14881];
if (strcmp(name, _s14882->name()) == 0) {
return _s14882;
}
}
return 0;
}

//@Override
short MatchMakingType::getSerializerID() {
return -2;
}

const char* MatchMakingType::toString() {
return NUtils::concat("MatchMakingType.", _name);
}

void* MatchMakingType::clone() {
return this;
}

MatchMakingType::~MatchMakingType(){
}


#include "UnjoinGameStatus.h"

std::vector<UnjoinGameStatus*>* UnjoinGameStatus::_values = new std::vector<UnjoinGameStatus*>();

UnjoinGameStatus* UnjoinGameStatus::SUCCESS = new UnjoinGameStatus("SUCCESS", 0);

UnjoinGameStatus* UnjoinGameStatus::GAME_NOT_FOUND = new UnjoinGameStatus("GAME_NOT_FOUND", 1);

UnjoinGameStatus* UnjoinGameStatus::FAILURE = new UnjoinGameStatus("FAILURE", 2);

UnjoinGameStatus* UnjoinGameStatus::INVALID_CALL = new UnjoinGameStatus("INVALID_CALL", 3);

UnjoinGameStatus* UnjoinGameStatus::INTERNAL_ERROR = new UnjoinGameStatus("INTERNAL_ERROR", 4);

std::vector<UnjoinGameStatus*>* UnjoinGameStatus::values() {
    return _values;
}





int UnjoinGameStatus::getValue() {
return _value;
}

const char* UnjoinGameStatus::name() {
return _name;
}

int UnjoinGameStatus::ordinal() {
return _value;
}

UnjoinGameStatus::UnjoinGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

UnjoinGameStatus* UnjoinGameStatus::fromValue(int value) {
for (unsigned int _d7039 = 0; _d7039 < (unsigned int)_values->size(); _d7039++) {
UnjoinGameStatus* _m7040 = (*_values)[_d7039];
if (_m7040->getValue() == value) {
return _m7040;
}
}
return 0;
}

UnjoinGameStatus* UnjoinGameStatus::valueOf(const char* name) {
for (unsigned int _c15427 = 0; _c15427 < (unsigned int)_values->size(); _c15427++) {
UnjoinGameStatus* _i15428 = (*_values)[_c15427];
if (strcmp(name, _i15428->name()) == 0) {
return _i15428;
}
}
return 0;
}

//@Override
short UnjoinGameStatus::getSerializerID() {
return -10518;
}

const char* UnjoinGameStatus::toString() {
return NUtils::concat("UnjoinGameStatus.", _name);
}

void* UnjoinGameStatus::clone() {
return this;
}

UnjoinGameStatus::~UnjoinGameStatus(){
}


#include "ConnectionInvalidVersionDetectedListenerCollection.h"



void ConnectionInvalidVersionDetectedListenerCollection::fireInvalidVersionDetected() {
    int _e14101 = connectionInvalidVersionDetectedListeners->size();
    for (unsigned int _m14102 = 0; _m14102 < (unsigned int)_e14101; _m14102++) {
        ConnectionInvalidVersionDetectedListener* _d14103 = (*connectionInvalidVersionDetectedListeners)[_m14102];
        (*_d14103)();
    }
}

std::vector<ConnectionInvalidVersionDetectedListener*>* ConnectionInvalidVersionDetectedListenerCollection::getListeners() {
return connectionInvalidVersionDetectedListeners;
}

void ConnectionInvalidVersionDetectedListenerCollection::add(ConnectionInvalidVersionDetectedListener* listener) {
connectionInvalidVersionDetectedListeners->push_back(listener);
}

void ConnectionInvalidVersionDetectedListenerCollection::remove(ConnectionInvalidVersionDetectedListener* listener) {
int _n14104 = connectionInvalidVersionDetectedListeners->size();
if (_n14104 > 0) {
int _d14105 = std::distance(connectionInvalidVersionDetectedListeners->begin(), std::find(connectionInvalidVersionDetectedListeners->begin(), connectionInvalidVersionDetectedListeners->end(), listener));
if (_d14105 >= 0)
connectionInvalidVersionDetectedListeners->erase(connectionInvalidVersionDetectedListeners->begin() + _d14105);
}
}

ConnectionInvalidVersionDetectedListenerCollection::ConnectionInvalidVersionDetectedListenerCollection(){
this->connectionInvalidVersionDetectedListeners = new std::vector<ConnectionInvalidVersionDetectedListener*>();
}

ConnectionInvalidVersionDetectedListenerCollection::~ConnectionInvalidVersionDetectedListenerCollection(){
if (connectionInvalidVersionDetectedListeners) {
for (unsigned int i=0; i < connectionInvalidVersionDetectedListeners->size(); i++) {
delete (*connectionInvalidVersionDetectedListeners)[i];
}
delete connectionInvalidVersionDetectedListeners;
connectionInvalidVersionDetectedListeners=0;;
}
}


#include "SubmitScoreResponse.h"

short SubmitScoreResponse::serializerID = -10299;













const char* SubmitScoreResponse::getMessageId() {
    return _MessageId;
}

void SubmitScoreResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SubmitScoreResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SubmitScoreResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SubmitScoreResponse::getRequestId() {
return _RequestId;
}

void SubmitScoreResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SubmitScoreResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SubmitScoreResponse::unSetRequestId() {
_RequestIdSet = false;
}

SubmitScoreStatus* SubmitScoreResponse::getSubmitScoreStatus() {
return _SubmitScoreStatus;
}

void SubmitScoreResponse::setSubmitScoreStatus(SubmitScoreStatus* value) {
_SubmitScoreStatus = value;
_SubmitScoreStatusSet = true;
}

bool SubmitScoreResponse::isSubmitScoreStatusSet() {
return _SubmitScoreStatusSet;
}

void SubmitScoreResponse::unSetSubmitScoreStatus() {
_SubmitScoreStatusSet = false;
}

//@Override
short SubmitScoreResponse::getSerializerID() {
return serializerID;
}

void* SubmitScoreResponse::clone() {
SubmitScoreResponse* _u15176 = new SubmitScoreResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u15176->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u15176->setRequestId(_RequestId);
}
if (_SubmitScoreStatusSet == true && Utils::isNull(_SubmitScoreStatus) == false) {
_u15176->setSubmitScoreStatus(_SubmitScoreStatus);
}
return _u15176;
}

const char* SubmitScoreResponse::toString() {
const char* _i15177 = "";
_i15177 = NUtils::concat(_i15177, NUtils::concat(NUtils::concat("[", "SubmitScoreResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i15177 = NUtils::concat(_i15177, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i15177 = NUtils::concat(_i15177, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SubmitScoreStatusSet == true && Utils::isNull(_SubmitScoreStatus) == false) {
_i15177 = NUtils::concat(_i15177, NUtils::concat(NUtils::concat("_SubmitScoreStatus=", _SubmitScoreStatus->toString()), "| "));
}
_i15177 = NUtils::concat(_i15177, "]");
return _i15177;
}

SubmitScoreResponse::SubmitScoreResponse(){
this->_SubmitScoreStatusSet = false;
this->_SubmitScoreStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SubmitScoreResponse::~SubmitScoreResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "SaveGameResponse.h"

short SaveGameResponse::serializerID = -10959;

















const char* SaveGameResponse::getMessageId() {
    return _MessageId;
}

void SaveGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SaveGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void SaveGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* SaveGameResponse::getRequestId() {
return _RequestId;
}

void SaveGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SaveGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void SaveGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

SaveGameStatus* SaveGameResponse::getSaveGameStatus() {
return _SaveGameStatus;
}

void SaveGameResponse::setSaveGameStatus(SaveGameStatus* value) {
_SaveGameStatus = value;
_SaveGameStatusSet = true;
}

bool SaveGameResponse::isSaveGameStatusSet() {
return _SaveGameStatusSet;
}

void SaveGameResponse::unSetSaveGameStatus() {
_SaveGameStatusSet = false;
}

const char* SaveGameResponse::getGameId() {
return _GameId;
}

void SaveGameResponse::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool SaveGameResponse::isGameIdSet() {
return _GameIdSet;
}

void SaveGameResponse::unSetGameId() {
_GameIdSet = false;
}

//@Override
short SaveGameResponse::getSerializerID() {
return serializerID;
}

void* SaveGameResponse::clone() {
SaveGameResponse* _j14099 = new SaveGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j14099->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j14099->setRequestId(_RequestId);
}
if (_SaveGameStatusSet == true && Utils::isNull(_SaveGameStatus) == false) {
_j14099->setSaveGameStatus(_SaveGameStatus);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_j14099->setGameId(_GameId);
}
return _j14099;
}

const char* SaveGameResponse::toString() {
const char* _v14100 = "";
_v14100 = NUtils::concat(_v14100, NUtils::concat(NUtils::concat("[", "SaveGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v14100 = NUtils::concat(_v14100, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v14100 = NUtils::concat(_v14100, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_SaveGameStatusSet == true && Utils::isNull(_SaveGameStatus) == false) {
_v14100 = NUtils::concat(_v14100, NUtils::concat(NUtils::concat("_SaveGameStatus=", _SaveGameStatus->toString()), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_v14100 = NUtils::concat(_v14100, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_v14100 = NUtils::concat(_v14100, "]");
return _v14100;
}

SaveGameResponse::SaveGameResponse(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_SaveGameStatusSet = false;
this->_SaveGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SaveGameResponse::~SaveGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "GetStorablesResponse.h"

short GetStorablesResponse::serializerID = -10779;

















const char* GetStorablesResponse::getMessageId() {
    return _MessageId;
}

void GetStorablesResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetStorablesResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetStorablesResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetStorablesResponse::getRequestId() {
return _RequestId;
}

void GetStorablesResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetStorablesResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetStorablesResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetStorablesStatus* GetStorablesResponse::getGetStorablesStatus() {
return _GetStorablesStatus;
}

void GetStorablesResponse::setGetStorablesStatus(GetStorablesStatus* value) {
_GetStorablesStatus = value;
_GetStorablesStatusSet = true;
}

bool GetStorablesResponse::isGetStorablesStatusSet() {
return _GetStorablesStatusSet;
}

void GetStorablesResponse::unSetGetStorablesStatus() {
_GetStorablesStatusSet = false;
}

std::vector<Storable*>* GetStorablesResponse::getStorables() {
return _Storables;
}

void GetStorablesResponse::setStorables(std::vector<Storable*>* value) {
if (_Storables) {
for (unsigned int i=0; i < _Storables->size(); i++) {
delete (*_Storables)[i];
}
}
if (_Storables && _Storables != value) {
delete _Storables;
}
_Storables = value;
_StorablesSet = true;
}

bool GetStorablesResponse::isStorablesSet() {
return _StorablesSet;
}

void GetStorablesResponse::unSetStorables() {
_StorablesSet = false;
}

//@Override
short GetStorablesResponse::getSerializerID() {
return serializerID;
}

void* GetStorablesResponse::clone() {
GetStorablesResponse* _k15753 = new GetStorablesResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k15753->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k15753->setRequestId(_RequestId);
}
if (_GetStorablesStatusSet == true && Utils::isNull(_GetStorablesStatus) == false) {
_k15753->setGetStorablesStatus(_GetStorablesStatus);
}
if (_StorablesSet == true && Utils::isNull(_Storables) == false) {
std::vector<Storable*>* _n15754 = new std::vector<Storable*>();
for (unsigned int i = 0; i < (unsigned int)_Storables->size(); i++) {
void* _b15755 = _Storables->at(i);
if (_b15755 != 0) {
_n15754->push_back((Storable*)((Storable*)_b15755)->clone());
} else {
_n15754->push_back((Storable*)_b15755);
}
}
_k15753->setStorables(_n15754);
}
return _k15753;
}

const char* GetStorablesResponse::toString() {
const char* _x15756 = "";
_x15756 = NUtils::concat(_x15756, NUtils::concat(NUtils::concat("[", "GetStorablesResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15756 = NUtils::concat(_x15756, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15756 = NUtils::concat(_x15756, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetStorablesStatusSet == true && Utils::isNull(_GetStorablesStatus) == false) {
_x15756 = NUtils::concat(_x15756, NUtils::concat(NUtils::concat("_GetStorablesStatus=", _GetStorablesStatus->toString()), "| "));
}
if (_StorablesSet == true && Utils::isNull(_Storables) == false) {
_x15756 = NUtils::concat(_x15756, NUtils::concat(NUtils::concat("_Storables=", "N/A"), "| "));
}
_x15756 = NUtils::concat(_x15756, "]");
return _x15756;
}

GetStorablesResponse::GetStorablesResponse(){
this->_StorablesSet = false;
this->_Storables = new std::vector<Storable*>();
this->_GetStorablesStatusSet = false;
this->_GetStorablesStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetStorablesResponse::~GetStorablesResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Storables) {
for (unsigned int i=0; i < _Storables->size(); i++) {
delete (*_Storables)[i];
}
delete _Storables;
_Storables=0;;
}
}


#include "ConnectionResumed.h"

short ConnectionResumed::serializerID = -3089;









const char* ConnectionResumed::getMessageId() {
    return _MessageId;
}

void ConnectionResumed::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ConnectionResumed::isMessageIdSet() {
return _MessageIdSet;
}

void ConnectionResumed::unSetMessageId() {
_MessageIdSet = false;
}

const char* ConnectionResumed::getRequestId() {
return _RequestId;
}

void ConnectionResumed::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ConnectionResumed::isRequestIdSet() {
return _RequestIdSet;
}

void ConnectionResumed::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short ConnectionResumed::getSerializerID() {
return serializerID;
}

void* ConnectionResumed::clone() {
ConnectionResumed* _p14964 = new ConnectionResumed();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p14964->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p14964->setRequestId(_RequestId);
}
return _p14964;
}

const char* ConnectionResumed::toString() {
const char* _c14965 = "";
_c14965 = NUtils::concat(_c14965, NUtils::concat(NUtils::concat("[", "ConnectionResumed"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c14965 = NUtils::concat(_c14965, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c14965 = NUtils::concat(_c14965, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_c14965 = NUtils::concat(_c14965, "]");
return _c14965;
}

ConnectionResumed::ConnectionResumed(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ConnectionResumed::~ConnectionResumed(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "GameDispatcher.h"



void GameDispatcher::fireMessage(Message* message) {
}

void GameDispatcher::addGameMessageListener(GameMessageListener* listener) {
globalListeners->push_back(listener);
}

void GameDispatcher::removeGameMessageListener(GameMessageListener* listener) {
globalListeners->erase(std::find(globalListeners->begin(), globalListeners->end(), listener));
}

void GameDispatcher::clear() {
globalListeners->clear();
}

GameDispatcher::GameDispatcher(){
this->globalListeners = new std::vector<GameMessageListener*>();
}

GameDispatcher::~GameDispatcher(){
if (globalListeners) {
for (unsigned int i=0; i < globalListeners->size(); i++) {
delete (*globalListeners)[i];
}
delete globalListeners;
globalListeners=0;;
}
}


#include "AbstractRoom.h"

short AbstractRoom::serializerID = -3007;

















const char* AbstractRoom::getStoreId() {
    return _storeId;
}

void AbstractRoom::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool AbstractRoom::isstoreIdSet() {
return _storeIdSet;
}

void AbstractRoom::unSetstoreId() {
_storeIdSet = false;
}

const char* AbstractRoom::getId() {
return _Id;
}

void AbstractRoom::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool AbstractRoom::isIdSet() {
return _IdSet;
}

void AbstractRoom::unSetId() {
_IdSet = false;
}

const char* AbstractRoom::getName() {
return _Name;
}

void AbstractRoom::setName(const char* value) {
if (_Name && _Name != value) {
delete _Name;
}
if (value) {
_Name = strdup(value);
} else {
_Name = 0;
}
_NameSet = true;
}

bool AbstractRoom::isNameSet() {
return _NameSet;
}

void AbstractRoom::unSetName() {
_NameSet = false;
}

std::vector<NPlayer*>* AbstractRoom::getPlayers() {
return _Players;
}

void AbstractRoom::setPlayers(std::vector<NPlayer*>* value) {
if (_Players) {
for (unsigned int i=0; i < _Players->size(); i++) {
delete (*_Players)[i];
}
}
if (_Players && _Players != value) {
delete _Players;
}
_Players = value;
_PlayersSet = true;
}

bool AbstractRoom::isPlayersSet() {
return _PlayersSet;
}

void AbstractRoom::unSetPlayers() {
_PlayersSet = false;
}

//@Override
short AbstractRoom::getSerializerID() {
return serializerID;
}

void* AbstractRoom::clone() {
return 0;
}

const char* AbstractRoom::toString() {
const char* _f15165 = "";
_f15165 = NUtils::concat(_f15165, NUtils::concat(NUtils::concat("[", "AbstractRoom"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_f15165 = NUtils::concat(_f15165, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_f15165 = NUtils::concat(_f15165, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_f15165 = NUtils::concat(_f15165, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_PlayersSet == true && Utils::isNull(_Players) == false) {
_f15165 = NUtils::concat(_f15165, NUtils::concat(NUtils::concat("_Players=", "N/A"), "| "));
}
_f15165 = NUtils::concat(_f15165, "]");
return _f15165;
}

AbstractRoom::AbstractRoom(){
this->_PlayersSet = false;
this->_Players = new std::vector<NPlayer*>();
this->_NameSet = false;
this->_Name = 0;
this->_IdSet = false;
this->_Id = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

AbstractRoom::~AbstractRoom(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
if (_Name) {
delete _Name;
_Name = 0;
}
if (_Players) {
for (unsigned int i=0; i < _Players->size(); i++) {
delete (*_Players)[i];
}
delete _Players;
_Players=0;;
}
}


#include "NLeaderboard.h"

short NLeaderboard::serializerID = -3145;













const char* NLeaderboard::getId() {
    return _Id;
}

void NLeaderboard::setId(const char* value) {
if (_Id && _Id != value) {
    delete _Id;
}
if (value) {
    _Id = strdup(value);
} else {
    _Id = 0;
}
_IdSet = true;
}

bool NLeaderboard::isIdSet() {
return _IdSet;
}

void NLeaderboard::unSetId() {
_IdSet = false;
}

const char* NLeaderboard::getName() {
return _Name;
}

void NLeaderboard::setName(const char* value) {
if (_Name && _Name != value) {
delete _Name;
}
if (value) {
_Name = strdup(value);
} else {
_Name = 0;
}
_NameSet = true;
}

bool NLeaderboard::isNameSet() {
return _NameSet;
}

void NLeaderboard::unSetName() {
_NameSet = false;
}

std::vector<NLeaderboardEntry*>* NLeaderboard::getLeaderboardEntries() {
return _leaderboardEntries;
}

void NLeaderboard::setLeaderboardEntries(std::vector<NLeaderboardEntry*>* value) {
if (_leaderboardEntries) {
for (unsigned int i=0; i < _leaderboardEntries->size(); i++) {
delete (*_leaderboardEntries)[i];
}
}
if (_leaderboardEntries && _leaderboardEntries != value) {
delete _leaderboardEntries;
}
_leaderboardEntries = value;
_leaderboardEntriesSet = true;
}

bool NLeaderboard::isleaderboardEntriesSet() {
return _leaderboardEntriesSet;
}

void NLeaderboard::unSetleaderboardEntries() {
_leaderboardEntriesSet = false;
}

//@Override
short NLeaderboard::getSerializerID() {
return serializerID;
}

void* NLeaderboard::clone() {
NLeaderboard* _p14628 = new NLeaderboard();
if (_IdSet == true && Utils::isNull(_Id) == false) {
_p14628->setId(_Id);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_p14628->setName(_Name);
}
if (_leaderboardEntriesSet == true && Utils::isNull(_leaderboardEntries) == false) {
std::vector<NLeaderboardEntry*>* _g14629 = new std::vector<NLeaderboardEntry*>();
for (unsigned int i = 0; i < (unsigned int)_leaderboardEntries->size(); i++) {
void* _z14630 = _leaderboardEntries->at(i);
if (_z14630 != 0) {
_g14629->push_back((NLeaderboardEntry*)((NLeaderboardEntry*)_z14630)->clone());
} else {
_g14629->push_back((NLeaderboardEntry*)_z14630);
}
}
_p14628->setLeaderboardEntries(_g14629);
}
return _p14628;
}

const char* NLeaderboard::toString() {
const char* _m14631 = "";
_m14631 = NUtils::concat(_m14631, NUtils::concat(NUtils::concat("[", "NLeaderboard"), " --> "));
if (_IdSet == true && Utils::isNull(_Id) == false) {
_m14631 = NUtils::concat(_m14631, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_m14631 = NUtils::concat(_m14631, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_leaderboardEntriesSet == true && Utils::isNull(_leaderboardEntries) == false) {
_m14631 = NUtils::concat(_m14631, NUtils::concat(NUtils::concat("_leaderboardEntries=", "N/A"), "| "));
}
_m14631 = NUtils::concat(_m14631, "]");
return _m14631;
}

NLeaderboard::NLeaderboard(){
this->_leaderboardEntriesSet = false;
this->_leaderboardEntries = new std::vector<NLeaderboardEntry*>();
this->_NameSet = false;
this->_Name = 0;
this->_IdSet = false;
this->_Id = 0;
}

NLeaderboard::~NLeaderboard(){
if (_Id) {
delete _Id;
_Id = 0;
}
if (_Name) {
delete _Name;
_Name = 0;
}
if (_leaderboardEntries) {
for (unsigned int i=0; i < _leaderboardEntries->size(); i++) {
delete (*_leaderboardEntries)[i];
}
delete _leaderboardEntries;
_leaderboardEntries=0;;
}
}


#include "SubmitScoreStatus.h"

std::vector<SubmitScoreStatus*>* SubmitScoreStatus::_values = new std::vector<SubmitScoreStatus*>();

SubmitScoreStatus* SubmitScoreStatus::SUCCESS = new SubmitScoreStatus("SUCCESS", 0);

SubmitScoreStatus* SubmitScoreStatus::UNKNOWN_LEADERBOARD = new SubmitScoreStatus("UNKNOWN_LEADERBOARD", 1);

SubmitScoreStatus* SubmitScoreStatus::INVALID_CALL = new SubmitScoreStatus("INVALID_CALL", 4);

SubmitScoreStatus* SubmitScoreStatus::INTERNAL_ERROR = new SubmitScoreStatus("INTERNAL_ERROR", 5);

std::vector<SubmitScoreStatus*>* SubmitScoreStatus::values() {
    return _values;
}





int SubmitScoreStatus::getValue() {
return _value;
}

const char* SubmitScoreStatus::name() {
return _name;
}

int SubmitScoreStatus::ordinal() {
return _value;
}

SubmitScoreStatus::SubmitScoreStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SubmitScoreStatus* SubmitScoreStatus::fromValue(int value) {
for (unsigned int _k5786 = 0; _k5786 < (unsigned int)_values->size(); _k5786++) {
SubmitScoreStatus* _g5787 = (*_values)[_k5786];
if (_g5787->getValue() == value) {
return _g5787;
}
}
return 0;
}

SubmitScoreStatus* SubmitScoreStatus::valueOf(const char* name) {
for (unsigned int _p13824 = 0; _p13824 < (unsigned int)_values->size(); _p13824++) {
SubmitScoreStatus* _k13825 = (*_values)[_p13824];
if (strcmp(name, _k13825->name()) == 0) {
return _k13825;
}
}
return 0;
}

//@Override
short SubmitScoreStatus::getSerializerID() {
return -10298;
}

const char* SubmitScoreStatus::toString() {
return NUtils::concat("SubmitScoreStatus.", _name);
}

void* SubmitScoreStatus::clone() {
return this;
}

SubmitScoreStatus::~SubmitScoreStatus(){
}


#include "UpdateStorableStatus.h"

std::vector<UpdateStorableStatus*>* UpdateStorableStatus::_values = new std::vector<UpdateStorableStatus*>();

UpdateStorableStatus* UpdateStorableStatus::SUCCESS = new UpdateStorableStatus("SUCCESS", 0);

UpdateStorableStatus* UpdateStorableStatus::FAILURE = new UpdateStorableStatus("FAILURE", 1);

UpdateStorableStatus* UpdateStorableStatus::INVALID_CALL = new UpdateStorableStatus("INVALID_CALL", 2);

UpdateStorableStatus* UpdateStorableStatus::INTERNAL_ERROR = new UpdateStorableStatus("INTERNAL_ERROR", 3);

std::vector<UpdateStorableStatus*>* UpdateStorableStatus::values() {
    return _values;
}





int UpdateStorableStatus::getValue() {
return _value;
}

const char* UpdateStorableStatus::name() {
return _name;
}

int UpdateStorableStatus::ordinal() {
return _value;
}

UpdateStorableStatus::UpdateStorableStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

UpdateStorableStatus* UpdateStorableStatus::fromValue(int value) {
for (unsigned int _j6723 = 0; _j6723 < (unsigned int)_values->size(); _j6723++) {
UpdateStorableStatus* _g6724 = (*_values)[_j6723];
if (_g6724->getValue() == value) {
return _g6724;
}
}
return 0;
}

UpdateStorableStatus* UpdateStorableStatus::valueOf(const char* name) {
for (unsigned int _e14980 = 0; _e14980 < (unsigned int)_values->size(); _e14980++) {
UpdateStorableStatus* _r14981 = (*_values)[_e14980];
if (strcmp(name, _r14981->name()) == 0) {
return _r14981;
}
}
return 0;
}

//@Override
short UpdateStorableStatus::getSerializerID() {
return -10858;
}

const char* UpdateStorableStatus::toString() {
return NUtils::concat("UpdateStorableStatus.", _name);
}

void* UpdateStorableStatus::clone() {
return this;
}

UpdateStorableStatus::~UpdateStorableStatus(){
}


#include "GameChatNotification.h"

short GameChatNotification::serializerID = -3135;

















const char* GameChatNotification::getMessageId() {
    return _MessageId;
}

void GameChatNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GameChatNotification::isMessageIdSet() {
return _MessageIdSet;
}

void GameChatNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* GameChatNotification::getRequestId() {
return _RequestId;
}

void GameChatNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GameChatNotification::isRequestIdSet() {
return _RequestIdSet;
}

void GameChatNotification::unSetRequestId() {
_RequestIdSet = false;
}

NPlayer* GameChatNotification::getPlayer() {
return _player;
}

void GameChatNotification::setPlayer(NPlayer* value) {
if (_player && _player != value) {
delete _player;
}
_player = value;
_playerSet = true;
}

bool GameChatNotification::isplayerSet() {
return _playerSet;
}

void GameChatNotification::unSetplayer() {
_playerSet = false;
}

const char* GameChatNotification::getMessage() {
return _message;
}

void GameChatNotification::setMessage(const char* value) {
if (_message && _message != value) {
delete _message;
}
if (value) {
_message = strdup(value);
} else {
_message = 0;
}
_messageSet = true;
}

bool GameChatNotification::ismessageSet() {
return _messageSet;
}

void GameChatNotification::unSetmessage() {
_messageSet = false;
}

//@Override
short GameChatNotification::getSerializerID() {
return serializerID;
}

void* GameChatNotification::clone() {
GameChatNotification* _y15620 = new GameChatNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15620->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15620->setRequestId(_RequestId);
}
if (_playerSet == true && Utils::isNull(_player) == false) {
_y15620->setPlayer((NPlayer*)(_player->clone()));
}
if (_messageSet == true && Utils::isNull(_message) == false) {
_y15620->setMessage(_message);
}
return _y15620;
}

const char* GameChatNotification::toString() {
const char* _h15621 = "";
_h15621 = NUtils::concat(_h15621, NUtils::concat(NUtils::concat("[", "GameChatNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h15621 = NUtils::concat(_h15621, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h15621 = NUtils::concat(_h15621, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_playerSet == true && Utils::isNull(_player) == false) {
_h15621 = NUtils::concat(_h15621, NUtils::concat(NUtils::concat("_player=", _player->toString()), "| "));
}
if (_messageSet == true && Utils::isNull(_message) == false) {
_h15621 = NUtils::concat(_h15621, NUtils::concat(NUtils::concat("_message=", _message), "| "));
}
_h15621 = NUtils::concat(_h15621, "]");
return _h15621;
}

GameChatNotification::GameChatNotification(){
this->_messageSet = false;
this->_message = 0;
this->_playerSet = false;
this->_player = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GameChatNotification::~GameChatNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_player) {
delete _player;
_player=0;
}
if (_message) {
delete _message;
_message = 0;
}
}


#include "NuggetaQuery.h"

short NuggetaQuery::serializerID = -3093;

















const char* NuggetaQuery::getDomain() {
    return _domain;
}

void NuggetaQuery::setDomain(const char* value) {
if (_domain && _domain != value) {
    delete _domain;
}
if (value) {
    _domain = strdup(value);
} else {
    _domain = 0;
}
_domainSet = true;
}

bool NuggetaQuery::isdomainSet() {
return _domainSet;
}

void NuggetaQuery::unSetdomain() {
_domainSet = false;
}

int NuggetaQuery::getStart() {
return _start;
}

void NuggetaQuery::setStart(int value) {
_start = value;
_startSet = true;
}

bool NuggetaQuery::isstartSet() {
return _startSet;
}

void NuggetaQuery::unSetstart() {
_startSet = false;
}

int NuggetaQuery::getLimit() {
return _limit;
}

void NuggetaQuery::setLimit(int value) {
_limit = value;
_limitSet = true;
}

bool NuggetaQuery::islimitSet() {
return _limitSet;
}

void NuggetaQuery::unSetlimit() {
_limitSet = false;
}

const char* NuggetaQuery::getQuery() {
return _query;
}

void NuggetaQuery::setQuery(const char* value) {
if (_query && _query != value) {
delete _query;
}
if (value) {
_query = strdup(value);
} else {
_query = 0;
}
_querySet = true;
}

bool NuggetaQuery::isquerySet() {
return _querySet;
}

void NuggetaQuery::unSetquery() {
_querySet = false;
}

//@Override
short NuggetaQuery::getSerializerID() {
return serializerID;
}

void* NuggetaQuery::clone() {
NuggetaQuery* _j10360 = new NuggetaQuery();
if (_domainSet == true && Utils::isNull(_domain) == false) {
_j10360->setDomain(_domain);
}
if (_startSet == true && Utils::isNullInteger(_start) == false) {
_j10360->setStart(_start);
}
if (_limitSet == true && Utils::isNullInteger(_limit) == false) {
_j10360->setLimit(_limit);
}
if (_querySet == true && Utils::isNull(_query) == false) {
_j10360->setQuery(_query);
}
return _j10360;
}

const char* NuggetaQuery::toString() {
const char* _q10361 = "";
_q10361 = NUtils::concat(_q10361, NUtils::concat(NUtils::concat("[", "NuggetaQuery"), " --> "));
if (_domainSet == true && Utils::isNull(_domain) == false) {
_q10361 = NUtils::concat(_q10361, NUtils::concat(NUtils::concat("_domain=", _domain), "| "));
}
if (_startSet == true && Utils::isNullInteger(_start) == false) {
_q10361 = NUtils::concat(_q10361, NUtils::concat(NUtils::concat("_start=", _start), "| "));
}
if (_limitSet == true && Utils::isNullInteger(_limit) == false) {
_q10361 = NUtils::concat(_q10361, NUtils::concat(NUtils::concat("_limit=", _limit), "| "));
}
if (_querySet == true && Utils::isNull(_query) == false) {
_q10361 = NUtils::concat(_q10361, NUtils::concat(NUtils::concat("_query=", _query), "| "));
}
_q10361 = NUtils::concat(_q10361, "]");
return _q10361;
}

NuggetaQuery::NuggetaQuery(){
this->_querySet = false;
this->_query = 0;
this->_limitSet = false;
this->_limit = 0;
this->_startSet = false;
this->_start = 0;
this->_domainSet = false;
this->_domain = 0;
}

NuggetaQuery::~NuggetaQuery(){
if (_domain) {
delete _domain;
_domain = 0;
}
if (_query) {
delete _query;
_query = 0;
}
}


#include "NGameState.h"

short NGameState::serializerID = -3105;









const char* NGameState::getStoreId() {
    return _storeId;
}

void NGameState::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NGameState::isstoreIdSet() {
return _storeIdSet;
}

void NGameState::unSetstoreId() {
_storeIdSet = false;
}

std::vector<NWorldUpdate*>* NGameState::getUpdates() {
return _Updates;
}

void NGameState::setUpdates(std::vector<NWorldUpdate*>* value) {
if (_Updates) {
for (unsigned int i=0; i < _Updates->size(); i++) {
delete (*_Updates)[i];
}
}
if (_Updates && _Updates != value) {
delete _Updates;
}
_Updates = value;
_UpdatesSet = true;
}

bool NGameState::isUpdatesSet() {
return _UpdatesSet;
}

void NGameState::unSetUpdates() {
_UpdatesSet = false;
}

//@Override
short NGameState::getSerializerID() {
return serializerID;
}

void* NGameState::clone() {
NGameState* _w10723 = new NGameState();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_w10723->setStoreId(_storeId);
}
if (_UpdatesSet == true && Utils::isNull(_Updates) == false) {
std::vector<NWorldUpdate*>* _x10724 = new std::vector<NWorldUpdate*>();
for (unsigned int i = 0; i < (unsigned int)_Updates->size(); i++) {
void* _n10725 = _Updates->at(i);
if (_n10725 != 0) {
_x10724->push_back((NWorldUpdate*)((NWorldUpdate*)_n10725)->clone());
} else {
_x10724->push_back((NWorldUpdate*)_n10725);
}
}
_w10723->setUpdates(_x10724);
}
return _w10723;
}

const char* NGameState::toString() {
const char* _n10726 = "";
_n10726 = NUtils::concat(_n10726, NUtils::concat(NUtils::concat("[", "NGameState"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_n10726 = NUtils::concat(_n10726, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_UpdatesSet == true && Utils::isNull(_Updates) == false) {
_n10726 = NUtils::concat(_n10726, NUtils::concat(NUtils::concat("_Updates=", "N/A"), "| "));
}
_n10726 = NUtils::concat(_n10726, "]");
return _n10726;
}

NGameState::NGameState(){
this->_UpdatesSet = false;
this->_Updates = new std::vector<NWorldUpdate*>();
this->_storeIdSet = false;
this->_storeId = 0;
}

NGameState::~NGameState(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Updates) {
for (unsigned int i=0; i < _Updates->size(); i++) {
delete (*_Updates)[i];
}
delete _Updates;
_Updates=0;;
}
}


#include "InviteThirdPartyFriendResponse.h"

short InviteThirdPartyFriendResponse::serializerID = -10899;

















const char* InviteThirdPartyFriendResponse::getMessageId() {
    return _MessageId;
}

void InviteThirdPartyFriendResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InviteThirdPartyFriendResponse::isMessageIdSet() {
return _MessageIdSet;
}

void InviteThirdPartyFriendResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* InviteThirdPartyFriendResponse::getRequestId() {
return _RequestId;
}

void InviteThirdPartyFriendResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InviteThirdPartyFriendResponse::isRequestIdSet() {
return _RequestIdSet;
}

void InviteThirdPartyFriendResponse::unSetRequestId() {
_RequestIdSet = false;
}

InviteThirdPartyFriendStatus* InviteThirdPartyFriendResponse::getInviteThirdPartyFriendStatus() {
return _InviteThirdPartyFriendStatus;
}

void InviteThirdPartyFriendResponse::setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus* value) {
_InviteThirdPartyFriendStatus = value;
_InviteThirdPartyFriendStatusSet = true;
}

bool InviteThirdPartyFriendResponse::isInviteThirdPartyFriendStatusSet() {
return _InviteThirdPartyFriendStatusSet;
}

void InviteThirdPartyFriendResponse::unSetInviteThirdPartyFriendStatus() {
_InviteThirdPartyFriendStatusSet = false;
}

const char* InviteThirdPartyFriendResponse::getThirdPartyId() {
return _ThirdPartyId;
}

void InviteThirdPartyFriendResponse::setThirdPartyId(const char* value) {
if (_ThirdPartyId && _ThirdPartyId != value) {
delete _ThirdPartyId;
}
if (value) {
_ThirdPartyId = strdup(value);
} else {
_ThirdPartyId = 0;
}
_ThirdPartyIdSet = true;
}

bool InviteThirdPartyFriendResponse::isThirdPartyIdSet() {
return _ThirdPartyIdSet;
}

void InviteThirdPartyFriendResponse::unSetThirdPartyId() {
_ThirdPartyIdSet = false;
}

//@Override
short InviteThirdPartyFriendResponse::getSerializerID() {
return serializerID;
}

void* InviteThirdPartyFriendResponse::clone() {
InviteThirdPartyFriendResponse* _m13820 = new InviteThirdPartyFriendResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m13820->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m13820->setRequestId(_RequestId);
}
if (_InviteThirdPartyFriendStatusSet == true && Utils::isNull(_InviteThirdPartyFriendStatus) == false) {
_m13820->setInviteThirdPartyFriendStatus(_InviteThirdPartyFriendStatus);
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_m13820->setThirdPartyId(_ThirdPartyId);
}
return _m13820;
}

const char* InviteThirdPartyFriendResponse::toString() {
const char* _o13821 = "";
_o13821 = NUtils::concat(_o13821, NUtils::concat(NUtils::concat("[", "InviteThirdPartyFriendResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o13821 = NUtils::concat(_o13821, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o13821 = NUtils::concat(_o13821, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_InviteThirdPartyFriendStatusSet == true && Utils::isNull(_InviteThirdPartyFriendStatus) == false) {
_o13821 = NUtils::concat(_o13821, NUtils::concat(NUtils::concat("_InviteThirdPartyFriendStatus=", _InviteThirdPartyFriendStatus->toString()), "| "));
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_o13821 = NUtils::concat(_o13821, NUtils::concat(NUtils::concat("_ThirdPartyId=", _ThirdPartyId), "| "));
}
_o13821 = NUtils::concat(_o13821, "]");
return _o13821;
}

InviteThirdPartyFriendResponse::InviteThirdPartyFriendResponse(){
this->_ThirdPartyIdSet = false;
this->_ThirdPartyId = 0;
this->_InviteThirdPartyFriendStatusSet = false;
this->_InviteThirdPartyFriendStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InviteThirdPartyFriendResponse::~InviteThirdPartyFriendResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_ThirdPartyId) {
delete _ThirdPartyId;
_ThirdPartyId = 0;
}
}


#include "MyTurnNotification.h"

short MyTurnNotification::serializerID = -3139;













const char* MyTurnNotification::getMessageId() {
    return _MessageId;
}

void MyTurnNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool MyTurnNotification::isMessageIdSet() {
return _MessageIdSet;
}

void MyTurnNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* MyTurnNotification::getRequestId() {
return _RequestId;
}

void MyTurnNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool MyTurnNotification::isRequestIdSet() {
return _RequestIdSet;
}

void MyTurnNotification::unSetRequestId() {
_RequestIdSet = false;
}

const char* MyTurnNotification::getGameId() {
return _GameId;
}

void MyTurnNotification::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool MyTurnNotification::isGameIdSet() {
return _GameIdSet;
}

void MyTurnNotification::unSetGameId() {
_GameIdSet = false;
}

//@Override
short MyTurnNotification::getSerializerID() {
return serializerID;
}

void* MyTurnNotification::clone() {
MyTurnNotification* _c14112 = new MyTurnNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_c14112->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_c14112->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_c14112->setGameId(_GameId);
}
return _c14112;
}

const char* MyTurnNotification::toString() {
const char* _e14113 = "";
_e14113 = NUtils::concat(_e14113, NUtils::concat(NUtils::concat("[", "MyTurnNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e14113 = NUtils::concat(_e14113, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e14113 = NUtils::concat(_e14113, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_e14113 = NUtils::concat(_e14113, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_e14113 = NUtils::concat(_e14113, "]");
return _e14113;
}

MyTurnNotification::MyTurnNotification(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

MyTurnNotification::~MyTurnNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "SaveGameRequest.h"

short SaveGameRequest::serializerID = -10957;













const char* SaveGameRequest::getMessageId() {
    return _MessageId;
}

void SaveGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SaveGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SaveGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SaveGameRequest::getRequestId() {
return _RequestId;
}

void SaveGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SaveGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SaveGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

NGame* SaveGameRequest::getGame() {
return _Game;
}

void SaveGameRequest::setGame(NGame* value) {
if (_Game && _Game != value) {
delete _Game;
}
_Game = value;
_GameSet = true;
}

bool SaveGameRequest::isGameSet() {
return _GameSet;
}

void SaveGameRequest::unSetGame() {
_GameSet = false;
}

//@Override
short SaveGameRequest::getSerializerID() {
return serializerID;
}

void* SaveGameRequest::clone() {
SaveGameRequest* _w14097 = new SaveGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w14097->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w14097->setRequestId(_RequestId);
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_w14097->setGame((NGame*)(_Game->clone()));
}
return _w14097;
}

const char* SaveGameRequest::toString() {
const char* _s14098 = "";
_s14098 = NUtils::concat(_s14098, NUtils::concat(NUtils::concat("[", "SaveGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s14098 = NUtils::concat(_s14098, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s14098 = NUtils::concat(_s14098, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_s14098 = NUtils::concat(_s14098, NUtils::concat(NUtils::concat("_Game=", _Game->toString()), "| "));
}
_s14098 = NUtils::concat(_s14098, "]");
return _s14098;
}

SaveGameRequest::SaveGameRequest(){
this->_GameSet = false;
this->_Game = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SaveGameRequest::~SaveGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Game) {
delete _Game;
_Game=0;
}
}


#include "NItem.h"

short NItem::serializerID = -3101;

























const char* NItem::getStoreId() {
    return _storeId;
}

void NItem::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NItem::isstoreIdSet() {
return _storeIdSet;
}

void NItem::unSetstoreId() {
_storeIdSet = false;
}

const char* NItem::getId() {
return _Id;
}

void NItem::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool NItem::isIdSet() {
return _IdSet;
}

void NItem::unSetId() {
_IdSet = false;
}

const char* NItem::getName() {
return _Name;
}

void NItem::setName(const char* value) {
if (_Name && _Name != value) {
delete _Name;
}
if (value) {
_Name = strdup(value);
} else {
_Name = 0;
}
_NameSet = true;
}

bool NItem::isNameSet() {
return _NameSet;
}

void NItem::unSetName() {
_NameSet = false;
}

int NItem::getPrice() {
return _Price;
}

void NItem::setPrice(int value) {
_Price = value;
_PriceSet = true;
}

bool NItem::isPriceSet() {
return _PriceSet;
}

void NItem::unSetPrice() {
_PriceSet = false;
}

bool NItem::isBought() {
return _Bought;
}

void NItem::setBought(bool value) {
_Bought = value;
_BoughtSet = true;
}

bool NItem::isBoughtSet() {
return _BoughtSet;
}

void NItem::unSetBought() {
_BoughtSet = false;
}

int NItem::getCount() {
return _Count;
}

void NItem::setCount(int value) {
_Count = value;
_CountSet = true;
}

bool NItem::isCountSet() {
return _CountSet;
}

void NItem::unSetCount() {
_CountSet = false;
}

//@Override
short NItem::getSerializerID() {
return serializerID;
}

void* NItem::clone() {
NItem* _r15468 = new NItem();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_r15468->setStoreId(_storeId);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_r15468->setId(_Id);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_r15468->setName(_Name);
}
if (_PriceSet == true && Utils::isNullInteger(_Price) == false) {
_r15468->setPrice(_Price);
}
if (_BoughtSet == true && Utils::isNullBoolean(_Bought) == false) {
_r15468->setBought(_Bought);
}
if (_CountSet == true && Utils::isNullInteger(_Count) == false) {
_r15468->setCount(_Count);
}
return _r15468;
}

const char* NItem::toString() {
const char* _f15469 = "";
_f15469 = NUtils::concat(_f15469, NUtils::concat(NUtils::concat("[", "NItem"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_f15469 = NUtils::concat(_f15469, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_f15469 = NUtils::concat(_f15469, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_f15469 = NUtils::concat(_f15469, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_PriceSet == true && Utils::isNullInteger(_Price) == false) {
_f15469 = NUtils::concat(_f15469, NUtils::concat(NUtils::concat("_Price=", _Price), "| "));
}
if (_BoughtSet == true && Utils::isNullBoolean(_Bought) == false) {
_f15469 = NUtils::concat(_f15469, NUtils::concat(NUtils::concat("_Bought=", _Bought), "| "));
}
if (_CountSet == true && Utils::isNullInteger(_Count) == false) {
_f15469 = NUtils::concat(_f15469, NUtils::concat(NUtils::concat("_Count=", _Count), "| "));
}
_f15469 = NUtils::concat(_f15469, "]");
return _f15469;
}

NItem::NItem(){
this->_CountSet = false;
this->_Count = 0;
this->_BoughtSet = false;
this->_PriceSet = false;
this->_Price = 0;
this->_NameSet = false;
this->_Name = 0;
this->_IdSet = false;
this->_Id = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NItem::~NItem(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
if (_Name) {
delete _Name;
_Name = 0;
}
}


#include "SessionExpired.h"

short SessionExpired::serializerID = -3121;













const char* SessionExpired::getMessageId() {
    return _MessageId;
}

void SessionExpired::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SessionExpired::isMessageIdSet() {
return _MessageIdSet;
}

void SessionExpired::unSetMessageId() {
_MessageIdSet = false;
}

const char* SessionExpired::getRequestId() {
return _RequestId;
}

void SessionExpired::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SessionExpired::isRequestIdSet() {
return _RequestIdSet;
}

void SessionExpired::unSetRequestId() {
_RequestIdSet = false;
}

const char* SessionExpired::getSessionId() {
return _sessionId;
}

void SessionExpired::setSessionId(const char* value) {
if (_sessionId && _sessionId != value) {
delete _sessionId;
}
if (value) {
_sessionId = strdup(value);
} else {
_sessionId = 0;
}
_sessionIdSet = true;
}

bool SessionExpired::issessionIdSet() {
return _sessionIdSet;
}

void SessionExpired::unSetsessionId() {
_sessionIdSet = false;
}

//@Override
short SessionExpired::getSerializerID() {
return serializerID;
}

void* SessionExpired::clone() {
SessionExpired* _d14873 = new SessionExpired();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d14873->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d14873->setRequestId(_RequestId);
}
if (_sessionIdSet == true && Utils::isNull(_sessionId) == false) {
_d14873->setSessionId(_sessionId);
}
return _d14873;
}

const char* SessionExpired::toString() {
const char* _l14874 = "";
_l14874 = NUtils::concat(_l14874, NUtils::concat(NUtils::concat("[", "SessionExpired"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l14874 = NUtils::concat(_l14874, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l14874 = NUtils::concat(_l14874, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_sessionIdSet == true && Utils::isNull(_sessionId) == false) {
_l14874 = NUtils::concat(_l14874, NUtils::concat(NUtils::concat("_sessionId=", _sessionId), "| "));
}
_l14874 = NUtils::concat(_l14874, "]");
return _l14874;
}

SessionExpired::SessionExpired(){
this->_sessionIdSet = false;
this->_sessionId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SessionExpired::~SessionExpired(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_sessionId) {
delete _sessionId;
_sessionId = 0;
}
}


#include "GameRunningState.h"

std::vector<GameRunningState*>* GameRunningState::_values = new std::vector<GameRunningState*>();

GameRunningState* GameRunningState::PENDING = new GameRunningState("PENDING", 0);

GameRunningState* GameRunningState::RUNNING = new GameRunningState("RUNNING", 1);

GameRunningState* GameRunningState::FINISHED = new GameRunningState("FINISHED", 5);

std::vector<GameRunningState*>* GameRunningState::values() {
    return _values;
}





int GameRunningState::getValue() {
return _value;
}

const char* GameRunningState::name() {
return _name;
}

int GameRunningState::ordinal() {
return _value;
}

GameRunningState::GameRunningState(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GameRunningState* GameRunningState::fromValue(int value) {
for (unsigned int _v6924 = 0; _v6924 < (unsigned int)_values->size(); _v6924++) {
GameRunningState* _n6925 = (*_values)[_v6924];
if (_n6925->getValue() == value) {
return _n6925;
}
}
return 0;
}

GameRunningState* GameRunningState::valueOf(const char* name) {
for (unsigned int _b15222 = 0; _b15222 < (unsigned int)_values->size(); _b15222++) {
GameRunningState* _g15223 = (*_values)[_b15222];
if (strcmp(name, _g15223->name()) == 0) {
return _g15223;
}
}
return 0;
}

//@Override
short GameRunningState::getSerializerID() {
return -21;
}

const char* GameRunningState::toString() {
return NUtils::concat("GameRunningState.", _name);
}

void* GameRunningState::clone() {
return this;
}

GameRunningState::~GameRunningState(){
}


#include "StartStatus.h"

std::vector<StartStatus*>* StartStatus::_values = new std::vector<StartStatus*>();

StartStatus* StartStatus::READY = new StartStatus("READY", 0);

StartStatus* StartStatus::WARNED = new StartStatus("WARNED", 1);

StartStatus* StartStatus::FAILED = new StartStatus("FAILED", 2);

StartStatus* StartStatus::REFUSED = new StartStatus("REFUSED", 3);

std::vector<StartStatus*>* StartStatus::values() {
    return _values;
}





int StartStatus::getValue() {
return _value;
}

const char* StartStatus::name() {
return _name;
}

int StartStatus::ordinal() {
return _value;
}

StartStatus::StartStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

StartStatus* StartStatus::fromValue(int value) {
for (unsigned int _j5790 = 0; _j5790 < (unsigned int)_values->size(); _j5790++) {
StartStatus* _q5791 = (*_values)[_j5790];
if (_q5791->getValue() == value) {
return _q5791;
}
}
return 0;
}

StartStatus* StartStatus::valueOf(const char* name) {
for (unsigned int _c13828 = 0; _c13828 < (unsigned int)_values->size(); _c13828++) {
StartStatus* _r13829 = (*_values)[_c13828];
if (strcmp(name, _r13829->name()) == 0) {
return _r13829;
}
}
return 0;
}

//@Override
short StartStatus::getSerializerID() {
return -34;
}

const char* StartStatus::toString() {
return NUtils::concat("StartStatus.", _name);
}

void* StartStatus::clone() {
return this;
}

StartStatus::~StartStatus(){
}


#include "PlayerTurnNotification.h"

short PlayerTurnNotification::serializerID = -3140;

















const char* PlayerTurnNotification::getMessageId() {
    return _MessageId;
}

void PlayerTurnNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PlayerTurnNotification::isMessageIdSet() {
return _MessageIdSet;
}

void PlayerTurnNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* PlayerTurnNotification::getRequestId() {
return _RequestId;
}

void PlayerTurnNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PlayerTurnNotification::isRequestIdSet() {
return _RequestIdSet;
}

void PlayerTurnNotification::unSetRequestId() {
_RequestIdSet = false;
}

NPlayer* PlayerTurnNotification::getCurrentPlayer() {
return _CurrentPlayer;
}

void PlayerTurnNotification::setCurrentPlayer(NPlayer* value) {
if (_CurrentPlayer && _CurrentPlayer != value) {
delete _CurrentPlayer;
}
_CurrentPlayer = value;
_CurrentPlayerSet = true;
}

bool PlayerTurnNotification::isCurrentPlayerSet() {
return _CurrentPlayerSet;
}

void PlayerTurnNotification::unSetCurrentPlayer() {
_CurrentPlayerSet = false;
}

const char* PlayerTurnNotification::getGameId() {
return _GameId;
}

void PlayerTurnNotification::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool PlayerTurnNotification::isGameIdSet() {
return _GameIdSet;
}

void PlayerTurnNotification::unSetGameId() {
_GameIdSet = false;
}

//@Override
short PlayerTurnNotification::getSerializerID() {
return serializerID;
}

void* PlayerTurnNotification::clone() {
PlayerTurnNotification* _d14023 = new PlayerTurnNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d14023->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d14023->setRequestId(_RequestId);
}
if (_CurrentPlayerSet == true && Utils::isNull(_CurrentPlayer) == false) {
_d14023->setCurrentPlayer((NPlayer*)(_CurrentPlayer->clone()));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_d14023->setGameId(_GameId);
}
return _d14023;
}

const char* PlayerTurnNotification::toString() {
const char* _r14024 = "";
_r14024 = NUtils::concat(_r14024, NUtils::concat(NUtils::concat("[", "PlayerTurnNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r14024 = NUtils::concat(_r14024, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r14024 = NUtils::concat(_r14024, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_CurrentPlayerSet == true && Utils::isNull(_CurrentPlayer) == false) {
_r14024 = NUtils::concat(_r14024, NUtils::concat(NUtils::concat("_CurrentPlayer=", _CurrentPlayer->toString()), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_r14024 = NUtils::concat(_r14024, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_r14024 = NUtils::concat(_r14024, "]");
return _r14024;
}

PlayerTurnNotification::PlayerTurnNotification(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_CurrentPlayerSet = false;
this->_CurrentPlayer = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PlayerTurnNotification::~PlayerTurnNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_CurrentPlayer) {
delete _CurrentPlayer;
_CurrentPlayer=0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "DnsStatus.h"

std::vector<DnsStatus*>* DnsStatus::_values = new std::vector<DnsStatus*>();

DnsStatus* DnsStatus::SUCCESS = new DnsStatus("SUCCESS", 0);

DnsStatus* DnsStatus::WARNED = new DnsStatus("WARNED", 1);

DnsStatus* DnsStatus::REFUSED = new DnsStatus("REFUSED", 2);

DnsStatus* DnsStatus::FAILED = new DnsStatus("FAILED", 3);

DnsStatus* DnsStatus::FAILED_TRY_LATER = new DnsStatus("FAILED_TRY_LATER", 4);

std::vector<DnsStatus*>* DnsStatus::values() {
    return _values;
}





int DnsStatus::getValue() {
return _value;
}

const char* DnsStatus::name() {
return _name;
}

int DnsStatus::ordinal() {
return _value;
}

DnsStatus::DnsStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

DnsStatus* DnsStatus::fromValue(int value) {
for (unsigned int _q7126 = 0; _q7126 < (unsigned int)_values->size(); _q7126++) {
DnsStatus* _l7127 = (*_values)[_q7126];
if (_l7127->getValue() == value) {
return _l7127;
}
}
return 0;
}

DnsStatus* DnsStatus::valueOf(const char* name) {
for (unsigned int _u15519 = 0; _u15519 < (unsigned int)_values->size(); _u15519++) {
DnsStatus* _b15520 = (*_values)[_u15519];
if (strcmp(name, _b15520->name()) == 0) {
return _b15520;
}
}
return 0;
}

//@Override
short DnsStatus::getSerializerID() {
return -1;
}

const char* DnsStatus::toString() {
return NUtils::concat("DnsStatus.", _name);
}

void* DnsStatus::clone() {
return this;
}

DnsStatus::~DnsStatus(){
}


#include "NMatchMakingConditions.h"

short NMatchMakingConditions::serializerID = -3112;









const char* NMatchMakingConditions::getStoreId() {
    return _storeId;
}

void NMatchMakingConditions::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NMatchMakingConditions::isstoreIdSet() {
return _storeIdSet;
}

void NMatchMakingConditions::unSetstoreId() {
_storeIdSet = false;
}

MatchMakingType* NMatchMakingConditions::getMatchMakingType() {
return _MatchMakingType;
}

void NMatchMakingConditions::setMatchMakingType(MatchMakingType* value) {
_MatchMakingType = value;
_MatchMakingTypeSet = true;
}

bool NMatchMakingConditions::isMatchMakingTypeSet() {
return _MatchMakingTypeSet;
}

void NMatchMakingConditions::unSetMatchMakingType() {
_MatchMakingTypeSet = false;
}

//@Override
short NMatchMakingConditions::getSerializerID() {
return serializerID;
}

void* NMatchMakingConditions::clone() {
NMatchMakingConditions* _z15212 = new NMatchMakingConditions();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_z15212->setStoreId(_storeId);
}
if (_MatchMakingTypeSet == true && Utils::isNull(_MatchMakingType) == false) {
_z15212->setMatchMakingType(_MatchMakingType);
}
return _z15212;
}

const char* NMatchMakingConditions::toString() {
const char* _p15213 = "";
_p15213 = NUtils::concat(_p15213, NUtils::concat(NUtils::concat("[", "NMatchMakingConditions"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_p15213 = NUtils::concat(_p15213, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_MatchMakingTypeSet == true && Utils::isNull(_MatchMakingType) == false) {
_p15213 = NUtils::concat(_p15213, NUtils::concat(NUtils::concat("_MatchMakingType=", _MatchMakingType->toString()), "| "));
}
_p15213 = NUtils::concat(_p15213, "]");
return _p15213;
}

NMatchMakingConditions::NMatchMakingConditions(){
this->_MatchMakingTypeSet = false;
this->_MatchMakingType = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NMatchMakingConditions::~NMatchMakingConditions(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
}


#include "PlayerState.h"

std::vector<PlayerState*>* PlayerState::_values = new std::vector<PlayerState*>();

PlayerState* PlayerState::AVAILABLE = new PlayerState("AVAILABLE", 0);

PlayerState* PlayerState::PLAYING = new PlayerState("PLAYING", 1);

std::vector<PlayerState*>* PlayerState::values() {
    return _values;
}





int PlayerState::getValue() {
return _value;
}

const char* PlayerState::name() {
return _name;
}

int PlayerState::ordinal() {
return _value;
}

PlayerState::PlayerState(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

PlayerState* PlayerState::fromValue(int value) {
for (unsigned int _x6890 = 0; _x6890 < (unsigned int)_values->size(); _x6890++) {
PlayerState* _j6891 = (*_values)[_x6890];
if (_j6891->getValue() == value) {
return _j6891;
}
}
return 0;
}

PlayerState* PlayerState::valueOf(const char* name) {
for (unsigned int _v15188 = 0; _v15188 < (unsigned int)_values->size(); _v15188++) {
PlayerState* _y15189 = (*_values)[_v15188];
if (strcmp(name, _y15189->name()) == 0) {
return _y15189;
}
}
return 0;
}

//@Override
short PlayerState::getSerializerID() {
return -19;
}

const char* PlayerState::toString() {
return NUtils::concat("PlayerState.", _name);
}

void* PlayerState::clone() {
return this;
}

PlayerState::~PlayerState(){
}


#include "NPlayerProfile.h"

short NPlayerProfile::serializerID = -3127;





























const char* NPlayerProfile::getStoreId() {
    return _storeId;
}

void NPlayerProfile::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NPlayerProfile::isstoreIdSet() {
return _storeIdSet;
}

void NPlayerProfile::unSetstoreId() {
_storeIdSet = false;
}

const char* NPlayerProfile::getAvatar() {
return _Avatar;
}

void NPlayerProfile::setAvatar(const char* value) {
if (_Avatar && _Avatar != value) {
delete _Avatar;
}
if (value) {
_Avatar = strdup(value);
} else {
_Avatar = 0;
}
_AvatarSet = true;
}

bool NPlayerProfile::isAvatarSet() {
return _AvatarSet;
}

void NPlayerProfile::unSetAvatar() {
_AvatarSet = false;
}

const char* NPlayerProfile::getPlayerId() {
return _PlayerId;
}

void NPlayerProfile::setPlayerId(const char* value) {
if (_PlayerId && _PlayerId != value) {
delete _PlayerId;
}
if (value) {
_PlayerId = strdup(value);
} else {
_PlayerId = 0;
}
_PlayerIdSet = true;
}

bool NPlayerProfile::isPlayerIdSet() {
return _PlayerIdSet;
}

void NPlayerProfile::unSetPlayerId() {
_PlayerIdSet = false;
}

const char* NPlayerProfile::getCountry() {
return _Country;
}

void NPlayerProfile::setCountry(const char* value) {
if (_Country && _Country != value) {
delete _Country;
}
if (value) {
_Country = strdup(value);
} else {
_Country = 0;
}
_CountrySet = true;
}

bool NPlayerProfile::isCountrySet() {
return _CountrySet;
}

void NPlayerProfile::unSetCountry() {
_CountrySet = false;
}

int NPlayerProfile::getNXP() {
return _NXP;
}

void NPlayerProfile::setNXP(int value) {
_NXP = value;
_NXPSet = true;
}

bool NPlayerProfile::isNXPSet() {
return _NXPSet;
}

void NPlayerProfile::unSetNXP() {
_NXPSet = false;
}

int NPlayerProfile::getNEnergy() {
return _NEnergy;
}

void NPlayerProfile::setNEnergy(int value) {
_NEnergy = value;
_NEnergySet = true;
}

bool NPlayerProfile::isNEnergySet() {
return _NEnergySet;
}

void NPlayerProfile::unSetNEnergy() {
_NEnergySet = false;
}

NuggetaLevel* NPlayerProfile::getNLevel() {
return _NLevel;
}

void NPlayerProfile::setNLevel(NuggetaLevel* value) {
if (_NLevel && _NLevel != value) {
delete _NLevel;
}
_NLevel = value;
_NLevelSet = true;
}

bool NPlayerProfile::isNLevelSet() {
return _NLevelSet;
}

void NPlayerProfile::unSetNLevel() {
_NLevelSet = false;
}

//@Override
short NPlayerProfile::getSerializerID() {
return serializerID;
}

void* NPlayerProfile::clone() {
NPlayerProfile* _b14836 = new NPlayerProfile();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_b14836->setStoreId(_storeId);
}
if (_AvatarSet == true && Utils::isNull(_Avatar) == false) {
_b14836->setAvatar(_Avatar);
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_b14836->setPlayerId(_PlayerId);
}
if (_CountrySet == true && Utils::isNull(_Country) == false) {
_b14836->setCountry(_Country);
}
if (_NXPSet == true && Utils::isNullInteger(_NXP) == false) {
_b14836->setNXP(_NXP);
}
if (_NEnergySet == true && Utils::isNullInteger(_NEnergy) == false) {
_b14836->setNEnergy(_NEnergy);
}
if (_NLevelSet == true && Utils::isNull(_NLevel) == false) {
_b14836->setNLevel((NuggetaLevel*)(_NLevel->clone()));
}
return _b14836;
}

const char* NPlayerProfile::toString() {
const char* _h14837 = "";
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("[", "NPlayerProfile"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_AvatarSet == true && Utils::isNull(_Avatar) == false) {
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("_Avatar=", _Avatar), "| "));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("_PlayerId=", _PlayerId), "| "));
}
if (_CountrySet == true && Utils::isNull(_Country) == false) {
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("_Country=", _Country), "| "));
}
if (_NXPSet == true && Utils::isNullInteger(_NXP) == false) {
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("_NXP=", _NXP), "| "));
}
if (_NEnergySet == true && Utils::isNullInteger(_NEnergy) == false) {
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("_NEnergy=", _NEnergy), "| "));
}
if (_NLevelSet == true && Utils::isNull(_NLevel) == false) {
_h14837 = NUtils::concat(_h14837, NUtils::concat(NUtils::concat("_NLevel=", _NLevel->toString()), "| "));
}
_h14837 = NUtils::concat(_h14837, "]");
return _h14837;
}

NPlayerProfile::NPlayerProfile(){
this->_NLevelSet = false;
this->_NLevel = 0;
this->_NEnergySet = false;
this->_NEnergy = 0;
this->_NXPSet = false;
this->_NXP = 0;
this->_CountrySet = false;
this->_Country = 0;
this->_PlayerIdSet = false;
this->_PlayerId = 0;
this->_AvatarSet = false;
this->_Avatar = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NPlayerProfile::~NPlayerProfile(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Avatar) {
delete _Avatar;
_Avatar = 0;
}
if (_PlayerId) {
delete _PlayerId;
_PlayerId = 0;
}
if (_Country) {
delete _Country;
_Country = 0;
}
if (_NLevel) {
delete _NLevel;
_NLevel=0;
}
}


#include "GetInvitationsStatus.h"

std::vector<GetInvitationsStatus*>* GetInvitationsStatus::_values = new std::vector<GetInvitationsStatus*>();

GetInvitationsStatus* GetInvitationsStatus::SUCCESS = new GetInvitationsStatus("SUCCESS", 0);

GetInvitationsStatus* GetInvitationsStatus::INVALID_QUERY = new GetInvitationsStatus("INVALID_QUERY", 1);

GetInvitationsStatus* GetInvitationsStatus::INTERNAL_ERROR = new GetInvitationsStatus("INTERNAL_ERROR", 2);

std::vector<GetInvitationsStatus*>* GetInvitationsStatus::values() {
    return _values;
}





int GetInvitationsStatus::getValue() {
return _value;
}

const char* GetInvitationsStatus::name() {
return _name;
}

int GetInvitationsStatus::ordinal() {
return _value;
}

GetInvitationsStatus::GetInvitationsStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetInvitationsStatus* GetInvitationsStatus::fromValue(int value) {
for (unsigned int _u5800 = 0; _u5800 < (unsigned int)_values->size(); _u5800++) {
GetInvitationsStatus* _x5801 = (*_values)[_u5800];
if (_x5801->getValue() == value) {
return _x5801;
}
}
return 0;
}

GetInvitationsStatus* GetInvitationsStatus::valueOf(const char* name) {
for (unsigned int _d13838 = 0; _d13838 < (unsigned int)_values->size(); _d13838++) {
GetInvitationsStatus* _x13839 = (*_values)[_d13838];
if (strcmp(name, _x13839->name()) == 0) {
return _x13839;
}
}
return 0;
}

//@Override
short GetInvitationsStatus::getSerializerID() {
return -11158;
}

const char* GetInvitationsStatus::toString() {
return NUtils::concat("GetInvitationsStatus.", _name);
}

void* GetInvitationsStatus::clone() {
return this;
}

GetInvitationsStatus::~GetInvitationsStatus(){
}


#include "UpdateStorableResponse.h"

short UpdateStorableResponse::serializerID = -10859;

















const char* UpdateStorableResponse::getMessageId() {
    return _MessageId;
}

void UpdateStorableResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool UpdateStorableResponse::isMessageIdSet() {
return _MessageIdSet;
}

void UpdateStorableResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* UpdateStorableResponse::getRequestId() {
return _RequestId;
}

void UpdateStorableResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool UpdateStorableResponse::isRequestIdSet() {
return _RequestIdSet;
}

void UpdateStorableResponse::unSetRequestId() {
_RequestIdSet = false;
}

UpdateStorableStatus* UpdateStorableResponse::getUpdateStorableStatus() {
return _UpdateStorableStatus;
}

void UpdateStorableResponse::setUpdateStorableStatus(UpdateStorableStatus* value) {
_UpdateStorableStatus = value;
_UpdateStorableStatusSet = true;
}

bool UpdateStorableResponse::isUpdateStorableStatusSet() {
return _UpdateStorableStatusSet;
}

void UpdateStorableResponse::unSetUpdateStorableStatus() {
_UpdateStorableStatusSet = false;
}

const char* UpdateStorableResponse::getStoreId() {
return _StoreId;
}

void UpdateStorableResponse::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
delete _StoreId;
}
if (value) {
_StoreId = strdup(value);
} else {
_StoreId = 0;
}
_StoreIdSet = true;
}

bool UpdateStorableResponse::isStoreIdSet() {
return _StoreIdSet;
}

void UpdateStorableResponse::unSetStoreId() {
_StoreIdSet = false;
}

//@Override
short UpdateStorableResponse::getSerializerID() {
return serializerID;
}

void* UpdateStorableResponse::clone() {
UpdateStorableResponse* _r14003 = new UpdateStorableResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r14003->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r14003->setRequestId(_RequestId);
}
if (_UpdateStorableStatusSet == true && Utils::isNull(_UpdateStorableStatus) == false) {
_r14003->setUpdateStorableStatus(_UpdateStorableStatus);
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_r14003->setStoreId(_StoreId);
}
return _r14003;
}

const char* UpdateStorableResponse::toString() {
const char* _s14004 = "";
_s14004 = NUtils::concat(_s14004, NUtils::concat(NUtils::concat("[", "UpdateStorableResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s14004 = NUtils::concat(_s14004, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s14004 = NUtils::concat(_s14004, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_UpdateStorableStatusSet == true && Utils::isNull(_UpdateStorableStatus) == false) {
_s14004 = NUtils::concat(_s14004, NUtils::concat(NUtils::concat("_UpdateStorableStatus=", _UpdateStorableStatus->toString()), "| "));
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_s14004 = NUtils::concat(_s14004, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
_s14004 = NUtils::concat(_s14004, "]");
return _s14004;
}

UpdateStorableResponse::UpdateStorableResponse(){
this->_StoreIdSet = false;
this->_StoreId = 0;
this->_UpdateStorableStatusSet = false;
this->_UpdateStorableStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

UpdateStorableResponse::~UpdateStorableResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
}


#include "T809.h"

unsigned char T809::_g15500 = 0;

unsigned char T809::_v15501 = 1;

unsigned char T809::_y15502 = 2;

unsigned char T809::_c15503 = 3;

unsigned char T809::_r15504 = 10;

unsigned char T809::_o15505 = 11;

unsigned char T809::_m15506 = 12;

unsigned char T809::_d15507 = 13;

unsigned char T809::_f15508 = 14;

unsigned char T809::_d15509 = 15;

unsigned char T809::_p15510 = 16;

unsigned char T809::_u15511 = 17;

unsigned char T809::_m15512 = 18;

T809::T809(){
}

T809::~T809(){
}


#include "AcceptInvitationRequest.h"

short AcceptInvitationRequest::serializerID = -11177;













const char* AcceptInvitationRequest::getMessageId() {
    return _MessageId;
}

void AcceptInvitationRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AcceptInvitationRequest::isMessageIdSet() {
return _MessageIdSet;
}

void AcceptInvitationRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* AcceptInvitationRequest::getRequestId() {
return _RequestId;
}

void AcceptInvitationRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AcceptInvitationRequest::isRequestIdSet() {
return _RequestIdSet;
}

void AcceptInvitationRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* AcceptInvitationRequest::getInvitationId() {
return _InvitationId;
}

void AcceptInvitationRequest::setInvitationId(const char* value) {
if (_InvitationId && _InvitationId != value) {
delete _InvitationId;
}
if (value) {
_InvitationId = strdup(value);
} else {
_InvitationId = 0;
}
_InvitationIdSet = true;
}

bool AcceptInvitationRequest::isInvitationIdSet() {
return _InvitationIdSet;
}

void AcceptInvitationRequest::unSetInvitationId() {
_InvitationIdSet = false;
}

//@Override
short AcceptInvitationRequest::getSerializerID() {
return serializerID;
}

void* AcceptInvitationRequest::clone() {
AcceptInvitationRequest* _h13974 = new AcceptInvitationRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h13974->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h13974->setRequestId(_RequestId);
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_h13974->setInvitationId(_InvitationId);
}
return _h13974;
}

const char* AcceptInvitationRequest::toString() {
const char* _k13975 = "";
_k13975 = NUtils::concat(_k13975, NUtils::concat(NUtils::concat("[", "AcceptInvitationRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k13975 = NUtils::concat(_k13975, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k13975 = NUtils::concat(_k13975, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_InvitationIdSet == true && Utils::isNull(_InvitationId) == false) {
_k13975 = NUtils::concat(_k13975, NUtils::concat(NUtils::concat("_InvitationId=", _InvitationId), "| "));
}
_k13975 = NUtils::concat(_k13975, "]");
return _k13975;
}

AcceptInvitationRequest::AcceptInvitationRequest(){
this->_InvitationIdSet = false;
this->_InvitationId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AcceptInvitationRequest::~AcceptInvitationRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_InvitationId) {
delete _InvitationId;
_InvitationId = 0;
}
}


#include "NLeaderboardEntry.h"

short NLeaderboardEntry::serializerID = -3178;

































const char* NLeaderboardEntry::getStoreId() {
    return _storeId;
}

void NLeaderboardEntry::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NLeaderboardEntry::isstoreIdSet() {
return _storeIdSet;
}

void NLeaderboardEntry::unSetstoreId() {
_storeIdSet = false;
}

const char* NLeaderboardEntry::getData() {
return _Data;
}

void NLeaderboardEntry::setData(const char* value) {
if (_Data && _Data != value) {
delete _Data;
}
if (value) {
_Data = strdup(value);
} else {
_Data = 0;
}
_DataSet = true;
}

bool NLeaderboardEntry::isDataSet() {
return _DataSet;
}

void NLeaderboardEntry::unSetData() {
_DataSet = false;
}

const char* NLeaderboardEntry::getId() {
return _Id;
}

void NLeaderboardEntry::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool NLeaderboardEntry::isIdSet() {
return _IdSet;
}

void NLeaderboardEntry::unSetId() {
_IdSet = false;
}

double NLeaderboardEntry::getTimestamp() {
return _Timestamp;
}

void NLeaderboardEntry::setTimestamp(double value) {
_Timestamp = value;
_TimestampSet = true;
}

bool NLeaderboardEntry::isTimestampSet() {
return _TimestampSet;
}

void NLeaderboardEntry::unSetTimestamp() {
_TimestampSet = false;
}

NScore* NLeaderboardEntry::getScore() {
return _Score;
}

void NLeaderboardEntry::setScore(NScore* value) {
if (_Score && _Score != value) {
delete _Score;
}
_Score = value;
_ScoreSet = true;
}

bool NLeaderboardEntry::isScoreSet() {
return _ScoreSet;
}

void NLeaderboardEntry::unSetScore() {
_ScoreSet = false;
}

const char* NLeaderboardEntry::getPlayerId() {
return _PlayerId;
}

void NLeaderboardEntry::setPlayerId(const char* value) {
if (_PlayerId && _PlayerId != value) {
delete _PlayerId;
}
if (value) {
_PlayerId = strdup(value);
} else {
_PlayerId = 0;
}
_PlayerIdSet = true;
}

bool NLeaderboardEntry::isPlayerIdSet() {
return _PlayerIdSet;
}

void NLeaderboardEntry::unSetPlayerId() {
_PlayerIdSet = false;
}

const char* NLeaderboardEntry::getPlayerName() {
return _PlayerName;
}

void NLeaderboardEntry::setPlayerName(const char* value) {
if (_PlayerName && _PlayerName != value) {
delete _PlayerName;
}
if (value) {
_PlayerName = strdup(value);
} else {
_PlayerName = 0;
}
_PlayerNameSet = true;
}

bool NLeaderboardEntry::isPlayerNameSet() {
return _PlayerNameSet;
}

void NLeaderboardEntry::unSetPlayerName() {
_PlayerNameSet = false;
}

const char* NLeaderboardEntry::getPlayerAvatarPath() {
return _PlayerAvatarPath;
}

void NLeaderboardEntry::setPlayerAvatarPath(const char* value) {
if (_PlayerAvatarPath && _PlayerAvatarPath != value) {
delete _PlayerAvatarPath;
}
if (value) {
_PlayerAvatarPath = strdup(value);
} else {
_PlayerAvatarPath = 0;
}
_PlayerAvatarPathSet = true;
}

bool NLeaderboardEntry::isPlayerAvatarPathSet() {
return _PlayerAvatarPathSet;
}

void NLeaderboardEntry::unSetPlayerAvatarPath() {
_PlayerAvatarPathSet = false;
}

//@Override
short NLeaderboardEntry::getSerializerID() {
return serializerID;
}

void* NLeaderboardEntry::clone() {
NLeaderboardEntry* _n10719 = new NLeaderboardEntry();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_n10719->setStoreId(_storeId);
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_n10719->setData(_Data);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_n10719->setId(_Id);
}
if (_TimestampSet == true && Utils::isNullDouble(_Timestamp) == false) {
_n10719->setTimestamp(_Timestamp);
}
if (_ScoreSet == true && Utils::isNull(_Score) == false) {
_n10719->setScore((NScore*)(_Score->clone()));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_n10719->setPlayerId(_PlayerId);
}
if (_PlayerNameSet == true && Utils::isNull(_PlayerName) == false) {
_n10719->setPlayerName(_PlayerName);
}
if (_PlayerAvatarPathSet == true && Utils::isNull(_PlayerAvatarPath) == false) {
_n10719->setPlayerAvatarPath(_PlayerAvatarPath);
}
return _n10719;
}

const char* NLeaderboardEntry::toString() {
const char* _v10720 = "";
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("[", "NLeaderboardEntry"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_Data=", _Data), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_TimestampSet == true && Utils::isNullDouble(_Timestamp) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_Timestamp=", _Timestamp), "| "));
}
if (_ScoreSet == true && Utils::isNull(_Score) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_Score=", _Score->toString()), "| "));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_PlayerId=", _PlayerId), "| "));
}
if (_PlayerNameSet == true && Utils::isNull(_PlayerName) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_PlayerName=", _PlayerName), "| "));
}
if (_PlayerAvatarPathSet == true && Utils::isNull(_PlayerAvatarPath) == false) {
_v10720 = NUtils::concat(_v10720, NUtils::concat(NUtils::concat("_PlayerAvatarPath=", _PlayerAvatarPath), "| "));
}
_v10720 = NUtils::concat(_v10720, "]");
return _v10720;
}

NLeaderboardEntry::NLeaderboardEntry(){
this->_PlayerAvatarPathSet = false;
this->_PlayerAvatarPath = 0;
this->_PlayerNameSet = false;
this->_PlayerName = 0;
this->_PlayerIdSet = false;
this->_PlayerId = 0;
this->_ScoreSet = false;
this->_Score = 0;
this->_TimestampSet = false;
this->_Timestamp = 0;
this->_IdSet = false;
this->_Id = 0;
this->_DataSet = false;
this->_Data = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NLeaderboardEntry::~NLeaderboardEntry(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Data) {
delete _Data;
_Data = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
if (_Score) {
delete _Score;
_Score=0;
}
if (_PlayerId) {
delete _PlayerId;
_PlayerId = 0;
}
if (_PlayerName) {
delete _PlayerName;
_PlayerName = 0;
}
if (_PlayerAvatarPath) {
delete _PlayerAvatarPath;
_PlayerAvatarPath = 0;
}
}


#include "NuggetaPlug.h"

NuggetaPlug::NuggetaPlug(const char* url):T801(url){

    _w14120 = NLoggerFactory::getLogger("NuggetaPlug");
    _v14126 = new T798("sock", "bin");
}

NuggetaPlug::~NuggetaPlug(){
}


#include "RefuseFriendDemandRequest.h"

short RefuseFriendDemandRequest::serializerID = -10277;













const char* RefuseFriendDemandRequest::getMessageId() {
    return _MessageId;
}

void RefuseFriendDemandRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool RefuseFriendDemandRequest::isMessageIdSet() {
return _MessageIdSet;
}

void RefuseFriendDemandRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* RefuseFriendDemandRequest::getRequestId() {
return _RequestId;
}

void RefuseFriendDemandRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool RefuseFriendDemandRequest::isRequestIdSet() {
return _RequestIdSet;
}

void RefuseFriendDemandRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* RefuseFriendDemandRequest::getFriendDemandId() {
return _FriendDemandId;
}

void RefuseFriendDemandRequest::setFriendDemandId(const char* value) {
if (_FriendDemandId && _FriendDemandId != value) {
delete _FriendDemandId;
}
if (value) {
_FriendDemandId = strdup(value);
} else {
_FriendDemandId = 0;
}
_FriendDemandIdSet = true;
}

bool RefuseFriendDemandRequest::isFriendDemandIdSet() {
return _FriendDemandIdSet;
}

void RefuseFriendDemandRequest::unSetFriendDemandId() {
_FriendDemandIdSet = false;
}

//@Override
short RefuseFriendDemandRequest::getSerializerID() {
return serializerID;
}

void* RefuseFriendDemandRequest::clone() {
RefuseFriendDemandRequest* _x15166 = new RefuseFriendDemandRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15166->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15166->setRequestId(_RequestId);
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_x15166->setFriendDemandId(_FriendDemandId);
}
return _x15166;
}

const char* RefuseFriendDemandRequest::toString() {
const char* _o15167 = "";
_o15167 = NUtils::concat(_o15167, NUtils::concat(NUtils::concat("[", "RefuseFriendDemandRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o15167 = NUtils::concat(_o15167, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o15167 = NUtils::concat(_o15167, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_o15167 = NUtils::concat(_o15167, NUtils::concat(NUtils::concat("_FriendDemandId=", _FriendDemandId), "| "));
}
_o15167 = NUtils::concat(_o15167, "]");
return _o15167;
}

RefuseFriendDemandRequest::RefuseFriendDemandRequest(){
this->_FriendDemandIdSet = false;
this->_FriendDemandId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

RefuseFriendDemandRequest::~RefuseFriendDemandRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_FriendDemandId) {
delete _FriendDemandId;
_FriendDemandId = 0;
}
}


#include "BuyProductNotification.h"

short BuyProductNotification::serializerID = -3111;









const char* BuyProductNotification::getMessageId() {
    return _MessageId;
}

void BuyProductNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool BuyProductNotification::isMessageIdSet() {
return _MessageIdSet;
}

void BuyProductNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* BuyProductNotification::getRequestId() {
return _RequestId;
}

void BuyProductNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool BuyProductNotification::isRequestIdSet() {
return _RequestIdSet;
}

void BuyProductNotification::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short BuyProductNotification::getSerializerID() {
return serializerID;
}

void* BuyProductNotification::clone() {
BuyProductNotification* _a15554 = new BuyProductNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_a15554->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_a15554->setRequestId(_RequestId);
}
return _a15554;
}

const char* BuyProductNotification::toString() {
const char* _m15555 = "";
_m15555 = NUtils::concat(_m15555, NUtils::concat(NUtils::concat("[", "BuyProductNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m15555 = NUtils::concat(_m15555, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m15555 = NUtils::concat(_m15555, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_m15555 = NUtils::concat(_m15555, "]");
return _m15555;
}

BuyProductNotification::BuyProductNotification(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

BuyProductNotification::~BuyProductNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "AdminPublicMessage.h"

short AdminPublicMessage::serializerID = -3012;

















const char* AdminPublicMessage::getMessageId() {
    return _MessageId;
}

void AdminPublicMessage::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AdminPublicMessage::isMessageIdSet() {
return _MessageIdSet;
}

void AdminPublicMessage::unSetMessageId() {
_MessageIdSet = false;
}

const char* AdminPublicMessage::getRequestId() {
return _RequestId;
}

void AdminPublicMessage::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AdminPublicMessage::isRequestIdSet() {
return _RequestIdSet;
}

void AdminPublicMessage::unSetRequestId() {
_RequestIdSet = false;
}

const char* AdminPublicMessage::getPlayerId() {
return _PlayerId;
}

void AdminPublicMessage::setPlayerId(const char* value) {
if (_PlayerId && _PlayerId != value) {
delete _PlayerId;
}
if (value) {
_PlayerId = strdup(value);
} else {
_PlayerId = 0;
}
_PlayerIdSet = true;
}

bool AdminPublicMessage::isPlayerIdSet() {
return _PlayerIdSet;
}

void AdminPublicMessage::unSetPlayerId() {
_PlayerIdSet = false;
}

const char* AdminPublicMessage::getMessage() {
return _Message;
}

void AdminPublicMessage::setMessage(const char* value) {
if (_Message && _Message != value) {
delete _Message;
}
if (value) {
_Message = strdup(value);
} else {
_Message = 0;
}
_MessageSet = true;
}

bool AdminPublicMessage::isMessageSet() {
return _MessageSet;
}

void AdminPublicMessage::unSetMessage() {
_MessageSet = false;
}

//@Override
short AdminPublicMessage::getSerializerID() {
return serializerID;
}

void* AdminPublicMessage::clone() {
AdminPublicMessage* _u14110 = new AdminPublicMessage();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u14110->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u14110->setRequestId(_RequestId);
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_u14110->setPlayerId(_PlayerId);
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_u14110->setMessage(_Message);
}
return _u14110;
}

const char* AdminPublicMessage::toString() {
const char* _r14111 = "";
_r14111 = NUtils::concat(_r14111, NUtils::concat(NUtils::concat("[", "AdminPublicMessage"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r14111 = NUtils::concat(_r14111, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r14111 = NUtils::concat(_r14111, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_r14111 = NUtils::concat(_r14111, NUtils::concat(NUtils::concat("_PlayerId=", _PlayerId), "| "));
}
if (_MessageSet == true && Utils::isNull(_Message) == false) {
_r14111 = NUtils::concat(_r14111, NUtils::concat(NUtils::concat("_Message=", _Message), "| "));
}
_r14111 = NUtils::concat(_r14111, "]");
return _r14111;
}

AdminPublicMessage::AdminPublicMessage(){
this->_MessageSet = false;
this->_Message = 0;
this->_PlayerIdSet = false;
this->_PlayerId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AdminPublicMessage::~AdminPublicMessage(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_PlayerId) {
delete _PlayerId;
_PlayerId = 0;
}
if (_Message) {
delete _Message;
_Message = 0;
}
}


#include "ConnectionInterrupted.h"

short ConnectionInterrupted::serializerID = -3088;









const char* ConnectionInterrupted::getMessageId() {
    return _MessageId;
}

void ConnectionInterrupted::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ConnectionInterrupted::isMessageIdSet() {
return _MessageIdSet;
}

void ConnectionInterrupted::unSetMessageId() {
_MessageIdSet = false;
}

const char* ConnectionInterrupted::getRequestId() {
return _RequestId;
}

void ConnectionInterrupted::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ConnectionInterrupted::isRequestIdSet() {
return _RequestIdSet;
}

void ConnectionInterrupted::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short ConnectionInterrupted::getSerializerID() {
return serializerID;
}

void* ConnectionInterrupted::clone() {
ConnectionInterrupted* _j14844 = new ConnectionInterrupted();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j14844->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j14844->setRequestId(_RequestId);
}
return _j14844;
}

const char* ConnectionInterrupted::toString() {
const char* _d14845 = "";
_d14845 = NUtils::concat(_d14845, NUtils::concat(NUtils::concat("[", "ConnectionInterrupted"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d14845 = NUtils::concat(_d14845, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d14845 = NUtils::concat(_d14845, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_d14845 = NUtils::concat(_d14845, "]");
return _d14845;
}

ConnectionInterrupted::ConnectionInterrupted(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ConnectionInterrupted::~ConnectionInterrupted(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "T818.h"

void T818::_m15769(Serializable* _l7285, T808* _c7286) {
    T811* _l7287 = (T811*)_c7286;
    if (_l7285->getSerializerID() == -1) {
        _m15770(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -2) {
        _m15771(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3) {
        _m15772(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -4) {
        _m15773(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -8) {
        _m15774(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -9) {
        _m15775(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -12) {
        _m15776(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -18) {
        _m15777(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -19) {
        _m15778(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -20) {
        _m15779(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -21) {
        _m15780(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -22) {
        _m15781(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -23) {
        _m15782(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -24) {
        _m15783(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -34) {
        _m15784(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -38) {
        _m15785(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -39) {
        _m15786(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -42) {
        _m15787(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10018) {
        _m15788(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10038) {
        _m15789(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10078) {
        _m15790(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10098) {
        _m15791(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10118) {
        _m15792(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10138) {
        _m15793(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10198) {
        _m15794(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10218) {
        _m15795(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10238) {
        _m15796(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10258) {
        _m15797(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10278) {
        _m15798(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10298) {
        _m15799(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10318) {
        _m15800(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10338) {
        _m15801(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10358) {
        _m15802(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10378) {
        _m15803(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10398) {
        _m15804(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10418) {
        _m15805(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10438) {
        _m15806(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10458) {
        _m15807(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10478) {
        _m15808(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10498) {
        _m15809(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10518) {
        _m15810(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10618) {
        _m15811(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10638) {
        _m15812(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10658) {
        _m15813(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10678) {
        _m15814(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10698) {
        _m15815(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10718) {
        _m15816(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10738) {
        _m15817(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10758) {
        _m15818(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10778) {
        _m15819(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10798) {
        _m15820(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10818) {
        _m15821(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10838) {
        _m15822(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10858) {
        _m15823(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10878) {
        _m15824(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10898) {
        _m15825(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10918) {
        _m15826(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10938) {
        _m15827(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10958) {
        _m15828(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10978) {
        _m15829(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10998) {
        _m15830(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11018) {
        _m15831(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11038) {
        _m15832(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11058) {
        _m15833(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11078) {
        _m15834(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11098) {
        _m15835(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11118) {
        _m15836(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11138) {
        _m15837(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11158) {
        _m15838(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11178) {
        _m15839(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11198) {
        _m15840(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3000) {
        _m15841(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3001) {
        _m15842(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3002) {
        _m15843(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3003) {
        _m15844(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3004) {
        _m15845(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3005) {
        _m15846(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3006) {
        _m15847(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3008) {
        _m15848(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3009) {
        _m15849(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3010) {
        _m15850(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3011) {
        _m15851(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3012) {
        _m15852(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3013) {
        _m15853(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3017) {
        _m15854(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3019) {
        _m15855(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3020) {
        _m15856(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3021) {
        _m15857(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3042) {
        _m15858(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3077) {
        _m15859(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3078) {
        _m15860(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3088) {
        _m15861(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3089) {
        _m15862(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3090) {
        _m15863(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3093) {
        _m15864(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3098) {
        _m15865(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3099) {
        _m15866(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3100) {
        _m15867(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3101) {
        _m15868(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3103) {
        _m15869(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3105) {
        _m15870(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3106) {
        _m15871(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3107) {
        _m15872(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3109) {
        _m15873(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3111) {
        _m15874(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3112) {
        _m15875(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3113) {
        _m15876(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3118) {
        _m15877(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3119) {
        _m15878(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3121) {
        _m15879(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3122) {
        _m15880(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3124) {
        _m15881(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3127) {
        _m15882(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3129) {
        _m15883(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3135) {
        _m15884(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3136) {
        _m15885(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3137) {
        _m15886(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3139) {
        _m15887(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3140) {
        _m15888(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3142) {
        _m15889(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3143) {
        _m15890(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3145) {
        _m15891(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3156) {
        _m15892(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3157) {
        _m15893(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3158) {
        _m15894(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3159) {
        _m15895(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3164) {
        _m15896(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3165) {
        _m15897(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3174) {
        _m15898(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3175) {
        _m15899(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3178) {
        _m15900(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3179) {
        _m15901(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3180) {
        _m15902(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3181) {
        _m15903(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3204) {
        _m15904(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3230) {
        _m15905(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3232) {
        _m15906(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3233) {
        _m15907(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3234) {
        _m15908(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3235) {
        _m15909(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3236) {
        _m15910(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -3237) {
        _m15911(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10019) {
        _m15912(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10017) {
        _m15913(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10016) {
        _m15914(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10039) {
        _m15915(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10037) {
        _m15916(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10079) {
        _m15917(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10077) {
        _m15918(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10099) {
        _m15919(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10097) {
        _m15920(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10119) {
        _m15921(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10117) {
        _m15922(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10116) {
        _m15923(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10139) {
        _m15924(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10137) {
        _m15925(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10199) {
        _m15926(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10197) {
        _m15927(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10196) {
        _m15928(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10219) {
        _m15929(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10217) {
        _m15930(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10239) {
        _m15931(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10237) {
        _m15932(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10259) {
        _m15933(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10257) {
        _m15934(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10279) {
        _m15935(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10277) {
        _m15936(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10299) {
        _m15937(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10297) {
        _m15938(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10296) {
        _m15939(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10319) {
        _m15940(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10317) {
        _m15941(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10339) {
        _m15942(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10337) {
        _m15943(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10359) {
        _m15944(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10357) {
        _m15945(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10379) {
        _m15946(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10377) {
        _m15947(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10399) {
        _m15948(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10397) {
        _m15949(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10419) {
        _m15950(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10417) {
        _m15951(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10439) {
        _m15952(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10437) {
        _m15953(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10459) {
        _m15954(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10457) {
        _m15955(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10456) {
        _m15956(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10479) {
        _m15957(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10477) {
        _m15958(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10476) {
        _m15959(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10499) {
        _m15960(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10497) {
        _m15961(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10519) {
        _m15962(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10517) {
        _m15963(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10619) {
        _m15964(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10617) {
        _m15965(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10639) {
        _m15966(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10637) {
        _m15967(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10659) {
        _m15968(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10657) {
        _m15969(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10679) {
        _m15970(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10677) {
        _m15971(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10699) {
        _m15972(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10697) {
        _m15973(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10719) {
        _m15974(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10717) {
        _m15975(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10739) {
        _m15976(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10737) {
        _m15977(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10759) {
        _m15978(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10757) {
        _m15979(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10756) {
        _m15980(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10755) {
        _m15981(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10779) {
        _m15982(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10777) {
        _m15983(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10799) {
        _m15984(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10797) {
        _m15985(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10819) {
        _m15986(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10817) {
        _m15987(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10839) {
        _m15988(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10837) {
        _m15989(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10859) {
        _m15990(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10857) {
        _m15991(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10879) {
        _m15992(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10877) {
        _m15993(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10899) {
        _m15994(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10897) {
        _m15995(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10919) {
        _m15996(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10917) {
        _m15997(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10939) {
        _m15998(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10937) {
        _m15999(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10936) {
        _m16000(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10959) {
        _m16001(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10957) {
        _m16002(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10979) {
        _m16003(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10977) {
        _m16004(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10999) {
        _m16005(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -10997) {
        _m16006(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11019) {
        _m16007(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11017) {
        _m16008(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11039) {
        _m16009(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11037) {
        _m16010(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11059) {
        _m16011(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11057) {
        _m16012(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11079) {
        _m16013(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11077) {
        _m16014(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11099) {
        _m16015(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11097) {
        _m16016(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11119) {
        _m16017(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11117) {
        _m16018(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11139) {
        _m16019(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11137) {
        _m16020(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11159) {
        _m16021(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11157) {
        _m16022(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11179) {
        _m16023(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11177) {
        _m16024(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11199) {
        _m16025(_l7285, _l7287);
        return;
    }
    if (_l7285->getSerializerID() == -11197) {
        _m16026(_l7285, _l7287);
        return;
    }
}

void T818::_m15770(Serializable* serializable, T811* buff) {
DnsStatus* _s7290 = (DnsStatus*)serializable;
T813::_m16027(_s7290->getValue(), buff);
}

void T818::_m15771(Serializable* serializable, T811* buff) {
MatchMakingType* _o7293 = (MatchMakingType*)serializable;
T813::_m16027(_o7293->getValue(), buff);
}

void T818::_m15772(Serializable* serializable, T811* buff) {
LeaderboardOrder* _u7296 = (LeaderboardOrder*)serializable;
T813::_m16027(_u7296->getValue(), buff);
}

void T818::_m15773(Serializable* serializable, T811* buff) {
LeaderboardPeriod* _g7299 = (LeaderboardPeriod*)serializable;
T813::_m16027(_g7299->getValue(), buff);
}

void T818::_m15774(Serializable* serializable, T811* buff) {
ErrorCode* _u7302 = (ErrorCode*)serializable;
T813::_m16027(_u7302->getValue(), buff);
}

void T818::_m15775(Serializable* serializable, T811* buff) {
ThirdPartySource* _p7305 = (ThirdPartySource*)serializable;
T813::_m16027(_p7305->getValue(), buff);
}

void T818::_m15776(Serializable* serializable, T811* buff) {
LogLevel* _p7308 = (LogLevel*)serializable;
T813::_m16027(_p7308->getValue(), buff);
}

void T818::_m15777(Serializable* serializable, T811* buff) {
HandshakeState* _s7311 = (HandshakeState*)serializable;
T813::_m16027(_s7311->getValue(), buff);
}

void T818::_m15778(Serializable* serializable, T811* buff) {
PlayerState* _x7314 = (PlayerState*)serializable;
T813::_m16027(_x7314->getValue(), buff);
}

void T818::_m15779(Serializable* serializable, T811* buff) {
ClientApplication* _g7317 = (ClientApplication*)serializable;
T813::_m16027(_g7317->getValue(), buff);
}

void T818::_m15780(Serializable* serializable, T811* buff) {
GameRunningState* _z7320 = (GameRunningState*)serializable;
T813::_m16027(_z7320->getValue(), buff);
}

void T818::_m15781(Serializable* serializable, T811* buff) {
Period* _h7323 = (Period*)serializable;
T813::_m16027(_h7323->getValue(), buff);
}

void T818::_m15782(Serializable* serializable, T811* buff) {
NFriendDemandStatus* _x7326 = (NFriendDemandStatus*)serializable;
T813::_m16027(_x7326->getValue(), buff);
}

void T818::_m15783(Serializable* serializable, T811* buff) {
ExecutionStatus* _i7329 = (ExecutionStatus*)serializable;
T813::_m16027(_i7329->getValue(), buff);
}

void T818::_m15784(Serializable* serializable, T811* buff) {
StartStatus* _h7332 = (StartStatus*)serializable;
T813::_m16027(_h7332->getValue(), buff);
}

void T818::_m15785(Serializable* serializable, T811* buff) {
PlayerSessionType* _e7335 = (PlayerSessionType*)serializable;
T813::_m16027(_e7335->getValue(), buff);
}

void T818::_m15786(Serializable* serializable, T811* buff) {
NAchievementType* _f7338 = (NAchievementType*)serializable;
T813::_m16027(_f7338->getValue(), buff);
}

void T818::_m15787(Serializable* serializable, T811* buff) {
NInvitationStatus* _a7341 = (NInvitationStatus*)serializable;
T813::_m16027(_a7341->getValue(), buff);
}

void T818::_m15788(Serializable* serializable, T811* buff) {
AskForFriendStatus* _e7344 = (AskForFriendStatus*)serializable;
T813::_m16027(_e7344->getValue(), buff);
}

void T818::_m15789(Serializable* serializable, T811* buff) {
SignUpStatus* _e7347 = (SignUpStatus*)serializable;
T813::_m16027(_e7347->getValue(), buff);
}

void T818::_m15790(Serializable* serializable, T811* buff) {
LoginStatus* _t7350 = (LoginStatus*)serializable;
T813::_m16027(_t7350->getValue(), buff);
}

void T818::_m15791(Serializable* serializable, T811* buff) {
SavePlayerProfileStatus* _h7353 = (SavePlayerProfileStatus*)serializable;
T813::_m16027(_h7353->getValue(), buff);
}

void T818::_m15792(Serializable* serializable, T811* buff) {
GetPlayerProfileStatus* _p7356 = (GetPlayerProfileStatus*)serializable;
T813::_m16027(_p7356->getValue(), buff);
}

void T818::_m15793(Serializable* serializable, T811* buff) {
LogoutStatus* _r7359 = (LogoutStatus*)serializable;
T813::_m16027(_r7359->getValue(), buff);
}

void T818::_m15794(Serializable* serializable, T811* buff) {
GetFriendsStatus* _d7362 = (GetFriendsStatus*)serializable;
T813::_m16027(_d7362->getValue(), buff);
}

void T818::_m15795(Serializable* serializable, T811* buff) {
GetThirdPartyFriendsStatus* _k7365 = (GetThirdPartyFriendsStatus*)serializable;
T813::_m16027(_k7365->getValue(), buff);
}

void T818::_m15796(Serializable* serializable, T811* buff) {
GetFriendDemandsStatus* _v7368 = (GetFriendDemandsStatus*)serializable;
T813::_m16027(_v7368->getValue(), buff);
}

void T818::_m15797(Serializable* serializable, T811* buff) {
AcceptFriendDemandStatus* _y7371 = (AcceptFriendDemandStatus*)serializable;
T813::_m16027(_y7371->getValue(), buff);
}

void T818::_m15798(Serializable* serializable, T811* buff) {
RefuseFriendDemandStatus* _p7374 = (RefuseFriendDemandStatus*)serializable;
T813::_m16027(_p7374->getValue(), buff);
}

void T818::_m15799(Serializable* serializable, T811* buff) {
SubmitScoreStatus* _m7377 = (SubmitScoreStatus*)serializable;
T813::_m16027(_m7377->getValue(), buff);
}

void T818::_m15800(Serializable* serializable, T811* buff) {
GetLeaderboardStatus* _c7380 = (GetLeaderboardStatus*)serializable;
T813::_m16027(_c7380->getValue(), buff);
}

void T818::_m15801(Serializable* serializable, T811* buff) {
BuyItemStatus* _y7383 = (BuyItemStatus*)serializable;
T813::_m16027(_y7383->getValue(), buff);
}

void T818::_m15802(Serializable* serializable, T811* buff) {
GetStoreStatus* _z7386 = (GetStoreStatus*)serializable;
T813::_m16027(_z7386->getValue(), buff);
}

void T818::_m15803(Serializable* serializable, T811* buff) {
ConsumeItemStatus* _o7389 = (ConsumeItemStatus*)serializable;
T813::_m16027(_o7389->getValue(), buff);
}

void T818::_m15804(Serializable* serializable, T811* buff) {
IncreasePlayerWalletStatus* _d7392 = (IncreasePlayerWalletStatus*)serializable;
T813::_m16027(_d7392->getValue(), buff);
}

void T818::_m15805(Serializable* serializable, T811* buff) {
GetPlayerWalletStatus* _o7395 = (GetPlayerWalletStatus*)serializable;
T813::_m16027(_o7395->getValue(), buff);
}

void T818::_m15806(Serializable* serializable, T811* buff) {
GetAchievementBoardStatus* _q7398 = (GetAchievementBoardStatus*)serializable;
T813::_m16027(_q7398->getValue(), buff);
}

void T818::_m15807(Serializable* serializable, T811* buff) {
AchieveStatus* _u7401 = (AchieveStatus*)serializable;
T813::_m16027(_u7401->getValue(), buff);
}

void T818::_m15808(Serializable* serializable, T811* buff) {
SearchImmediateGameStatus* _u7404 = (SearchImmediateGameStatus*)serializable;
T813::_m16027(_u7404->getValue(), buff);
}

void T818::_m15809(Serializable* serializable, T811* buff) {
JoinGameStatus* _h7407 = (JoinGameStatus*)serializable;
T813::_m16027(_h7407->getValue(), buff);
}

void T818::_m15810(Serializable* serializable, T811* buff) {
UnjoinGameStatus* _x7410 = (UnjoinGameStatus*)serializable;
T813::_m16027(_x7410->getValue(), buff);
}

void T818::_m15811(Serializable* serializable, T811* buff) {
StartGameStatus* _g7413 = (StartGameStatus*)serializable;
T813::_m16027(_g7413->getValue(), buff);
}

void T818::_m15812(Serializable* serializable, T811* buff) {
StopGameStatus* _b7416 = (StopGameStatus*)serializable;
T813::_m16027(_b7416->getValue(), buff);
}

void T818::_m15813(Serializable* serializable, T811* buff) {
CreateGameStatus* _o7419 = (CreateGameStatus*)serializable;
T813::_m16027(_o7419->getValue(), buff);
}

void T818::_m15814(Serializable* serializable, T811* buff) {
GetGamesStatus* _o7422 = (GetGamesStatus*)serializable;
T813::_m16027(_o7422->getValue(), buff);
}

void T818::_m15815(Serializable* serializable, T811* buff) {
SaveAsGhostStatus* _t7425 = (SaveAsGhostStatus*)serializable;
T813::_m16027(_t7425->getValue(), buff);
}

void T818::_m15816(Serializable* serializable, T811* buff) {
GetGhostsStatus* _s7428 = (GetGhostsStatus*)serializable;
T813::_m16027(_s7428->getValue(), buff);
}

void T818::_m15817(Serializable* serializable, T811* buff) {
LoadGhostStatus* _y7431 = (LoadGhostStatus*)serializable;
T813::_m16027(_y7431->getValue(), buff);
}

void T818::_m15818(Serializable* serializable, T811* buff) {
SendGameChatStatus* _j7434 = (SendGameChatStatus*)serializable;
T813::_m16027(_j7434->getValue(), buff);
}

void T818::_m15819(Serializable* serializable, T811* buff) {
GetStorablesStatus* _g7437 = (GetStorablesStatus*)serializable;
T813::_m16027(_g7437->getValue(), buff);
}

void T818::_m15820(Serializable* serializable, T811* buff) {
SaveStorableStatus* _g7440 = (SaveStorableStatus*)serializable;
T813::_m16027(_g7440->getValue(), buff);
}

void T818::_m15821(Serializable* serializable, T811* buff) {
NextPlayerTurnStatus* _o7443 = (NextPlayerTurnStatus*)serializable;
T813::_m16027(_o7443->getValue(), buff);
}

void T818::_m15822(Serializable* serializable, T811* buff) {
SetPlayerNameStatus* _f7446 = (SetPlayerNameStatus*)serializable;
T813::_m16027(_f7446->getValue(), buff);
}

void T818::_m15823(Serializable* serializable, T811* buff) {
UpdateStorableStatus* _p7449 = (UpdateStorableStatus*)serializable;
T813::_m16027(_p7449->getValue(), buff);
}

void T818::_m15824(Serializable* serializable, T811* buff) {
RemoveStorableStatus* _x7452 = (RemoveStorableStatus*)serializable;
T813::_m16027(_x7452->getValue(), buff);
}

void T818::_m15825(Serializable* serializable, T811* buff) {
InviteThirdPartyFriendStatus* _c7455 = (InviteThirdPartyFriendStatus*)serializable;
T813::_m16027(_c7455->getValue(), buff);
}

void T818::_m15826(Serializable* serializable, T811* buff) {
PublishThirdPartyMessageStatus* _j7458 = (PublishThirdPartyMessageStatus*)serializable;
T813::_m16027(_j7458->getValue(), buff);
}

void T818::_m15827(Serializable* serializable, T811* buff) {
ThirdPartyLoginStatus* _o7461 = (ThirdPartyLoginStatus*)serializable;
T813::_m16027(_o7461->getValue(), buff);
}

void T818::_m15828(Serializable* serializable, T811* buff) {
SaveGameStatus* _o7464 = (SaveGameStatus*)serializable;
T813::_m16027(_o7464->getValue(), buff);
}

void T818::_m15829(Serializable* serializable, T811* buff) {
LoadGameStatus* _u7467 = (LoadGameStatus*)serializable;
T813::_m16027(_u7467->getValue(), buff);
}

void T818::_m15830(Serializable* serializable, T811* buff) {
SavePlayerStorableStatus* _z7470 = (SavePlayerStorableStatus*)serializable;
T813::_m16027(_z7470->getValue(), buff);
}

void T818::_m15831(Serializable* serializable, T811* buff) {
UpdatePlayerStorableStatus* _r7473 = (UpdatePlayerStorableStatus*)serializable;
T813::_m16027(_r7473->getValue(), buff);
}

void T818::_m15832(Serializable* serializable, T811* buff) {
RemovePlayerStorableStatus* _v7476 = (RemovePlayerStorableStatus*)serializable;
T813::_m16027(_v7476->getValue(), buff);
}

void T818::_m15833(Serializable* serializable, T811* buff) {
GetPlayerStorablesStatus* _g7479 = (GetPlayerStorablesStatus*)serializable;
T813::_m16027(_g7479->getValue(), buff);
}

void T818::_m15834(Serializable* serializable, T811* buff) {
PauseSessionMonitoringStatus* _v7482 = (PauseSessionMonitoringStatus*)serializable;
T813::_m16027(_v7482->getValue(), buff);
}

void T818::_m15835(Serializable* serializable, T811* buff) {
ResumeSessionMonitoringStatus* _i7485 = (ResumeSessionMonitoringStatus*)serializable;
T813::_m16027(_i7485->getValue(), buff);
}

void T818::_m15836(Serializable* serializable, T811* buff) {
PublishFriendThirdPartyMessageStatus* _x7488 = (PublishFriendThirdPartyMessageStatus*)serializable;
T813::_m16027(_x7488->getValue(), buff);
}

void T818::_m15837(Serializable* serializable, T811* buff) {
InvitePlayerStatus* _a7491 = (InvitePlayerStatus*)serializable;
T813::_m16027(_a7491->getValue(), buff);
}

void T818::_m15838(Serializable* serializable, T811* buff) {
GetInvitationsStatus* _i7494 = (GetInvitationsStatus*)serializable;
T813::_m16027(_i7494->getValue(), buff);
}

void T818::_m15839(Serializable* serializable, T811* buff) {
AcceptInvitationStatus* _m7497 = (AcceptInvitationStatus*)serializable;
T813::_m16027(_m7497->getValue(), buff);
}

void T818::_m15840(Serializable* serializable, T811* buff) {
RefuseInvitationStatus* _u7500 = (RefuseInvitationStatus*)serializable;
T813::_m16027(_u7500->getValue(), buff);
}

void T818::_m15841(Serializable* serializable, T811* buff) {
int _x892 = buff->_m16028();
buff->_m16029(2);
short _c893 = 0;
bool _o894 = false;
Handshake* _v7506 = (Handshake*)serializable;
if (_v7506->isMessageIdSet() == true) {
_o894 = T813::_m16030(_v7506->getMessageId(), (short)0, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->isRequestIdSet() == true) {
_o894 = T813::_m16030(_v7506->getRequestId(), (short)1, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->isVersionSet() == true) {
_o894 = T813::_m16030(_v7506->getVersion(), (short)3, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->isReasonSet() == true) {
_o894 = T813::_m16031(this, _v7506->getReason(), (short)4, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->isplayerIdsStoredSet() == true) {
_o894 = T813::_m16030(_v7506->getPlayerIdsStored(), (short)5, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->issessionIdSet() == true) {
_o894 = T813::_m16030(_v7506->getSessionId(), (short)6, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->isplatformSet() == true) {
_o894 = T813::_m16030(_v7506->getPlatform(), (short)7, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->isspIdSet() == true) {
_o894 = T813::_m16030(_v7506->getSpId(), (short)8, buff);
if (_o894) {
_c893++;
}
}
if (_v7506->isdebugSpIdSet() == true) {
_o894 = T813::_m16030(_v7506->getDebugSpId(), (short)9, buff);
if (_o894) {
_c893++;
}
}
buff->_m16032(_x892, _c893);
}

void T818::_m15842(Serializable* serializable, T811* buff) {
int _a896 = buff->_m16028();
buff->_m16029(2);
short _i897 = 0;
bool _f898 = false;
HandshakeResponse* _u7512 = (HandshakeResponse*)serializable;
if (_u7512->isMessageIdSet() == true) {
_f898 = T813::_m16030(_u7512->getMessageId(), (short)0, buff);
if (_f898) {
_i897++;
}
}
if (_u7512->isRequestIdSet() == true) {
_f898 = T813::_m16030(_u7512->getRequestId(), (short)1, buff);
if (_f898) {
_i897++;
}
}
if (_u7512->isExecutionStatusSet() == true) {
_f898 = T813::_m16031(this, _u7512->getExecutionStatus(), (short)3, buff);
if (_f898) {
_i897++;
}
}
if (_u7512->isReasonSet() == true) {
_f898 = T813::_m16031(this, _u7512->getReason(), (short)4, buff);
if (_f898) {
_i897++;
}
}
if (_u7512->isplayerIdsStoredSet() == true) {
_f898 = T813::_m16030(_u7512->getPlayerIdsStored(), (short)5, buff);
if (_f898) {
_i897++;
}
}
if (_u7512->issessionIdSet() == true) {
_f898 = T813::_m16030(_u7512->getSessionId(), (short)6, buff);
if (_f898) {
_i897++;
}
}
if (_u7512->isPlayerSessionTypeSet() == true) {
_f898 = T813::_m16031(this, _u7512->getPlayerSessionType(), (short)7, buff);
if (_f898) {
_i897++;
}
}
if (_u7512->isPlayerSet() == true) {
_f898 = T813::_m16031(this, _u7512->getPlayer(), (short)8, buff);
if (_f898) {
_i897++;
}
}
buff->_m16032(_a896, _i897);
}

void T818::_m15843(Serializable* serializable, T811* buff) {
int _b900 = buff->_m16028();
buff->_m16029(2);
short _x901 = 0;
bool _l902 = false;
InvalidVersion* _l7518 = (InvalidVersion*)serializable;
if (_l7518->isMessageIdSet() == true) {
_l902 = T813::_m16030(_l7518->getMessageId(), (short)0, buff);
if (_l902) {
_x901++;
}
}
if (_l7518->isRequestIdSet() == true) {
_l902 = T813::_m16030(_l7518->getRequestId(), (short)1, buff);
if (_l902) {
_x901++;
}
}
buff->_m16032(_b900, _x901);
}

void T818::_m15844(Serializable* serializable, T811* buff) {
int _r904 = buff->_m16028();
buff->_m16029(2);
short _b905 = 0;
bool _o906 = false;
NPlayer* _v7524 = (NPlayer*)serializable;
if (_v7524->isstoreIdSet() == true) {
_o906 = T813::_m16030(_v7524->getStoreId(), (short)0, buff);
if (_o906) {
_b905++;
}
}
if (_v7524->isIDSet() == true) {
_o906 = T813::_m16030(_v7524->getID(), (short)2, buff);
if (_o906) {
_b905++;
}
}
if (_v7524->isAccessTokenSet() == true) {
_o906 = T813::_m16030(_v7524->getAccessToken(), (short)5, buff);
if (_o906) {
_b905++;
}
}
if (_v7524->isNameSet() == true) {
_o906 = T813::_m16030(_v7524->getName(), (short)6, buff);
if (_o906) {
_b905++;
}
}
if (_v7524->isConnectedSet() == true) {
_o906 = T813::_m16033(_v7524->isConnected(), (short)7, buff);
if (_o906) {
_b905++;
}
}
if (_v7524->isLoginSourceSet() == true) {
_o906 = T813::_m16031(this, _v7524->getLoginSource(), (short)8, buff);
if (_o906) {
_b905++;
}
}
if (_v7524->isThirdPartyIdSet() == true) {
_o906 = T813::_m16030(_v7524->getThirdPartyId(), (short)9, buff);
if (_o906) {
_b905++;
}
}
if (_v7524->isLangSet() == true) {
_o906 = T813::_m16030(_v7524->getLang(), (short)12, buff);
if (_o906) {
_b905++;
}
}
buff->_m16032(_r904, _b905);
}

void T818::_m15845(Serializable* serializable, T811* buff) {
int _r908 = buff->_m16028();
buff->_m16029(2);
short _u909 = 0;
bool _s910 = false;
GameStateChange* _k7530 = (GameStateChange*)serializable;
if (_k7530->isMessageIdSet() == true) {
_s910 = T813::_m16030(_k7530->getMessageId(), (short)0, buff);
if (_s910) {
_u909++;
}
}
if (_k7530->isRequestIdSet() == true) {
_s910 = T813::_m16030(_k7530->getRequestId(), (short)1, buff);
if (_s910) {
_u909++;
}
}
if (_k7530->isGameIdSet() == true) {
_s910 = T813::_m16030(_k7530->getGameId(), (short)3, buff);
if (_s910) {
_u909++;
}
}
if (_k7530->isGameRunningStateSet() == true) {
_s910 = T813::_m16031(this, _k7530->getGameRunningState(), (short)4, buff);
if (_s910) {
_u909++;
}
}
buff->_m16032(_r908, _u909);
}

void T818::_m15846(Serializable* serializable, T811* buff) {
int _w912 = buff->_m16028();
buff->_m16029(2);
short _u913 = 0;
bool _k914 = false;
NFriendDemand* _g7536 = (NFriendDemand*)serializable;
if (_g7536->isstoreIdSet() == true) {
_k914 = T813::_m16030(_g7536->getStoreId(), (short)0, buff);
if (_k914) {
_u913++;
}
}
if (_g7536->isEmitterSet() == true) {
_k914 = T813::_m16031(this, _g7536->getEmitter(), (short)2, buff);
if (_k914) {
_u913++;
}
}
if (_g7536->isReceiverIdSet() == true) {
_k914 = T813::_m16030(_g7536->getReceiverId(), (short)3, buff);
if (_k914) {
_u913++;
}
}
if (_g7536->isCustomMessageSet() == true) {
_k914 = T813::_m16030(_g7536->getCustomMessage(), (short)4, buff);
if (_k914) {
_u913++;
}
}
if (_g7536->isFriendDemandStatusSet() == true) {
_k914 = T813::_m16031(this, _g7536->getFriendDemandStatus(), (short)5, buff);
if (_k914) {
_u913++;
}
}
if (_g7536->isIdSet() == true) {
_k914 = T813::_m16030(_g7536->getId(), (short)6, buff);
if (_k914) {
_u913++;
}
}
buff->_m16032(_w912, _u913);
}

void T818::_m15847(Serializable* serializable, T811* buff) {
int _t916 = buff->_m16028();
buff->_m16029(2);
short _b917 = 0;
bool _x918 = false;
NScore* _b7542 = (NScore*)serializable;
if (_b7542->isstoreIdSet() == true) {
_x918 = T813::_m16030(_b7542->getStoreId(), (short)0, buff);
if (_x918) {
_b917++;
}
}
if (_b7542->isValueSet() == true) {
_x918 = T813::_m16034(_b7542->getValue(), (short)2, buff);
if (_x918) {
_b917++;
}
}
buff->_m16032(_t916, _b917);
}

void T818::_m15848(Serializable* serializable, T811* buff) {
int _q920 = buff->_m16028();
buff->_m16029(2);
short _p921 = 0;
bool _n922 = false;
NRoom* _y7548 = (NRoom*)serializable;
if (_y7548->isstoreIdSet() == true) {
_n922 = T813::_m16030(_y7548->getStoreId(), (short)0, buff);
if (_n922) {
_p921++;
}
}
if (_y7548->isIdSet() == true) {
_n922 = T813::_m16030(_y7548->getId(), (short)2, buff);
if (_n922) {
_p921++;
}
}
if (_y7548->isNameSet() == true) {
_n922 = T813::_m16030(_y7548->getName(), (short)3, buff);
if (_n922) {
_p921++;
}
}
if (_y7548->isPlayersSet() == true) {
std::vector<NPlayer*>* _s7549 = _y7548->getPlayers();
if (_s7549 == 0) {
_n922 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _i7550 = buff->_m16028();
buff->_m16029(4);
int _o7551 = _s7549->size();
buff->_m16035((short)_o7551);
for (unsigned int _x927 = 0; _x927 < (unsigned int)_o7551; _x927++) {
NPlayer* _l928 = (*_s7549)[_x927];
if (_l928 == 0) {
buff->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _l928, buff);
}
}
buff->_m16038(_i7550, buff->_m16028() - _i7550);
_n922 = true;
}
if (_n922) {
_p921++;
}
}
buff->_m16032(_q920, _p921);
}

void T818::_m15849(Serializable* serializable, T811* buff) {
int _q929 = buff->_m16028();
buff->_m16029(2);
short _s930 = 0;
bool _i931 = false;
NGame* _o7559 = (NGame*)serializable;
if (_o7559->isstoreIdSet() == true) {
_i931 = T813::_m16030(_o7559->getStoreId(), (short)0, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isIdSet() == true) {
_i931 = T813::_m16030(_o7559->getId(), (short)2, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isNameSet() == true) {
_i931 = T813::_m16030(_o7559->getName(), (short)3, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isPlayersSet() == true) {
std::vector<NPlayer*>* _f7560 = _o7559->getPlayers();
if (_f7560 == 0) {
_i931 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _l7561 = buff->_m16028();
buff->_m16029(4);
int _q7562 = _f7560->size();
buff->_m16035((short)_q7562);
for (unsigned int _g936 = 0; _g936 < (unsigned int)_q7562; _g936++) {
NPlayer* _p937 = (*_f7560)[_g936];
if (_p937 == 0) {
buff->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _p937, buff);
}
}
buff->_m16038(_l7561, buff->_m16028() - _l7561);
_i931 = true;
}
if (_i931) {
_s930++;
}
}
if (_o7559->isGameRunningStateSet() == true) {
_i931 = T813::_m16031(this, _o7559->getGameRunningState(), (short)2502, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isGameCharacteristicsSet() == true) {
_i931 = T813::_m16031(this, _o7559->getGameCharacteristics(), (short)2503, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isGameStateSet() == true) {
_i931 = T813::_m16031(this, _o7559->getGameState(), (short)2504, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isMatchMakingConditionsSet() == true) {
_i931 = T813::_m16031(this, _o7559->getMatchMakingConditions(), (short)2505, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isTurnBasedContextSet() == true) {
_i931 = T813::_m16031(this, _o7559->getTurnBasedContext(), (short)2506, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isDisconnectedContextSet() == true) {
_i931 = T813::_m16031(this, _o7559->getDisconnectedContext(), (short)2507, buff);
if (_i931) {
_s930++;
}
}
if (_o7559->isOwnerSet() == true) {
_i931 = T813::_m16031(this, _o7559->getOwner(), (short)2508, buff);
if (_i931) {
_s930++;
}
}
buff->_m16032(_q929, _s930);
}

void T818::_m15850(Serializable* serializable, T811* buff) {
int _m938 = buff->_m16028();
buff->_m16029(2);
short _g939 = 0;
bool _m940 = false;
NGameCharacteristics* _w7570 = (NGameCharacteristics*)serializable;
if (_w7570->isstoreIdSet() == true) {
_m940 = T813::_m16030(_w7570->getStoreId(), (short)0, buff);
if (_m940) {
_g939++;
}
}
if (_w7570->isMinPlayerSet() == true) {
_m940 = T813::_m16039(_w7570->getMinPlayer(), (short)2, buff);
if (_m940) {
_g939++;
}
}
if (_w7570->isMaxPlayerSet() == true) {
_m940 = T813::_m16039(_w7570->getMaxPlayer(), (short)3, buff);
if (_m940) {
_g939++;
}
}
if (_w7570->isAutoStopSet() == true) {
_m940 = T813::_m16033(_w7570->isAutoStop(), (short)4, buff);
if (_m940) {
_g939++;
}
}
if (_w7570->isAutoStartSet() == true) {
_m940 = T813::_m16033(_w7570->isAutoStart(), (short)5, buff);
if (_m940) {
_g939++;
}
}
buff->_m16032(_m938, _g939);
}

void T818::_m15851(Serializable* serializable, T811* buff) {
int _g942 = buff->_m16028();
buff->_m16029(2);
short _v943 = 0;
bool _f944 = false;
PlayerEnterGame* _c7576 = (PlayerEnterGame*)serializable;
if (_c7576->isMessageIdSet() == true) {
_f944 = T813::_m16030(_c7576->getMessageId(), (short)0, buff);
if (_f944) {
_v943++;
}
}
if (_c7576->isRequestIdSet() == true) {
_f944 = T813::_m16030(_c7576->getRequestId(), (short)1, buff);
if (_f944) {
_v943++;
}
}
if (_c7576->isGameIdSet() == true) {
_f944 = T813::_m16030(_c7576->getGameId(), (short)3, buff);
if (_f944) {
_v943++;
}
}
if (_c7576->isPlayerSet() == true) {
_f944 = T813::_m16031(this, _c7576->getPlayer(), (short)4, buff);
if (_f944) {
_v943++;
}
}
buff->_m16032(_g942, _v943);
}

void T818::_m15852(Serializable* serializable, T811* buff) {
int _t946 = buff->_m16028();
buff->_m16029(2);
short _j947 = 0;
bool _v948 = false;
AdminPublicMessage* _m7582 = (AdminPublicMessage*)serializable;
if (_m7582->isMessageIdSet() == true) {
_v948 = T813::_m16030(_m7582->getMessageId(), (short)0, buff);
if (_v948) {
_j947++;
}
}
if (_m7582->isRequestIdSet() == true) {
_v948 = T813::_m16030(_m7582->getRequestId(), (short)1, buff);
if (_v948) {
_j947++;
}
}
if (_m7582->isPlayerIdSet() == true) {
_v948 = T813::_m16030(_m7582->getPlayerId(), (short)4, buff);
if (_v948) {
_j947++;
}
}
if (_m7582->isMessageSet() == true) {
_v948 = T813::_m16030(_m7582->getMessage(), (short)5, buff);
if (_v948) {
_j947++;
}
}
buff->_m16032(_t946, _j947);
}

void T818::_m15853(Serializable* serializable, T811* buff) {
int _b950 = buff->_m16028();
buff->_m16029(2);
short _v951 = 0;
bool _w952 = false;
FriendshipNotification* _i7588 = (FriendshipNotification*)serializable;
if (_i7588->isMessageIdSet() == true) {
_w952 = T813::_m16030(_i7588->getMessageId(), (short)0, buff);
if (_w952) {
_v951++;
}
}
if (_i7588->isRequestIdSet() == true) {
_w952 = T813::_m16030(_i7588->getRequestId(), (short)1, buff);
if (_w952) {
_v951++;
}
}
if (_i7588->isFriendSet() == true) {
_w952 = T813::_m16031(this, _i7588->getFriend(), (short)4, buff);
if (_w952) {
_v951++;
}
}
buff->_m16032(_b950, _v951);
}

void T818::_m15854(Serializable* serializable, T811* buff) {
int _x954 = buff->_m16028();
buff->_m16029(2);
short _y955 = 0;
bool _h956 = false;
PlayerUnjoinGame* _p7594 = (PlayerUnjoinGame*)serializable;
if (_p7594->isMessageIdSet() == true) {
_h956 = T813::_m16030(_p7594->getMessageId(), (short)0, buff);
if (_h956) {
_y955++;
}
}
if (_p7594->isRequestIdSet() == true) {
_h956 = T813::_m16030(_p7594->getRequestId(), (short)1, buff);
if (_h956) {
_y955++;
}
}
if (_p7594->isGameIdSet() == true) {
_h956 = T813::_m16030(_p7594->getGameId(), (short)3, buff);
if (_h956) {
_y955++;
}
}
if (_p7594->isPlayerSet() == true) {
_h956 = T813::_m16031(this, _p7594->getPlayer(), (short)4, buff);
if (_h956) {
_y955++;
}
}
buff->_m16032(_x954, _y955);
}

void T818::_m15855(Serializable* serializable, T811* buff) {
int _z958 = buff->_m16028();
buff->_m16029(2);
short _l959 = 0;
bool _i960 = false;
DnsRequest* _l7600 = (DnsRequest*)serializable;
if (_l7600->isMessageIdSet() == true) {
_i960 = T813::_m16030(_l7600->getMessageId(), (short)0, buff);
if (_i960) {
_l959++;
}
}
if (_l7600->isRequestIdSet() == true) {
_i960 = T813::_m16030(_l7600->getRequestId(), (short)1, buff);
if (_i960) {
_l959++;
}
}
if (_l7600->isGameIdSet() == true) {
_i960 = T813::_m16030(_l7600->getGameId(), (short)3, buff);
if (_i960) {
_l959++;
}
}
if (_l7600->isGameVersionSet() == true) {
_i960 = T813::_m16039(_l7600->getGameVersion(), (short)4, buff);
if (_i960) {
_l959++;
}
}
if (_l7600->isGameDeployedVersionSet() == true) {
_i960 = T813::_m16039(_l7600->getGameDeployedVersion(), (short)5, buff);
if (_i960) {
_l959++;
}
}
if (_l7600->isPlatformSet() == true) {
_i960 = T813::_m16030(_l7600->getPlatform(), (short)6, buff);
if (_i960) {
_l959++;
}
}
buff->_m16032(_z958, _l959);
}

void T818::_m15856(Serializable* _t7303, T811* _k7304) {
int _d962 = _k7304->_m16028();
_k7304->_m16029(2);
short _c963 = 0;
bool _u964 = false;
DnsResponse* _k7606 = (DnsResponse*)_t7303;
if (_k7606->isMessageIdSet() == true) {
_u964 = T813::_m16030(_k7606->getMessageId(), (short)0, _k7304);
if (_u964) {
_c963++;
}
}
if (_k7606->isRequestIdSet() == true) {
_u964 = T813::_m16030(_k7606->getRequestId(), (short)1, _k7304);
if (_u964) {
_c963++;
}
}
if (_k7606->isIpAddressSet() == true) {
_u964 = T813::_m16030(_k7606->getIpAddress(), (short)3, _k7304);
if (_u964) {
_c963++;
}
}
if (_k7606->isTcpPortSet() == true) {
_u964 = T813::_m16039(_k7606->getTcpPort(), (short)4, _k7304);
if (_u964) {
_c963++;
}
}
if (_k7606->isDnsStatusSet() == true) {
_u964 = T813::_m16031(this, _k7606->getDnsStatus(), (short)5, _k7304);
if (_u964) {
_c963++;
}
}
if (_k7606->isStartDetailsSet() == true) {
_u964 = T813::_m16031(this, _k7606->getStartDetails(), (short)6, _k7304);
if (_u964) {
_c963++;
}
}
_k7304->_m16032(_d962, _c963);
}

void T818::_m15857(Serializable* _m7309, T811* _l7310) {
int _u966 = _l7310->_m16028();
_l7310->_m16029(2);
short _z967 = 0;
bool _b968 = false;
ConnectionLost* _a7612 = (ConnectionLost*)_m7309;
if (_a7612->isMessageIdSet() == true) {
_b968 = T813::_m16030(_a7612->getMessageId(), (short)0, _l7310);
if (_b968) {
_z967++;
}
}
if (_a7612->isRequestIdSet() == true) {
_b968 = T813::_m16030(_a7612->getRequestId(), (short)1, _l7310);
if (_b968) {
_z967++;
}
}
_l7310->_m16032(_u966, _z967);
}

void T818::_m15858(Serializable* _d7327, T811* _b7328) {
int _v970 = _b7328->_m16028();
_b7328->_m16029(2);
short _s971 = 0;
bool _s972 = false;
NWorldUpdate* _e7618 = (NWorldUpdate*)_d7327;
if (_e7618->isstoreIdSet() == true) {
_s972 = T813::_m16030(_e7618->getStoreId(), (short)0, _b7328);
if (_s972) {
_s971++;
}
}
if (_e7618->isUpdateSet() == true) {
_s972 = T813::_m16039(_e7618->getUpdate(), (short)2, _b7328);
if (_s972) {
_s971++;
}
}
if (_e7618->isValuesSet() == true) {
std::vector<Message*>* _q7619 = _e7618->getValues();
if (_q7619 == 0) {
_s972 = false;
} else {
_b7328->_m16035((short)3);
_b7328->_m16036(T809::_y15502);
int _m7620 = _b7328->_m16028();
_b7328->_m16029(4);
int _y7621 = _q7619->size();
_b7328->_m16035((short)_y7621);
for (unsigned int _i977 = 0; _i977 < (unsigned int)_y7621; _i977++) {
Message* _e978 = (*_q7619)[_i977];
if (_e978 == 0) {
_b7328->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _e978, _b7328);
}
}
_b7328->_m16038(_m7620, _b7328->_m16028() - _m7620);
_s972 = true;
}
if (_s972) {
_s971++;
}
}
_b7328->_m16032(_v970, _s971);
}

void T818::_m15859(Serializable* _r7336, T811* _r7337) {
int _b979 = _r7337->_m16028();
_r7337->_m16029(2);
short _j980 = 0;
bool _h981 = false;
StopPlugConnectionRequest* _q7629 = (StopPlugConnectionRequest*)_r7336;
if (_q7629->isMessageIdSet() == true) {
_h981 = T813::_m16030(_q7629->getMessageId(), (short)0, _r7337);
if (_h981) {
_j980++;
}
}
if (_q7629->isRequestIdSet() == true) {
_h981 = T813::_m16030(_q7629->getRequestId(), (short)1, _r7337);
if (_h981) {
_j980++;
}
}
_r7337->_m16032(_b979, _j980);
}

void T818::_m15860(Serializable* _r7342, T811* _i7343) {
int _h983 = _i7343->_m16028();
_i7343->_m16029(2);
short _h984 = 0;
bool _p985 = false;
StopPlugConnectionResponse* _p7635 = (StopPlugConnectionResponse*)_r7342;
if (_p7635->isMessageIdSet() == true) {
_p985 = T813::_m16030(_p7635->getMessageId(), (short)0, _i7343);
if (_p985) {
_h984++;
}
}
if (_p7635->isRequestIdSet() == true) {
_p985 = T813::_m16030(_p7635->getRequestId(), (short)1, _i7343);
if (_p985) {
_h984++;
}
}
_i7343->_m16032(_h983, _h984);
}

void T818::_m15861(Serializable* _t7351, T811* _l7352) {
int _t987 = _l7352->_m16028();
_l7352->_m16029(2);
short _a988 = 0;
bool _l989 = false;
ConnectionInterrupted* _e7641 = (ConnectionInterrupted*)_t7351;
if (_e7641->isMessageIdSet() == true) {
_l989 = T813::_m16030(_e7641->getMessageId(), (short)0, _l7352);
if (_l989) {
_a988++;
}
}
if (_e7641->isRequestIdSet() == true) {
_l989 = T813::_m16030(_e7641->getRequestId(), (short)1, _l7352);
if (_l989) {
_a988++;
}
}
_l7352->_m16032(_t987, _a988);
}

void T818::_m15862(Serializable* _o7357, T811* _y7358) {
int _d991 = _y7358->_m16028();
_y7358->_m16029(2);
short _u992 = 0;
bool _j993 = false;
ConnectionResumed* _o7647 = (ConnectionResumed*)_o7357;
if (_o7647->isMessageIdSet() == true) {
_j993 = T813::_m16030(_o7647->getMessageId(), (short)0, _y7358);
if (_j993) {
_u992++;
}
}
if (_o7647->isRequestIdSet() == true) {
_j993 = T813::_m16030(_o7647->getRequestId(), (short)1, _y7358);
if (_j993) {
_u992++;
}
}
_y7358->_m16032(_d991, _u992);
}

void T818::_m15863(Serializable* _a7366, T811* _t7367) {
int _l995 = _t7367->_m16028();
_t7367->_m16029(2);
short _h996 = 0;
bool _q997 = false;
ConnectionStop* _o7653 = (ConnectionStop*)_a7366;
if (_o7653->isMessageIdSet() == true) {
_q997 = T813::_m16030(_o7653->getMessageId(), (short)0, _t7367);
if (_q997) {
_h996++;
}
}
if (_o7653->isRequestIdSet() == true) {
_q997 = T813::_m16030(_o7653->getRequestId(), (short)1, _t7367);
if (_q997) {
_h996++;
}
}
_t7367->_m16032(_l995, _h996);
}

void T818::_m15864(Serializable* _p7378, T811* _x7379) {
int _g999 = _x7379->_m16028();
_x7379->_m16029(2);
short _w1000 = 0;
bool _m1001 = false;
NuggetaQuery* _q7659 = (NuggetaQuery*)_p7378;
if (_q7659->isdomainSet() == true) {
_m1001 = T813::_m16030(_q7659->getDomain(), (short)0, _x7379);
if (_m1001) {
_w1000++;
}
}
if (_q7659->isstartSet() == true) {
_m1001 = T813::_m16039(_q7659->getStart(), (short)1, _x7379);
if (_m1001) {
_w1000++;
}
}
if (_q7659->islimitSet() == true) {
_m1001 = T813::_m16039(_q7659->getLimit(), (short)2, _x7379);
if (_m1001) {
_w1000++;
}
}
if (_q7659->isquerySet() == true) {
_m1001 = T813::_m16030(_q7659->getQuery(), (short)3, _x7379);
if (_m1001) {
_w1000++;
}
}
_x7379->_m16032(_g999, _w1000);
}

void T818::_m15865(Serializable* _p7390, T811* _o7391) {
int _e1003 = _o7391->_m16028();
_o7391->_m16029(2);
short _q1004 = 0;
bool _m1005 = false;
FriendConnectedNotification* _i7665 = (FriendConnectedNotification*)_p7390;
if (_i7665->isMessageIdSet() == true) {
_m1005 = T813::_m16030(_i7665->getMessageId(), (short)0, _o7391);
if (_m1005) {
_q1004++;
}
}
if (_i7665->isRequestIdSet() == true) {
_m1005 = T813::_m16030(_i7665->getRequestId(), (short)1, _o7391);
if (_m1005) {
_q1004++;
}
}
if (_i7665->isfriendSet() == true) {
_m1005 = T813::_m16031(this, _i7665->getFriend(), (short)3, _o7391);
if (_m1005) {
_q1004++;
}
}
_o7391->_m16032(_e1003, _q1004);
}

void T818::_m15866(Serializable* _d7399, T811* _o7400) {
int _o1007 = _o7400->_m16028();
_o7400->_m16029(2);
short _m1008 = 0;
bool _f1009 = false;
FriendDisconnectedNotification* _k7671 = (FriendDisconnectedNotification*)_d7399;
if (_k7671->isMessageIdSet() == true) {
_f1009 = T813::_m16030(_k7671->getMessageId(), (short)0, _o7400);
if (_f1009) {
_m1008++;
}
}
if (_k7671->isRequestIdSet() == true) {
_f1009 = T813::_m16030(_k7671->getRequestId(), (short)1, _o7400);
if (_f1009) {
_m1008++;
}
}
if (_k7671->isfriendSet() == true) {
_f1009 = T813::_m16031(this, _k7671->getFriend(), (short)3, _o7400);
if (_f1009) {
_m1008++;
}
}
_o7400->_m16032(_o1007, _m1008);
}

void T818::_m15867(Serializable* _u7408, T811* _u7409) {
int _j1011 = _u7409->_m16028();
_u7409->_m16029(2);
short _k1012 = 0;
bool _u1013 = false;
NPlayerWallet* _n7677 = (NPlayerWallet*)_u7408;
if (_n7677->isstoreIdSet() == true) {
_u1013 = T813::_m16030(_n7677->getStoreId(), (short)0, _u7409);
if (_u1013) {
_k1012++;
}
}
if (_n7677->isNbCoinsSet() == true) {
_u1013 = T813::_m16039(_n7677->getNbCoins(), (short)3, _u7409);
if (_u1013) {
_k1012++;
}
}
_u7409->_m16032(_j1011, _k1012);
}

void T818::_m15868(Serializable* _l7426, T811* _q7427) {
int _h1015 = _q7427->_m16028();
_q7427->_m16029(2);
short _g1016 = 0;
bool _j1017 = false;
NItem* _a7683 = (NItem*)_l7426;
if (_a7683->isstoreIdSet() == true) {
_j1017 = T813::_m16030(_a7683->getStoreId(), (short)0, _q7427);
if (_j1017) {
_g1016++;
}
}
if (_a7683->isIdSet() == true) {
_j1017 = T813::_m16030(_a7683->getId(), (short)2, _q7427);
if (_j1017) {
_g1016++;
}
}
if (_a7683->isNameSet() == true) {
_j1017 = T813::_m16030(_a7683->getName(), (short)3, _q7427);
if (_j1017) {
_g1016++;
}
}
if (_a7683->isPriceSet() == true) {
_j1017 = T813::_m16039(_a7683->getPrice(), (short)4, _q7427);
if (_j1017) {
_g1016++;
}
}
if (_a7683->isBoughtSet() == true) {
_j1017 = T813::_m16033(_a7683->isBought(), (short)5, _q7427);
if (_j1017) {
_g1016++;
}
}
if (_a7683->isCountSet() == true) {
_j1017 = T813::_m16039(_a7683->getCount(), (short)6, _q7427);
if (_j1017) {
_g1016++;
}
}
_q7427->_m16032(_h1015, _g1016);
}

void T818::_m15869(Serializable* _o7459, T811* _t7460) {
int _g1019 = _t7460->_m16028();
_t7460->_m16029(2);
short _k1020 = 0;
bool _i1021 = false;
NAchievement* _u7689 = (NAchievement*)_o7459;
if (_u7689->isstoreIdSet() == true) {
_i1021 = T813::_m16030(_u7689->getStoreId(), (short)0, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isIdSet() == true) {
_i1021 = T813::_m16030(_u7689->getId(), (short)2, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isNameSet() == true) {
_i1021 = T813::_m16030(_u7689->getName(), (short)3, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isAchievedSet() == true) {
_i1021 = T813::_m16033(_u7689->isAchieved(), (short)4, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isDescriptionSet() == true) {
_i1021 = T813::_m16030(_u7689->getDescription(), (short)6, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isNXPSet() == true) {
_i1021 = T813::_m16039(_u7689->getNXP(), (short)7, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isNEnergySet() == true) {
_i1021 = T813::_m16039(_u7689->getNEnergy(), (short)8, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isTypeSet() == true) {
_i1021 = T813::_m16031(this, _u7689->getType(), (short)9, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isGoalSet() == true) {
_i1021 = T813::_m16039(_u7689->getGoal(), (short)10, _t7460);
if (_i1021) {
_k1020++;
}
}
if (_u7689->isProgressSet() == true) {
_i1021 = T813::_m16039(_u7689->getProgress(), (short)11, _t7460);
if (_i1021) {
_k1020++;
}
}
_t7460->_m16032(_g1019, _k1020);
}

void T818::_m15870(Serializable* _k7474, T811* _n7475) {
int _y1023 = _n7475->_m16028();
_n7475->_m16029(2);
short _h1024 = 0;
bool _d1025 = false;
NGameState* _y7695 = (NGameState*)_k7474;
if (_y7695->isstoreIdSet() == true) {
_d1025 = T813::_m16030(_y7695->getStoreId(), (short)0, _n7475);
if (_d1025) {
_h1024++;
}
}
if (_y7695->isUpdatesSet() == true) {
std::vector<NWorldUpdate*>* _t7696 = _y7695->getUpdates();
if (_t7696 == 0) {
_d1025 = false;
} else {
_n7475->_m16035((short)2);
_n7475->_m16036(T809::_y15502);
int _w7697 = _n7475->_m16028();
_n7475->_m16029(4);
int _k7698 = _t7696->size();
_n7475->_m16035((short)_k7698);
for (unsigned int _a1030 = 0; _a1030 < (unsigned int)_k7698; _a1030++) {
NWorldUpdate* _w1031 = (*_t7696)[_a1030];
if (_w1031 == 0) {
_n7475->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _w1031, _n7475);
}
}
_n7475->_m16038(_w7697, _n7475->_m16028() - _w7697);
_d1025 = true;
}
if (_d1025) {
_h1024++;
}
}
_n7475->_m16032(_y1023, _h1024);
}

void T818::_m15871(Serializable* _b7486, T811* _y7487) {
int _v1032 = _y7487->_m16028();
_y7487->_m16029(2);
short _i1033 = 0;
bool _f1034 = false;
NuggetaException* _l7706 = (NuggetaException*)_b7486;
if (_l7706->isMessageIdSet() == true) {
_f1034 = T813::_m16030(_l7706->getMessageId(), (short)0, _y7487);
if (_f1034) {
_i1033++;
}
}
if (_l7706->isRequestIdSet() == true) {
_f1034 = T813::_m16030(_l7706->getRequestId(), (short)1, _y7487);
if (_f1034) {
_i1033++;
}
}
if (_l7706->isErrorCodeSet() == true) {
_f1034 = T813::_m16031(this, _l7706->getErrorCode(), (short)3, _y7487);
if (_f1034) {
_i1033++;
}
}
if (_l7706->isReasonSet() == true) {
_f1034 = T813::_m16030(_l7706->getReason(), (short)4, _y7487);
if (_f1034) {
_i1033++;
}
}
_y7487->_m16032(_v1032, _i1033);
}

void T818::_m15872(Serializable* _y7501, T811* _q7502) {
int _m1036 = _q7502->_m16028();
_q7502->_m16029(2);
short _j1037 = 0;
bool _g1038 = false;
NCoinPackage* _n7712 = (NCoinPackage*)_y7501;
if (_n7712->isstoreIdSet() == true) {
_g1038 = T813::_m16030(_n7712->getStoreId(), (short)0, _q7502);
if (_g1038) {
_j1037++;
}
}
if (_n7712->isCoinPackageIdSet() == true) {
_g1038 = T813::_m16030(_n7712->getCoinPackageId(), (short)2, _q7502);
if (_g1038) {
_j1037++;
}
}
if (_n7712->isVirtualValueSet() == true) {
_g1038 = T813::_m16040(_n7712->getVirtualValue(), (short)3, _q7502);
if (_g1038) {
_j1037++;
}
}
if (_n7712->isProductIdSet() == true) {
_g1038 = T813::_m16030(_n7712->getProductId(), (short)4, _q7502);
if (_g1038) {
_j1037++;
}
}
_q7502->_m16032(_m1036, _j1037);
}

void T818::_m15873(Serializable* serializable, T811* buff) {
int _v7503 = buff->_m16028();
buff->_m16029(2);
short _k7504 = 0;
bool _n7505 = false;
BuyProductUrl* _t7718 = (BuyProductUrl*)serializable;
if (_t7718->isMessageIdSet() == true) {
_n7505 = T813::_m16030(_t7718->getMessageId(), (short)0, buff);
if (_n7505) {
_k7504++;
}
}
if (_t7718->isRequestIdSet() == true) {
_n7505 = T813::_m16030(_t7718->getRequestId(), (short)1, buff);
if (_n7505) {
_k7504++;
}
}
if (_t7718->isurlSet() == true) {
_n7505 = T813::_m16030(_t7718->getUrl(), (short)3, buff);
if (_n7505) {
_k7504++;
}
}
buff->_m16032(_v7503, _k7504);
}

void T818::_m15874(Serializable* serializable, T811* buff) {
int _z1044 = buff->_m16028();
buff->_m16029(2);
short _d1045 = 0;
bool _e1046 = false;
BuyProductNotification* _s7724 = (BuyProductNotification*)serializable;
if (_s7724->isMessageIdSet() == true) {
_e1046 = T813::_m16030(_s7724->getMessageId(), (short)0, buff);
if (_e1046) {
_d1045++;
}
}
if (_s7724->isRequestIdSet() == true) {
_e1046 = T813::_m16030(_s7724->getRequestId(), (short)1, buff);
if (_e1046) {
_d1045++;
}
}
buff->_m16032(_z1044, _d1045);
}

void T818::_m15875(Serializable* serializable, T811* buff) {
int _v1048 = buff->_m16028();
buff->_m16029(2);
short _q1049 = 0;
bool _p1050 = false;
NMatchMakingConditions* _n7730 = (NMatchMakingConditions*)serializable;
if (_n7730->isstoreIdSet() == true) {
_p1050 = T813::_m16030(_n7730->getStoreId(), (short)0, buff);
if (_p1050) {
_q1049++;
}
}
if (_n7730->isMatchMakingTypeSet() == true) {
_p1050 = T813::_m16031(this, _n7730->getMatchMakingType(), (short)2, buff);
if (_p1050) {
_q1049++;
}
}
buff->_m16032(_v1048, _q1049);
}

void T818::_m15876(Serializable* serializable, T811* buff) {
int _e1052 = buff->_m16028();
buff->_m16029(2);
short _i1053 = 0;
bool _u1054 = false;
OpenConnection* _o7736 = (OpenConnection*)serializable;
if (_o7736->isMessageIdSet() == true) {
_u1054 = T813::_m16030(_o7736->getMessageId(), (short)0, buff);
if (_u1054) {
_i1053++;
}
}
if (_o7736->isRequestIdSet() == true) {
_u1054 = T813::_m16030(_o7736->getRequestId(), (short)1, buff);
if (_u1054) {
_i1053++;
}
}
if (_o7736->isIpAddressSet() == true) {
_u1054 = T813::_m16030(_o7736->getIpAddress(), (short)3, buff);
if (_u1054) {
_i1053++;
}
}
if (_o7736->isTcpPortSet() == true) {
_u1054 = T813::_m16039(_o7736->getTcpPort(), (short)4, buff);
if (_u1054) {
_i1053++;
}
}
buff->_m16032(_e1052, _i1053);
}

void T818::_m15877(Serializable* serializable, T811* buff) {
int _q1056 = buff->_m16028();
buff->_m16029(2);
short _n1057 = 0;
bool _k1058 = false;
PlayerMessage* _r7742 = (PlayerMessage*)serializable;
if (_r7742->isMessageIdSet() == true) {
_k1058 = T813::_m16030(_r7742->getMessageId(), (short)0, buff);
if (_k1058) {
_n1057++;
}
}
if (_r7742->isstoreIdSet() == true) {
_k1058 = T813::_m16030(_r7742->getStoreId(), (short)1, buff);
if (_k1058) {
_n1057++;
}
}
if (_r7742->isRequestIdSet() == true) {
_k1058 = T813::_m16030(_r7742->getRequestId(), (short)6, buff);
if (_k1058) {
_n1057++;
}
}
if (_r7742->isplayerIdSet() == true) {
_k1058 = T813::_m16030(_r7742->getPlayerId(), (short)9, buff);
if (_k1058) {
_n1057++;
}
}
if (_r7742->ismessageSet() == true) {
_k1058 = T813::_m16031(this, _r7742->getMessage(), (short)10, buff);
if (_k1058) {
_n1057++;
}
}
buff->_m16032(_q1056, _n1057);
}

void T818::_m15878(Serializable* _y7507, T811* _t7508) {
int _q7509 = _t7508->_m16028();
_t7508->_m16029(2);
short _u7510 = 0;
bool _z7511 = false;
NRawMessage* _j7748 = (NRawMessage*)_y7507;
if (_j7748->isMessageIdSet() == true) {
_z7511 = T813::_m16030(_j7748->getMessageId(), (short)0, _t7508);
if (_z7511) {
_u7510++;
}
}
if (_j7748->isSenderIdSet() == true) {
_z7511 = T813::_m16030(_j7748->getSenderId(), (short)1, _t7508);
if (_z7511) {
_u7510++;
}
}
if (_j7748->isstoreIdSet() == true) {
_z7511 = T813::_m16030(_j7748->getStoreId(), (short)2, _t7508);
if (_z7511) {
_u7510++;
}
}
if (_j7748->isRequestIdSet() == true) {
_z7511 = T813::_m16030(_j7748->getRequestId(), (short)7, _t7508);
if (_z7511) {
_u7510++;
}
}
if (_j7748->isgameIdSet() == true) {
_z7511 = T813::_m16030(_j7748->getGameId(), (short)10, _t7508);
if (_z7511) {
_u7510++;
}
}
if (_j7748->iscontentSet() == true) {
_z7511 = T813::_m16030(_j7748->getContent(), (short)11, _t7508);
if (_z7511) {
_u7510++;
}
}
_t7508->_m16032(_q7509, _u7510);
}

void T818::_m15879(Serializable* serializable, T811* buff) {
int _p1064 = buff->_m16028();
buff->_m16029(2);
short _k1065 = 0;
bool _a1066 = false;
SessionExpired* _v7754 = (SessionExpired*)serializable;
if (_v7754->isMessageIdSet() == true) {
_a1066 = T813::_m16030(_v7754->getMessageId(), (short)0, buff);
if (_a1066) {
_k1065++;
}
}
if (_v7754->isRequestIdSet() == true) {
_a1066 = T813::_m16030(_v7754->getRequestId(), (short)1, buff);
if (_a1066) {
_k1065++;
}
}
if (_v7754->issessionIdSet() == true) {
_a1066 = T813::_m16030(_v7754->getSessionId(), (short)3, buff);
if (_a1066) {
_k1065++;
}
}
buff->_m16032(_p1064, _k1065);
}

void T818::_m15880(Serializable* serializable, T811* buff) {
int _l1068 = buff->_m16028();
buff->_m16029(2);
short _d1069 = 0;
bool _d1070 = false;
GameMessageError* _o7760 = (GameMessageError*)serializable;
if (_o7760->isMessageIdSet() == true) {
_d1070 = T813::_m16030(_o7760->getMessageId(), (short)0, buff);
if (_d1070) {
_d1069++;
}
}
if (_o7760->isRequestIdSet() == true) {
_d1070 = T813::_m16030(_o7760->getRequestId(), (short)1, buff);
if (_d1070) {
_d1069++;
}
}
if (_o7760->isReasonSet() == true) {
_d1070 = T813::_m16030(_o7760->getReason(), (short)3, buff);
if (_d1070) {
_d1069++;
}
}
buff->_m16032(_l1068, _d1069);
}

void T818::_m15881(Serializable* serializable, T811* buff) {
int _d1072 = buff->_m16028();
buff->_m16029(2);
short _t1073 = 0;
bool _s1074 = false;
AdDisplayedNotification* _f7766 = (AdDisplayedNotification*)serializable;
if (_f7766->isMessageIdSet() == true) {
_s1074 = T813::_m16030(_f7766->getMessageId(), (short)0, buff);
if (_s1074) {
_t1073++;
}
}
if (_f7766->isRequestIdSet() == true) {
_s1074 = T813::_m16030(_f7766->getRequestId(), (short)1, buff);
if (_s1074) {
_t1073++;
}
}
buff->_m16032(_d1072, _t1073);
}

void T818::_m15882(Serializable* _i7519, T811* _j7520) {
int _s7521 = _j7520->_m16028();
_j7520->_m16029(2);
short _f7522 = 0;
bool _d7523 = false;
NPlayerProfile* _i7772 = (NPlayerProfile*)_i7519;
if (_i7772->isstoreIdSet() == true) {
_d7523 = T813::_m16030(_i7772->getStoreId(), (short)0, _j7520);
if (_d7523) {
_f7522++;
}
}
if (_i7772->isAvatarSet() == true) {
_d7523 = T813::_m16030(_i7772->getAvatar(), (short)2, _j7520);
if (_d7523) {
_f7522++;
}
}
if (_i7772->isPlayerIdSet() == true) {
_d7523 = T813::_m16030(_i7772->getPlayerId(), (short)3, _j7520);
if (_d7523) {
_f7522++;
}
}
if (_i7772->isCountrySet() == true) {
_d7523 = T813::_m16030(_i7772->getCountry(), (short)5, _j7520);
if (_d7523) {
_f7522++;
}
}
if (_i7772->isNXPSet() == true) {
_d7523 = T813::_m16039(_i7772->getNXP(), (short)9, _j7520);
if (_d7523) {
_f7522++;
}
}
if (_i7772->isNEnergySet() == true) {
_d7523 = T813::_m16039(_i7772->getNEnergy(), (short)10, _j7520);
if (_d7523) {
_f7522++;
}
}
if (_i7772->isNLevelSet() == true) {
_d7523 = T813::_m16031(this, _i7772->getNLevel(), (short)13, _j7520);
if (_d7523) {
_f7522++;
}
}
_j7520->_m16032(_s7521, _f7522);
}

void T818::_m15883(Serializable* serializable, T811* buff) {
int _d1080 = buff->_m16028();
buff->_m16029(2);
short _c1081 = 0;
bool _g1082 = false;
FriendDemandNotification* _m7778 = (FriendDemandNotification*)serializable;
if (_m7778->isMessageIdSet() == true) {
_g1082 = T813::_m16030(_m7778->getMessageId(), (short)0, buff);
if (_g1082) {
_c1081++;
}
}
if (_m7778->isRequestIdSet() == true) {
_g1082 = T813::_m16030(_m7778->getRequestId(), (short)1, buff);
if (_g1082) {
_c1081++;
}
}
if (_m7778->isFriendDemandSet() == true) {
_g1082 = T813::_m16031(this, _m7778->getFriendDemand(), (short)3, buff);
if (_g1082) {
_c1081++;
}
}
buff->_m16032(_d1080, _c1081);
}

void T818::_m15884(Serializable* serializable, T811* buff) {
int _d1084 = buff->_m16028();
buff->_m16029(2);
short _p1085 = 0;
bool _i1086 = false;
GameChatNotification* _u7784 = (GameChatNotification*)serializable;
if (_u7784->isMessageIdSet() == true) {
_i1086 = T813::_m16030(_u7784->getMessageId(), (short)0, buff);
if (_i1086) {
_p1085++;
}
}
if (_u7784->isRequestIdSet() == true) {
_i1086 = T813::_m16030(_u7784->getRequestId(), (short)1, buff);
if (_i1086) {
_p1085++;
}
}
if (_u7784->isplayerSet() == true) {
_i1086 = T813::_m16031(this, _u7784->getPlayer(), (short)3, buff);
if (_i1086) {
_p1085++;
}
}
if (_u7784->ismessageSet() == true) {
_i1086 = T813::_m16030(_u7784->getMessage(), (short)4, buff);
if (_i1086) {
_p1085++;
}
}
buff->_m16032(_d1084, _p1085);
}

void T818::_m15885(Serializable* serializable, T811* buff) {
int _p1088 = buff->_m16028();
buff->_m16029(2);
short _s1089 = 0;
bool _w1090 = false;
PublicServer* _u7790 = (PublicServer*)serializable;
if (_u7790->isstoreIdSet() == true) {
_w1090 = T813::_m16030(_u7790->getStoreId(), (short)0, buff);
if (_w1090) {
_s1089++;
}
}
if (_u7790->isIdSet() == true) {
_w1090 = T813::_m16030(_u7790->getId(), (short)3, buff);
if (_w1090) {
_s1089++;
}
}
if (_u7790->isLocationSet() == true) {
_w1090 = T813::_m16030(_u7790->getLocation(), (short)4, buff);
if (_w1090) {
_s1089++;
}
}
if (_u7790->isPingSet() == true) {
_w1090 = T813::_m16040(_u7790->getPing(), (short)5, buff);
if (_w1090) {
_s1089++;
}
}
buff->_m16032(_p1088, _s1089);
}

void T818::_m15886(Serializable* _x7525, T811* _x7526) {
int _q1092 = _x7526->_m16028();
_x7526->_m16029(2);
short _j1093 = 0;
bool _x1094 = false;
SwitchToServerInformation* _x7796 = (SwitchToServerInformation*)_x7525;
if (_x7796->isMessageIdSet() == true) {
_x1094 = T813::_m16030(_x7796->getMessageId(), (short)0, _x7526);
if (_x1094) {
_j1093++;
}
}
if (_x7796->isRequestIdSet() == true) {
_x1094 = T813::_m16030(_x7796->getRequestId(), (short)1, _x7526);
if (_x1094) {
_j1093++;
}
}
if (_x7796->isAddressSet() == true) {
_x1094 = T813::_m16030(_x7796->getAddress(), (short)3, _x7526);
if (_x1094) {
_j1093++;
}
}
_x7526->_m16032(_q1092, _j1093);
}

void T818::_m15887(Serializable* serializable, T811* buff) {
int _b7527 = buff->_m16028();
buff->_m16029(2);
short _p7528 = 0;
bool _j7529 = false;
MyTurnNotification* _n7802 = (MyTurnNotification*)serializable;
if (_n7802->isMessageIdSet() == true) {
_j7529 = T813::_m16030(_n7802->getMessageId(), (short)0, buff);
if (_j7529) {
_p7528++;
}
}
if (_n7802->isRequestIdSet() == true) {
_j7529 = T813::_m16030(_n7802->getRequestId(), (short)1, buff);
if (_j7529) {
_p7528++;
}
}
if (_n7802->isGameIdSet() == true) {
_j7529 = T813::_m16030(_n7802->getGameId(), (short)3, buff);
if (_j7529) {
_p7528++;
}
}
buff->_m16032(_b7527, _p7528);
}

void T818::_m15888(Serializable* serializable, T811* buff) {
int _d1100 = buff->_m16028();
buff->_m16029(2);
short _p1101 = 0;
bool _j1102 = false;
PlayerTurnNotification* _j7808 = (PlayerTurnNotification*)serializable;
if (_j7808->isMessageIdSet() == true) {
_j1102 = T813::_m16030(_j7808->getMessageId(), (short)0, buff);
if (_j1102) {
_p1101++;
}
}
if (_j7808->isRequestIdSet() == true) {
_j1102 = T813::_m16030(_j7808->getRequestId(), (short)1, buff);
if (_j1102) {
_p1101++;
}
}
if (_j7808->isCurrentPlayerSet() == true) {
_j1102 = T813::_m16031(this, _j7808->getCurrentPlayer(), (short)3, buff);
if (_j1102) {
_p1101++;
}
}
if (_j7808->isGameIdSet() == true) {
_j1102 = T813::_m16030(_j7808->getGameId(), (short)4, buff);
if (_j1102) {
_p1101++;
}
}
buff->_m16032(_d1100, _p1101);
}

void T818::_m15889(Serializable* _i7531, T811* _m7532) {
int _u7533 = _m7532->_m16028();
_m7532->_m16029(2);
short _k7534 = 0;
bool _q7535 = false;
NStore* _o7814 = (NStore*)_i7531;
if (_o7814->isstoreIdSet() == true) {
_q7535 = T813::_m16030(_o7814->getStoreId(), (short)1, _m7532);
if (_q7535) {
_k7534++;
}
}
if (_o7814->isItemsSet() == true) {
std::vector<NItem*>* _m7815 = _o7814->getItems();
if (_m7815 == 0) {
_q7535 = false;
} else {
_m7532->_m16035((short)2);
_m7532->_m16036(T809::_y15502);
int _l7816 = _m7532->_m16028();
_m7532->_m16029(4);
int _y7817 = _m7815->size();
_m7532->_m16035((short)_y7817);
for (unsigned int _c1111 = 0; _c1111 < (unsigned int)_y7817; _c1111++) {
NItem* _d1112 = (*_m7815)[_c1111];
if (_d1112 == 0) {
_m7532->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _d1112, _m7532);
}
}
_m7532->_m16038(_l7816, _m7532->_m16028() - _l7816);
_q7535 = true;
}
if (_q7535) {
_k7534++;
}
}
_m7532->_m16032(_u7533, _k7534);
}

void T818::_m15890(Serializable* serializable, T811* buff) {
int _a1113 = buff->_m16028();
buff->_m16029(2);
short _n1114 = 0;
bool _d1115 = false;
NAchievementBoard* _i7825 = (NAchievementBoard*)serializable;
if (_i7825->isstoreIdSet() == true) {
_d1115 = T813::_m16030(_i7825->getStoreId(), (short)1, buff);
if (_d1115) {
_n1114++;
}
}
if (_i7825->isachievementsSet() == true) {
std::vector<NAchievement*>* _j7826 = _i7825->getAchievements();
if (_j7826 == 0) {
_d1115 = false;
} else {
buff->_m16035((short)2);
buff->_m16036(T809::_y15502);
int _c7827 = buff->_m16028();
buff->_m16029(4);
int _k7828 = _j7826->size();
buff->_m16035((short)_k7828);
for (unsigned int _e1120 = 0; _e1120 < (unsigned int)_k7828; _e1120++) {
NAchievement* _m1121 = (*_j7826)[_e1120];
if (_m1121 == 0) {
buff->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _m1121, buff);
}
}
buff->_m16038(_c7827, buff->_m16028() - _c7827);
_d1115 = true;
}
if (_d1115) {
_n1114++;
}
}
buff->_m16032(_a1113, _n1114);
}

void T818::_m15891(Serializable* _r7537, T811* _v7538) {
int _e7539 = _v7538->_m16028();
_v7538->_m16029(2);
short _j7540 = 0;
bool _i7541 = false;
NLeaderboard* _h7836 = (NLeaderboard*)_r7537;
if (_h7836->isIdSet() == true) {
_i7541 = T813::_m16030(_h7836->getId(), (short)2, _v7538);
if (_i7541) {
_j7540++;
}
}
if (_h7836->isNameSet() == true) {
_i7541 = T813::_m16030(_h7836->getName(), (short)3, _v7538);
if (_i7541) {
_j7540++;
}
}
if (_h7836->isleaderboardEntriesSet() == true) {
std::vector<NLeaderboardEntry*>* _i7837 = _h7836->getLeaderboardEntries();
if (_i7837 == 0) {
_i7541 = false;
} else {
_v7538->_m16035((short)4);
_v7538->_m16036(T809::_y15502);
int _v7838 = _v7538->_m16028();
_v7538->_m16029(4);
int _h7839 = _i7837->size();
_v7538->_m16035((short)_h7839);
for (unsigned int _a7552 = 0; _a7552 < (unsigned int)_h7839; _a7552++) {
NLeaderboardEntry* _e7553 = (*_i7837)[_a7552];
if (_e7553 == 0) {
_v7538->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _e7553, _v7538);
}
}
_v7538->_m16038(_v7838, _v7538->_m16028() - _v7838);
_i7541 = true;
}
if (_i7541) {
_j7540++;
}
}
_v7538->_m16032(_e7539, _j7540);
}

void T818::_m15892(Serializable* _f7543, T811* _k7544) {
int _t7545 = _k7544->_m16028();
_k7544->_m16029(2);
short _s7546 = 0;
bool _x7547 = false;
TestPrimitiveList* _c7847 = (TestPrimitiveList*)_f7543;
if (_c7847->isMessageIdSet() == true) {
_x7547 = T813::_m16030(_c7847->getMessageId(), (short)0, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isRequestIdSet() == true) {
_x7547 = T813::_m16030(_c7847->getRequestId(), (short)1, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isStringListSet() == true) {
_x7547 = T813::_m16041(this, _c7847->getStringList(), (short)3, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isIntegerListSet() == true) {
_x7547 = T813::_m16042(this, _c7847->getIntegerList(), (short)4, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isShortListSet() == true) {
_x7547 = T813::_m16043(this, _c7847->getShortList(), (short)5, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isLongListSet() == true) {
_x7547 = T813::_m16044(this, _c7847->getLongList(), (short)6, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isFloatListSet() == true) {
_x7547 = T813::_m16045(this, _c7847->getFloatList(), (short)7, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isDoubleListSet() == true) {
_x7547 = T813::_m16046(this, _c7847->getDoubleList(), (short)8, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isBooleanListSet() == true) {
_x7547 = T813::_m16047(this, _c7847->getBooleanList(), (short)9, _k7544);
if (_x7547) {
_s7546++;
}
}
if (_c7847->isPlayerMatrix2Set() == true) {
_x7547 = T813::_m16048(this, _c7847->getPlayerMatrix2(), (short)14, _k7544);
if (_x7547) {
_s7546++;
}
}
_k7544->_m16032(_t7545, _s7546);
}

void T818::_m15893(Serializable* serializable, T811* buff) {
int _f1135 = buff->_m16028();
buff->_m16029(2);
short _e1136 = 0;
bool _p1137 = false;
OpenUrl* _g7853 = (OpenUrl*)serializable;
if (_g7853->isMessageIdSet() == true) {
_p1137 = T813::_m16030(_g7853->getMessageId(), (short)0, buff);
if (_p1137) {
_e1136++;
}
}
if (_g7853->isRequestIdSet() == true) {
_p1137 = T813::_m16030(_g7853->getRequestId(), (short)1, buff);
if (_p1137) {
_e1136++;
}
}
if (_g7853->isurlSet() == true) {
_p1137 = T813::_m16030(_g7853->getUrl(), (short)3, buff);
if (_p1137) {
_e1136++;
}
}
buff->_m16032(_f1135, _e1136);
}

void T818::_m15894(Serializable* _i7554, T811* _r7555) {
int _k7556 = _r7555->_m16028();
_r7555->_m16029(2);
short _u7557 = 0;
bool _y7558 = false;
TurnBasedContext* _r7859 = (TurnBasedContext*)_i7554;
if (_r7859->isMessageIdSet() == true) {
_y7558 = T813::_m16030(_r7859->getMessageId(), (short)0, _r7555);
if (_y7558) {
_u7557++;
}
}
if (_r7859->isRequestIdSet() == true) {
_y7558 = T813::_m16030(_r7859->getRequestId(), (short)1, _r7555);
if (_y7558) {
_u7557++;
}
}
if (_r7859->isCurrentPlayerSet() == true) {
_y7558 = T813::_m16031(this, _r7859->getCurrentPlayer(), (short)3, _r7555);
if (_y7558) {
_u7557++;
}
}
_r7555->_m16032(_k7556, _u7557);
}

void T818::_m15895(Serializable* serializable, T811* buff) {
int _k1143 = buff->_m16028();
buff->_m16029(2);
short _m1144 = 0;
bool _g1145 = false;
DisconnectedContext* _r7865 = (DisconnectedContext*)serializable;
if (_r7865->isMessageIdSet() == true) {
_g1145 = T813::_m16030(_r7865->getMessageId(), (short)0, buff);
if (_g1145) {
_m1144++;
}
}
if (_r7865->isRequestIdSet() == true) {
_g1145 = T813::_m16030(_r7865->getRequestId(), (short)1, buff);
if (_g1145) {
_m1144++;
}
}
if (_r7865->isParticipantsSet() == true) {
std::vector<NPlayer*>* _w7866 = _r7865->getParticipants();
if (_w7866 == 0) {
_g1145 = false;
} else {
buff->_m16035((short)3);
buff->_m16036(T809::_y15502);
int _a7867 = buff->_m16028();
buff->_m16029(4);
int _r7868 = _w7866->size();
buff->_m16035((short)_r7868);
for (unsigned int _f7622 = 0; _f7622 < (unsigned int)_r7868; _f7622++) {
NPlayer* _e7623 = (*_w7866)[_f7622];
if (_e7623 == 0) {
buff->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _e7623, buff);
}
}
buff->_m16038(_a7867, buff->_m16028() - _a7867);
_g1145 = true;
}
if (_g1145) {
_m1144++;
}
}
buff->_m16032(_k1143, _m1144);
}

void T818::_m15896(Serializable* serializable, T811* buff) {
int _n1152 = buff->_m16028();
buff->_m16029(2);
short _s1153 = 0;
bool _d1154 = false;
OpenUrlData* _g7876 = (OpenUrlData*)serializable;
if (_g7876->isMessageIdSet() == true) {
_d1154 = T813::_m16030(_g7876->getMessageId(), (short)0, buff);
if (_d1154) {
_s1153++;
}
}
if (_g7876->isRequestIdSet() == true) {
_d1154 = T813::_m16030(_g7876->getRequestId(), (short)1, buff);
if (_d1154) {
_s1153++;
}
}
if (_g7876->isSessionIdSet() == true) {
_d1154 = T813::_m16030(_g7876->getSessionId(), (short)3, buff);
if (_d1154) {
_s1153++;
}
}
if (_g7876->isCallbackIdSet() == true) {
_d1154 = T813::_m16030(_g7876->getCallbackId(), (short)4, buff);
if (_d1154) {
_s1153++;
}
}
if (_g7876->isCallbackUrlSet() == true) {
_d1154 = T813::_m16030(_g7876->getCallbackUrl(), (short)5, buff);
if (_d1154) {
_s1153++;
}
}
if (_g7876->isThirdPartySourceSet() == true) {
_d1154 = T813::_m16031(this, _g7876->getThirdPartySource(), (short)6, buff);
if (_d1154) {
_s1153++;
}
}
if (_g7876->isThirdPartyIdSet() == true) {
_d1154 = T813::_m16030(_g7876->getThirdPartyId(), (short)7, buff);
if (_d1154) {
_s1153++;
}
}
buff->_m16032(_n1152, _s1153);
}

void T818::_m15897(Serializable* serializable, T811* buff) {
int _a1156 = buff->_m16028();
buff->_m16029(2);
short _b1157 = 0;
bool _g1158 = false;
InviteThirdPartyFriendNotification* _b7882 = (InviteThirdPartyFriendNotification*)serializable;
if (_b7882->isMessageIdSet() == true) {
_g1158 = T813::_m16030(_b7882->getMessageId(), (short)0, buff);
if (_g1158) {
_b1157++;
}
}
if (_b7882->isRequestIdSet() == true) {
_g1158 = T813::_m16030(_b7882->getRequestId(), (short)1, buff);
if (_g1158) {
_b1157++;
}
}
if (_b7882->isthirdPartyIdSet() == true) {
_g1158 = T813::_m16030(_b7882->getThirdPartyId(), (short)3, buff);
if (_g1158) {
_b1157++;
}
}
if (_b7882->isExecutionStatusSet() == true) {
_g1158 = T813::_m16031(this, _b7882->getExecutionStatus(), (short)4, buff);
if (_g1158) {
_b1157++;
}
}
buff->_m16032(_a1156, _b1157);
}

void T818::_m15898(Serializable* serializable, T811* buff) {
int _g1160 = buff->_m16028();
buff->_m16029(2);
short _g1161 = 0;
bool _p1162 = false;
HeartBeatRequest* _d7888 = (HeartBeatRequest*)serializable;
if (_d7888->isMessageIdSet() == true) {
_p1162 = T813::_m16030(_d7888->getMessageId(), (short)0, buff);
if (_p1162) {
_g1161++;
}
}
if (_d7888->isRequestIdSet() == true) {
_p1162 = T813::_m16030(_d7888->getRequestId(), (short)1, buff);
if (_p1162) {
_g1161++;
}
}
if (_d7888->isCounterSet() == true) {
_p1162 = T813::_m16039(_d7888->getCounter(), (short)3, buff);
if (_p1162) {
_g1161++;
}
}
buff->_m16032(_g1160, _g1161);
}

void T818::_m15899(Serializable* serializable, T811* buff) {
int _l1164 = buff->_m16028();
buff->_m16029(2);
short _i1165 = 0;
bool _s1166 = false;
HeartBeatResponse* _f7894 = (HeartBeatResponse*)serializable;
if (_f7894->isMessageIdSet() == true) {
_s1166 = T813::_m16030(_f7894->getMessageId(), (short)0, buff);
if (_s1166) {
_i1165++;
}
}
if (_f7894->isRequestIdSet() == true) {
_s1166 = T813::_m16030(_f7894->getRequestId(), (short)1, buff);
if (_s1166) {
_i1165++;
}
}
if (_f7894->isCounterSet() == true) {
_s1166 = T813::_m16039(_f7894->getCounter(), (short)3, buff);
if (_s1166) {
_i1165++;
}
}
buff->_m16032(_l1164, _i1165);
}

void T818::_m15900(Serializable* _y7565, T811* _e7566) {
int _f7567 = _e7566->_m16028();
_e7566->_m16029(2);
short _f7568 = 0;
bool _l7569 = false;
NLeaderboardEntry* _l7900 = (NLeaderboardEntry*)_y7565;
if (_l7900->isstoreIdSet() == true) {
_l7569 = T813::_m16030(_l7900->getStoreId(), (short)1, _e7566);
if (_l7569) {
_f7568++;
}
}
if (_l7900->isDataSet() == true) {
_l7569 = T813::_m16030(_l7900->getData(), (short)2, _e7566);
if (_l7569) {
_f7568++;
}
}
if (_l7900->isIdSet() == true) {
_l7569 = T813::_m16030(_l7900->getId(), (short)3, _e7566);
if (_l7569) {
_f7568++;
}
}
if (_l7900->isTimestampSet() == true) {
_l7569 = T813::_m16034(_l7900->getTimestamp(), (short)4, _e7566);
if (_l7569) {
_f7568++;
}
}
if (_l7900->isScoreSet() == true) {
_l7569 = T813::_m16031(this, _l7900->getScore(), (short)6, _e7566);
if (_l7569) {
_f7568++;
}
}
if (_l7900->isPlayerIdSet() == true) {
_l7569 = T813::_m16030(_l7900->getPlayerId(), (short)7, _e7566);
if (_l7569) {
_f7568++;
}
}
if (_l7900->isPlayerNameSet() == true) {
_l7569 = T813::_m16030(_l7900->getPlayerName(), (short)8, _e7566);
if (_l7569) {
_f7568++;
}
}
if (_l7900->isPlayerAvatarPathSet() == true) {
_l7569 = T813::_m16030(_l7900->getPlayerAvatarPath(), (short)9, _e7566);
if (_l7569) {
_f7568++;
}
}
_e7566->_m16032(_f7567, _f7568);
}

void T818::_m15901(Serializable* _s7571, T811* _o7572) {
int _s7573 = _o7572->_m16028();
_o7572->_m16029(2);
short _w7574 = 0;
bool _v7575 = false;
StartDetails* _y7906 = (StartDetails*)_s7571;
if (_y7906->isstoreIdSet() == true) {
_v7575 = T813::_m16030(_y7906->getStoreId(), (short)1, _o7572);
if (_v7575) {
_w7574++;
}
}
if (_y7906->isDataSet() == true) {
_v7575 = T813::_m16030(_y7906->getData(), (short)2, _o7572);
if (_v7575) {
_w7574++;
}
}
if (_y7906->isUseDefaultImplSet() == true) {
_v7575 = T813::_m16033(_y7906->isUseDefaultImpl(), (short)3, _o7572);
if (_v7575) {
_w7574++;
}
}
if (_y7906->isCurrentVersionSet() == true) {
_v7575 = T813::_m16039(_y7906->getCurrentVersion(), (short)4, _o7572);
if (_v7575) {
_w7574++;
}
}
if (_y7906->isNextVersionSet() == true) {
_v7575 = T813::_m16039(_y7906->getNextVersion(), (short)5, _o7572);
if (_v7575) {
_w7574++;
}
}
if (_y7906->isTitleSet() == true) {
_v7575 = T813::_m16030(_y7906->getTitle(), (short)6, _o7572);
if (_v7575) {
_w7574++;
}
}
if (_y7906->isTextSet() == true) {
_v7575 = T813::_m16030(_y7906->getText(), (short)7, _o7572);
if (_v7575) {
_w7574++;
}
}
if (_y7906->isUrlSet() == true) {
_v7575 = T813::_m16030(_y7906->getUrl(), (short)8, _o7572);
if (_v7575) {
_w7574++;
}
}
_o7572->_m16032(_s7573, _w7574);
}

void T818::_m15902(Serializable* serializable, T811* buff) {
int _j1176 = buff->_m16028();
buff->_m16029(2);
short _k1177 = 0;
bool _e1178 = false;
StartRequest* _q7912 = (StartRequest*)serializable;
if (_q7912->isMessageIdSet() == true) {
_e1178 = T813::_m16030(_q7912->getMessageId(), (short)0, buff);
if (_e1178) {
_k1177++;
}
}
if (_q7912->isRequestIdSet() == true) {
_e1178 = T813::_m16030(_q7912->getRequestId(), (short)1, buff);
if (_e1178) {
_k1177++;
}
}
buff->_m16032(_j1176, _k1177);
}

void T818::_m15903(Serializable* _d7577, T811* _c7578) {
int _y7579 = _c7578->_m16028();
_c7578->_m16029(2);
short _h7580 = 0;
bool _k7581 = false;
StartResponse* _u7918 = (StartResponse*)_d7577;
if (_u7918->isMessageIdSet() == true) {
_k7581 = T813::_m16030(_u7918->getMessageId(), (short)0, _c7578);
if (_k7581) {
_h7580++;
}
}
if (_u7918->isRequestIdSet() == true) {
_k7581 = T813::_m16030(_u7918->getRequestId(), (short)1, _c7578);
if (_k7581) {
_h7580++;
}
}
if (_u7918->isStartStatusSet() == true) {
_k7581 = T813::_m16031(this, _u7918->getStartStatus(), (short)3, _c7578);
if (_k7581) {
_h7580++;
}
}
if (_u7918->isStartDetailsSet() == true) {
_k7581 = T813::_m16031(this, _u7918->getStartDetails(), (short)4, _c7578);
if (_k7581) {
_h7580++;
}
}
if (_u7918->isPlayerSessionTypeSet() == true) {
_k7581 = T813::_m16031(this, _u7918->getPlayerSessionType(), (short)5, _c7578);
if (_k7581) {
_h7580++;
}
}
if (_u7918->isPlayerSet() == true) {
_k7581 = T813::_m16031(this, _u7918->getPlayer(), (short)6, _c7578);
if (_k7581) {
_h7580++;
}
}
_c7578->_m16032(_y7579, _h7580);
}

void T818::_m15904(Serializable* serializable, T811* buff) {
int _h1184 = buff->_m16028();
buff->_m16029(2);
short _u1185 = 0;
bool _p1186 = false;
NuggetaLevel* _m7924 = (NuggetaLevel*)serializable;
if (_m7924->isstoreIdSet() == true) {
_p1186 = T813::_m16030(_m7924->getStoreId(), (short)0, buff);
if (_p1186) {
_u1185++;
}
}
if (_m7924->isDataSet() == true) {
_p1186 = T813::_m16030(_m7924->getData(), (short)1, buff);
if (_p1186) {
_u1185++;
}
}
if (_m7924->isIndexSet() == true) {
_p1186 = T813::_m16039(_m7924->getIndex(), (short)2, buff);
if (_p1186) {
_u1185++;
}
}
if (_m7924->isXPSet() == true) {
_p1186 = T813::_m16039(_m7924->getXP(), (short)3, buff);
if (_p1186) {
_u1185++;
}
}
buff->_m16032(_h1184, _u1185);
}

void T818::_m15905(Serializable* _f7589, T811* _h7590) {
int _k7591 = _h7590->_m16028();
_h7590->_m16029(2);
short _r7592 = 0;
bool _h7593 = false;
StorableSample* _v7930 = (StorableSample*)(Message*)_f7589;
if (_v7930->isMessageIdSet() == true) {
_h7593 = T813::_m16030(_v7930->getMessageId(), (short)0, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isRequestIdSet() == true) {
_h7593 = T813::_m16030(_v7930->getRequestId(), (short)1, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isStoreIdSet() == true) {
_h7593 = T813::_m16030(_v7930->getStoreId(), (short)3, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isDataSet() == true) {
_h7593 = T813::_m16030(_v7930->getData(), (short)4, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isGameIdSet() == true) {
_h7593 = T813::_m16030(_v7930->getGameId(), (short)5, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isSenderIdSet() == true) {
_h7593 = T813::_m16030(_v7930->getSenderId(), (short)6, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isIdPropertySet() == true) {
_h7593 = T813::_m16030(_v7930->getIdProperty(), (short)7, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isNumberPropertySet() == true) {
_h7593 = T813::_m16039(_v7930->getNumberProperty(), (short)8, _h7590);
if (_h7593) {
_r7592++;
}
}
if (_v7930->isBooleanPropertySet() == true) {
_h7593 = T813::_m16033(_v7930->isBooleanProperty(), (short)9, _h7590);
if (_h7593) {
_r7592++;
}
}
_h7590->_m16032(_k7591, _r7592);
}

void T818::_m15906(Serializable* serializable, T811* buff) {
int _q1192 = buff->_m16028();
buff->_m16029(2);
short _x1193 = 0;
bool _u1194 = false;
NInvitation* _o7936 = (NInvitation*)serializable;
if (_o7936->isStoreIdSet() == true) {
_u1194 = T813::_m16030(_o7936->getStoreId(), (short)0, buff);
if (_u1194) {
_x1193++;
}
}
if (_o7936->isIdSet() == true) {
_u1194 = T813::_m16030(_o7936->getId(), (short)2, buff);
if (_u1194) {
_x1193++;
}
}
if (_o7936->isInviterSet() == true) {
_u1194 = T813::_m16031(this, _o7936->getInviter(), (short)3, buff);
if (_u1194) {
_x1193++;
}
}
if (_o7936->isInviteeSet() == true) {
_u1194 = T813::_m16031(this, _o7936->getInvitee(), (short)4, buff);
if (_u1194) {
_x1193++;
}
}
if (_o7936->isContentSet() == true) {
_u1194 = T813::_m16031(this, _o7936->getContent(), (short)5, buff);
if (_u1194) {
_x1193++;
}
}
if (_o7936->isStatusSet() == true) {
_u1194 = T813::_m16031(this, _o7936->getStatus(), (short)8, buff);
if (_u1194) {
_x1193++;
}
}
buff->_m16032(_q1192, _x1193);
}

void T818::_m15907(Serializable* _h7595, T811* _g7596) {
int _h7597 = _g7596->_m16028();
_g7596->_m16029(2);
short _d7598 = 0;
bool _t7599 = false;
NGameInvitation* _n7942 = (NGameInvitation*)_h7595;
if (_n7942->isMessageIdSet() == true) {
_t7599 = T813::_m16030(_n7942->getMessageId(), (short)0, _g7596);
if (_t7599) {
_d7598++;
}
}
if (_n7942->isRequestIdSet() == true) {
_t7599 = T813::_m16030(_n7942->getRequestId(), (short)1, _g7596);
if (_t7599) {
_d7598++;
}
}
if (_n7942->isGameIdSet() == true) {
_t7599 = T813::_m16030(_n7942->getGameId(), (short)3, _g7596);
if (_t7599) {
_d7598++;
}
}
_g7596->_m16032(_h7597, _d7598);
}

void T818::_m15908(Serializable* serializable, T811* buff) {
int _u1200 = buff->_m16028();
buff->_m16029(2);
short _t1201 = 0;
bool _t1202 = false;
InvitationRequestNotification* _i7948 = (InvitationRequestNotification*)serializable;
if (_i7948->isMessageIdSet() == true) {
_t1202 = T813::_m16030(_i7948->getMessageId(), (short)0, buff);
if (_t1202) {
_t1201++;
}
}
if (_i7948->isRequestIdSet() == true) {
_t1202 = T813::_m16030(_i7948->getRequestId(), (short)1, buff);
if (_t1202) {
_t1201++;
}
}
if (_i7948->isInvitationSet() == true) {
_t1202 = T813::_m16031(this, _i7948->getInvitation(), (short)3, buff);
if (_t1202) {
_t1201++;
}
}
buff->_m16032(_u1200, _t1201);
}

void T818::_m15909(Serializable* serializable, T811* buff) {
int _y1204 = buff->_m16028();
buff->_m16029(2);
short _y1205 = 0;
bool _o1206 = false;
InvitationAcceptedNotification* _q7954 = (InvitationAcceptedNotification*)serializable;
if (_q7954->isMessageIdSet() == true) {
_o1206 = T813::_m16030(_q7954->getMessageId(), (short)0, buff);
if (_o1206) {
_y1205++;
}
}
if (_q7954->isRequestIdSet() == true) {
_o1206 = T813::_m16030(_q7954->getRequestId(), (short)1, buff);
if (_o1206) {
_y1205++;
}
}
if (_q7954->isInvitationSet() == true) {
_o1206 = T813::_m16031(this, _q7954->getInvitation(), (short)3, buff);
if (_o1206) {
_y1205++;
}
}
buff->_m16032(_y1204, _y1205);
}

void T818::_m15910(Serializable* _y7601, T811* _c7602) {
int _h1208 = _c7602->_m16028();
_c7602->_m16029(2);
short _i1209 = 0;
bool _o1210 = false;
InvitationRefusedNotification* _u7960 = (InvitationRefusedNotification*)_y7601;
if (_u7960->isMessageIdSet() == true) {
_o1210 = T813::_m16030(_u7960->getMessageId(), (short)0, _c7602);
if (_o1210) {
_i1209++;
}
}
if (_u7960->isRequestIdSet() == true) {
_o1210 = T813::_m16030(_u7960->getRequestId(), (short)1, _c7602);
if (_o1210) {
_i1209++;
}
}
if (_u7960->isInvitationSet() == true) {
_o1210 = T813::_m16031(this, _u7960->getInvitation(), (short)3, _c7602);
if (_o1210) {
_i1209++;
}
}
_c7602->_m16032(_h1208, _i1209);
}

void T818::_m15911(Serializable* serializable, T811* buff) {
int _r7603 = buff->_m16028();
buff->_m16029(2);
short _d7604 = 0;
bool _g7605 = false;
InvitationExpiredNotification* _v7966 = (InvitationExpiredNotification*)serializable;
if (_v7966->isMessageIdSet() == true) {
_g7605 = T813::_m16030(_v7966->getMessageId(), (short)0, buff);
if (_g7605) {
_d7604++;
}
}
if (_v7966->isRequestIdSet() == true) {
_g7605 = T813::_m16030(_v7966->getRequestId(), (short)1, buff);
if (_g7605) {
_d7604++;
}
}
buff->_m16032(_r7603, _d7604);
}

void T818::_m15912(Serializable* serializable, T811* buff) {
int _n1216 = buff->_m16028();
buff->_m16029(2);
short _r1217 = 0;
bool _r1218 = false;
AskForFriendResponse* _m7972 = (AskForFriendResponse*)serializable;
if (_m7972->isMessageIdSet() == true) {
_r1218 = T813::_m16030(_m7972->getMessageId(), (short)0, buff);
if (_r1218) {
_r1217++;
}
}
if (_m7972->isRequestIdSet() == true) {
_r1218 = T813::_m16030(_m7972->getRequestId(), (short)1, buff);
if (_r1218) {
_r1217++;
}
}
if (_m7972->isAskForFriendStatusSet() == true) {
_r1218 = T813::_m16031(this, _m7972->getAskForFriendStatus(), (short)3, buff);
if (_r1218) {
_r1217++;
}
}
buff->_m16032(_n1216, _r1217);
}

void T818::_m15913(Serializable* serializable, T811* buff) {
int _x1220 = buff->_m16028();
buff->_m16029(2);
short _f1221 = 0;
bool _h1222 = false;
AskForFriendByIdRequest* _i7978 = (AskForFriendByIdRequest*)serializable;
if (_i7978->isMessageIdSet() == true) {
_h1222 = T813::_m16030(_i7978->getMessageId(), (short)0, buff);
if (_h1222) {
_f1221++;
}
}
if (_i7978->isRequestIdSet() == true) {
_h1222 = T813::_m16030(_i7978->getRequestId(), (short)1, buff);
if (_h1222) {
_f1221++;
}
}
if (_i7978->isIdSet() == true) {
_h1222 = T813::_m16030(_i7978->getId(), (short)3, buff);
if (_h1222) {
_f1221++;
}
}
buff->_m16032(_x1220, _f1221);
}

void T818::_m15914(Serializable* _x7607, T811* _v7608) {
int _v1224 = _v7608->_m16028();
_v7608->_m16029(2);
short _d1225 = 0;
bool _t1226 = false;
AskForFriendByLoginRequest* _r7984 = (AskForFriendByLoginRequest*)_x7607;
if (_r7984->isMessageIdSet() == true) {
_t1226 = T813::_m16030(_r7984->getMessageId(), (short)0, _v7608);
if (_t1226) {
_d1225++;
}
}
if (_r7984->isRequestIdSet() == true) {
_t1226 = T813::_m16030(_r7984->getRequestId(), (short)1, _v7608);
if (_t1226) {
_d1225++;
}
}
if (_r7984->isLoginSet() == true) {
_t1226 = T813::_m16030(_r7984->getLogin(), (short)3, _v7608);
if (_t1226) {
_d1225++;
}
}
_v7608->_m16032(_v1224, _d1225);
}

void T818::_m15915(Serializable* serializable, T811* buff) {
int _g7609 = buff->_m16028();
buff->_m16029(2);
short _n7610 = 0;
bool _b7611 = false;
SignUpResponse* _n7990 = (SignUpResponse*)serializable;
if (_n7990->isMessageIdSet() == true) {
_b7611 = T813::_m16030(_n7990->getMessageId(), (short)0, buff);
if (_b7611) {
_n7610++;
}
}
if (_n7990->isRequestIdSet() == true) {
_b7611 = T813::_m16030(_n7990->getRequestId(), (short)1, buff);
if (_b7611) {
_n7610++;
}
}
if (_n7990->isSignUpStatusSet() == true) {
_b7611 = T813::_m16031(this, _n7990->getSignUpStatus(), (short)3, buff);
if (_b7611) {
_n7610++;
}
}
if (_n7990->isPlayerSet() == true) {
_b7611 = T813::_m16031(this, _n7990->getPlayer(), (short)4, buff);
if (_b7611) {
_n7610++;
}
}
buff->_m16032(_g7609, _n7610);
}

void T818::_m15916(Serializable* _l7613, T811* _u7614) {
int _t7615 = _u7614->_m16028();
_u7614->_m16029(2);
short _b7616 = 0;
bool _n7617 = false;
SignUpRequest* _d7996 = (SignUpRequest*)_l7613;
if (_d7996->isMessageIdSet() == true) {
_n7617 = T813::_m16030(_d7996->getMessageId(), (short)0, _u7614);
if (_n7617) {
_b7616++;
}
}
if (_d7996->isRequestIdSet() == true) {
_n7617 = T813::_m16030(_d7996->getRequestId(), (short)1, _u7614);
if (_n7617) {
_b7616++;
}
}
_u7614->_m16032(_t7615, _b7616);
}

void T818::_m15917(Serializable* serializable, T811* buff) {
int _q1236 = buff->_m16028();
buff->_m16029(2);
short _g1237 = 0;
bool _y1238 = false;
LoginResponse* _i8002 = (LoginResponse*)serializable;
if (_i8002->isMessageIdSet() == true) {
_y1238 = T813::_m16030(_i8002->getMessageId(), (short)0, buff);
if (_y1238) {
_g1237++;
}
}
if (_i8002->isRequestIdSet() == true) {
_y1238 = T813::_m16030(_i8002->getRequestId(), (short)1, buff);
if (_y1238) {
_g1237++;
}
}
if (_i8002->isLoginStatusSet() == true) {
_y1238 = T813::_m16031(this, _i8002->getLoginStatus(), (short)3, buff);
if (_y1238) {
_g1237++;
}
}
if (_i8002->isPlayerSet() == true) {
_y1238 = T813::_m16031(this, _i8002->getPlayer(), (short)4, buff);
if (_y1238) {
_g1237++;
}
}
buff->_m16032(_q1236, _g1237);
}

void T818::_m15918(Serializable* serializable, T811* buff) {
int _l1240 = buff->_m16028();
buff->_m16029(2);
short _u1241 = 0;
bool _k1242 = false;
LoginRequest* _b8008 = (LoginRequest*)serializable;
if (_b8008->isMessageIdSet() == true) {
_k1242 = T813::_m16030(_b8008->getMessageId(), (short)0, buff);
if (_k1242) {
_u1241++;
}
}
if (_b8008->isRequestIdSet() == true) {
_k1242 = T813::_m16030(_b8008->getRequestId(), (short)1, buff);
if (_k1242) {
_u1241++;
}
}
buff->_m16032(_l1240, _u1241);
}

void T818::_m15919(Serializable* _j7624, T811* _x7625) {
int _e7626 = _x7625->_m16028();
_x7625->_m16029(2);
short _d7627 = 0;
bool _r7628 = false;
SavePlayerProfileResponse* _t8014 = (SavePlayerProfileResponse*)_j7624;
if (_t8014->isMessageIdSet() == true) {
_r7628 = T813::_m16030(_t8014->getMessageId(), (short)0, _x7625);
if (_r7628) {
_d7627++;
}
}
if (_t8014->isRequestIdSet() == true) {
_r7628 = T813::_m16030(_t8014->getRequestId(), (short)1, _x7625);
if (_r7628) {
_d7627++;
}
}
if (_t8014->isSavePlayerProfileStatusSet() == true) {
_r7628 = T813::_m16031(this, _t8014->getSavePlayerProfileStatus(), (short)3, _x7625);
if (_r7628) {
_d7627++;
}
}
_x7625->_m16032(_e7626, _d7627);
}

void T818::_m15920(Serializable* serializable, T811* buff) {
int _s1248 = buff->_m16028();
buff->_m16029(2);
short _m1249 = 0;
bool _r1250 = false;
SavePlayerProfileRequest* _e8020 = (SavePlayerProfileRequest*)serializable;
if (_e8020->isMessageIdSet() == true) {
_r1250 = T813::_m16030(_e8020->getMessageId(), (short)0, buff);
if (_r1250) {
_m1249++;
}
}
if (_e8020->isRequestIdSet() == true) {
_r1250 = T813::_m16030(_e8020->getRequestId(), (short)1, buff);
if (_r1250) {
_m1249++;
}
}
if (_e8020->isProfileSet() == true) {
_r1250 = T813::_m16031(this, _e8020->getProfile(), (short)3, buff);
if (_r1250) {
_m1249++;
}
}
buff->_m16032(_s1248, _m1249);
}

void T818::_m15921(Serializable* _u7630, T811* _o7631) {
int _d7632 = _o7631->_m16028();
_o7631->_m16029(2);
short _z7633 = 0;
bool _m7634 = false;
GetPlayerProfileResponse* _c8026 = (GetPlayerProfileResponse*)_u7630;
if (_c8026->isMessageIdSet() == true) {
_m7634 = T813::_m16030(_c8026->getMessageId(), (short)0, _o7631);
if (_m7634) {
_z7633++;
}
}
if (_c8026->isRequestIdSet() == true) {
_m7634 = T813::_m16030(_c8026->getRequestId(), (short)1, _o7631);
if (_m7634) {
_z7633++;
}
}
if (_c8026->isGetPlayerProfileStatusSet() == true) {
_m7634 = T813::_m16031(this, _c8026->getGetPlayerProfileStatus(), (short)3, _o7631);
if (_m7634) {
_z7633++;
}
}
if (_c8026->isProfileSet() == true) {
_m7634 = T813::_m16031(this, _c8026->getProfile(), (short)4, _o7631);
if (_m7634) {
_z7633++;
}
}
_o7631->_m16032(_d7632, _z7633);
}

void T818::_m15922(Serializable* _i7636, T811* _f7637) {
int _d7638 = _f7637->_m16028();
_f7637->_m16029(2);
short _h7639 = 0;
bool _b7640 = false;
GetPlayerProfileRequest* _j8032 = (GetPlayerProfileRequest*)_i7636;
if (_j8032->isMessageIdSet() == true) {
_b7640 = T813::_m16030(_j8032->getMessageId(), (short)0, _f7637);
if (_b7640) {
_h7639++;
}
}
if (_j8032->isRequestIdSet() == true) {
_b7640 = T813::_m16030(_j8032->getRequestId(), (short)1, _f7637);
if (_b7640) {
_h7639++;
}
}
_f7637->_m16032(_d7638, _h7639);
}

void T818::_m15923(Serializable* serializable, T811* buff) {
int _l1260 = buff->_m16028();
buff->_m16029(2);
short _p1261 = 0;
bool _z1262 = false;
GetPlayerProfileByPlayerIdRequest* _h8038 = (GetPlayerProfileByPlayerIdRequest*)serializable;
if (_h8038->isMessageIdSet() == true) {
_z1262 = T813::_m16030(_h8038->getMessageId(), (short)0, buff);
if (_z1262) {
_p1261++;
}
}
if (_h8038->isRequestIdSet() == true) {
_z1262 = T813::_m16030(_h8038->getRequestId(), (short)1, buff);
if (_z1262) {
_p1261++;
}
}
if (_h8038->isPlayerIdSet() == true) {
_z1262 = T813::_m16030(_h8038->getPlayerId(), (short)3, buff);
if (_z1262) {
_p1261++;
}
}
buff->_m16032(_l1260, _p1261);
}

void T818::_m15924(Serializable* _x7642, T811* _w7643) {
int _m7644 = _w7643->_m16028();
_w7643->_m16029(2);
short _h7645 = 0;
bool _y7646 = false;
LogoutResponse* _x8044 = (LogoutResponse*)_x7642;
if (_x8044->isMessageIdSet() == true) {
_y7646 = T813::_m16030(_x8044->getMessageId(), (short)0, _w7643);
if (_y7646) {
_h7645++;
}
}
if (_x8044->isRequestIdSet() == true) {
_y7646 = T813::_m16030(_x8044->getRequestId(), (short)1, _w7643);
if (_y7646) {
_h7645++;
}
}
if (_x8044->isLogoutStatusSet() == true) {
_y7646 = T813::_m16031(this, _x8044->getLogoutStatus(), (short)3, _w7643);
if (_y7646) {
_h7645++;
}
}
if (_x8044->isPlayerSet() == true) {
_y7646 = T813::_m16031(this, _x8044->getPlayer(), (short)4, _w7643);
if (_y7646) {
_h7645++;
}
}
_w7643->_m16032(_m7644, _h7645);
}

void T818::_m15925(Serializable* _o7648, T811* _q7649) {
int _w7650 = _q7649->_m16028();
_q7649->_m16029(2);
short _b7651 = 0;
bool _j7652 = false;
LogoutRequest* _b8050 = (LogoutRequest*)_o7648;
if (_b8050->isMessageIdSet() == true) {
_j7652 = T813::_m16030(_b8050->getMessageId(), (short)0, _q7649);
if (_j7652) {
_b7651++;
}
}
if (_b8050->isRequestIdSet() == true) {
_j7652 = T813::_m16030(_b8050->getRequestId(), (short)1, _q7649);
if (_j7652) {
_b7651++;
}
}
_q7649->_m16032(_w7650, _b7651);
}

void T818::_m15926(Serializable* _u7654, T811* _i7655) {
int _o7656 = _i7655->_m16028();
_i7655->_m16029(2);
short _b7657 = 0;
bool _l7658 = false;
GetFriendsResponse* _k8056 = (GetFriendsResponse*)_u7654;
if (_k8056->isMessageIdSet() == true) {
_l7658 = T813::_m16030(_k8056->getMessageId(), (short)0, _i7655);
if (_l7658) {
_b7657++;
}
}
if (_k8056->isRequestIdSet() == true) {
_l7658 = T813::_m16030(_k8056->getRequestId(), (short)1, _i7655);
if (_l7658) {
_b7657++;
}
}
if (_k8056->isGetFriendsStatusSet() == true) {
_l7658 = T813::_m16031(this, _k8056->getGetFriendsStatus(), (short)3, _i7655);
if (_l7658) {
_b7657++;
}
}
if (_k8056->isFriendsSet() == true) {
std::vector<NPlayer*>* _v8057 = _k8056->getFriends();
if (_v8057 == 0) {
_l7658 = false;
} else {
_i7655->_m16035((short)4);
_i7655->_m16036(T809::_y15502);
int _e8058 = _i7655->_m16028();
_i7655->_m16029(4);
int _v8059 = _v8057->size();
_i7655->_m16035((short)_v8059);
for (unsigned int _c1279 = 0; _c1279 < (unsigned int)_v8059; _c1279++) {
NPlayer* _h1280 = (*_v8057)[_c1279];
if (_h1280 == 0) {
_i7655->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _h1280, _i7655);
}
}
_i7655->_m16038(_e8058, _i7655->_m16028() - _e8058);
_l7658 = true;
}
if (_l7658) {
_b7657++;
}
}
_i7655->_m16032(_o7656, _b7657);
}

void T818::_m15927(Serializable* serializable, T811* buff) {
int _h1281 = buff->_m16028();
buff->_m16029(2);
short _c1282 = 0;
bool _c1283 = false;
GetFriendsRequest* _e8067 = (GetFriendsRequest*)serializable;
if (_e8067->isMessageIdSet() == true) {
_c1283 = T813::_m16030(_e8067->getMessageId(), (short)0, buff);
if (_c1283) {
_c1282++;
}
}
if (_e8067->isRequestIdSet() == true) {
_c1283 = T813::_m16030(_e8067->getRequestId(), (short)1, buff);
if (_c1283) {
_c1282++;
}
}
buff->_m16032(_h1281, _c1282);
}

void T818::_m15928(Serializable* _p7660, T811* _h7661) {
int _j7662 = _h7661->_m16028();
_h7661->_m16029(2);
short _t7663 = 0;
bool _p7664 = false;
GetFriendsByPlayerIdRequest* _j8073 = (GetFriendsByPlayerIdRequest*)_p7660;
if (_j8073->isMessageIdSet() == true) {
_p7664 = T813::_m16030(_j8073->getMessageId(), (short)0, _h7661);
if (_p7664) {
_t7663++;
}
}
if (_j8073->isRequestIdSet() == true) {
_p7664 = T813::_m16030(_j8073->getRequestId(), (short)1, _h7661);
if (_p7664) {
_t7663++;
}
}
if (_j8073->isPlayerIdSet() == true) {
_p7664 = T813::_m16030(_j8073->getPlayerId(), (short)3, _h7661);
if (_p7664) {
_t7663++;
}
}
_h7661->_m16032(_j7662, _t7663);
}

void T818::_m15929(Serializable* _m7666, T811* _e7667) {
int _x7668 = _e7667->_m16028();
_e7667->_m16029(2);
short _d7669 = 0;
bool _n7670 = false;
GetThirdPartyFriendsResponse* _t8079 = (GetThirdPartyFriendsResponse*)_m7666;
if (_t8079->isMessageIdSet() == true) {
_n7670 = T813::_m16030(_t8079->getMessageId(), (short)0, _e7667);
if (_n7670) {
_d7669++;
}
}
if (_t8079->isRequestIdSet() == true) {
_n7670 = T813::_m16030(_t8079->getRequestId(), (short)1, _e7667);
if (_n7670) {
_d7669++;
}
}
if (_t8079->isGetThirdPartyFriendsStatusSet() == true) {
_n7670 = T813::_m16031(this, _t8079->getGetThirdPartyFriendsStatus(), (short)3, _e7667);
if (_n7670) {
_d7669++;
}
}
if (_t8079->isThirdPartyFriendsSet() == true) {
std::vector<NPlayer*>* _b8080 = _t8079->getThirdPartyFriends();
if (_b8080 == 0) {
_n7670 = false;
} else {
_e7667->_m16035((short)4);
_e7667->_m16036(T809::_y15502);
int _d8081 = _e7667->_m16028();
_e7667->_m16029(4);
int _j8082 = _b8080->size();
_e7667->_m16035((short)_j8082);
for (unsigned int _b1296 = 0; _b1296 < (unsigned int)_j8082; _b1296++) {
NPlayer* _x1297 = (*_b8080)[_b1296];
if (_x1297 == 0) {
_e7667->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _x1297, _e7667);
}
}
_e7667->_m16038(_d8081, _e7667->_m16028() - _d8081);
_n7670 = true;
}
if (_n7670) {
_d7669++;
}
}
_e7667->_m16032(_x7668, _d7669);
}

void T818::_m15930(Serializable* serializable, T811* buff) {
int _d1298 = buff->_m16028();
buff->_m16029(2);
short _s1299 = 0;
bool _m1300 = false;
GetThirdPartyFriendsRequest* _m8090 = (GetThirdPartyFriendsRequest*)serializable;
if (_m8090->isMessageIdSet() == true) {
_m1300 = T813::_m16030(_m8090->getMessageId(), (short)0, buff);
if (_m1300) {
_s1299++;
}
}
if (_m8090->isRequestIdSet() == true) {
_m1300 = T813::_m16030(_m8090->getRequestId(), (short)1, buff);
if (_m1300) {
_s1299++;
}
}
if (_m8090->isThirdPartySourceSet() == true) {
_m1300 = T813::_m16031(this, _m8090->getThirdPartySource(), (short)3, buff);
if (_m1300) {
_s1299++;
}
}
buff->_m16032(_d1298, _s1299);
}

void T818::_m15931(Serializable* _y7672, T811* _m7673) {
int _m7674 = _m7673->_m16028();
_m7673->_m16029(2);
short _l7675 = 0;
bool _g7676 = false;
GetFriendDemandsResponse* _y8096 = (GetFriendDemandsResponse*)_y7672;
if (_y8096->isMessageIdSet() == true) {
_g7676 = T813::_m16030(_y8096->getMessageId(), (short)0, _m7673);
if (_g7676) {
_l7675++;
}
}
if (_y8096->isRequestIdSet() == true) {
_g7676 = T813::_m16030(_y8096->getRequestId(), (short)1, _m7673);
if (_g7676) {
_l7675++;
}
}
if (_y8096->isGetFriendDemandsStatusSet() == true) {
_g7676 = T813::_m16031(this, _y8096->getGetFriendDemandsStatus(), (short)3, _m7673);
if (_g7676) {
_l7675++;
}
}
if (_y8096->isFriendDemandsSet() == true) {
std::vector<NFriendDemand*>* _o8097 = _y8096->getFriendDemands();
if (_o8097 == 0) {
_g7676 = false;
} else {
_m7673->_m16035((short)4);
_m7673->_m16036(T809::_y15502);
int _c8098 = _m7673->_m16028();
_m7673->_m16029(4);
int _n8099 = _o8097->size();
_m7673->_m16035((short)_n8099);
for (unsigned int _w7699 = 0; _w7699 < (unsigned int)_n8099; _w7699++) {
NFriendDemand* _d7700 = (*_o8097)[_w7699];
if (_d7700 == 0) {
_m7673->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _d7700, _m7673);
}
}
_m7673->_m16038(_c8098, _m7673->_m16028() - _c8098);
_g7676 = true;
}
if (_g7676) {
_l7675++;
}
}
_m7673->_m16032(_m7674, _l7675);
}

void T818::_m15932(Serializable* _m7678, T811* _h7679) {
int _x7680 = _h7679->_m16028();
_h7679->_m16029(2);
short _x7681 = 0;
bool _b7682 = false;
GetFriendDemandsRequest* _l8107 = (GetFriendDemandsRequest*)_m7678;
if (_l8107->isMessageIdSet() == true) {
_b7682 = T813::_m16030(_l8107->getMessageId(), (short)0, _h7679);
if (_b7682) {
_x7681++;
}
}
if (_l8107->isRequestIdSet() == true) {
_b7682 = T813::_m16030(_l8107->getRequestId(), (short)1, _h7679);
if (_b7682) {
_x7681++;
}
}
_h7679->_m16032(_x7680, _x7681);
}

void T818::_m15933(Serializable* serializable, T811* buff) {
int _n1315 = buff->_m16028();
buff->_m16029(2);
short _t1316 = 0;
bool _u1317 = false;
AcceptFriendDemandResponse* _h8113 = (AcceptFriendDemandResponse*)serializable;
if (_h8113->isMessageIdSet() == true) {
_u1317 = T813::_m16030(_h8113->getMessageId(), (short)0, buff);
if (_u1317) {
_t1316++;
}
}
if (_h8113->isRequestIdSet() == true) {
_u1317 = T813::_m16030(_h8113->getRequestId(), (short)1, buff);
if (_u1317) {
_t1316++;
}
}
if (_h8113->isAcceptFriendDemandStatusSet() == true) {
_u1317 = T813::_m16031(this, _h8113->getAcceptFriendDemandStatus(), (short)3, buff);
if (_u1317) {
_t1316++;
}
}
if (_h8113->isFriendDemandIdSet() == true) {
_u1317 = T813::_m16030(_h8113->getFriendDemandId(), (short)4, buff);
if (_u1317) {
_t1316++;
}
}
buff->_m16032(_n1315, _t1316);
}

void T818::_m15934(Serializable* serializable, T811* buff) {
int _t1319 = buff->_m16028();
buff->_m16029(2);
short _c1320 = 0;
bool _j1321 = false;
AcceptFriendDemandRequest* _s8119 = (AcceptFriendDemandRequest*)serializable;
if (_s8119->isMessageIdSet() == true) {
_j1321 = T813::_m16030(_s8119->getMessageId(), (short)0, buff);
if (_j1321) {
_c1320++;
}
}
if (_s8119->isRequestIdSet() == true) {
_j1321 = T813::_m16030(_s8119->getRequestId(), (short)1, buff);
if (_j1321) {
_c1320++;
}
}
if (_s8119->isFriendDemandIdSet() == true) {
_j1321 = T813::_m16030(_s8119->getFriendDemandId(), (short)3, buff);
if (_j1321) {
_c1320++;
}
}
buff->_m16032(_t1319, _c1320);
}

void T818::_m15935(Serializable* _v7684, T811* _v7685) {
int _r7686 = _v7685->_m16028();
_v7685->_m16029(2);
short _r7687 = 0;
bool _s7688 = false;
RefuseFriendDemandResponse* _y8125 = (RefuseFriendDemandResponse*)_v7684;
if (_y8125->isMessageIdSet() == true) {
_s7688 = T813::_m16030(_y8125->getMessageId(), (short)0, _v7685);
if (_s7688) {
_r7687++;
}
}
if (_y8125->isRequestIdSet() == true) {
_s7688 = T813::_m16030(_y8125->getRequestId(), (short)1, _v7685);
if (_s7688) {
_r7687++;
}
}
if (_y8125->isRefuseFriendDemandStatusSet() == true) {
_s7688 = T813::_m16031(this, _y8125->getRefuseFriendDemandStatus(), (short)3, _v7685);
if (_s7688) {
_r7687++;
}
}
if (_y8125->isFriendDemandIdSet() == true) {
_s7688 = T813::_m16030(_y8125->getFriendDemandId(), (short)4, _v7685);
if (_s7688) {
_r7687++;
}
}
_v7685->_m16032(_r7686, _r7687);
}

void T818::_m15936(Serializable* serializable, T811* buff) {
int _i1327 = buff->_m16028();
buff->_m16029(2);
short _e1328 = 0;
bool _p1329 = false;
RefuseFriendDemandRequest* _y8131 = (RefuseFriendDemandRequest*)serializable;
if (_y8131->isMessageIdSet() == true) {
_p1329 = T813::_m16030(_y8131->getMessageId(), (short)0, buff);
if (_p1329) {
_e1328++;
}
}
if (_y8131->isRequestIdSet() == true) {
_p1329 = T813::_m16030(_y8131->getRequestId(), (short)1, buff);
if (_p1329) {
_e1328++;
}
}
if (_y8131->isFriendDemandIdSet() == true) {
_p1329 = T813::_m16030(_y8131->getFriendDemandId(), (short)3, buff);
if (_p1329) {
_e1328++;
}
}
buff->_m16032(_i1327, _e1328);
}

void T818::_m15937(Serializable* serializable, T811* buff) {
int _b1331 = buff->_m16028();
buff->_m16029(2);
short _e1332 = 0;
bool _w1333 = false;
SubmitScoreResponse* _d8137 = (SubmitScoreResponse*)serializable;
if (_d8137->isMessageIdSet() == true) {
_w1333 = T813::_m16030(_d8137->getMessageId(), (short)0, buff);
if (_w1333) {
_e1332++;
}
}
if (_d8137->isRequestIdSet() == true) {
_w1333 = T813::_m16030(_d8137->getRequestId(), (short)1, buff);
if (_w1333) {
_e1332++;
}
}
if (_d8137->isSubmitScoreStatusSet() == true) {
_w1333 = T813::_m16031(this, _d8137->getSubmitScoreStatus(), (short)3, buff);
if (_w1333) {
_e1332++;
}
}
buff->_m16032(_b1331, _e1332);
}

void T818::_m15938(Serializable* serializable, T811* buff) {
int _o1335 = buff->_m16028();
buff->_m16029(2);
short _r1336 = 0;
bool _p1337 = false;
SubmitScoreRequest* _w8143 = (SubmitScoreRequest*)serializable;
if (_w8143->isMessageIdSet() == true) {
_p1337 = T813::_m16030(_w8143->getMessageId(), (short)0, buff);
if (_p1337) {
_r1336++;
}
}
if (_w8143->isRequestIdSet() == true) {
_p1337 = T813::_m16030(_w8143->getRequestId(), (short)1, buff);
if (_p1337) {
_r1336++;
}
}
if (_w8143->isScoreSet() == true) {
_p1337 = T813::_m16031(this, _w8143->getScore(), (short)3, buff);
if (_p1337) {
_r1336++;
}
}
if (_w8143->isLeaderboardIdSet() == true) {
_p1337 = T813::_m16030(_w8143->getLeaderboardId(), (short)4, buff);
if (_p1337) {
_r1336++;
}
}
buff->_m16032(_o1335, _r1336);
}

void T818::_m15939(Serializable* serializable, T811* buff) {
int _p1339 = buff->_m16028();
buff->_m16029(2);
short _p1340 = 0;
bool _w1341 = false;
SubmitScoreWithPlayerNameRequest* _f8149 = (SubmitScoreWithPlayerNameRequest*)serializable;
if (_f8149->isMessageIdSet() == true) {
_w1341 = T813::_m16030(_f8149->getMessageId(), (short)0, buff);
if (_w1341) {
_p1340++;
}
}
if (_f8149->isRequestIdSet() == true) {
_w1341 = T813::_m16030(_f8149->getRequestId(), (short)1, buff);
if (_w1341) {
_p1340++;
}
}
if (_f8149->isNameSet() == true) {
_w1341 = T813::_m16030(_f8149->getName(), (short)3, buff);
if (_w1341) {
_p1340++;
}
}
if (_f8149->isScoreSet() == true) {
_w1341 = T813::_m16031(this, _f8149->getScore(), (short)4, buff);
if (_w1341) {
_p1340++;
}
}
if (_f8149->isLeaderboardIdSet() == true) {
_w1341 = T813::_m16030(_f8149->getLeaderboardId(), (short)5, buff);
if (_w1341) {
_p1340++;
}
}
buff->_m16032(_p1339, _p1340);
}

void T818::_m15940(Serializable* _c7690, T811* _g7691) {
int _c7692 = _g7691->_m16028();
_g7691->_m16029(2);
short _e7693 = 0;
bool _b7694 = false;
GetLeaderboardResponse* _s8155 = (GetLeaderboardResponse*)_c7690;
if (_s8155->isMessageIdSet() == true) {
_b7694 = T813::_m16030(_s8155->getMessageId(), (short)0, _g7691);
if (_b7694) {
_e7693++;
}
}
if (_s8155->isRequestIdSet() == true) {
_b7694 = T813::_m16030(_s8155->getRequestId(), (short)1, _g7691);
if (_b7694) {
_e7693++;
}
}
if (_s8155->isGetLeaderboardStatusSet() == true) {
_b7694 = T813::_m16031(this, _s8155->getGetLeaderboardStatus(), (short)3, _g7691);
if (_b7694) {
_e7693++;
}
}
if (_s8155->isLeaderboardSet() == true) {
_b7694 = T813::_m16031(this, _s8155->getLeaderboard(), (short)4, _g7691);
if (_b7694) {
_e7693++;
}
}
_g7691->_m16032(_c7692, _e7693);
}

void T818::_m15941(Serializable* serializable, T811* buff) {
int _s1347 = buff->_m16028();
buff->_m16029(2);
short _b1348 = 0;
bool _b1349 = false;
GetLeaderboardRequest* _t8161 = (GetLeaderboardRequest*)serializable;
if (_t8161->isMessageIdSet() == true) {
_b1349 = T813::_m16030(_t8161->getMessageId(), (short)0, buff);
if (_b1349) {
_b1348++;
}
}
if (_t8161->isRequestIdSet() == true) {
_b1349 = T813::_m16030(_t8161->getRequestId(), (short)1, buff);
if (_b1349) {
_b1348++;
}
}
if (_t8161->isLeaderboardIdSet() == true) {
_b1349 = T813::_m16030(_t8161->getLeaderboardId(), (short)3, buff);
if (_b1349) {
_b1348++;
}
}
if (_t8161->isPeriodSet() == true) {
_b1349 = T813::_m16031(this, _t8161->getPeriod(), (short)4, buff);
if (_b1349) {
_b1348++;
}
}
if (_t8161->isStartSet() == true) {
_b1349 = T813::_m16039(_t8161->getStart(), (short)5, buff);
if (_b1349) {
_b1348++;
}
}
if (_t8161->isLimitSet() == true) {
_b1349 = T813::_m16039(_t8161->getLimit(), (short)6, buff);
if (_b1349) {
_b1348++;
}
}
buff->_m16032(_s1347, _b1348);
}

void T818::_m15942(Serializable* _a7701, T811* _v7702) {
int _n7703 = _v7702->_m16028();
_v7702->_m16029(2);
short _o7704 = 0;
bool _u7705 = false;
BuyItemResponse* _e8167 = (BuyItemResponse*)_a7701;
if (_e8167->isMessageIdSet() == true) {
_u7705 = T813::_m16030(_e8167->getMessageId(), (short)0, _v7702);
if (_u7705) {
_o7704++;
}
}
if (_e8167->isRequestIdSet() == true) {
_u7705 = T813::_m16030(_e8167->getRequestId(), (short)1, _v7702);
if (_u7705) {
_o7704++;
}
}
if (_e8167->isBuyItemStatusSet() == true) {
_u7705 = T813::_m16031(this, _e8167->getBuyItemStatus(), (short)3, _v7702);
if (_u7705) {
_o7704++;
}
}
if (_e8167->isBoughtItemSet() == true) {
_u7705 = T813::_m16031(this, _e8167->getBoughtItem(), (short)4, _v7702);
if (_u7705) {
_o7704++;
}
}
if (_e8167->isQuantitySet() == true) {
_u7705 = T813::_m16039(_e8167->getQuantity(), (short)5, _v7702);
if (_u7705) {
_o7704++;
}
}
_v7702->_m16032(_n7703, _o7704);
}

void T818::_m15943(Serializable* serializable, T811* buff) {
int _x1355 = buff->_m16028();
buff->_m16029(2);
short _j1356 = 0;
bool _i1357 = false;
BuyItemRequest* _b8173 = (BuyItemRequest*)serializable;
if (_b8173->isMessageIdSet() == true) {
_i1357 = T813::_m16030(_b8173->getMessageId(), (short)0, buff);
if (_i1357) {
_j1356++;
}
}
if (_b8173->isRequestIdSet() == true) {
_i1357 = T813::_m16030(_b8173->getRequestId(), (short)1, buff);
if (_i1357) {
_j1356++;
}
}
if (_b8173->isItemIdSet() == true) {
_i1357 = T813::_m16030(_b8173->getItemId(), (short)3, buff);
if (_i1357) {
_j1356++;
}
}
if (_b8173->isQuantitySet() == true) {
_i1357 = T813::_m16039(_b8173->getQuantity(), (short)4, buff);
if (_i1357) {
_j1356++;
}
}
buff->_m16032(_x1355, _j1356);
}

void T818::_m15944(Serializable* _q7707, T811* _s7708) {
int _y7709 = _s7708->_m16028();
_s7708->_m16029(2);
short _n7710 = 0;
bool _x7711 = false;
GetStoreResponse* _w8179 = (GetStoreResponse*)_q7707;
if (_w8179->isMessageIdSet() == true) {
_x7711 = T813::_m16030(_w8179->getMessageId(), (short)0, _s7708);
if (_x7711) {
_n7710++;
}
}
if (_w8179->isRequestIdSet() == true) {
_x7711 = T813::_m16030(_w8179->getRequestId(), (short)1, _s7708);
if (_x7711) {
_n7710++;
}
}
if (_w8179->isGetStoreStatusSet() == true) {
_x7711 = T813::_m16031(this, _w8179->getGetStoreStatus(), (short)3, _s7708);
if (_x7711) {
_n7710++;
}
}
if (_w8179->isStoreSet() == true) {
_x7711 = T813::_m16031(this, _w8179->getStore(), (short)4, _s7708);
if (_x7711) {
_n7710++;
}
}
_s7708->_m16032(_y7709, _n7710);
}

void T818::_m15945(Serializable* serializable, T811* buff) {
int _v1363 = buff->_m16028();
buff->_m16029(2);
short _b1364 = 0;
bool _d1365 = false;
GetStoreRequest* _k8185 = (GetStoreRequest*)serializable;
if (_k8185->isMessageIdSet() == true) {
_d1365 = T813::_m16030(_k8185->getMessageId(), (short)0, buff);
if (_d1365) {
_b1364++;
}
}
if (_k8185->isRequestIdSet() == true) {
_d1365 = T813::_m16030(_k8185->getRequestId(), (short)1, buff);
if (_d1365) {
_b1364++;
}
}
buff->_m16032(_v1363, _b1364);
}

void T818::_m15946(Serializable* _d7713, T811* _j7714) {
int _s7715 = _j7714->_m16028();
_j7714->_m16029(2);
short _v7716 = 0;
bool _z7717 = false;
ConsumeItemResponse* _i8191 = (ConsumeItemResponse*)_d7713;
if (_i8191->isMessageIdSet() == true) {
_z7717 = T813::_m16030(_i8191->getMessageId(), (short)0, _j7714);
if (_z7717) {
_v7716++;
}
}
if (_i8191->isRequestIdSet() == true) {
_z7717 = T813::_m16030(_i8191->getRequestId(), (short)1, _j7714);
if (_z7717) {
_v7716++;
}
}
if (_i8191->isConsumeItemStatusSet() == true) {
_z7717 = T813::_m16031(this, _i8191->getConsumeItemStatus(), (short)3, _j7714);
if (_z7717) {
_v7716++;
}
}
if (_i8191->isConsumedItemSet() == true) {
_z7717 = T813::_m16031(this, _i8191->getConsumedItem(), (short)4, _j7714);
if (_z7717) {
_v7716++;
}
}
if (_i8191->isQuantitySet() == true) {
_z7717 = T813::_m16039(_i8191->getQuantity(), (short)5, _j7714);
if (_z7717) {
_v7716++;
}
}
_j7714->_m16032(_s7715, _v7716);
}

void T818::_m15947(Serializable* _d7719, T811* _v7720) {
int _i1371 = _v7720->_m16028();
_v7720->_m16029(2);
short _q1372 = 0;
bool _r1373 = false;
ConsumeItemRequest* _c8197 = (ConsumeItemRequest*)_d7719;
if (_c8197->isMessageIdSet() == true) {
_r1373 = T813::_m16030(_c8197->getMessageId(), (short)0, _v7720);
if (_r1373) {
_q1372++;
}
}
if (_c8197->isRequestIdSet() == true) {
_r1373 = T813::_m16030(_c8197->getRequestId(), (short)1, _v7720);
if (_r1373) {
_q1372++;
}
}
if (_c8197->isItemIdSet() == true) {
_r1373 = T813::_m16030(_c8197->getItemId(), (short)3, _v7720);
if (_r1373) {
_q1372++;
}
}
if (_c8197->isQuantitySet() == true) {
_r1373 = T813::_m16039(_c8197->getQuantity(), (short)4, _v7720);
if (_r1373) {
_q1372++;
}
}
_v7720->_m16032(_i1371, _q1372);
}

void T818::_m15948(Serializable* serializable, T811* buff) {
int _p7721 = buff->_m16028();
buff->_m16029(2);
short _x7722 = 0;
bool _g7723 = false;
IncreasePlayerWalletResponse* _t8203 = (IncreasePlayerWalletResponse*)serializable;
if (_t8203->isMessageIdSet() == true) {
_g7723 = T813::_m16030(_t8203->getMessageId(), (short)0, buff);
if (_g7723) {
_x7722++;
}
}
if (_t8203->isRequestIdSet() == true) {
_g7723 = T813::_m16030(_t8203->getRequestId(), (short)1, buff);
if (_g7723) {
_x7722++;
}
}
if (_t8203->isIncreasePlayerWalletStatusSet() == true) {
_g7723 = T813::_m16031(this, _t8203->getIncreasePlayerWalletStatus(), (short)3, buff);
if (_g7723) {
_x7722++;
}
}
if (_t8203->isValueSet() == true) {
_g7723 = T813::_m16039(_t8203->getValue(), (short)4, buff);
if (_g7723) {
_x7722++;
}
}
buff->_m16032(_p7721, _x7722);
}

void T818::_m15949(Serializable* _w7725, T811* _z7726) {
int _o7727 = _z7726->_m16028();
_z7726->_m16029(2);
short _w7728 = 0;
bool _p7729 = false;
IncreasePlayerWalletRequest* _w8209 = (IncreasePlayerWalletRequest*)_w7725;
if (_w8209->isMessageIdSet() == true) {
_p7729 = T813::_m16030(_w8209->getMessageId(), (short)0, _z7726);
if (_p7729) {
_w7728++;
}
}
if (_w8209->isRequestIdSet() == true) {
_p7729 = T813::_m16030(_w8209->getRequestId(), (short)1, _z7726);
if (_p7729) {
_w7728++;
}
}
if (_w8209->isValueSet() == true) {
_p7729 = T813::_m16039(_w8209->getValue(), (short)3, _z7726);
if (_p7729) {
_w7728++;
}
}
_z7726->_m16032(_o7727, _w7728);
}

void T818::_m15950(Serializable* _c7731, T811* _b7732) {
int _t7733 = _b7732->_m16028();
_b7732->_m16029(2);
short _h7734 = 0;
bool _g7735 = false;
GetPlayerWalletResponse* _o8215 = (GetPlayerWalletResponse*)_c7731;
if (_o8215->isMessageIdSet() == true) {
_g7735 = T813::_m16030(_o8215->getMessageId(), (short)0, _b7732);
if (_g7735) {
_h7734++;
}
}
if (_o8215->isRequestIdSet() == true) {
_g7735 = T813::_m16030(_o8215->getRequestId(), (short)1, _b7732);
if (_g7735) {
_h7734++;
}
}
if (_o8215->isGetPlayerWalletStatusSet() == true) {
_g7735 = T813::_m16031(this, _o8215->getGetPlayerWalletStatus(), (short)3, _b7732);
if (_g7735) {
_h7734++;
}
}
if (_o8215->isWalletSet() == true) {
_g7735 = T813::_m16031(this, _o8215->getWallet(), (short)4, _b7732);
if (_g7735) {
_h7734++;
}
}
_b7732->_m16032(_t7733, _h7734);
}

void T818::_m15951(Serializable* serializable, T811* buff) {
int _u1387 = buff->_m16028();
buff->_m16029(2);
short _h1388 = 0;
bool _k1389 = false;
GetPlayerWalletRequest* _u8221 = (GetPlayerWalletRequest*)serializable;
if (_u8221->isMessageIdSet() == true) {
_k1389 = T813::_m16030(_u8221->getMessageId(), (short)0, buff);
if (_k1389) {
_h1388++;
}
}
if (_u8221->isRequestIdSet() == true) {
_k1389 = T813::_m16030(_u8221->getRequestId(), (short)1, buff);
if (_k1389) {
_h1388++;
}
}
buff->_m16032(_u1387, _h1388);
}

void T818::_m15952(Serializable* _c7737, T811* _r7738) {
int _c7739 = _r7738->_m16028();
_r7738->_m16029(2);
short _s7740 = 0;
bool _e7741 = false;
GetAchievementBoardResponse* _x8227 = (GetAchievementBoardResponse*)_c7737;
if (_x8227->isMessageIdSet() == true) {
_e7741 = T813::_m16030(_x8227->getMessageId(), (short)0, _r7738);
if (_e7741) {
_s7740++;
}
}
if (_x8227->isRequestIdSet() == true) {
_e7741 = T813::_m16030(_x8227->getRequestId(), (short)1, _r7738);
if (_e7741) {
_s7740++;
}
}
if (_x8227->isGetAchievementBoardStatusSet() == true) {
_e7741 = T813::_m16031(this, _x8227->getGetAchievementBoardStatus(), (short)3, _r7738);
if (_e7741) {
_s7740++;
}
}
if (_x8227->isAchievementBoardSet() == true) {
_e7741 = T813::_m16031(this, _x8227->getAchievementBoard(), (short)4, _r7738);
if (_e7741) {
_s7740++;
}
}
_r7738->_m16032(_c7739, _s7740);
}

void T818::_m15953(Serializable* serializable, T811* buff) {
int _l1395 = buff->_m16028();
buff->_m16029(2);
short _h1396 = 0;
bool _b1397 = false;
GetAchievementBoardRequest* _j8233 = (GetAchievementBoardRequest*)serializable;
if (_j8233->isMessageIdSet() == true) {
_b1397 = T813::_m16030(_j8233->getMessageId(), (short)0, buff);
if (_b1397) {
_h1396++;
}
}
if (_j8233->isRequestIdSet() == true) {
_b1397 = T813::_m16030(_j8233->getRequestId(), (short)1, buff);
if (_b1397) {
_h1396++;
}
}
buff->_m16032(_l1395, _h1396);
}

void T818::_m15954(Serializable* serializable, T811* buff) {
int _h1399 = buff->_m16028();
buff->_m16029(2);
short _t1400 = 0;
bool _b1401 = false;
AchieveResponse* _r8239 = (AchieveResponse*)serializable;
if (_r8239->isMessageIdSet() == true) {
_b1401 = T813::_m16030(_r8239->getMessageId(), (short)0, buff);
if (_b1401) {
_t1400++;
}
}
if (_r8239->isRequestIdSet() == true) {
_b1401 = T813::_m16030(_r8239->getRequestId(), (short)1, buff);
if (_b1401) {
_t1400++;
}
}
if (_r8239->isAchieveStatusSet() == true) {
_b1401 = T813::_m16031(this, _r8239->getAchieveStatus(), (short)3, buff);
if (_b1401) {
_t1400++;
}
}
if (_r8239->isAchivementIdSet() == true) {
_b1401 = T813::_m16030(_r8239->getAchivementId(), (short)4, buff);
if (_b1401) {
_t1400++;
}
}
if (_r8239->isProgressSet() == true) {
_b1401 = T813::_m16039(_r8239->getProgress(), (short)5, buff);
if (_b1401) {
_t1400++;
}
}
buff->_m16032(_h1399, _t1400);
}

void T818::_m15955(Serializable* _j7743, T811* _g7744) {
int _i7745 = _g7744->_m16028();
_g7744->_m16029(2);
short _m7746 = 0;
bool _y7747 = false;
AchieveRequest* _p8245 = (AchieveRequest*)_j7743;
if (_p8245->isMessageIdSet() == true) {
_y7747 = T813::_m16030(_p8245->getMessageId(), (short)0, _g7744);
if (_y7747) {
_m7746++;
}
}
if (_p8245->isRequestIdSet() == true) {
_y7747 = T813::_m16030(_p8245->getRequestId(), (short)1, _g7744);
if (_y7747) {
_m7746++;
}
}
if (_p8245->isAchivementIdSet() == true) {
_y7747 = T813::_m16030(_p8245->getAchivementId(), (short)3, _g7744);
if (_y7747) {
_m7746++;
}
}
_g7744->_m16032(_i7745, _m7746);
}

void T818::_m15956(Serializable* serializable, T811* buff) {
int _g1407 = buff->_m16028();
buff->_m16029(2);
short _m1408 = 0;
bool _r1409 = false;
AchieveWithProgressRequest* _m8251 = (AchieveWithProgressRequest*)serializable;
if (_m8251->isMessageIdSet() == true) {
_r1409 = T813::_m16030(_m8251->getMessageId(), (short)0, buff);
if (_r1409) {
_m1408++;
}
}
if (_m8251->isRequestIdSet() == true) {
_r1409 = T813::_m16030(_m8251->getRequestId(), (short)1, buff);
if (_r1409) {
_m1408++;
}
}
if (_m8251->isAchivementIdSet() == true) {
_r1409 = T813::_m16030(_m8251->getAchivementId(), (short)3, buff);
if (_r1409) {
_m1408++;
}
}
if (_m8251->isValueSet() == true) {
_r1409 = T813::_m16039(_m8251->getValue(), (short)4, buff);
if (_r1409) {
_m1408++;
}
}
buff->_m16032(_g1407, _m1408);
}

void T818::_m15957(Serializable* serializable, T811* buff) {
int _r1411 = buff->_m16028();
buff->_m16029(2);
short _z1412 = 0;
bool _u1413 = false;
SearchImmediateGameResponse* _i8257 = (SearchImmediateGameResponse*)serializable;
if (_i8257->isMessageIdSet() == true) {
_u1413 = T813::_m16030(_i8257->getMessageId(), (short)0, buff);
if (_u1413) {
_z1412++;
}
}
if (_i8257->isRequestIdSet() == true) {
_u1413 = T813::_m16030(_i8257->getRequestId(), (short)1, buff);
if (_u1413) {
_z1412++;
}
}
if (_i8257->isSearchImmediateGameStatusSet() == true) {
_u1413 = T813::_m16031(this, _i8257->getSearchImmediateGameStatus(), (short)3, buff);
if (_u1413) {
_z1412++;
}
}
if (_i8257->isGameSet() == true) {
_u1413 = T813::_m16031(this, _i8257->getGame(), (short)4, buff);
if (_u1413) {
_z1412++;
}
}
buff->_m16032(_r1411, _z1412);
}

void T818::_m15958(Serializable* serializable, T811* buff) {
int _e1415 = buff->_m16028();
buff->_m16029(2);
short _o1416 = 0;
bool _s1417 = false;
SearchImmediateGameRequest* _i8263 = (SearchImmediateGameRequest*)serializable;
if (_i8263->isMessageIdSet() == true) {
_s1417 = T813::_m16030(_i8263->getMessageId(), (short)0, buff);
if (_s1417) {
_o1416++;
}
}
if (_i8263->isRequestIdSet() == true) {
_s1417 = T813::_m16030(_i8263->getRequestId(), (short)1, buff);
if (_s1417) {
_o1416++;
}
}
buff->_m16032(_e1415, _o1416);
}

void T818::_m15959(Serializable* _r7749, T811* _v7750) {
int _r7751 = _v7750->_m16028();
_v7750->_m16029(2);
short _d7752 = 0;
bool _d7753 = false;
SearchImmediateGameByConditionsRequest* _c8269 = (SearchImmediateGameByConditionsRequest*)_r7749;
if (_c8269->isMessageIdSet() == true) {
_d7753 = T813::_m16030(_c8269->getMessageId(), (short)0, _v7750);
if (_d7753) {
_d7752++;
}
}
if (_c8269->isRequestIdSet() == true) {
_d7753 = T813::_m16030(_c8269->getRequestId(), (short)1, _v7750);
if (_d7753) {
_d7752++;
}
}
if (_c8269->isQuerySet() == true) {
_d7753 = T813::_m16031(this, _c8269->getQuery(), (short)3, _v7750);
if (_d7753) {
_d7752++;
}
}
if (_c8269->isMatchMakingConditionsSet() == true) {
_d7753 = T813::_m16031(this, _c8269->getMatchMakingConditions(), (short)4, _v7750);
if (_d7753) {
_d7752++;
}
}
_v7750->_m16032(_r7751, _d7752);
}

void T818::_m15960(Serializable* _g7755, T811* _u7756) {
int _o7757 = _u7756->_m16028();
_u7756->_m16029(2);
short _f7758 = 0;
bool _w7759 = false;
JoinGameResponse* _b8275 = (JoinGameResponse*)_g7755;
if (_b8275->isMessageIdSet() == true) {
_w7759 = T813::_m16030(_b8275->getMessageId(), (short)0, _u7756);
if (_w7759) {
_f7758++;
}
}
if (_b8275->isRequestIdSet() == true) {
_w7759 = T813::_m16030(_b8275->getRequestId(), (short)1, _u7756);
if (_w7759) {
_f7758++;
}
}
if (_b8275->isJoinGameStatusSet() == true) {
_w7759 = T813::_m16031(this, _b8275->getJoinGameStatus(), (short)3, _u7756);
if (_w7759) {
_f7758++;
}
}
if (_b8275->isGameSet() == true) {
_w7759 = T813::_m16031(this, _b8275->getGame(), (short)4, _u7756);
if (_w7759) {
_f7758++;
}
}
_u7756->_m16032(_o7757, _f7758);
}

void T818::_m15961(Serializable* serializable, T811* buff) {
int _n1427 = buff->_m16028();
buff->_m16029(2);
short _b1428 = 0;
bool _r1429 = false;
JoinGameRequest* _l8281 = (JoinGameRequest*)serializable;
if (_l8281->isMessageIdSet() == true) {
_r1429 = T813::_m16030(_l8281->getMessageId(), (short)0, buff);
if (_r1429) {
_b1428++;
}
}
if (_l8281->isRequestIdSet() == true) {
_r1429 = T813::_m16030(_l8281->getRequestId(), (short)1, buff);
if (_r1429) {
_b1428++;
}
}
if (_l8281->isGameIdSet() == true) {
_r1429 = T813::_m16030(_l8281->getGameId(), (short)3, buff);
if (_r1429) {
_b1428++;
}
}
buff->_m16032(_n1427, _b1428);
}

void T818::_m15962(Serializable* _i7761, T811* _e7762) {
int _e7763 = _e7762->_m16028();
_e7762->_m16029(2);
short _h7764 = 0;
bool _e7765 = false;
UnjoinGameResponse* _e8287 = (UnjoinGameResponse*)_i7761;
if (_e8287->isMessageIdSet() == true) {
_e7765 = T813::_m16030(_e8287->getMessageId(), (short)0, _e7762);
if (_e7765) {
_h7764++;
}
}
if (_e8287->isRequestIdSet() == true) {
_e7765 = T813::_m16030(_e8287->getRequestId(), (short)1, _e7762);
if (_e7765) {
_h7764++;
}
}
if (_e8287->isUnjoinGameStatusSet() == true) {
_e7765 = T813::_m16031(this, _e8287->getUnjoinGameStatus(), (short)3, _e7762);
if (_e7765) {
_h7764++;
}
}
if (_e8287->isGameIdSet() == true) {
_e7765 = T813::_m16030(_e8287->getGameId(), (short)4, _e7762);
if (_e7765) {
_h7764++;
}
}
_e7762->_m16032(_e7763, _h7764);
}

void T818::_m15963(Serializable* _t7767, T811* _o7768) {
int _i7769 = _o7768->_m16028();
_o7768->_m16029(2);
short _x7770 = 0;
bool _e7771 = false;
UnjoinGameRequest* _d8293 = (UnjoinGameRequest*)_t7767;
if (_d8293->isMessageIdSet() == true) {
_e7771 = T813::_m16030(_d8293->getMessageId(), (short)0, _o7768);
if (_e7771) {
_x7770++;
}
}
if (_d8293->isRequestIdSet() == true) {
_e7771 = T813::_m16030(_d8293->getRequestId(), (short)1, _o7768);
if (_e7771) {
_x7770++;
}
}
if (_d8293->isGameIdSet() == true) {
_e7771 = T813::_m16030(_d8293->getGameId(), (short)3, _o7768);
if (_e7771) {
_x7770++;
}
}
_o7768->_m16032(_i7769, _x7770);
}

void T818::_m15964(Serializable* serializable, T811* buff) {
int _r1439 = buff->_m16028();
buff->_m16029(2);
short _x1440 = 0;
bool _y1441 = false;
StartGameResponse* _o8299 = (StartGameResponse*)serializable;
if (_o8299->isMessageIdSet() == true) {
_y1441 = T813::_m16030(_o8299->getMessageId(), (short)0, buff);
if (_y1441) {
_x1440++;
}
}
if (_o8299->isRequestIdSet() == true) {
_y1441 = T813::_m16030(_o8299->getRequestId(), (short)1, buff);
if (_y1441) {
_x1440++;
}
}
if (_o8299->isStartGameStatusSet() == true) {
_y1441 = T813::_m16031(this, _o8299->getStartGameStatus(), (short)3, buff);
if (_y1441) {
_x1440++;
}
}
if (_o8299->isGameIdSet() == true) {
_y1441 = T813::_m16030(_o8299->getGameId(), (short)4, buff);
if (_y1441) {
_x1440++;
}
}
buff->_m16032(_r1439, _x1440);
}

void T818::_m15965(Serializable* serializable, T811* buff) {
int _e1443 = buff->_m16028();
buff->_m16029(2);
short _d1444 = 0;
bool _k1445 = false;
StartGameRequest* _n8305 = (StartGameRequest*)serializable;
if (_n8305->isMessageIdSet() == true) {
_k1445 = T813::_m16030(_n8305->getMessageId(), (short)0, buff);
if (_k1445) {
_d1444++;
}
}
if (_n8305->isRequestIdSet() == true) {
_k1445 = T813::_m16030(_n8305->getRequestId(), (short)1, buff);
if (_k1445) {
_d1444++;
}
}
if (_n8305->isGameIdSet() == true) {
_k1445 = T813::_m16030(_n8305->getGameId(), (short)3, buff);
if (_k1445) {
_d1444++;
}
}
buff->_m16032(_e1443, _d1444);
}

void T818::_m15966(Serializable* serializable, T811* buff) {
int _s1447 = buff->_m16028();
buff->_m16029(2);
short _d1448 = 0;
bool _f1449 = false;
StopGameResponse* _f8311 = (StopGameResponse*)serializable;
if (_f8311->isMessageIdSet() == true) {
_f1449 = T813::_m16030(_f8311->getMessageId(), (short)0, buff);
if (_f1449) {
_d1448++;
}
}
if (_f8311->isRequestIdSet() == true) {
_f1449 = T813::_m16030(_f8311->getRequestId(), (short)1, buff);
if (_f1449) {
_d1448++;
}
}
if (_f8311->isStopGameStatusSet() == true) {
_f1449 = T813::_m16031(this, _f8311->getStopGameStatus(), (short)3, buff);
if (_f1449) {
_d1448++;
}
}
if (_f8311->isGameIdSet() == true) {
_f1449 = T813::_m16030(_f8311->getGameId(), (short)4, buff);
if (_f1449) {
_d1448++;
}
}
buff->_m16032(_s1447, _d1448);
}

void T818::_m15967(Serializable* _y7773, T811* _f7774) {
int _y7775 = _f7774->_m16028();
_f7774->_m16029(2);
short _l7776 = 0;
bool _t7777 = false;
StopGameRequest* _h8317 = (StopGameRequest*)_y7773;
if (_h8317->isMessageIdSet() == true) {
_t7777 = T813::_m16030(_h8317->getMessageId(), (short)0, _f7774);
if (_t7777) {
_l7776++;
}
}
if (_h8317->isRequestIdSet() == true) {
_t7777 = T813::_m16030(_h8317->getRequestId(), (short)1, _f7774);
if (_t7777) {
_l7776++;
}
}
if (_h8317->isGameIdSet() == true) {
_t7777 = T813::_m16030(_h8317->getGameId(), (short)3, _f7774);
if (_t7777) {
_l7776++;
}
}
_f7774->_m16032(_y7775, _l7776);
}

void T818::_m15968(Serializable* serializable, T811* buff) {
int _t1455 = buff->_m16028();
buff->_m16029(2);
short _k1456 = 0;
bool _n1457 = false;
CreateGameResponse* _l8323 = (CreateGameResponse*)serializable;
if (_l8323->isMessageIdSet() == true) {
_n1457 = T813::_m16030(_l8323->getMessageId(), (short)0, buff);
if (_n1457) {
_k1456++;
}
}
if (_l8323->isRequestIdSet() == true) {
_n1457 = T813::_m16030(_l8323->getRequestId(), (short)1, buff);
if (_n1457) {
_k1456++;
}
}
if (_l8323->isCreateGameStatusSet() == true) {
_n1457 = T813::_m16031(this, _l8323->getCreateGameStatus(), (short)3, buff);
if (_n1457) {
_k1456++;
}
}
if (_l8323->isGameIdSet() == true) {
_n1457 = T813::_m16030(_l8323->getGameId(), (short)4, buff);
if (_n1457) {
_k1456++;
}
}
buff->_m16032(_t1455, _k1456);
}

void T818::_m15969(Serializable* _v7779, T811* _q7780) {
int _n7781 = _q7780->_m16028();
_q7780->_m16029(2);
short _o7782 = 0;
bool _r7783 = false;
CreateGameRequest* _i8329 = (CreateGameRequest*)_v7779;
if (_i8329->isMessageIdSet() == true) {
_r7783 = T813::_m16030(_i8329->getMessageId(), (short)0, _q7780);
if (_r7783) {
_o7782++;
}
}
if (_i8329->isRequestIdSet() == true) {
_r7783 = T813::_m16030(_i8329->getRequestId(), (short)1, _q7780);
if (_r7783) {
_o7782++;
}
}
if (_i8329->isGameSet() == true) {
_r7783 = T813::_m16031(this, _i8329->getGame(), (short)3, _q7780);
if (_r7783) {
_o7782++;
}
}
_q7780->_m16032(_n7781, _o7782);
}

void T818::_m15970(Serializable* _r7785, T811* _v7786) {
int _z7787 = _v7786->_m16028();
_v7786->_m16029(2);
short _v7788 = 0;
bool _e7789 = false;
GetGamesResponse* _g8335 = (GetGamesResponse*)_r7785;
if (_g8335->isMessageIdSet() == true) {
_e7789 = T813::_m16030(_g8335->getMessageId(), (short)0, _v7786);
if (_e7789) {
_v7788++;
}
}
if (_g8335->isRequestIdSet() == true) {
_e7789 = T813::_m16030(_g8335->getRequestId(), (short)1, _v7786);
if (_e7789) {
_v7788++;
}
}
if (_g8335->isGetGamesStatusSet() == true) {
_e7789 = T813::_m16031(this, _g8335->getGetGamesStatus(), (short)3, _v7786);
if (_e7789) {
_v7788++;
}
}
if (_g8335->isGamesSet() == true) {
std::vector<NGame*>* _o8336 = _g8335->getGames();
if (_o8336 == 0) {
_e7789 = false;
} else {
_v7786->_m16035((short)4);
_v7786->_m16036(T809::_y15502);
int _n8337 = _v7786->_m16028();
_v7786->_m16029(4);
int _l8338 = _o8336->size();
_v7786->_m16035((short)_l8338);
for (unsigned int _g1470 = 0; _g1470 < (unsigned int)_l8338; _g1470++) {
NGame* _w1471 = (*_o8336)[_g1470];
if (_w1471 == 0) {
_v7786->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _w1471, _v7786);
}
}
_v7786->_m16038(_n8337, _v7786->_m16028() - _n8337);
_e7789 = true;
}
if (_e7789) {
_v7788++;
}
}
_v7786->_m16032(_z7787, _v7788);
}

void T818::_m15971(Serializable* serializable, T811* buff) {
int _o1472 = buff->_m16028();
buff->_m16029(2);
short _z1473 = 0;
bool _j1474 = false;
GetGamesRequest* _j8346 = (GetGamesRequest*)serializable;
if (_j8346->isMessageIdSet() == true) {
_j1474 = T813::_m16030(_j8346->getMessageId(), (short)0, buff);
if (_j1474) {
_z1473++;
}
}
if (_j8346->isRequestIdSet() == true) {
_j1474 = T813::_m16030(_j8346->getRequestId(), (short)1, buff);
if (_j1474) {
_z1473++;
}
}
if (_j8346->isDbQuerySet() == true) {
_j1474 = T813::_m16031(this, _j8346->getDbQuery(), (short)3, buff);
if (_j1474) {
_z1473++;
}
}
buff->_m16032(_o1472, _z1473);
}

void T818::_m15972(Serializable* serializable, T811* buff) {
int _u1476 = buff->_m16028();
buff->_m16029(2);
short _o1477 = 0;
bool _o1478 = false;
SaveAsGhostResponse* _u8352 = (SaveAsGhostResponse*)serializable;
if (_u8352->isMessageIdSet() == true) {
_o1478 = T813::_m16030(_u8352->getMessageId(), (short)0, buff);
if (_o1478) {
_o1477++;
}
}
if (_u8352->isRequestIdSet() == true) {
_o1478 = T813::_m16030(_u8352->getRequestId(), (short)1, buff);
if (_o1478) {
_o1477++;
}
}
if (_u8352->isSaveAsGhostStatusSet() == true) {
_o1478 = T813::_m16031(this, _u8352->getSaveAsGhostStatus(), (short)3, buff);
if (_o1478) {
_o1477++;
}
}
buff->_m16032(_u1476, _o1477);
}

void T818::_m15973(Serializable* _y7791, T811* _w7792) {
int _u7793 = _w7792->_m16028();
_w7792->_m16029(2);
short _d7794 = 0;
bool _c7795 = false;
SaveAsGhostRequest* _f8358 = (SaveAsGhostRequest*)_y7791;
if (_f8358->isMessageIdSet() == true) {
_c7795 = T813::_m16030(_f8358->getMessageId(), (short)0, _w7792);
if (_c7795) {
_d7794++;
}
}
if (_f8358->isRequestIdSet() == true) {
_c7795 = T813::_m16030(_f8358->getRequestId(), (short)1, _w7792);
if (_c7795) {
_d7794++;
}
}
if (_f8358->isGameSet() == true) {
_c7795 = T813::_m16031(this, _f8358->getGame(), (short)3, _w7792);
if (_c7795) {
_d7794++;
}
}
_w7792->_m16032(_u7793, _d7794);
}

void T818::_m15974(Serializable* _w7797, T811* _u7798) {
int _h7799 = _u7798->_m16028();
_u7798->_m16029(2);
short _v7800 = 0;
bool _q7801 = false;
GetGhostsResponse* _s8364 = (GetGhostsResponse*)_w7797;
if (_s8364->isMessageIdSet() == true) {
_q7801 = T813::_m16030(_s8364->getMessageId(), (short)0, _u7798);
if (_q7801) {
_v7800++;
}
}
if (_s8364->isRequestIdSet() == true) {
_q7801 = T813::_m16030(_s8364->getRequestId(), (short)1, _u7798);
if (_q7801) {
_v7800++;
}
}
if (_s8364->isGetGhostsStatusSet() == true) {
_q7801 = T813::_m16031(this, _s8364->getGetGhostsStatus(), (short)3, _u7798);
if (_q7801) {
_v7800++;
}
}
if (_s8364->isGhostsSet() == true) {
std::vector<NGame*>* _n8365 = _s8364->getGhosts();
if (_n8365 == 0) {
_q7801 = false;
} else {
_u7798->_m16035((short)4);
_u7798->_m16036(T809::_y15502);
int _r8366 = _u7798->_m16028();
_u7798->_m16029(4);
int _f8367 = _n8365->size();
_u7798->_m16035((short)_f8367);
for (unsigned int _u7829 = 0; _u7829 < (unsigned int)_f8367; _u7829++) {
NGame* _w7830 = (*_n8365)[_u7829];
if (_w7830 == 0) {
_u7798->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _w7830, _u7798);
}
}
_u7798->_m16038(_r8366, _u7798->_m16028() - _r8366);
_q7801 = true;
}
if (_q7801) {
_v7800++;
}
}
_u7798->_m16032(_h7799, _v7800);
}

void T818::_m15975(Serializable* serializable, T811* buff) {
int _v1493 = buff->_m16028();
buff->_m16029(2);
short _k1494 = 0;
bool _s1495 = false;
GetGhostsRequest* _n8375 = (GetGhostsRequest*)serializable;
if (_n8375->isMessageIdSet() == true) {
_s1495 = T813::_m16030(_n8375->getMessageId(), (short)0, buff);
if (_s1495) {
_k1494++;
}
}
if (_n8375->isRequestIdSet() == true) {
_s1495 = T813::_m16030(_n8375->getRequestId(), (short)1, buff);
if (_s1495) {
_k1494++;
}
}
if (_n8375->isDbQuerySet() == true) {
_s1495 = T813::_m16031(this, _n8375->getDbQuery(), (short)3, buff);
if (_s1495) {
_k1494++;
}
}
buff->_m16032(_v1493, _k1494);
}

void T818::_m15976(Serializable* _g7803, T811* _h7804) {
int _g7805 = _h7804->_m16028();
_h7804->_m16029(2);
short _h7806 = 0;
bool _c7807 = false;
LoadGhostResponse* _y8381 = (LoadGhostResponse*)_g7803;
if (_y8381->isMessageIdSet() == true) {
_c7807 = T813::_m16030(_y8381->getMessageId(), (short)0, _h7804);
if (_c7807) {
_h7806++;
}
}
if (_y8381->isRequestIdSet() == true) {
_c7807 = T813::_m16030(_y8381->getRequestId(), (short)1, _h7804);
if (_c7807) {
_h7806++;
}
}
if (_y8381->isLoadGhostStatusSet() == true) {
_c7807 = T813::_m16031(this, _y8381->getLoadGhostStatus(), (short)3, _h7804);
if (_c7807) {
_h7806++;
}
}
if (_y8381->isGameSet() == true) {
_c7807 = T813::_m16031(this, _y8381->getGame(), (short)4, _h7804);
if (_c7807) {
_h7806++;
}
}
_h7804->_m16032(_g7805, _h7806);
}

void T818::_m15977(Serializable* serializable, T811* buff) {
int _c1501 = buff->_m16028();
buff->_m16029(2);
short _e1502 = 0;
bool _j1503 = false;
LoadGhostRequest* _m8387 = (LoadGhostRequest*)serializable;
if (_m8387->isMessageIdSet() == true) {
_j1503 = T813::_m16030(_m8387->getMessageId(), (short)0, buff);
if (_j1503) {
_e1502++;
}
}
if (_m8387->isRequestIdSet() == true) {
_j1503 = T813::_m16030(_m8387->getRequestId(), (short)1, buff);
if (_j1503) {
_e1502++;
}
}
if (_m8387->isGameIdSet() == true) {
_j1503 = T813::_m16030(_m8387->getGameId(), (short)3, buff);
if (_j1503) {
_e1502++;
}
}
buff->_m16032(_c1501, _e1502);
}

void T818::_m15978(Serializable* _l7809, T811* _i7810) {
int _c7811 = _i7810->_m16028();
_i7810->_m16029(2);
short _s7812 = 0;
bool _w7813 = false;
SendGameChatResponse* _g8393 = (SendGameChatResponse*)_l7809;
if (_g8393->isMessageIdSet() == true) {
_w7813 = T813::_m16030(_g8393->getMessageId(), (short)0, _i7810);
if (_w7813) {
_s7812++;
}
}
if (_g8393->isRequestIdSet() == true) {
_w7813 = T813::_m16030(_g8393->getRequestId(), (short)1, _i7810);
if (_w7813) {
_s7812++;
}
}
if (_g8393->isSendGameChatStatusSet() == true) {
_w7813 = T813::_m16031(this, _g8393->getSendGameChatStatus(), (short)3, _i7810);
if (_w7813) {
_s7812++;
}
}
_i7810->_m16032(_c7811, _s7812);
}

void T818::_m15979(Serializable* serializable, T811* buff) {
int _l1509 = buff->_m16028();
buff->_m16029(2);
short _v1510 = 0;
bool _q1511 = false;
SendGameChatRequest* _n1512 = (SendGameChatRequest*)serializable;
if (_n1512->isMessageIdSet() == true) {
_q1511 = T813::_m16030(_n1512->getMessageId(), (short)0, buff);
if (_q1511) {
_v1510++;
}
}
if (_n1512->isRequestIdSet() == true) {
_q1511 = T813::_m16030(_n1512->getRequestId(), (short)1, buff);
if (_q1511) {
_v1510++;
}
}
if (_n1512->isGameIdSet() == true) {
_q1511 = T813::_m16030(_n1512->getGameId(), (short)3, buff);
if (_q1511) {
_v1510++;
}
}
if (_n1512->isMessageSet() == true) {
_q1511 = T813::_m16030(_n1512->getMessage(), (short)4, buff);
if (_q1511) {
_v1510++;
}
}
buff->_m16032(_l1509, _v1510);
}

void T818::_m15980(Serializable* _o7820, T811* _x7821) {
int _r7822 = _x7821->_m16028();
_x7821->_m16029(2);
short _b7823 = 0;
bool _y7824 = false;
SendGameChatToPlayerRequest* _k1516 = (SendGameChatToPlayerRequest*)_o7820;
if (_k1516->isMessageIdSet() == true) {
_y7824 = T813::_m16030(_k1516->getMessageId(), (short)0, _x7821);
if (_y7824) {
_b7823++;
}
}
if (_k1516->isRequestIdSet() == true) {
_y7824 = T813::_m16030(_k1516->getRequestId(), (short)1, _x7821);
if (_y7824) {
_b7823++;
}
}
if (_k1516->isGameIdSet() == true) {
_y7824 = T813::_m16030(_k1516->getGameId(), (short)3, _x7821);
if (_y7824) {
_b7823++;
}
}
if (_k1516->isPlayerIdSet() == true) {
_y7824 = T813::_m16030(_k1516->getPlayerId(), (short)4, _x7821);
if (_y7824) {
_b7823++;
}
}
if (_k1516->isMessageSet() == true) {
_y7824 = T813::_m16030(_k1516->getMessage(), (short)5, _x7821);
if (_y7824) {
_b7823++;
}
}
_x7821->_m16032(_r7822, _b7823);
}

void T818::_m15981(Serializable* serializable, T811* buff) {
int _h1517 = buff->_m16028();
buff->_m16029(2);
short _y1518 = 0;
bool _l1519 = false;
SendGameChatToPlayerListRequest* _h1520 = (SendGameChatToPlayerListRequest*)serializable;
if (_h1520->isMessageIdSet() == true) {
_l1519 = T813::_m16030(_h1520->getMessageId(), (short)0, buff);
if (_l1519) {
_y1518++;
}
}
if (_h1520->isRequestIdSet() == true) {
_l1519 = T813::_m16030(_h1520->getRequestId(), (short)1, buff);
if (_l1519) {
_y1518++;
}
}
if (_h1520->isGameIdSet() == true) {
_l1519 = T813::_m16030(_h1520->getGameId(), (short)3, buff);
if (_l1519) {
_y1518++;
}
}
if (_h1520->isMessageSet() == true) {
_l1519 = T813::_m16030(_h1520->getMessage(), (short)4, buff);
if (_l1519) {
_y1518++;
}
}
buff->_m16032(_h1517, _y1518);
}

void T818::_m15982(Serializable* _t7831, T811* _u7832) {
int _j7833 = _u7832->_m16028();
_u7832->_m16029(2);
short _n7834 = 0;
bool _k7835 = false;
GetStorablesResponse* _v1524 = (GetStorablesResponse*)_t7831;
if (_v1524->isMessageIdSet() == true) {
_k7835 = T813::_m16030(_v1524->getMessageId(), (short)0, _u7832);
if (_k7835) {
_n7834++;
}
}
if (_v1524->isRequestIdSet() == true) {
_k7835 = T813::_m16030(_v1524->getRequestId(), (short)1, _u7832);
if (_k7835) {
_n7834++;
}
}
if (_v1524->isGetStorablesStatusSet() == true) {
_k7835 = T813::_m16031(this, _v1524->getGetStorablesStatus(), (short)3, _u7832);
if (_k7835) {
_n7834++;
}
}
if (_v1524->isStorablesSet() == true) {
std::vector<Storable*>* _r8418 = _v1524->getStorables();
if (_r8418 == 0) {
_k7835 = false;
} else {
_u7832->_m16035((short)4);
_u7832->_m16036(T809::_y15502);
int _n8419 = _u7832->_m16028();
_u7832->_m16029(4);
int _d8420 = _r8418->size();
_u7832->_m16035((short)_d8420);
for (unsigned int _e7869 = 0; _e7869 < (unsigned int)_d8420; _e7869++) {
Storable* _f7870 = (*_r8418)[_e7869];
if (_f7870 == 0) {
_u7832->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _f7870, _u7832);
}
}
_u7832->_m16038(_n8419, _u7832->_m16028() - _n8419);
_k7835 = true;
}
if (_k7835) {
_n7834++;
}
}
_u7832->_m16032(_j7833, _n7834);
}

void T818::_m15983(Serializable* serializable, T811* buff) {
int _b1530 = buff->_m16028();
buff->_m16029(2);
short _g1531 = 0;
bool _u1532 = false;
GetStorablesRequest* _w1533 = (GetStorablesRequest*)serializable;
if (_w1533->isMessageIdSet() == true) {
_u1532 = T813::_m16030(_w1533->getMessageId(), (short)0, buff);
if (_u1532) {
_g1531++;
}
}
if (_w1533->isRequestIdSet() == true) {
_u1532 = T813::_m16030(_w1533->getRequestId(), (short)1, buff);
if (_u1532) {
_g1531++;
}
}
if (_w1533->isDbQuerySet() == true) {
_u1532 = T813::_m16031(this, _w1533->getDbQuery(), (short)3, buff);
if (_u1532) {
_g1531++;
}
}
buff->_m16032(_b1530, _g1531);
}

void T818::_m15984(Serializable* serializable, T811* buff) {
int _u1534 = buff->_m16028();
buff->_m16029(2);
short _q1535 = 0;
bool _o1536 = false;
SaveStorableResponse* _i1537 = (SaveStorableResponse*)serializable;
if (_i1537->isMessageIdSet() == true) {
_o1536 = T813::_m16030(_i1537->getMessageId(), (short)0, buff);
if (_o1536) {
_q1535++;
}
}
if (_i1537->isRequestIdSet() == true) {
_o1536 = T813::_m16030(_i1537->getRequestId(), (short)1, buff);
if (_o1536) {
_q1535++;
}
}
if (_i1537->isSaveStorableStatusSet() == true) {
_o1536 = T813::_m16031(this, _i1537->getSaveStorableStatus(), (short)3, buff);
if (_o1536) {
_q1535++;
}
}
if (_i1537->isStoreIdSet() == true) {
_o1536 = T813::_m16030(_i1537->getStoreId(), (short)4, buff);
if (_o1536) {
_q1535++;
}
}
buff->_m16032(_u1534, _q1535);
}

void T818::_m15985(Serializable* _s7842, T811* _f7843) {
int _g7844 = _f7843->_m16028();
_f7843->_m16029(2);
short _n7845 = 0;
bool _z7846 = false;
SaveStorableRequest* _p1541 = (SaveStorableRequest*)_s7842;
if (_p1541->isMessageIdSet() == true) {
_z7846 = T813::_m16030(_p1541->getMessageId(), (short)0, _f7843);
if (_z7846) {
_n7845++;
}
}
if (_p1541->isRequestIdSet() == true) {
_z7846 = T813::_m16030(_p1541->getRequestId(), (short)1, _f7843);
if (_z7846) {
_n7845++;
}
}
if (_p1541->isStorableSet() == true) {
_z7846 = T813::_m16031(this, _p1541->getStorable(), (short)3, _f7843);
if (_z7846) {
_n7845++;
}
}
_f7843->_m16032(_g7844, _n7845);
}

void T818::_m15986(Serializable* serializable, T811* buff) {
int _y1542 = buff->_m16028();
buff->_m16029(2);
short _o1543 = 0;
bool _l1544 = false;
NextPlayerTurnResponse* _n1545 = (NextPlayerTurnResponse*)serializable;
if (_n1545->isMessageIdSet() == true) {
_l1544 = T813::_m16030(_n1545->getMessageId(), (short)0, buff);
if (_l1544) {
_o1543++;
}
}
if (_n1545->isRequestIdSet() == true) {
_l1544 = T813::_m16030(_n1545->getRequestId(), (short)1, buff);
if (_l1544) {
_o1543++;
}
}
if (_n1545->isNextPlayerTurnStatusSet() == true) {
_l1544 = T813::_m16031(this, _n1545->getNextPlayerTurnStatus(), (short)3, buff);
if (_l1544) {
_o1543++;
}
}
buff->_m16032(_y1542, _o1543);
}

void T818::_m15987(Serializable* serializable, T811* buff) {
int _l1546 = buff->_m16028();
buff->_m16029(2);
short _d1547 = 0;
bool _y1548 = false;
NextPlayerTurnRequest* _q1549 = (NextPlayerTurnRequest*)serializable;
if (_q1549->isMessageIdSet() == true) {
_y1548 = T813::_m16030(_q1549->getMessageId(), (short)0, buff);
if (_y1548) {
_d1547++;
}
}
if (_q1549->isRequestIdSet() == true) {
_y1548 = T813::_m16030(_q1549->getRequestId(), (short)1, buff);
if (_y1548) {
_d1547++;
}
}
if (_q1549->isGameIdSet() == true) {
_y1548 = T813::_m16030(_q1549->getGameId(), (short)3, buff);
if (_y1548) {
_d1547++;
}
}
buff->_m16032(_l1546, _d1547);
}

void T818::_m15988(Serializable* serializable, T811* buff) {
int _n1550 = buff->_m16028();
buff->_m16029(2);
short _u1551 = 0;
bool _f1552 = false;
SetPlayerNameResponse* _q1553 = (SetPlayerNameResponse*)serializable;
if (_q1553->isMessageIdSet() == true) {
_f1552 = T813::_m16030(_q1553->getMessageId(), (short)0, buff);
if (_f1552) {
_u1551++;
}
}
if (_q1553->isRequestIdSet() == true) {
_f1552 = T813::_m16030(_q1553->getRequestId(), (short)1, buff);
if (_f1552) {
_u1551++;
}
}
if (_q1553->isSetPlayerNameStatusSet() == true) {
_f1552 = T813::_m16031(this, _q1553->getSetPlayerNameStatus(), (short)3, buff);
if (_f1552) {
_u1551++;
}
}
buff->_m16032(_n1550, _u1551);
}

void T818::_m15989(Serializable* serializable, T811* buff) {
int _n1554 = buff->_m16028();
buff->_m16029(2);
short _w1555 = 0;
bool _k1556 = false;
SetPlayerNameRequest* _w1557 = (SetPlayerNameRequest*)serializable;
if (_w1557->isMessageIdSet() == true) {
_k1556 = T813::_m16030(_w1557->getMessageId(), (short)0, buff);
if (_k1556) {
_w1555++;
}
}
if (_w1557->isRequestIdSet() == true) {
_k1556 = T813::_m16030(_w1557->getRequestId(), (short)1, buff);
if (_k1556) {
_w1555++;
}
}
if (_w1557->isNameSet() == true) {
_k1556 = T813::_m16030(_w1557->getName(), (short)3, buff);
if (_k1556) {
_w1555++;
}
}
buff->_m16032(_n1554, _w1555);
}

void T818::_m15990(Serializable* _h7848, T811* _r7849) {
int _u1558 = _r7849->_m16028();
_r7849->_m16029(2);
short _b1559 = 0;
bool _l1560 = false;
UpdateStorableResponse* _f1561 = (UpdateStorableResponse*)_h7848;
if (_f1561->isMessageIdSet() == true) {
_l1560 = T813::_m16030(_f1561->getMessageId(), (short)0, _r7849);
if (_l1560) {
_b1559++;
}
}
if (_f1561->isRequestIdSet() == true) {
_l1560 = T813::_m16030(_f1561->getRequestId(), (short)1, _r7849);
if (_l1560) {
_b1559++;
}
}
if (_f1561->isUpdateStorableStatusSet() == true) {
_l1560 = T813::_m16031(this, _f1561->getUpdateStorableStatus(), (short)3, _r7849);
if (_l1560) {
_b1559++;
}
}
if (_f1561->isStoreIdSet() == true) {
_l1560 = T813::_m16030(_f1561->getStoreId(), (short)4, _r7849);
if (_l1560) {
_b1559++;
}
}
_r7849->_m16032(_u1558, _b1559);
}

void T818::_m15991(Serializable* serializable, T811* buff) {
int _i7850 = buff->_m16028();
buff->_m16029(2);
short _y7851 = 0;
bool _v7852 = false;
UpdateStorableRequest* _x1565 = (UpdateStorableRequest*)serializable;
if (_x1565->isMessageIdSet() == true) {
_v7852 = T813::_m16030(_x1565->getMessageId(), (short)0, buff);
if (_v7852) {
_y7851++;
}
}
if (_x1565->isRequestIdSet() == true) {
_v7852 = T813::_m16030(_x1565->getRequestId(), (short)1, buff);
if (_v7852) {
_y7851++;
}
}
if (_x1565->isStorableSet() == true) {
_v7852 = T813::_m16031(this, _x1565->getStorable(), (short)3, buff);
if (_v7852) {
_y7851++;
}
}
buff->_m16032(_i7850, _y7851);
}

void T818::_m15992(Serializable* _c7854, T811* _d7855) {
int _o7856 = _d7855->_m16028();
_d7855->_m16029(2);
short _e7857 = 0;
bool _x7858 = false;
RemoveStorableResponse* _s1569 = (RemoveStorableResponse*)_c7854;
if (_s1569->isMessageIdSet() == true) {
_x7858 = T813::_m16030(_s1569->getMessageId(), (short)0, _d7855);
if (_x7858) {
_e7857++;
}
}
if (_s1569->isRequestIdSet() == true) {
_x7858 = T813::_m16030(_s1569->getRequestId(), (short)1, _d7855);
if (_x7858) {
_e7857++;
}
}
if (_s1569->isRemoveStorableStatusSet() == true) {
_x7858 = T813::_m16031(this, _s1569->getRemoveStorableStatus(), (short)3, _d7855);
if (_x7858) {
_e7857++;
}
}
if (_s1569->isStoreIdSet() == true) {
_x7858 = T813::_m16030(_s1569->getStoreId(), (short)4, _d7855);
if (_x7858) {
_e7857++;
}
}
_d7855->_m16032(_o7856, _e7857);
}

void T818::_m15993(Serializable* serializable, T811* buff) {
int _i1570 = buff->_m16028();
buff->_m16029(2);
short _l1571 = 0;
bool _b1572 = false;
RemoveStorableRequest* _b1573 = (RemoveStorableRequest*)serializable;
if (_b1573->isMessageIdSet() == true) {
_b1572 = T813::_m16030(_b1573->getMessageId(), (short)0, buff);
if (_b1572) {
_l1571++;
}
}
if (_b1573->isRequestIdSet() == true) {
_b1572 = T813::_m16030(_b1573->getRequestId(), (short)1, buff);
if (_b1572) {
_l1571++;
}
}
if (_b1573->isStorableSet() == true) {
_b1572 = T813::_m16031(this, _b1573->getStorable(), (short)3, buff);
if (_b1572) {
_l1571++;
}
}
buff->_m16032(_i1570, _l1571);
}

void T818::_m15994(Serializable* _e7860, T811* _o7861) {
int _v7862 = _o7861->_m16028();
_o7861->_m16029(2);
short _l7863 = 0;
bool _i7864 = false;
InviteThirdPartyFriendResponse* _y1577 = (InviteThirdPartyFriendResponse*)_e7860;
if (_y1577->isMessageIdSet() == true) {
_i7864 = T813::_m16030(_y1577->getMessageId(), (short)0, _o7861);
if (_i7864) {
_l7863++;
}
}
if (_y1577->isRequestIdSet() == true) {
_i7864 = T813::_m16030(_y1577->getRequestId(), (short)1, _o7861);
if (_i7864) {
_l7863++;
}
}
if (_y1577->isInviteThirdPartyFriendStatusSet() == true) {
_i7864 = T813::_m16031(this, _y1577->getInviteThirdPartyFriendStatus(), (short)3, _o7861);
if (_i7864) {
_l7863++;
}
}
if (_y1577->isThirdPartyIdSet() == true) {
_i7864 = T813::_m16030(_y1577->getThirdPartyId(), (short)4, _o7861);
if (_i7864) {
_l7863++;
}
}
_o7861->_m16032(_v7862, _l7863);
}

void T818::_m15995(Serializable* serializable, T811* buff) {
int _q1578 = buff->_m16028();
buff->_m16029(2);
short _r1579 = 0;
bool _t1580 = false;
InviteThirdPartyFriendRequest* _t1581 = (InviteThirdPartyFriendRequest*)serializable;
if (_t1581->isMessageIdSet() == true) {
_t1580 = T813::_m16030(_t1581->getMessageId(), (short)0, buff);
if (_t1580) {
_r1579++;
}
}
if (_t1581->isRequestIdSet() == true) {
_t1580 = T813::_m16030(_t1581->getRequestId(), (short)1, buff);
if (_t1580) {
_r1579++;
}
}
if (_t1581->isThirdPartyIdSet() == true) {
_t1580 = T813::_m16030(_t1581->getThirdPartyId(), (short)3, buff);
if (_t1580) {
_r1579++;
}
}
if (_t1581->isTitleSet() == true) {
_t1580 = T813::_m16030(_t1581->getTitle(), (short)4, buff);
if (_t1580) {
_r1579++;
}
}
if (_t1581->isInviteMessageSet() == true) {
_t1580 = T813::_m16030(_t1581->getInviteMessage(), (short)5, buff);
if (_t1580) {
_r1579++;
}
}
if (_t1581->isPictureUrlSet() == true) {
_t1580 = T813::_m16030(_t1581->getPictureUrl(), (short)6, buff);
if (_t1580) {
_r1579++;
}
}
if (_t1581->isLinkSet() == true) {
_t1580 = T813::_m16030(_t1581->getLink(), (short)7, buff);
if (_t1580) {
_r1579++;
}
}
if (_t1581->isThirdPartySourceSet() == true) {
_t1580 = T813::_m16031(this, _t1581->getThirdPartySource(), (short)8, buff);
if (_t1580) {
_r1579++;
}
}
buff->_m16032(_q1578, _r1579);
}

void T818::_m15996(Serializable* _g7871, T811* _a7872) {
int _f7873 = _a7872->_m16028();
_a7872->_m16029(2);
short _c7874 = 0;
bool _g7875 = false;
PublishThirdPartyMessageResponse* _e1585 = (PublishThirdPartyMessageResponse*)_g7871;
if (_e1585->isMessageIdSet() == true) {
_g7875 = T813::_m16030(_e1585->getMessageId(), (short)0, _a7872);
if (_g7875) {
_c7874++;
}
}
if (_e1585->isRequestIdSet() == true) {
_g7875 = T813::_m16030(_e1585->getRequestId(), (short)1, _a7872);
if (_g7875) {
_c7874++;
}
}
if (_e1585->isPublishThirdPartyMessageStatusSet() == true) {
_g7875 = T813::_m16031(this, _e1585->getPublishThirdPartyMessageStatus(), (short)3, _a7872);
if (_g7875) {
_c7874++;
}
}
_a7872->_m16032(_f7873, _c7874);
}

void T818::_m15997(Serializable* serializable, T811* buff) {
int _c1586 = buff->_m16028();
buff->_m16029(2);
short _s1587 = 0;
bool _l1588 = false;
PublishThirdPartyMessageRequest* _z1589 = (PublishThirdPartyMessageRequest*)serializable;
if (_z1589->isMessageIdSet() == true) {
_l1588 = T813::_m16030(_z1589->getMessageId(), (short)0, buff);
if (_l1588) {
_s1587++;
}
}
if (_z1589->isRequestIdSet() == true) {
_l1588 = T813::_m16030(_z1589->getRequestId(), (short)1, buff);
if (_l1588) {
_s1587++;
}
}
if (_z1589->isTitleSet() == true) {
_l1588 = T813::_m16030(_z1589->getTitle(), (short)3, buff);
if (_l1588) {
_s1587++;
}
}
if (_z1589->isMessageSet() == true) {
_l1588 = T813::_m16030(_z1589->getMessage(), (short)4, buff);
if (_l1588) {
_s1587++;
}
}
if (_z1589->isPictureUrlSet() == true) {
_l1588 = T813::_m16030(_z1589->getPictureUrl(), (short)5, buff);
if (_l1588) {
_s1587++;
}
}
if (_z1589->isLinkSet() == true) {
_l1588 = T813::_m16030(_z1589->getLink(), (short)6, buff);
if (_l1588) {
_s1587++;
}
}
if (_z1589->isThirdPartySourceSet() == true) {
_l1588 = T813::_m16031(this, _z1589->getThirdPartySource(), (short)7, buff);
if (_l1588) {
_s1587++;
}
}
buff->_m16032(_c1586, _s1587);
}

void T818::_m15998(Serializable* serializable, T811* buff) {
int _d1590 = buff->_m16028();
buff->_m16029(2);
short _h1591 = 0;
bool _t1592 = false;
ThirdPartyLoginResponse* _t1593 = (ThirdPartyLoginResponse*)serializable;
if (_t1593->isMessageIdSet() == true) {
_t1592 = T813::_m16030(_t1593->getMessageId(), (short)0, buff);
if (_t1592) {
_h1591++;
}
}
if (_t1593->isRequestIdSet() == true) {
_t1592 = T813::_m16030(_t1593->getRequestId(), (short)1, buff);
if (_t1592) {
_h1591++;
}
}
if (_t1593->isThirdPartyLoginStatusSet() == true) {
_t1592 = T813::_m16031(this, _t1593->getThirdPartyLoginStatus(), (short)3, buff);
if (_t1592) {
_h1591++;
}
}
if (_t1593->isPlayerSet() == true) {
_t1592 = T813::_m16031(this, _t1593->getPlayer(), (short)4, buff);
if (_t1592) {
_h1591++;
}
}
buff->_m16032(_d1590, _h1591);
}

void T818::_m15999(Serializable* _e7877, T811* _g7878) {
int _f7879 = _g7878->_m16028();
_g7878->_m16029(2);
short _t7880 = 0;
bool _u7881 = false;
ThirdPartyLoginRequest* _i1597 = (ThirdPartyLoginRequest*)_e7877;
if (_i1597->isMessageIdSet() == true) {
_u7881 = T813::_m16030(_i1597->getMessageId(), (short)0, _g7878);
if (_u7881) {
_t7880++;
}
}
if (_i1597->isRequestIdSet() == true) {
_u7881 = T813::_m16030(_i1597->getRequestId(), (short)1, _g7878);
if (_u7881) {
_t7880++;
}
}
if (_i1597->isThirdPartySourceSet() == true) {
_u7881 = T813::_m16031(this, _i1597->getThirdPartySource(), (short)3, _g7878);
if (_u7881) {
_t7880++;
}
}
_g7878->_m16032(_f7879, _t7880);
}

void T818::_m16000(Serializable* serializable, T811* buff) {
int _b1598 = buff->_m16028();
buff->_m16029(2);
short _k1599 = 0;
bool _t1600 = false;
ThirdPartyLoginWithTokenRequest* _m1601 = (ThirdPartyLoginWithTokenRequest*)serializable;
if (_m1601->isMessageIdSet() == true) {
_t1600 = T813::_m16030(_m1601->getMessageId(), (short)0, buff);
if (_t1600) {
_k1599++;
}
}
if (_m1601->isRequestIdSet() == true) {
_t1600 = T813::_m16030(_m1601->getRequestId(), (short)1, buff);
if (_t1600) {
_k1599++;
}
}
if (_m1601->isThirdPartySourceSet() == true) {
_t1600 = T813::_m16031(this, _m1601->getThirdPartySource(), (short)3, buff);
if (_t1600) {
_k1599++;
}
}
if (_m1601->isAccessTokenSet() == true) {
_t1600 = T813::_m16030(_m1601->getAccessToken(), (short)4, buff);
if (_t1600) {
_k1599++;
}
}
buff->_m16032(_b1598, _k1599);
}

void T818::_m16001(Serializable* _b7883, T811* _z7884) {
int _m7885 = _z7884->_m16028();
_z7884->_m16029(2);
short _q7886 = 0;
bool _v7887 = false;
SaveGameResponse* _g1605 = (SaveGameResponse*)_b7883;
if (_g1605->isMessageIdSet() == true) {
_v7887 = T813::_m16030(_g1605->getMessageId(), (short)0, _z7884);
if (_v7887) {
_q7886++;
}
}
if (_g1605->isRequestIdSet() == true) {
_v7887 = T813::_m16030(_g1605->getRequestId(), (short)1, _z7884);
if (_v7887) {
_q7886++;
}
}
if (_g1605->isSaveGameStatusSet() == true) {
_v7887 = T813::_m16031(this, _g1605->getSaveGameStatus(), (short)3, _z7884);
if (_v7887) {
_q7886++;
}
}
if (_g1605->isGameIdSet() == true) {
_v7887 = T813::_m16030(_g1605->getGameId(), (short)4, _z7884);
if (_v7887) {
_q7886++;
}
}
_z7884->_m16032(_m7885, _q7886);
}

void T818::_m16002(Serializable* serializable, T811* buff) {
int _h1606 = buff->_m16028();
buff->_m16029(2);
short _p1607 = 0;
bool _m1608 = false;
SaveGameRequest* _w1609 = (SaveGameRequest*)serializable;
if (_w1609->isMessageIdSet() == true) {
_m1608 = T813::_m16030(_w1609->getMessageId(), (short)0, buff);
if (_m1608) {
_p1607++;
}
}
if (_w1609->isRequestIdSet() == true) {
_m1608 = T813::_m16030(_w1609->getRequestId(), (short)1, buff);
if (_m1608) {
_p1607++;
}
}
if (_w1609->isGameSet() == true) {
_m1608 = T813::_m16031(this, _w1609->getGame(), (short)3, buff);
if (_m1608) {
_p1607++;
}
}
buff->_m16032(_h1606, _p1607);
}

void T818::_m16003(Serializable* _r7889, T811* _d7890) {
int _w7891 = _d7890->_m16028();
_d7890->_m16029(2);
short _c7892 = 0;
bool _k7893 = false;
LoadGameResponse* _w1613 = (LoadGameResponse*)_r7889;
if (_w1613->isMessageIdSet() == true) {
_k7893 = T813::_m16030(_w1613->getMessageId(), (short)0, _d7890);
if (_k7893) {
_c7892++;
}
}
if (_w1613->isRequestIdSet() == true) {
_k7893 = T813::_m16030(_w1613->getRequestId(), (short)1, _d7890);
if (_k7893) {
_c7892++;
}
}
if (_w1613->isLoadGameStatusSet() == true) {
_k7893 = T813::_m16031(this, _w1613->getLoadGameStatus(), (short)3, _d7890);
if (_k7893) {
_c7892++;
}
}
if (_w1613->isGameSet() == true) {
_k7893 = T813::_m16031(this, _w1613->getGame(), (short)4, _d7890);
if (_k7893) {
_c7892++;
}
}
_d7890->_m16032(_w7891, _c7892);
}

void T818::_m16004(Serializable* _m7895, T811* _v7896) {
int _f1614 = _v7896->_m16028();
_v7896->_m16029(2);
short _d1615 = 0;
bool _e1616 = false;
LoadGameRequest* _c1617 = (LoadGameRequest*)_m7895;
if (_c1617->isMessageIdSet() == true) {
_e1616 = T813::_m16030(_c1617->getMessageId(), (short)0, _v7896);
if (_e1616) {
_d1615++;
}
}
if (_c1617->isRequestIdSet() == true) {
_e1616 = T813::_m16030(_c1617->getRequestId(), (short)1, _v7896);
if (_e1616) {
_d1615++;
}
}
if (_c1617->isGameIdSet() == true) {
_e1616 = T813::_m16030(_c1617->getGameId(), (short)3, _v7896);
if (_e1616) {
_d1615++;
}
}
_v7896->_m16032(_f1614, _d1615);
}

void T818::_m16005(Serializable* serializable, T811* buff) {
int _f7897 = buff->_m16028();
buff->_m16029(2);
short _v7898 = 0;
bool _z7899 = false;
SavePlayerStorableResponse* _b1621 = (SavePlayerStorableResponse*)serializable;
if (_b1621->isMessageIdSet() == true) {
_z7899 = T813::_m16030(_b1621->getMessageId(), (short)0, buff);
if (_z7899) {
_v7898++;
}
}
if (_b1621->isRequestIdSet() == true) {
_z7899 = T813::_m16030(_b1621->getRequestId(), (short)1, buff);
if (_z7899) {
_v7898++;
}
}
if (_b1621->isSavePlayerStorableStatusSet() == true) {
_z7899 = T813::_m16031(this, _b1621->getSavePlayerStorableStatus(), (short)3, buff);
if (_z7899) {
_v7898++;
}
}
if (_b1621->isStoreIdSet() == true) {
_z7899 = T813::_m16030(_b1621->getStoreId(), (short)4, buff);
if (_z7899) {
_v7898++;
}
}
buff->_m16032(_f7897, _v7898);
}

void T818::_m16006(Serializable* serializable, T811* buff) {
int _d1622 = buff->_m16028();
buff->_m16029(2);
short _f1623 = 0;
bool _q1624 = false;
SavePlayerStorableRequest* _c1625 = (SavePlayerStorableRequest*)serializable;
if (_c1625->isMessageIdSet() == true) {
_q1624 = T813::_m16030(_c1625->getMessageId(), (short)0, buff);
if (_q1624) {
_f1623++;
}
}
if (_c1625->isRequestIdSet() == true) {
_q1624 = T813::_m16030(_c1625->getRequestId(), (short)1, buff);
if (_q1624) {
_f1623++;
}
}
if (_c1625->isStorableSet() == true) {
_q1624 = T813::_m16031(this, _c1625->getStorable(), (short)3, buff);
if (_q1624) {
_f1623++;
}
}
buff->_m16032(_d1622, _f1623);
}

void T818::_m16007(Serializable* serializable, T811* buff) {
int _e1626 = buff->_m16028();
buff->_m16029(2);
short _y1627 = 0;
bool _g1628 = false;
UpdatePlayerStorableResponse* _o1629 = (UpdatePlayerStorableResponse*)serializable;
if (_o1629->isMessageIdSet() == true) {
_g1628 = T813::_m16030(_o1629->getMessageId(), (short)0, buff);
if (_g1628) {
_y1627++;
}
}
if (_o1629->isRequestIdSet() == true) {
_g1628 = T813::_m16030(_o1629->getRequestId(), (short)1, buff);
if (_g1628) {
_y1627++;
}
}
if (_o1629->isUpdatePlayerStorableStatusSet() == true) {
_g1628 = T813::_m16031(this, _o1629->getUpdatePlayerStorableStatus(), (short)3, buff);
if (_g1628) {
_y1627++;
}
}
if (_o1629->isStoreIdSet() == true) {
_g1628 = T813::_m16030(_o1629->getStoreId(), (short)4, buff);
if (_g1628) {
_y1627++;
}
}
buff->_m16032(_e1626, _y1627);
}

void T818::_m16008(Serializable* serializable, T811* buff) {
int _f1630 = buff->_m16028();
buff->_m16029(2);
short _t1631 = 0;
bool _d1632 = false;
UpdatePlayerStorableRequest* _k1633 = (UpdatePlayerStorableRequest*)serializable;
if (_k1633->isMessageIdSet() == true) {
_d1632 = T813::_m16030(_k1633->getMessageId(), (short)0, buff);
if (_d1632) {
_t1631++;
}
}
if (_k1633->isRequestIdSet() == true) {
_d1632 = T813::_m16030(_k1633->getRequestId(), (short)1, buff);
if (_d1632) {
_t1631++;
}
}
if (_k1633->isStorableSet() == true) {
_d1632 = T813::_m16031(this, _k1633->getStorable(), (short)3, buff);
if (_d1632) {
_t1631++;
}
}
buff->_m16032(_f1630, _t1631);
}

void T818::_m16009(Serializable* _z7901, T811* _n7902) {
int _m7903 = _n7902->_m16028();
_n7902->_m16029(2);
short _z7904 = 0;
bool _y7905 = false;
RemovePlayerStorableResponse* _t1637 = (RemovePlayerStorableResponse*)_z7901;
if (_t1637->isMessageIdSet() == true) {
_y7905 = T813::_m16030(_t1637->getMessageId(), (short)0, _n7902);
if (_y7905) {
_z7904++;
}
}
if (_t1637->isRequestIdSet() == true) {
_y7905 = T813::_m16030(_t1637->getRequestId(), (short)1, _n7902);
if (_y7905) {
_z7904++;
}
}
if (_t1637->isRemovePlayerStorableStatusSet() == true) {
_y7905 = T813::_m16031(this, _t1637->getRemovePlayerStorableStatus(), (short)3, _n7902);
if (_y7905) {
_z7904++;
}
}
if (_t1637->isStoreIdSet() == true) {
_y7905 = T813::_m16030(_t1637->getStoreId(), (short)4, _n7902);
if (_y7905) {
_z7904++;
}
}
_n7902->_m16032(_m7903, _z7904);
}

void T818::_m16010(Serializable* serializable, T811* buff) {
int _i1638 = buff->_m16028();
buff->_m16029(2);
short _u1639 = 0;
bool _t1640 = false;
RemovePlayerStorableRequest* _y1641 = (RemovePlayerStorableRequest*)serializable;
if (_y1641->isMessageIdSet() == true) {
_t1640 = T813::_m16030(_y1641->getMessageId(), (short)0, buff);
if (_t1640) {
_u1639++;
}
}
if (_y1641->isRequestIdSet() == true) {
_t1640 = T813::_m16030(_y1641->getRequestId(), (short)1, buff);
if (_t1640) {
_u1639++;
}
}
if (_y1641->isStorableSet() == true) {
_t1640 = T813::_m16031(this, _y1641->getStorable(), (short)3, buff);
if (_t1640) {
_u1639++;
}
}
buff->_m16032(_i1638, _u1639);
}

void T818::_m16011(Serializable* serializable, T811* buff) {
int _i1642 = buff->_m16028();
buff->_m16029(2);
short _l1643 = 0;
bool _c1644 = false;
GetPlayerStorablesResponse* _d1645 = (GetPlayerStorablesResponse*)serializable;
if (_d1645->isMessageIdSet() == true) {
_c1644 = T813::_m16030(_d1645->getMessageId(), (short)0, buff);
if (_c1644) {
_l1643++;
}
}
if (_d1645->isRequestIdSet() == true) {
_c1644 = T813::_m16030(_d1645->getRequestId(), (short)1, buff);
if (_c1644) {
_l1643++;
}
}
if (_d1645->isGetPlayerStorablesStatusSet() == true) {
_c1644 = T813::_m16031(this, _d1645->getGetPlayerStorablesStatus(), (short)3, buff);
if (_c1644) {
_l1643++;
}
}
if (_d1645->isStorablesSet() == true) {
std::vector<Storable*>* _x8597 = _d1645->getStorables();
if (_x8597 == 0) {
_c1644 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _e8598 = buff->_m16028();
buff->_m16029(4);
int _q8599 = _x8597->size();
buff->_m16035((short)_q8599);
for (unsigned int _m1649 = 0; _m1649 < (unsigned int)_q8599; _m1649++) {
Storable* _v1650 = (*_x8597)[_m1649];
if (_v1650 == 0) {
buff->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _v1650, buff);
}
}
buff->_m16038(_e8598, buff->_m16028() - _e8598);
_c1644 = true;
}
if (_c1644) {
_l1643++;
}
}
buff->_m16032(_i1642, _l1643);
}

void T818::_m16012(Serializable* _p7907, T811* _q7908) {
int _p7909 = _q7908->_m16028();
_q7908->_m16029(2);
short _u7910 = 0;
bool _l7911 = false;
GetPlayerStorablesRequest* _t1654 = (GetPlayerStorablesRequest*)_p7907;
if (_t1654->isMessageIdSet() == true) {
_l7911 = T813::_m16030(_t1654->getMessageId(), (short)0, _q7908);
if (_l7911) {
_u7910++;
}
}
if (_t1654->isRequestIdSet() == true) {
_l7911 = T813::_m16030(_t1654->getRequestId(), (short)1, _q7908);
if (_l7911) {
_u7910++;
}
}
if (_t1654->isDbQuerySet() == true) {
_l7911 = T813::_m16031(this, _t1654->getDbQuery(), (short)3, _q7908);
if (_l7911) {
_u7910++;
}
}
_q7908->_m16032(_p7909, _u7910);
}

void T818::_m16013(Serializable* serializable, T811* buff) {
int _t1655 = buff->_m16028();
buff->_m16029(2);
short _r1656 = 0;
bool _g1657 = false;
PauseSessionMonitoringResponse* _d1658 = (PauseSessionMonitoringResponse*)serializable;
if (_d1658->isMessageIdSet() == true) {
_g1657 = T813::_m16030(_d1658->getMessageId(), (short)0, buff);
if (_g1657) {
_r1656++;
}
}
if (_d1658->isRequestIdSet() == true) {
_g1657 = T813::_m16030(_d1658->getRequestId(), (short)1, buff);
if (_g1657) {
_r1656++;
}
}
if (_d1658->isPauseSessionMonitoringStatusSet() == true) {
_g1657 = T813::_m16031(this, _d1658->getPauseSessionMonitoringStatus(), (short)3, buff);
if (_g1657) {
_r1656++;
}
}
buff->_m16032(_t1655, _r1656);
}

void T818::_m16014(Serializable* _w7913, T811* _f7914) {
int _r7915 = _f7914->_m16028();
_f7914->_m16029(2);
short _k7916 = 0;
bool _m7917 = false;
PauseSessionMonitoringRequest* _q1662 = (PauseSessionMonitoringRequest*)_w7913;
if (_q1662->isMessageIdSet() == true) {
_m7917 = T813::_m16030(_q1662->getMessageId(), (short)0, _f7914);
if (_m7917) {
_k7916++;
}
}
if (_q1662->isRequestIdSet() == true) {
_m7917 = T813::_m16030(_q1662->getRequestId(), (short)1, _f7914);
if (_m7917) {
_k7916++;
}
}
_f7914->_m16032(_r7915, _k7916);
}

void T818::_m16015(Serializable* serializable, T811* buff) {
int _x1663 = buff->_m16028();
buff->_m16029(2);
short _h1664 = 0;
bool _g1665 = false;
ResumeSessionMonitoringResponse* _u1666 = (ResumeSessionMonitoringResponse*)serializable;
if (_u1666->isMessageIdSet() == true) {
_g1665 = T813::_m16030(_u1666->getMessageId(), (short)0, buff);
if (_g1665) {
_h1664++;
}
}
if (_u1666->isRequestIdSet() == true) {
_g1665 = T813::_m16030(_u1666->getRequestId(), (short)1, buff);
if (_g1665) {
_h1664++;
}
}
if (_u1666->isResumeSessionMonitoringStatusSet() == true) {
_g1665 = T813::_m16031(this, _u1666->getResumeSessionMonitoringStatus(), (short)3, buff);
if (_g1665) {
_h1664++;
}
}
buff->_m16032(_x1663, _h1664);
}

void T818::_m16016(Serializable* serializable, T811* buff) {
int _q1667 = buff->_m16028();
buff->_m16029(2);
short _f1668 = 0;
bool _w1669 = false;
ResumeSessionMonitoringRequest* _c1670 = (ResumeSessionMonitoringRequest*)serializable;
if (_c1670->isMessageIdSet() == true) {
_w1669 = T813::_m16030(_c1670->getMessageId(), (short)0, buff);
if (_w1669) {
_f1668++;
}
}
if (_c1670->isRequestIdSet() == true) {
_w1669 = T813::_m16030(_c1670->getRequestId(), (short)1, buff);
if (_w1669) {
_f1668++;
}
}
buff->_m16032(_q1667, _f1668);
}

void T818::_m16017(Serializable* serializable, T811* buff) {
int _m1671 = buff->_m16028();
buff->_m16029(2);
short _q1672 = 0;
bool _j1673 = false;
PublishFriendThirdPartyMessageResponse* _o1674 = (PublishFriendThirdPartyMessageResponse*)serializable;
if (_o1674->isMessageIdSet() == true) {
_j1673 = T813::_m16030(_o1674->getMessageId(), (short)0, buff);
if (_j1673) {
_q1672++;
}
}
if (_o1674->isRequestIdSet() == true) {
_j1673 = T813::_m16030(_o1674->getRequestId(), (short)1, buff);
if (_j1673) {
_q1672++;
}
}
if (_o1674->isPublishFriendThirdPartyMessageStatusSet() == true) {
_j1673 = T813::_m16031(this, _o1674->getPublishFriendThirdPartyMessageStatus(), (short)3, buff);
if (_j1673) {
_q1672++;
}
}
if (_o1674->isThirdPartyIdSet() == true) {
_j1673 = T813::_m16030(_o1674->getThirdPartyId(), (short)4, buff);
if (_j1673) {
_q1672++;
}
}
buff->_m16032(_m1671, _q1672);
}

void T818::_m16018(Serializable* _m7919, T811* _b7920) {
int _i7921 = _b7920->_m16028();
_b7920->_m16029(2);
short _x7922 = 0;
bool _s7923 = false;
PublishFriendThirdPartyMessageRequest* _t1678 = (PublishFriendThirdPartyMessageRequest*)_m7919;
if (_t1678->isMessageIdSet() == true) {
_s7923 = T813::_m16030(_t1678->getMessageId(), (short)0, _b7920);
if (_s7923) {
_x7922++;
}
}
if (_t1678->isRequestIdSet() == true) {
_s7923 = T813::_m16030(_t1678->getRequestId(), (short)1, _b7920);
if (_s7923) {
_x7922++;
}
}
if (_t1678->isTitleSet() == true) {
_s7923 = T813::_m16030(_t1678->getTitle(), (short)3, _b7920);
if (_s7923) {
_x7922++;
}
}
if (_t1678->isMessageSet() == true) {
_s7923 = T813::_m16030(_t1678->getMessage(), (short)4, _b7920);
if (_s7923) {
_x7922++;
}
}
if (_t1678->isPictureUrlSet() == true) {
_s7923 = T813::_m16030(_t1678->getPictureUrl(), (short)5, _b7920);
if (_s7923) {
_x7922++;
}
}
if (_t1678->isLinkSet() == true) {
_s7923 = T813::_m16030(_t1678->getLink(), (short)6, _b7920);
if (_s7923) {
_x7922++;
}
}
if (_t1678->isThirdPartyIdSet() == true) {
_s7923 = T813::_m16030(_t1678->getThirdPartyId(), (short)7, _b7920);
if (_s7923) {
_x7922++;
}
}
if (_t1678->isThirdPartySourceSet() == true) {
_s7923 = T813::_m16031(this, _t1678->getThirdPartySource(), (short)8, _b7920);
if (_s7923) {
_x7922++;
}
}
_b7920->_m16032(_i7921, _x7922);
}

void T818::_m16019(Serializable* _h7925, T811* _b7926) {
int _z7927 = _b7926->_m16028();
_b7926->_m16029(2);
short _v7928 = 0;
bool _b7929 = false;
InvitePlayerResponse* _u1682 = (InvitePlayerResponse*)_h7925;
if (_u1682->isMessageIdSet() == true) {
_b7929 = T813::_m16030(_u1682->getMessageId(), (short)0, _b7926);
if (_b7929) {
_v7928++;
}
}
if (_u1682->isRequestIdSet() == true) {
_b7929 = T813::_m16030(_u1682->getRequestId(), (short)1, _b7926);
if (_b7929) {
_v7928++;
}
}
if (_u1682->isInvitePlayerStatusSet() == true) {
_b7929 = T813::_m16031(this, _u1682->getInvitePlayerStatus(), (short)3, _b7926);
if (_b7929) {
_v7928++;
}
}
if (_u1682->isInvitationIdSet() == true) {
_b7929 = T813::_m16030(_u1682->getInvitationId(), (short)4, _b7926);
if (_b7929) {
_v7928++;
}
}
_b7926->_m16032(_z7927, _v7928);
}

void T818::_m16020(Serializable* serializable, T811* buff) {
int _s1683 = buff->_m16028();
buff->_m16029(2);
short _l1684 = 0;
bool _t1685 = false;
InvitePlayerRequest* _e1686 = (InvitePlayerRequest*)serializable;
if (_e1686->isMessageIdSet() == true) {
_t1685 = T813::_m16030(_e1686->getMessageId(), (short)0, buff);
if (_t1685) {
_l1684++;
}
}
if (_e1686->isRequestIdSet() == true) {
_t1685 = T813::_m16030(_e1686->getRequestId(), (short)1, buff);
if (_t1685) {
_l1684++;
}
}
if (_e1686->isPlayerIdSet() == true) {
_t1685 = T813::_m16030(_e1686->getPlayerId(), (short)3, buff);
if (_t1685) {
_l1684++;
}
}
if (_e1686->isInvitationContentSet() == true) {
_t1685 = T813::_m16031(this, _e1686->getInvitationContent(), (short)4, buff);
if (_t1685) {
_l1684++;
}
}
if (_e1686->isInvitationSet() == true) {
_t1685 = T813::_m16031(this, _e1686->getInvitation(), (short)5, buff);
if (_t1685) {
_l1684++;
}
}
buff->_m16032(_s1683, _l1684);
}

void T818::_m16021(Serializable* serializable, T811* buff) {
int _x1687 = buff->_m16028();
buff->_m16029(2);
short _j1688 = 0;
bool _o1689 = false;
GetInvitationsResponse* _p1690 = (GetInvitationsResponse*)serializable;
if (_p1690->isMessageIdSet() == true) {
_o1689 = T813::_m16030(_p1690->getMessageId(), (short)0, buff);
if (_o1689) {
_j1688++;
}
}
if (_p1690->isRequestIdSet() == true) {
_o1689 = T813::_m16030(_p1690->getRequestId(), (short)1, buff);
if (_o1689) {
_j1688++;
}
}
if (_p1690->isGetInvitationsStatusSet() == true) {
_o1689 = T813::_m16031(this, _p1690->getGetInvitationsStatus(), (short)3, buff);
if (_o1689) {
_j1688++;
}
}
if (_p1690->isInvitationsSet() == true) {
std::vector<NInvitation*>* _f8662 = _p1690->getInvitations();
if (_f8662 == 0) {
_o1689 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _e8663 = buff->_m16028();
buff->_m16029(4);
int _q8664 = _f8662->size();
buff->_m16035((short)_q8664);
for (unsigned int _o8083 = 0; _o8083 < (unsigned int)_q8664; _o8083++) {
NInvitation* _d8666 = (*_f8662)[_o8083];
if (_d8666 == 0) {
buff->_m16036(T809::_g15500);
} else {
T813::_m16037(this, _d8666, buff);
}
}
buff->_m16038(_e8663, buff->_m16028() - _e8663);
_o1689 = true;
}
if (_o1689) {
_j1688++;
}
}
buff->_m16032(_x1687, _j1688);
}

void T818::_m16022(Serializable* _a7931, T811* _i7932) {
int _w1696 = _i7932->_m16028();
_i7932->_m16029(2);
short _q1697 = 0;
bool _n1698 = false;
GetInvitationsRequest* _x1699 = (GetInvitationsRequest*)_a7931;
if (_x1699->isMessageIdSet() == true) {
_n1698 = T813::_m16030(_x1699->getMessageId(), (short)0, _i7932);
if (_n1698) {
_q1697++;
}
}
if (_x1699->isRequestIdSet() == true) {
_n1698 = T813::_m16030(_x1699->getRequestId(), (short)1, _i7932);
if (_n1698) {
_q1697++;
}
}
if (_x1699->isNuggetaQuerySet() == true) {
_n1698 = T813::_m16031(this, _x1699->getNuggetaQuery(), (short)3, _i7932);
if (_n1698) {
_q1697++;
}
}
_i7932->_m16032(_w1696, _q1697);
}

void T818::_m16023(Serializable* serializable, T811* buff) {
int _f7933 = buff->_m16028();
buff->_m16029(2);
short _t7934 = 0;
bool _x7935 = false;
AcceptInvitationResponse* _r1703 = (AcceptInvitationResponse*)serializable;
if (_r1703->isMessageIdSet() == true) {
_x7935 = T813::_m16030(_r1703->getMessageId(), (short)0, buff);
if (_x7935) {
_t7934++;
}
}
if (_r1703->isRequestIdSet() == true) {
_x7935 = T813::_m16030(_r1703->getRequestId(), (short)1, buff);
if (_x7935) {
_t7934++;
}
}
if (_r1703->isAcceptInvitationStatusSet() == true) {
_x7935 = T813::_m16031(this, _r1703->getAcceptInvitationStatus(), (short)3, buff);
if (_x7935) {
_t7934++;
}
}
if (_r1703->isInvitationIdSet() == true) {
_x7935 = T813::_m16030(_r1703->getInvitationId(), (short)4, buff);
if (_x7935) {
_t7934++;
}
}
buff->_m16032(_f7933, _t7934);
}

void T818::_m16024(Serializable* serializable, T811* buff) {
int _n1704 = buff->_m16028();
buff->_m16029(2);
short _k1705 = 0;
bool _h1706 = false;
AcceptInvitationRequest* _y1707 = (AcceptInvitationRequest*)serializable;
if (_y1707->isMessageIdSet() == true) {
_h1706 = T813::_m16030(_y1707->getMessageId(), (short)0, buff);
if (_h1706) {
_k1705++;
}
}
if (_y1707->isRequestIdSet() == true) {
_h1706 = T813::_m16030(_y1707->getRequestId(), (short)1, buff);
if (_h1706) {
_k1705++;
}
}
if (_y1707->isInvitationIdSet() == true) {
_h1706 = T813::_m16030(_y1707->getInvitationId(), (short)3, buff);
if (_h1706) {
_k1705++;
}
}
buff->_m16032(_n1704, _k1705);
}

void T818::_m16025(Serializable* serializable, T811* buff) {
int _h1708 = buff->_m16028();
buff->_m16029(2);
short _f1709 = 0;
bool _m1710 = false;
RefuseInvitationResponse* _c1711 = (RefuseInvitationResponse*)serializable;
if (_c1711->isMessageIdSet() == true) {
_m1710 = T813::_m16030(_c1711->getMessageId(), (short)0, buff);
if (_m1710) {
_f1709++;
}
}
if (_c1711->isRequestIdSet() == true) {
_m1710 = T813::_m16030(_c1711->getRequestId(), (short)1, buff);
if (_m1710) {
_f1709++;
}
}
if (_c1711->isRefuseInvitationStatusSet() == true) {
_m1710 = T813::_m16031(this, _c1711->getRefuseInvitationStatus(), (short)3, buff);
if (_m1710) {
_f1709++;
}
}
if (_c1711->isInvitationIdSet() == true) {
_m1710 = T813::_m16030(_c1711->getInvitationId(), (short)4, buff);
if (_m1710) {
_f1709++;
}
}
buff->_m16032(_h1708, _f1709);
}

void T818::_m16026(Serializable* _w8691, T811* _j7938) {
int _m8693 = _j7938->_m16028();
_j7938->_m16029(2);
short _d8077 = 0;
bool _s8695 = false;
RefuseInvitationRequest* _h1715 = (RefuseInvitationRequest*)_w8691;
if (_h1715->isMessageIdSet() == true) {
_s8695 = T813::_m16030(_h1715->getMessageId(), (short)0, _j7938);
if (_s8695) {
_d8077++;
}
}
if (_h1715->isRequestIdSet() == true) {
_s8695 = T813::_m16030(_h1715->getRequestId(), (short)1, _j7938);
if (_s8695) {
_d8077++;
}
}
if (_h1715->isInvitationIdSet() == true) {
_s8695 = T813::_m16030(_h1715->getInvitationId(), (short)3, _j7938);
if (_s8695) {
_d8077++;
}
}
_j7938->_m16032(_m8693, _d8077);
}

Serializable* T818::_m16049(T808* buffer) {
T811* _t1716 = (T811*)buffer;
return (Serializable*)T812::readObject(this, _t1716);
}

Serializable* T818::_m16050(T808* _u8699, short _b8700) {
T811* _e8052 = (T811*)_u8699;
if (_b8700 == -1) {
return _m16051(_e8052);
}
if (_b8700 == -2) {
return _m16052(_e8052);
}
if (_b8700 == -3) {
return _m16053(_e8052);
}
if (_b8700 == -4) {
return _m16054(_e8052);
}
if (_b8700 == -8) {
return _m16055(_e8052);
}
if (_b8700 == -9) {
return _m16056(_e8052);
}
if (_b8700 == -12) {
return _m16057(_e8052);
}
if (_b8700 == -18) {
return _m16058(_e8052);
}
if (_b8700 == -19) {
return _m16059(_e8052);
}
if (_b8700 == -20) {
return _m16060(_e8052);
}
if (_b8700 == -21) {
return _m16061(_e8052);
}
if (_b8700 == -22) {
return _m16062(_e8052);
}
if (_b8700 == -23) {
return _m16063(_e8052);
}
if (_b8700 == -24) {
return _m16064(_e8052);
}
if (_b8700 == -34) {
return _m16065(_e8052);
}
if (_b8700 == -38) {
return _m16066(_e8052);
}
if (_b8700 == -39) {
return _m16067(_e8052);
}
if (_b8700 == -42) {
return _m16068(_e8052);
}
if (_b8700 == -10018) {
return _m16069(_e8052);
}
if (_b8700 == -10038) {
return _m16070(_e8052);
}
if (_b8700 == -10078) {
return _m16071(_e8052);
}
if (_b8700 == -10098) {
return _m16072(_e8052);
}
if (_b8700 == -10118) {
return _m16073(_e8052);
}
if (_b8700 == -10138) {
return _m16074(_e8052);
}
if (_b8700 == -10198) {
return _m16075(_e8052);
}
if (_b8700 == -10218) {
return _m16076(_e8052);
}
if (_b8700 == -10238) {
return _m16077(_e8052);
}
if (_b8700 == -10258) {
return _m16078(_e8052);
}
if (_b8700 == -10278) {
return _m16079(_e8052);
}
if (_b8700 == -10298) {
return _m16080(_e8052);
}
if (_b8700 == -10318) {
return _m16081(_e8052);
}
if (_b8700 == -10338) {
return _m16082(_e8052);
}
if (_b8700 == -10358) {
return _m16083(_e8052);
}
if (_b8700 == -10378) {
return _m16084(_e8052);
}
if (_b8700 == -10398) {
return _m16085(_e8052);
}
if (_b8700 == -10418) {
return _m16086(_e8052);
}
if (_b8700 == -10438) {
return _m16087(_e8052);
}
if (_b8700 == -10458) {
return _m16088(_e8052);
}
if (_b8700 == -10478) {
return _m16089(_e8052);
}
if (_b8700 == -10498) {
return _m16090(_e8052);
}
if (_b8700 == -10518) {
return _m16091(_e8052);
}
if (_b8700 == -10618) {
return _m16092(_e8052);
}
if (_b8700 == -10638) {
return _m16093(_e8052);
}
if (_b8700 == -10658) {
return _m16094(_e8052);
}
if (_b8700 == -10678) {
return _m16095(_e8052);
}
if (_b8700 == -10698) {
return _m16096(_e8052);
}
if (_b8700 == -10718) {
return _m16097(_e8052);
}
if (_b8700 == -10738) {
return _m16098(_e8052);
}
if (_b8700 == -10758) {
return _m16099(_e8052);
}
if (_b8700 == -10778) {
return _m16100(_e8052);
}
if (_b8700 == -10798) {
return _m16101(_e8052);
}
if (_b8700 == -10818) {
return _m16102(_e8052);
}
if (_b8700 == -10838) {
return _m16103(_e8052);
}
if (_b8700 == -10858) {
return _m16104(_e8052);
}
if (_b8700 == -10878) {
return _m16105(_e8052);
}
if (_b8700 == -10898) {
return _m16106(_e8052);
}
if (_b8700 == -10918) {
return _m16107(_e8052);
}
if (_b8700 == -10938) {
return _m16108(_e8052);
}
if (_b8700 == -10958) {
return _m16109(_e8052);
}
if (_b8700 == -10978) {
return _m16110(_e8052);
}
if (_b8700 == -10998) {
return _m16111(_e8052);
}
if (_b8700 == -11018) {
return _m16112(_e8052);
}
if (_b8700 == -11038) {
return _m16113(_e8052);
}
if (_b8700 == -11058) {
return _m16114(_e8052);
}
if (_b8700 == -11078) {
return _m16115(_e8052);
}
if (_b8700 == -11098) {
return _m16116(_e8052);
}
if (_b8700 == -11118) {
return _m16117(_e8052);
}
if (_b8700 == -11138) {
return _m16118(_e8052);
}
if (_b8700 == -11158) {
return _m16119(_e8052);
}
if (_b8700 == -11178) {
return _m16120(_e8052);
}
if (_b8700 == -11198) {
return _m16121(_e8052);
}
if (_b8700 == -3000) {
return _m16122(_e8052);
}
if (_b8700 == -3001) {
return _m16123(_e8052);
}
if (_b8700 == -3002) {
return _m16124(_e8052);
}
if (_b8700 == -3003) {
return _m16125(_e8052);
}
if (_b8700 == -3004) {
return _m16126(_e8052);
}
if (_b8700 == -3005) {
return _m16127(_e8052);
}
if (_b8700 == -3006) {
return _m16128(_e8052);
}
if (_b8700 == -3008) {
return _m16129(_e8052);
}
if (_b8700 == -3009) {
return _m16130(_e8052);
}
if (_b8700 == -3010) {
return _m16131(_e8052);
}
if (_b8700 == -3011) {
return _m16132(_e8052);
}
if (_b8700 == -3012) {
return _m16133(_e8052);
}
if (_b8700 == -3013) {
return _m16134(_e8052);
}
if (_b8700 == -3017) {
return _m16135(_e8052);
}
if (_b8700 == -3019) {
return _m16136(_e8052);
}
if (_b8700 == -3020) {
return _m16137(_e8052);
}
if (_b8700 == -3021) {
return _m16138(_e8052);
}
if (_b8700 == -3042) {
return _m16139(_e8052);
}
if (_b8700 == -3077) {
return _m16140(_e8052);
}
if (_b8700 == -3078) {
return _m16141(_e8052);
}
if (_b8700 == -3088) {
return _m16142(_e8052);
}
if (_b8700 == -3089) {
return _m16143(_e8052);
}
if (_b8700 == -3090) {
return _m16144(_e8052);
}
if (_b8700 == -3093) {
return _m16145(_e8052);
}
if (_b8700 == -3098) {
return _m16146(_e8052);
}
if (_b8700 == -3099) {
return _m16147(_e8052);
}
if (_b8700 == -3100) {
return _m16148(_e8052);
}
if (_b8700 == -3101) {
return _m16149(_e8052);
}
if (_b8700 == -3103) {
return _m16150(_e8052);
}
if (_b8700 == -3105) {
return _m16151(_e8052);
}
if (_b8700 == -3106) {
return _m16152(_e8052);
}
if (_b8700 == -3107) {
return _m16153(_e8052);
}
if (_b8700 == -3109) {
return _m16154(_e8052);
}
if (_b8700 == -3111) {
return _m16155(_e8052);
}
if (_b8700 == -3112) {
return _m16156(_e8052);
}
if (_b8700 == -3113) {
return _m16157(_e8052);
}
if (_b8700 == -3118) {
return _m16158(_e8052);
}
if (_b8700 == -3119) {
return _m16159(_e8052);
}
if (_b8700 == -3121) {
return _m16160(_e8052);
}
if (_b8700 == -3122) {
return _m16161(_e8052);
}
if (_b8700 == -3124) {
return _m16162(_e8052);
}
if (_b8700 == -3127) {
return _m16163(_e8052);
}
if (_b8700 == -3129) {
return _m16164(_e8052);
}
if (_b8700 == -3135) {
return _m16165(_e8052);
}
if (_b8700 == -3136) {
return _m16166(_e8052);
}
if (_b8700 == -3137) {
return _m16167(_e8052);
}
if (_b8700 == -3139) {
return _m16168(_e8052);
}
if (_b8700 == -3140) {
return _m16169(_e8052);
}
if (_b8700 == -3142) {
return _m16170(_e8052);
}
if (_b8700 == -3143) {
return _m16171(_e8052);
}
if (_b8700 == -3145) {
return _m16172(_e8052);
}
if (_b8700 == -3156) {
return _m16173(_e8052);
}
if (_b8700 == -3157) {
return _m16174(_e8052);
}
if (_b8700 == -3158) {
return _m16175(_e8052);
}
if (_b8700 == -3159) {
return _m16176(_e8052);
}
if (_b8700 == -3164) {
return _m16177(_e8052);
}
if (_b8700 == -3165) {
return _m16178(_e8052);
}
if (_b8700 == -3174) {
return _m16179(_e8052);
}
if (_b8700 == -3175) {
return _m16180(_e8052);
}
if (_b8700 == -3178) {
return _m16181(_e8052);
}
if (_b8700 == -3179) {
return _m16182(_e8052);
}
if (_b8700 == -3180) {
return _m16183(_e8052);
}
if (_b8700 == -3181) {
return _m16184(_e8052);
}
if (_b8700 == -3204) {
return _m16185(_e8052);
}
if (_b8700 == -3230) {
return _m16186(_e8052);
}
if (_b8700 == -3232) {
return _m16187(_e8052);
}
if (_b8700 == -3233) {
return _m16188(_e8052);
}
if (_b8700 == -3234) {
return _m16189(_e8052);
}
if (_b8700 == -3235) {
return _m16190(_e8052);
}
if (_b8700 == -3236) {
return _m16191(_e8052);
}
if (_b8700 == -3237) {
return _m16192(_e8052);
}
if (_b8700 == -10019) {
return _m16193(_e8052);
}
if (_b8700 == -10017) {
return _m16194(_e8052);
}
if (_b8700 == -10016) {
return _m16195(_e8052);
}
if (_b8700 == -10039) {
return _m16196(_e8052);
}
if (_b8700 == -10037) {
return _m16197(_e8052);
}
if (_b8700 == -10079) {
return _m16198(_e8052);
}
if (_b8700 == -10077) {
return _m16199(_e8052);
}
if (_b8700 == -10099) {
return _m16200(_e8052);
}
if (_b8700 == -10097) {
return _m16201(_e8052);
}
if (_b8700 == -10119) {
return _m16202(_e8052);
}
if (_b8700 == -10117) {
return _m16203(_e8052);
}
if (_b8700 == -10116) {
return _m16204(_e8052);
}
if (_b8700 == -10139) {
return _m16205(_e8052);
}
if (_b8700 == -10137) {
return _m16206(_e8052);
}
if (_b8700 == -10199) {
return _m16207(_e8052);
}
if (_b8700 == -10197) {
return _m16208(_e8052);
}
if (_b8700 == -10196) {
return _m16209(_e8052);
}
if (_b8700 == -10219) {
return _m16210(_e8052);
}
if (_b8700 == -10217) {
return _m16211(_e8052);
}
if (_b8700 == -10239) {
return _m16212(_e8052);
}
if (_b8700 == -10237) {
return _m16213(_e8052);
}
if (_b8700 == -10259) {
return _m16214(_e8052);
}
if (_b8700 == -10257) {
return _m16215(_e8052);
}
if (_b8700 == -10279) {
return _m16216(_e8052);
}
if (_b8700 == -10277) {
return _m16217(_e8052);
}
if (_b8700 == -10299) {
return _m16218(_e8052);
}
if (_b8700 == -10297) {
return _m16219(_e8052);
}
if (_b8700 == -10296) {
return _m16220(_e8052);
}
if (_b8700 == -10319) {
return _m16221(_e8052);
}
if (_b8700 == -10317) {
return _m16222(_e8052);
}
if (_b8700 == -10339) {
return _m16223(_e8052);
}
if (_b8700 == -10337) {
return _m16224(_e8052);
}
if (_b8700 == -10359) {
return _m16225(_e8052);
}
if (_b8700 == -10357) {
return _m16226(_e8052);
}
if (_b8700 == -10379) {
return _m16227(_e8052);
}
if (_b8700 == -10377) {
return _m16228(_e8052);
}
if (_b8700 == -10399) {
return _m16229(_e8052);
}
if (_b8700 == -10397) {
return _m16230(_e8052);
}
if (_b8700 == -10419) {
return _m16231(_e8052);
}
if (_b8700 == -10417) {
return _m16232(_e8052);
}
if (_b8700 == -10439) {
return _m16233(_e8052);
}
if (_b8700 == -10437) {
return _m16234(_e8052);
}
if (_b8700 == -10459) {
return _m16235(_e8052);
}
if (_b8700 == -10457) {
return _m16236(_e8052);
}
if (_b8700 == -10456) {
return _m16237(_e8052);
}
if (_b8700 == -10479) {
return _m16238(_e8052);
}
if (_b8700 == -10477) {
return _m16239(_e8052);
}
if (_b8700 == -10476) {
return _m16240(_e8052);
}
if (_b8700 == -10499) {
return _m16241(_e8052);
}
if (_b8700 == -10497) {
return _m16242(_e8052);
}
if (_b8700 == -10519) {
return _m16243(_e8052);
}
if (_b8700 == -10517) {
return _m16244(_e8052);
}
if (_b8700 == -10619) {
return _m16245(_e8052);
}
if (_b8700 == -10617) {
return _m16246(_e8052);
}
if (_b8700 == -10639) {
return _m16247(_e8052);
}
if (_b8700 == -10637) {
return _m16248(_e8052);
}
if (_b8700 == -10659) {
return _m16249(_e8052);
}
if (_b8700 == -10657) {
return _m16250(_e8052);
}
if (_b8700 == -10679) {
return _m16251(_e8052);
}
if (_b8700 == -10677) {
return _m16252(_e8052);
}
if (_b8700 == -10699) {
return _m16253(_e8052);
}
if (_b8700 == -10697) {
return _m16254(_e8052);
}
if (_b8700 == -10719) {
return _m16255(_e8052);
}
if (_b8700 == -10717) {
return _m16256(_e8052);
}
if (_b8700 == -10739) {
return _m16257(_e8052);
}
if (_b8700 == -10737) {
return _m16258(_e8052);
}
if (_b8700 == -10759) {
return _m16259(_e8052);
}
if (_b8700 == -10757) {
return _m16260(_e8052);
}
if (_b8700 == -10756) {
return _m16261(_e8052);
}
if (_b8700 == -10755) {
return _m16262(_e8052);
}
if (_b8700 == -10779) {
return _m16263(_e8052);
}
if (_b8700 == -10777) {
return _m16264(_e8052);
}
if (_b8700 == -10799) {
return _m16265(_e8052);
}
if (_b8700 == -10797) {
return _m16266(_e8052);
}
if (_b8700 == -10819) {
return _m16267(_e8052);
}
if (_b8700 == -10817) {
return _m16268(_e8052);
}
if (_b8700 == -10839) {
return _m16269(_e8052);
}
if (_b8700 == -10837) {
return _m16270(_e8052);
}
if (_b8700 == -10859) {
return _m16271(_e8052);
}
if (_b8700 == -10857) {
return _m16272(_e8052);
}
if (_b8700 == -10879) {
return _m16273(_e8052);
}
if (_b8700 == -10877) {
return _m16274(_e8052);
}
if (_b8700 == -10899) {
return _m16275(_e8052);
}
if (_b8700 == -10897) {
return _m16276(_e8052);
}
if (_b8700 == -10919) {
return _m16277(_e8052);
}
if (_b8700 == -10917) {
return _m16278(_e8052);
}
if (_b8700 == -10939) {
return _m16279(_e8052);
}
if (_b8700 == -10937) {
return _m16280(_e8052);
}
if (_b8700 == -10936) {
return _m16281(_e8052);
}
if (_b8700 == -10959) {
return _m16282(_e8052);
}
if (_b8700 == -10957) {
return _m16283(_e8052);
}
if (_b8700 == -10979) {
return _m16284(_e8052);
}
if (_b8700 == -10977) {
return _m16285(_e8052);
}
if (_b8700 == -10999) {
return _m16286(_e8052);
}
if (_b8700 == -10997) {
return _m16287(_e8052);
}
if (_b8700 == -11019) {
return _m16288(_e8052);
}
if (_b8700 == -11017) {
return _m16289(_e8052);
}
if (_b8700 == -11039) {
return _m16290(_e8052);
}
if (_b8700 == -11037) {
return _m16291(_e8052);
}
if (_b8700 == -11059) {
return _m16292(_e8052);
}
if (_b8700 == -11057) {
return _m16293(_e8052);
}
if (_b8700 == -11079) {
return _m16294(_e8052);
}
if (_b8700 == -11077) {
return _m16295(_e8052);
}
if (_b8700 == -11099) {
return _m16296(_e8052);
}
if (_b8700 == -11097) {
return _m16297(_e8052);
}
if (_b8700 == -11119) {
return _m16298(_e8052);
}
if (_b8700 == -11117) {
return _m16299(_e8052);
}
if (_b8700 == -11139) {
return _m16300(_e8052);
}
if (_b8700 == -11137) {
return _m16301(_e8052);
}
if (_b8700 == -11159) {
return _m16302(_e8052);
}
if (_b8700 == -11157) {
return _m16303(_e8052);
}
if (_b8700 == -11179) {
return _m16304(_e8052);
}
if (_b8700 == -11177) {
return _m16305(_e8052);
}
if (_b8700 == -11199) {
return _m16306(_e8052);
}
if (_b8700 == -11197) {
return _m16307(_e8052);
}
throw new std::exception();
}

Serializable* T818::_m16051(T811* buff) {
int _r1718 = T812::_m16308(buff);
return DnsStatus::fromValue(_r1718);
}

Serializable* T818::_m16052(T811* buff) {
int _b1719 = T812::_m16308(buff);
return MatchMakingType::fromValue(_b1719);
}

Serializable* T818::_m16053(T811* buff) {
int _b1720 = T812::_m16308(buff);
return LeaderboardOrder::fromValue(_b1720);
}

Serializable* T818::_m16054(T811* buff) {
int _i1721 = T812::_m16308(buff);
return LeaderboardPeriod::fromValue(_i1721);
}

Serializable* T818::_m16055(T811* buff) {
int _s1722 = T812::_m16308(buff);
return ErrorCode::fromValue(_s1722);
}

Serializable* T818::_m16056(T811* buff) {
int _g1723 = T812::_m16308(buff);
return ThirdPartySource::fromValue(_g1723);
}

Serializable* T818::_m16057(T811* buff) {
int _u1724 = T812::_m16308(buff);
return LogLevel::fromValue(_u1724);
}

Serializable* T818::_m16058(T811* buff) {
int _c1725 = T812::_m16308(buff);
return HandshakeState::fromValue(_c1725);
}

Serializable* T818::_m16059(T811* buff) {
int _e1726 = T812::_m16308(buff);
return PlayerState::fromValue(_e1726);
}

Serializable* T818::_m16060(T811* buff) {
int _q1727 = T812::_m16308(buff);
return ClientApplication::fromValue(_q1727);
}

Serializable* T818::_m16061(T811* buff) {
int _r1728 = T812::_m16308(buff);
return GameRunningState::fromValue(_r1728);
}

Serializable* T818::_m16062(T811* buff) {
int _k1729 = T812::_m16308(buff);
return Period::fromValue(_k1729);
}

Serializable* T818::_m16063(T811* buff) {
int _m1730 = T812::_m16308(buff);
return NFriendDemandStatus::fromValue(_m1730);
}

Serializable* T818::_m16064(T811* buff) {
int _l1731 = T812::_m16308(buff);
return ExecutionStatus::fromValue(_l1731);
}

Serializable* T818::_m16065(T811* buff) {
int _d1732 = T812::_m16308(buff);
return StartStatus::fromValue(_d1732);
}

Serializable* T818::_m16066(T811* buff) {
int _h1733 = T812::_m16308(buff);
return PlayerSessionType::fromValue(_h1733);
}

Serializable* T818::_m16067(T811* buff) {
int _u1734 = T812::_m16308(buff);
return NAchievementType::fromValue(_u1734);
}

Serializable* T818::_m16068(T811* buff) {
int _c1735 = T812::_m16308(buff);
return NInvitationStatus::fromValue(_c1735);
}

Serializable* T818::_m16069(T811* buff) {
int _u1736 = T812::_m16308(buff);
return AskForFriendStatus::fromValue(_u1736);
}

Serializable* T818::_m16070(T811* buff) {
int _p1737 = T812::_m16308(buff);
return SignUpStatus::fromValue(_p1737);
}

Serializable* T818::_m16071(T811* buff) {
int _d1738 = T812::_m16308(buff);
return LoginStatus::fromValue(_d1738);
}

Serializable* T818::_m16072(T811* buff) {
int _i1739 = T812::_m16308(buff);
return SavePlayerProfileStatus::fromValue(_i1739);
}

Serializable* T818::_m16073(T811* buff) {
int _q1740 = T812::_m16308(buff);
return GetPlayerProfileStatus::fromValue(_q1740);
}

Serializable* T818::_m16074(T811* buff) {
int _m1741 = T812::_m16308(buff);
return LogoutStatus::fromValue(_m1741);
}

Serializable* T818::_m16075(T811* _g8063) {
int _g1742 = T812::_m16308(_g8063);
return GetFriendsStatus::fromValue(_g1742);
}

Serializable* T818::_m16076(T811* buff) {
int _r1743 = T812::_m16308(buff);
return GetThirdPartyFriendsStatus::fromValue(_r1743);
}

Serializable* T818::_m16077(T811* buff) {
int _f1744 = T812::_m16308(buff);
return GetFriendDemandsStatus::fromValue(_f1744);
}

Serializable* T818::_m16078(T811* buff) {
int _u1745 = T812::_m16308(buff);
return AcceptFriendDemandStatus::fromValue(_u1745);
}

Serializable* T818::_m16079(T811* buff) {
int _p1746 = T812::_m16308(buff);
return RefuseFriendDemandStatus::fromValue(_p1746);
}

Serializable* T818::_m16080(T811* buff) {
int _y1747 = T812::_m16308(buff);
return SubmitScoreStatus::fromValue(_y1747);
}

Serializable* T818::_m16081(T811* buff) {
int _b1748 = T812::_m16308(buff);
return GetLeaderboardStatus::fromValue(_b1748);
}

Serializable* T818::_m16082(T811* buff) {
int _t1749 = T812::_m16308(buff);
return BuyItemStatus::fromValue(_t1749);
}

Serializable* T818::_m16083(T811* buff) {
int _i1750 = T812::_m16308(buff);
return GetStoreStatus::fromValue(_i1750);
}

Serializable* T818::_m16084(T811* buff) {
int _j1751 = T812::_m16308(buff);
return ConsumeItemStatus::fromValue(_j1751);
}

Serializable* T818::_m16085(T811* _h8069) {
int _h1752 = T812::_m16308(_h8069);
return IncreasePlayerWalletStatus::fromValue(_h1752);
}

Serializable* T818::_m16086(T811* buff) {
int _g1753 = T812::_m16308(buff);
return GetPlayerWalletStatus::fromValue(_g1753);
}

Serializable* T818::_m16087(T811* buff) {
int _o1754 = T812::_m16308(buff);
return GetAchievementBoardStatus::fromValue(_o1754);
}

Serializable* T818::_m16088(T811* buff) {
int _t1755 = T812::_m16308(buff);
return AchieveStatus::fromValue(_t1755);
}

Serializable* T818::_m16089(T811* buff) {
int _c1756 = T812::_m16308(buff);
return SearchImmediateGameStatus::fromValue(_c1756);
}

Serializable* T818::_m16090(T811* buff) {
int _c1757 = T812::_m16308(buff);
return JoinGameStatus::fromValue(_c1757);
}

Serializable* T818::_m16091(T811* buff) {
int _w1758 = T812::_m16308(buff);
return UnjoinGameStatus::fromValue(_w1758);
}

Serializable* T818::_m16092(T811* buff) {
int _q1759 = T812::_m16308(buff);
return StartGameStatus::fromValue(_q1759);
}

Serializable* T818::_m16093(T811* buff) {
int _c1760 = T812::_m16308(buff);
return StopGameStatus::fromValue(_c1760);
}

Serializable* T818::_m16094(T811* buff) {
int _e1761 = T812::_m16308(buff);
return CreateGameStatus::fromValue(_e1761);
}

Serializable* T818::_m16095(T811* buff) {
int _m1762 = T812::_m16308(buff);
return GetGamesStatus::fromValue(_m1762);
}

Serializable* T818::_m16096(T811* buff) {
int _k1763 = T812::_m16308(buff);
return SaveAsGhostStatus::fromValue(_k1763);
}

Serializable* T818::_m16097(T811* buff) {
int _n1764 = T812::_m16308(buff);
return GetGhostsStatus::fromValue(_n1764);
}

Serializable* T818::_m16098(T811* buff) {
int _i1765 = T812::_m16308(buff);
return LoadGhostStatus::fromValue(_i1765);
}

Serializable* T818::_m16099(T811* _i8075) {
int _n1766 = T812::_m16308(_i8075);
return SendGameChatStatus::fromValue(_n1766);
}

Serializable* T818::_m16100(T811* buff) {
int _o1767 = T812::_m16308(buff);
return GetStorablesStatus::fromValue(_o1767);
}

Serializable* T818::_m16101(T811* buff) {
int _n1768 = T812::_m16308(buff);
return SaveStorableStatus::fromValue(_n1768);
}

Serializable* T818::_m16102(T811* buff) {
int _f1769 = T812::_m16308(buff);
return NextPlayerTurnStatus::fromValue(_f1769);
}

Serializable* T818::_m16103(T811* buff) {
int _g1770 = T812::_m16308(buff);
return SetPlayerNameStatus::fromValue(_g1770);
}

Serializable* T818::_m16104(T811* buff) {
int _f1771 = T812::_m16308(buff);
return UpdateStorableStatus::fromValue(_f1771);
}

Serializable* T818::_m16105(T811* buff) {
int _y1772 = T812::_m16308(buff);
return RemoveStorableStatus::fromValue(_y1772);
}

Serializable* T818::_m16106(T811* buff) {
int _b1773 = T812::_m16308(buff);
return InviteThirdPartyFriendStatus::fromValue(_b1773);
}

Serializable* T818::_m16107(T811* buff) {
int _n1774 = T812::_m16308(buff);
return PublishThirdPartyMessageStatus::fromValue(_n1774);
}

Serializable* T818::_m16108(T811* buff) {
int _i1775 = T812::_m16308(buff);
return ThirdPartyLoginStatus::fromValue(_i1775);
}

Serializable* T818::_m16109(T811* buff) {
int _j1776 = T812::_m16308(buff);
return SaveGameStatus::fromValue(_j1776);
}

Serializable* T818::_m16110(T811* buff) {
int _c1777 = T812::_m16308(buff);
return LoadGameStatus::fromValue(_c1777);
}

Serializable* T818::_m16111(T811* buff) {
int _b1778 = T812::_m16308(buff);
return SavePlayerStorableStatus::fromValue(_b1778);
}

Serializable* T818::_m16112(T811* buff) {
int _m1779 = T812::_m16308(buff);
return UpdatePlayerStorableStatus::fromValue(_m1779);
}

Serializable* T818::_m16113(T811* buff) {
int _b1780 = T812::_m16308(buff);
return RemovePlayerStorableStatus::fromValue(_b1780);
}

Serializable* T818::_m16114(T811* buff) {
int _r1781 = T812::_m16308(buff);
return GetPlayerStorablesStatus::fromValue(_r1781);
}

Serializable* T818::_m16115(T811* buff) {
int _e1782 = T812::_m16308(buff);
return PauseSessionMonitoringStatus::fromValue(_e1782);
}

Serializable* T818::_m16116(T811* buff) {
int _c1783 = T812::_m16308(buff);
return ResumeSessionMonitoringStatus::fromValue(_c1783);
}

Serializable* T818::_m16117(T811* buff) {
int _g1784 = T812::_m16308(buff);
return PublishFriendThirdPartyMessageStatus::fromValue(_g1784);
}

Serializable* T818::_m16118(T811* buff) {
int _q1785 = T812::_m16308(buff);
return InvitePlayerStatus::fromValue(_q1785);
}

Serializable* T818::_m16119(T811* buff) {
int _x1786 = T812::_m16308(buff);
return GetInvitationsStatus::fromValue(_x1786);
}

Serializable* T818::_m16120(T811* buff) {
int _l1787 = T812::_m16308(buff);
return AcceptInvitationStatus::fromValue(_l1787);
}

Serializable* T818::_m16121(T811* buff) {
int _h8843 = T812::_m16308(buff);
return RefuseInvitationStatus::fromValue(_h8843);
}

Serializable* T818::_m16122(T811* _q8086) {
Handshake* _m8845 = new Handshake();
short _m8088 = T812::_m16309(_q8086);
for (unsigned int _i1791 = 0; _i1791 < (unsigned int)_m8088; _i1791++) {
short _b1792 = T812::_m16309(_q8086);
if (_b1792 == 0) {
const char* _b1793 = T812::_m16310(_q8086);
_m8845->setMessageId(_b1793);
delete _b1793;
continue;
}
if (_b1792 == 1) {
const char* _g1794 = T812::_m16310(_q8086);
_m8845->setRequestId(_g1794);
delete _g1794;
continue;
}
if (_b1792 == 3) {
const char* _l1795 = T812::_m16310(_q8086);
_m8845->setVersion(_l1795);
delete _l1795;
continue;
}
if (_b1792 == 4) {
_m8845->setReason((HandshakeState*)T812::readObject(this, _q8086));
continue;
}
if (_b1792 == 5) {
const char* _e1796 = T812::_m16310(_q8086);
_m8845->setPlayerIdsStored(_e1796);
delete _e1796;
continue;
}
if (_b1792 == 6) {
const char* _p1797 = T812::_m16310(_q8086);
_m8845->setSessionId(_p1797);
delete _p1797;
continue;
}
if (_b1792 == 7) {
const char* _s1798 = T812::_m16310(_q8086);
_m8845->setPlatform(_s1798);
delete _s1798;
continue;
}
if (_b1792 == 8) {
const char* _l1799 = T812::_m16310(_q8086);
_m8845->setSpId(_l1799);
delete _l1799;
continue;
}
if (_b1792 == 9) {
const char* _u1800 = T812::_m16310(_q8086);
_m8845->setDebugSpId(_u1800);
delete _u1800;
continue;
}
T812::_m16311(_q8086);
}
return _m8845;
}

Serializable* T818::_m16123(T811* _g8092) {
HandshakeResponse* _a8858 = new HandshakeResponse();
short _v8094 = T812::_m16309(_g8092);
for (unsigned int _a1803 = 0; _a1803 < (unsigned int)_v8094; _a1803++) {
short _u1804 = T812::_m16309(_g8092);
if (_u1804 == 0) {
const char* _z1805 = T812::_m16310(_g8092);
_a8858->setMessageId(_z1805);
delete _z1805;
continue;
}
if (_u1804 == 1) {
const char* _s1806 = T812::_m16310(_g8092);
_a8858->setRequestId(_s1806);
delete _s1806;
continue;
}
if (_u1804 == 3) {
_a8858->setExecutionStatus((ExecutionStatus*)T812::readObject(this, _g8092));
continue;
}
if (_u1804 == 4) {
_a8858->setReason((HandshakeState*)T812::readObject(this, _g8092));
continue;
}
if (_u1804 == 5) {
const char* _c1807 = T812::_m16310(_g8092);
_a8858->setPlayerIdsStored(_c1807);
delete _c1807;
continue;
}
if (_u1804 == 6) {
const char* _j1808 = T812::_m16310(_g8092);
_a8858->setSessionId(_j1808);
delete _j1808;
continue;
}
if (_u1804 == 7) {
_a8858->setPlayerSessionType((PlayerSessionType*)T812::readObject(this, _g8092));
continue;
}
if (_u1804 == 8) {
_a8858->setPlayer((NPlayer*)T812::readObject(this, _g8092));
continue;
}
T812::_m16311(_g8092);
}
return _a8858;
}

Serializable* T818::_m16124(T811* buff) {
InvalidVersion* _f8867 = new InvalidVersion();
short _j1810 = T812::_m16309(buff);
for (unsigned int _o1811 = 0; _o1811 < (unsigned int)_j1810; _o1811++) {
short _m1812 = T812::_m16309(buff);
if (_m1812 == 0) {
const char* _j1813 = T812::_m16310(buff);
_f8867->setMessageId(_j1813);
delete _j1813;
continue;
}
if (_m1812 == 1) {
const char* _i1814 = T812::_m16310(buff);
_f8867->setRequestId(_i1814);
delete _i1814;
continue;
}
T812::_m16311(buff);
}
return _f8867;
}

Serializable* T818::_m16125(T811* buff) {
NPlayer* _x8874 = new NPlayer();
short _r1816 = T812::_m16309(buff);
for (unsigned int _o1817 = 0; _o1817 < (unsigned int)_r1816; _o1817++) {
short _c1818 = T812::_m16309(buff);
if (_c1818 == 0) {
const char* _d1819 = T812::_m16310(buff);
_x8874->setStoreId(_d1819);
delete _d1819;
continue;
}
if (_c1818 == 2) {
const char* _c1820 = T812::_m16310(buff);
_x8874->setID(_c1820);
delete _c1820;
continue;
}
if (_c1818 == 5) {
const char* _g1821 = T812::_m16310(buff);
_x8874->setAccessToken(_g1821);
delete _g1821;
continue;
}
if (_c1818 == 6) {
const char* _y1822 = T812::_m16310(buff);
_x8874->setName(_y1822);
delete _y1822;
continue;
}
if (_c1818 == 7) {
_x8874->setConnected(T812::_m16312(buff));
continue;
}
if (_c1818 == 8) {
_x8874->setLoginSource((ThirdPartySource*)T812::readObject(this, buff));
continue;
}
if (_c1818 == 9) {
const char* _t1823 = T812::_m16310(buff);
_x8874->setThirdPartyId(_t1823);
delete _t1823;
continue;
}
if (_c1818 == 12) {
const char* _v8883 = T812::_m16310(buff);
_x8874->setLang(_v8883);
delete _v8883;
continue;
}
T812::_m16311(buff);
}
return _x8874;
}

Serializable* T818::_m16126(T811* buff) {
GameStateChange* _r8885 = new GameStateChange();
short _r1826 = T812::_m16309(buff);
for (unsigned int _v8100 = 0; _v8100 < (unsigned int)_r1826; _v8100++) {
short _q1828 = T812::_m16309(buff);
if (_q1828 == 0) {
const char* _a1829 = T812::_m16310(buff);
_r8885->setMessageId(_a1829);
delete _a1829;
continue;
}
if (_q1828 == 1) {
const char* _m1830 = T812::_m16310(buff);
_r8885->setRequestId(_m1830);
delete _m1830;
continue;
}
if (_q1828 == 3) {
const char* _l1831 = T812::_m16310(buff);
_r8885->setGameId(_l1831);
delete _l1831;
continue;
}
if (_q1828 == 4) {
_r8885->setGameRunningState((GameRunningState*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _r8885;
}

Serializable* T818::_m16127(T811* _f8103) {
NFriendDemand* _b8893 = new NFriendDemand();
short _c8105 = T812::_m16309(_f8103);
for (unsigned int _b1834 = 0; _b1834 < (unsigned int)_c8105; _b1834++) {
short _l1835 = T812::_m16309(_f8103);
if (_l1835 == 0) {
const char* _i1836 = T812::_m16310(_f8103);
_b8893->setStoreId(_i1836);
delete _i1836;
continue;
}
if (_l1835 == 2) {
_b8893->setEmitter((NPlayer*)T812::readObject(this, _f8103));
continue;
}
if (_l1835 == 3) {
const char* _d1837 = T812::_m16310(_f8103);
_b8893->setReceiverId(_d1837);
delete _d1837;
continue;
}
if (_l1835 == 4) {
const char* _q1838 = T812::_m16310(_f8103);
_b8893->setCustomMessage(_q1838);
delete _q1838;
continue;
}
if (_l1835 == 5) {
_b8893->setFriendDemandStatus((NFriendDemandStatus*)T812::readObject(this, _f8103));
continue;
}
if (_l1835 == 6) {
const char* _o1839 = T812::_m16310(_f8103);
_b8893->setId(_o1839);
delete _o1839;
continue;
}
T812::_m16311(_f8103);
}
return _b8893;
}

Serializable* T818::_m16128(T811* buff) {
NScore* _s8902 = new NScore();
short _s1841 = T812::_m16309(buff);
for (unsigned int _e1842 = 0; _e1842 < (unsigned int)_s1841; _e1842++) {
short _p1843 = T812::_m16309(buff);
if (_p1843 == 0) {
const char* _r1844 = T812::_m16310(buff);
_s8902->setStoreId(_r1844);
delete _r1844;
continue;
}
if (_p1843 == 2) {
_s8902->setValue(T812::_m16313(buff));
continue;
}
T812::_m16311(buff);
}
return _s8902;
}

Serializable* T818::_m16129(T811* _y8109) {
NRoom* _r8908 = new NRoom();
short _t8111 = T812::_m16309(_y8109);
for (unsigned int _c1847 = 0; _c1847 < (unsigned int)_t8111; _c1847++) {
short _u1848 = T812::_m16309(_y8109);
if (_u1848 == 0) {
const char* _g1849 = T812::_m16310(_y8109);
_r8908->setStoreId(_g1849);
delete _g1849;
continue;
}
if (_u1848 == 2) {
const char* _h1850 = T812::_m16310(_y8109);
_r8908->setId(_h1850);
delete _h1850;
continue;
}
if (_u1848 == 3) {
const char* _u1851 = T812::_m16310(_y8109);
_r8908->setName(_u1851);
delete _u1851;
continue;
}
if (_u1848 == 4) {
std::vector<NPlayer*>* _f8915 = 0;
unsigned char _q8916 = _y8109->_m16314();
if (_q8916 != T809::_g15500) {
_y8109->_m16315();
int _f8917 = _y8109->_m16316();
_f8915 = new std::vector<NPlayer*>();
for (unsigned int _q1855 = 0; _q1855 < (unsigned int)_f8917; _q1855++) {
_f8915->push_back((NPlayer*)T812::readObject(this, _y8109));
}
}
_r8908->setPlayers(_f8915);
continue;
}
T812::_m16311(_y8109);
}
return _r8908;
}

Serializable* T818::_m16130(T811* _c8115) {
NGame* _i8920 = new NGame();
short _n1857 = T812::_m16309(_c8115);
for (unsigned int _m1858 = 0; _m1858 < (unsigned int)_n1857; _m1858++) {
short _q1859 = T812::_m16309(_c8115);
if (_q1859 == 0) {
const char* _b1860 = T812::_m16310(_c8115);
_i8920->setStoreId(_b1860);
delete _b1860;
continue;
}
if (_q1859 == 2) {
const char* _p1861 = T812::_m16310(_c8115);
_i8920->setId(_p1861);
delete _p1861;
continue;
}
if (_q1859 == 3) {
const char* _v1862 = T812::_m16310(_c8115);
_i8920->setName(_v1862);
delete _v1862;
continue;
}
if (_q1859 == 4) {
std::vector<NPlayer*>* _f8927 = 0;
unsigned char _d8928 = _c8115->_m16314();
if (_d8928 != T809::_g15500) {
_c8115->_m16315();
int _c8929 = _c8115->_m16316();
_f8927 = new std::vector<NPlayer*>();
for (unsigned int _t1866 = 0; _t1866 < (unsigned int)_c8929; _t1866++) {
_f8927->push_back((NPlayer*)T812::readObject(this, _c8115));
}
}
_i8920->setPlayers(_f8927);
continue;
}
if (_q1859 == 2502) {
_i8920->setGameRunningState((GameRunningState*)T812::readObject(this, _c8115));
continue;
}
if (_q1859 == 2503) {
_i8920->setGameCharacteristics((NGameCharacteristics*)T812::readObject(this, _c8115));
continue;
}
if (_q1859 == 2504) {
_i8920->setGameState((NGameState*)T812::readObject(this, _c8115));
continue;
}
if (_q1859 == 2505) {
_i8920->setMatchMakingConditions((NMatchMakingConditions*)T812::readObject(this, _c8115));
continue;
}
if (_q1859 == 2506) {
_i8920->setTurnBasedContext((TurnBasedContext*)T812::readObject(this, _c8115));
continue;
}
if (_q1859 == 2507) {
_i8920->setDisconnectedContext((DisconnectedContext*)T812::readObject(this, _c8115));
continue;
}
if (_q1859 == 2508) {
_i8920->setOwner((NPlayer*)T812::readObject(this, _c8115));
continue;
}
T812::_m16311(_c8115);
}
return _i8920;
}

Serializable* T818::_m16131(T811* buff) {
NGameCharacteristics* _f8932 = new NGameCharacteristics();
short _v8117 = T812::_m16309(buff);
for (unsigned int _v1869 = 0; _v1869 < (unsigned int)_v8117; _v1869++) {
short _r1870 = T812::_m16309(buff);
if (_r1870 == 0) {
const char* _v1871 = T812::_m16310(buff);
_f8932->setStoreId(_v1871);
delete _v1871;
continue;
}
if (_r1870 == 2) {
_f8932->setMinPlayer(T812::_m16308(buff));
continue;
}
if (_r1870 == 3) {
_f8932->setMaxPlayer(T812::_m16308(buff));
continue;
}
if (_r1870 == 4) {
_f8932->setAutoStop(T812::_m16312(buff));
continue;
}
if (_r1870 == 5) {
_f8932->setAutoStart(T812::_m16312(buff));
continue;
}
T812::_m16311(buff);
}
return _f8932;
}

Serializable* T818::_m16132(T811* buff) {
PlayerEnterGame* _d8938 = new PlayerEnterGame();
short _y1873 = T812::_m16309(buff);
for (unsigned int _d1874 = 0; _d1874 < (unsigned int)_y1873; _d1874++) {
short _b1875 = T812::_m16309(buff);
if (_b1875 == 0) {
const char* _w1876 = T812::_m16310(buff);
_d8938->setMessageId(_w1876);
delete _w1876;
continue;
}
if (_b1875 == 1) {
const char* _k1877 = T812::_m16310(buff);
_d8938->setRequestId(_k1877);
delete _k1877;
continue;
}
if (_b1875 == 3) {
const char* _m1878 = T812::_m16310(buff);
_d8938->setGameId(_m1878);
delete _m1878;
continue;
}
if (_b1875 == 4) {
_d8938->setPlayer((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _d8938;
}

Serializable* T818::_m16133(T811* _h8121) {
AdminPublicMessage* _k8946 = new AdminPublicMessage();
short _m8123 = T812::_m16309(_h8121);
for (unsigned int _w1881 = 0; _w1881 < (unsigned int)_m8123; _w1881++) {
short _f1882 = T812::_m16309(_h8121);
if (_f1882 == 0) {
const char* _r1883 = T812::_m16310(_h8121);
_k8946->setMessageId(_r1883);
delete _r1883;
continue;
}
if (_f1882 == 1) {
const char* _d1884 = T812::_m16310(_h8121);
_k8946->setRequestId(_d1884);
delete _d1884;
continue;
}
if (_f1882 == 4) {
const char* _g1885 = T812::_m16310(_h8121);
_k8946->setPlayerId(_g1885);
delete _g1885;
continue;
}
if (_f1882 == 5) {
const char* _s1886 = T812::_m16310(_h8121);
_k8946->setMessage(_s1886);
delete _s1886;
continue;
}
T812::_m16311(_h8121);
}
return _k8946;
}

Serializable* T818::_m16134(T811* buff) {
FriendshipNotification* _p8955 = new FriendshipNotification();
short _d1888 = T812::_m16309(buff);
for (unsigned int _p1889 = 0; _p1889 < (unsigned int)_d1888; _p1889++) {
short _u1890 = T812::_m16309(buff);
if (_u1890 == 0) {
const char* _i1891 = T812::_m16310(buff);
_p8955->setMessageId(_i1891);
delete _i1891;
continue;
}
if (_u1890 == 1) {
const char* _h1892 = T812::_m16310(buff);
_p8955->setRequestId(_h1892);
delete _h1892;
continue;
}
if (_u1890 == 4) {
_p8955->setFriend((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _p8955;
}

Serializable* T818::_m16135(T811* buff) {
PlayerUnjoinGame* _v8962 = new PlayerUnjoinGame();
short _x1894 = T812::_m16309(buff);
for (unsigned int _k1895 = 0; _k1895 < (unsigned int)_x1894; _k1895++) {
short _f1896 = T812::_m16309(buff);
if (_f1896 == 0) {
const char* _c1897 = T812::_m16310(buff);
_v8962->setMessageId(_c1897);
delete _c1897;
continue;
}
if (_f1896 == 1) {
const char* _y1898 = T812::_m16310(buff);
_v8962->setRequestId(_y1898);
delete _y1898;
continue;
}
if (_f1896 == 3) {
const char* _t1899 = T812::_m16310(buff);
_v8962->setGameId(_t1899);
delete _t1899;
continue;
}
if (_f1896 == 4) {
_v8962->setPlayer((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _v8962;
}

Serializable* T818::_m16136(T811* _l8127) {
DnsRequest* _f8970 = new DnsRequest();
short _y8129 = T812::_m16309(_l8127);
for (unsigned int _d1902 = 0; _d1902 < (unsigned int)_y8129; _d1902++) {
short _r1903 = T812::_m16309(_l8127);
if (_r1903 == 0) {
const char* _o1904 = T812::_m16310(_l8127);
_f8970->setMessageId(_o1904);
delete _o1904;
continue;
}
if (_r1903 == 1) {
const char* _g1905 = T812::_m16310(_l8127);
_f8970->setRequestId(_g1905);
delete _g1905;
continue;
}
if (_r1903 == 3) {
const char* _f1906 = T812::_m16310(_l8127);
_f8970->setGameId(_f1906);
delete _f1906;
continue;
}
if (_r1903 == 4) {
_f8970->setGameVersion(T812::_m16308(_l8127));
continue;
}
if (_r1903 == 5) {
_f8970->setGameDeployedVersion(T812::_m16308(_l8127));
continue;
}
if (_r1903 == 6) {
const char* _v1907 = T812::_m16310(_l8127);
_f8970->setPlatform(_v1907);
delete _v1907;
continue;
}
T812::_m16311(_l8127);
}
return _f8970;
}

Serializable* T818::_m16137(T811* _k8133) {
DnsResponse* _v8979 = new DnsResponse();
short _q1909 = T812::_m16309(_k8133);
for (unsigned int _l1910 = 0; _l1910 < (unsigned int)_q1909; _l1910++) {
short _c1911 = T812::_m16309(_k8133);
if (_c1911 == 0) {
const char* _g1912 = T812::_m16310(_k8133);
_v8979->setMessageId(_g1912);
delete _g1912;
continue;
}
if (_c1911 == 1) {
const char* _o1913 = T812::_m16310(_k8133);
_v8979->setRequestId(_o1913);
delete _o1913;
continue;
}
if (_c1911 == 3) {
const char* _j1914 = T812::_m16310(_k8133);
_v8979->setIpAddress(_j1914);
delete _j1914;
continue;
}
if (_c1911 == 4) {
_v8979->setTcpPort(T812::_m16308(_k8133));
continue;
}
if (_c1911 == 5) {
_v8979->setDnsStatus((DnsStatus*)T812::readObject(this, _k8133));
continue;
}
if (_c1911 == 6) {
_v8979->setStartDetails((StartDetails*)T812::readObject(this, _k8133));
continue;
}
T812::_m16311(_k8133);
}
return _v8979;
}

Serializable* T818::_m16138(T811* buff) {
ConnectionLost* _b8987 = new ConnectionLost();
short _k8135 = T812::_m16309(buff);
for (unsigned int _y1917 = 0; _y1917 < (unsigned int)_k8135; _y1917++) {
short _h1918 = T812::_m16309(buff);
if (_h1918 == 0) {
const char* _v1919 = T812::_m16310(buff);
_b8987->setMessageId(_v1919);
delete _v1919;
continue;
}
if (_h1918 == 1) {
const char* _p1920 = T812::_m16310(buff);
_b8987->setRequestId(_p1920);
delete _p1920;
continue;
}
T812::_m16311(buff);
}
return _b8987;
}

Serializable* T818::_m16139(T811* buff) {
NWorldUpdate* _y8994 = new NWorldUpdate();
short _n1922 = T812::_m16309(buff);
for (unsigned int _d1923 = 0; _d1923 < (unsigned int)_n1922; _d1923++) {
short _r1924 = T812::_m16309(buff);
if (_r1924 == 0) {
const char* _x1925 = T812::_m16310(buff);
_y8994->setStoreId(_x1925);
delete _x1925;
continue;
}
if (_r1924 == 2) {
_y8994->setUpdate(T812::_m16308(buff));
continue;
}
if (_r1924 == 3) {
std::vector<Message*>* _i8999 = 0;
unsigned char _y9000 = buff->_m16314();
if (_y9000 != T809::_g15500) {
buff->_m16315();
int _t9001 = buff->_m16316();
_i8999 = new std::vector<Message*>();
for (unsigned int _o1929 = 0; _o1929 < (unsigned int)_t9001; _o1929++) {
_i8999->push_back((Message*)T812::readObject(this, buff));
}
}
_y8994->setValues(_i8999);
continue;
}
T812::_m16311(buff);
}
return _y8994;
}

Serializable* T818::_m16140(T811* _b8139) {
StopPlugConnectionRequest* _o9004 = new StopPlugConnectionRequest();
short _j8141 = T812::_m16309(_b8139);
for (unsigned int _c1932 = 0; _c1932 < (unsigned int)_j8141; _c1932++) {
short _w1933 = T812::_m16309(_b8139);
if (_w1933 == 0) {
const char* _m1934 = T812::_m16310(_b8139);
_o9004->setMessageId(_m1934);
delete _m1934;
continue;
}
if (_w1933 == 1) {
const char* _q1935 = T812::_m16310(_b8139);
_o9004->setRequestId(_q1935);
delete _q1935;
continue;
}
T812::_m16311(_b8139);
}
return _o9004;
}

Serializable* T818::_m16141(T811* buff) {
StopPlugConnectionResponse* _l9011 = new StopPlugConnectionResponse();
short _v1937 = T812::_m16309(buff);
for (unsigned int _p1938 = 0; _p1938 < (unsigned int)_v1937; _p1938++) {
short _i1939 = T812::_m16309(buff);
if (_i1939 == 0) {
const char* _j1940 = T812::_m16310(buff);
_l9011->setMessageId(_j1940);
delete _j1940;
continue;
}
if (_i1939 == 1) {
const char* _q1941 = T812::_m16310(buff);
_l9011->setRequestId(_q1941);
delete _q1941;
continue;
}
T812::_m16311(buff);
}
return _l9011;
}

Serializable* T818::_m16142(T811* buff) {
ConnectionInterrupted* _s9018 = new ConnectionInterrupted();
short _z1943 = T812::_m16309(buff);
for (unsigned int _h1944 = 0; _h1944 < (unsigned int)_z1943; _h1944++) {
short _p1945 = T812::_m16309(buff);
if (_p1945 == 0) {
const char* _p1946 = T812::_m16310(buff);
_s9018->setMessageId(_p1946);
delete _p1946;
continue;
}
if (_p1945 == 1) {
const char* _g1947 = T812::_m16310(buff);
_s9018->setRequestId(_g1947);
delete _g1947;
continue;
}
T812::_m16311(buff);
}
return _s9018;
}

Serializable* T818::_m16143(T811* buff) {
ConnectionResumed* _c9025 = new ConnectionResumed();
short _k1949 = T812::_m16309(buff);
for (unsigned int _o1950 = 0; _o1950 < (unsigned int)_k1949; _o1950++) {
short _h1951 = T812::_m16309(buff);
if (_h1951 == 0) {
const char* _c1952 = T812::_m16310(buff);
_c9025->setMessageId(_c1952);
delete _c1952;
continue;
}
if (_h1951 == 1) {
const char* _r1953 = T812::_m16310(buff);
_c9025->setRequestId(_r1953);
delete _r1953;
continue;
}
T812::_m16311(buff);
}
return _c9025;
}

Serializable* T818::_m16144(T811* buff) {
ConnectionStop* _l9032 = new ConnectionStop();
short _x1955 = T812::_m16309(buff);
for (unsigned int _o1956 = 0; _o1956 < (unsigned int)_x1955; _o1956++) {
short _l1957 = T812::_m16309(buff);
if (_l1957 == 0) {
const char* _y1958 = T812::_m16310(buff);
_l9032->setMessageId(_y1958);
delete _y1958;
continue;
}
if (_l1957 == 1) {
const char* _n1959 = T812::_m16310(buff);
_l9032->setRequestId(_n1959);
delete _n1959;
continue;
}
T812::_m16311(buff);
}
return _l9032;
}

Serializable* T818::_m16145(T811* _p8145) {
NuggetaQuery* _v9039 = new NuggetaQuery();
short _h8147 = T812::_m16309(_p8145);
for (unsigned int _g1962 = 0; _g1962 < (unsigned int)_h8147; _g1962++) {
short _y1963 = T812::_m16309(_p8145);
if (_y1963 == 0) {
const char* _q1964 = T812::_m16310(_p8145);
_v9039->setDomain(_q1964);
delete _q1964;
continue;
}
if (_y1963 == 1) {
_v9039->setStart(T812::_m16308(_p8145));
continue;
}
if (_y1963 == 2) {
_v9039->setLimit(T812::_m16308(_p8145));
continue;
}
if (_y1963 == 3) {
const char* _y1965 = T812::_m16310(_p8145);
_v9039->setQuery(_y1965);
delete _y1965;
continue;
}
T812::_m16311(_p8145);
}
return _v9039;
}

Serializable* T818::_m16146(T811* buff) {
FriendConnectedNotification* _j9046 = new FriendConnectedNotification();
short _v1967 = T812::_m16309(buff);
for (unsigned int _e1968 = 0; _e1968 < (unsigned int)_v1967; _e1968++) {
short _i1969 = T812::_m16309(buff);
if (_i1969 == 0) {
const char* _j1970 = T812::_m16310(buff);
_j9046->setMessageId(_j1970);
delete _j1970;
continue;
}
if (_i1969 == 1) {
const char* _x1971 = T812::_m16310(buff);
_j9046->setRequestId(_x1971);
delete _x1971;
continue;
}
if (_i1969 == 3) {
_j9046->setFriend((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _j9046;
}

Serializable* T818::_m16147(T811* buff) {
FriendDisconnectedNotification* _x9053 = new FriendDisconnectedNotification();
short _v1973 = T812::_m16309(buff);
for (unsigned int _j1974 = 0; _j1974 < (unsigned int)_v1973; _j1974++) {
short _t1975 = T812::_m16309(buff);
if (_t1975 == 0) {
const char* _d1976 = T812::_m16310(buff);
_x9053->setMessageId(_d1976);
delete _d1976;
continue;
}
if (_t1975 == 1) {
const char* _u1977 = T812::_m16310(buff);
_x9053->setRequestId(_u1977);
delete _u1977;
continue;
}
if (_t1975 == 3) {
_x9053->setFriend((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _x9053;
}

Serializable* T818::_m16148(T811* buff) {
NPlayerWallet* _m9060 = new NPlayerWallet();
short _l1979 = T812::_m16309(buff);
for (unsigned int _d1980 = 0; _d1980 < (unsigned int)_l1979; _d1980++) {
short _z1981 = T812::_m16309(buff);
if (_z1981 == 0) {
const char* _f1982 = T812::_m16310(buff);
_m9060->setStoreId(_f1982);
delete _f1982;
continue;
}
if (_z1981 == 3) {
_m9060->setNbCoins(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _m9060;
}

Serializable* T818::_m16149(T811* _y8151) {
NItem* _x9066 = new NItem();
short _j8153 = T812::_m16309(_y8151);
for (unsigned int _s1985 = 0; _s1985 < (unsigned int)_j8153; _s1985++) {
short _y1986 = T812::_m16309(_y8151);
if (_y1986 == 0) {
const char* _x1987 = T812::_m16310(_y8151);
_x9066->setStoreId(_x1987);
delete _x1987;
continue;
}
if (_y1986 == 2) {
const char* _j1988 = T812::_m16310(_y8151);
_x9066->setId(_j1988);
delete _j1988;
continue;
}
if (_y1986 == 3) {
const char* _y1989 = T812::_m16310(_y8151);
_x9066->setName(_y1989);
delete _y1989;
continue;
}
if (_y1986 == 4) {
_x9066->setPrice(T812::_m16308(_y8151));
continue;
}
if (_y1986 == 5) {
_x9066->setBought(T812::_m16312(_y8151));
continue;
}
if (_y1986 == 6) {
_x9066->setCount(T812::_m16308(_y8151));
continue;
}
T812::_m16311(_y8151);
}
return _x9066;
}

Serializable* T818::_m16150(T811* buff) {
NAchievement* _c9074 = new NAchievement();
short _d1991 = T812::_m16309(buff);
for (unsigned int _o1992 = 0; _o1992 < (unsigned int)_d1991; _o1992++) {
short _m1993 = T812::_m16309(buff);
if (_m1993 == 0) {
const char* _g1994 = T812::_m16310(buff);
_c9074->setStoreId(_g1994);
delete _g1994;
continue;
}
if (_m1993 == 2) {
const char* _k1995 = T812::_m16310(buff);
_c9074->setId(_k1995);
delete _k1995;
continue;
}
if (_m1993 == 3) {
const char* _a1996 = T812::_m16310(buff);
_c9074->setName(_a1996);
delete _a1996;
continue;
}
if (_m1993 == 4) {
_c9074->setAchieved(T812::_m16312(buff));
continue;
}
if (_m1993 == 6) {
const char* _x1997 = T812::_m16310(buff);
_c9074->setDescription(_x1997);
delete _x1997;
continue;
}
if (_m1993 == 7) {
_c9074->setNXP(T812::_m16308(buff));
continue;
}
if (_m1993 == 8) {
_c9074->setNEnergy(T812::_m16308(buff));
continue;
}
if (_m1993 == 9) {
_c9074->setType((NAchievementType*)T812::readObject(this, buff));
continue;
}
if (_m1993 == 10) {
_c9074->setGoal(T812::_m16308(buff));
continue;
}
if (_m1993 == 11) {
_c9074->setProgress(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _c9074;
}

Serializable* T818::_m16151(T811* _y8157) {
NGameState* _b9083 = new NGameState();
short _d8159 = T812::_m16309(_y8157);
for (unsigned int _j2000 = 0; _j2000 < (unsigned int)_d8159; _j2000++) {
short _t2001 = T812::_m16309(_y8157);
if (_t2001 == 0) {
const char* _s2002 = T812::_m16310(_y8157);
_b9083->setStoreId(_s2002);
delete _s2002;
continue;
}
if (_t2001 == 2) {
std::vector<NWorldUpdate*>* _h9088 = 0;
unsigned char _u9089 = _y8157->_m16314();
if (_u9089 != T809::_g15500) {
_y8157->_m16315();
int _m9090 = _y8157->_m16316();
_h9088 = new std::vector<NWorldUpdate*>();
for (unsigned int _r2006 = 0; _r2006 < (unsigned int)_m9090; _r2006++) {
_h9088->push_back((NWorldUpdate*)T812::readObject(this, _y8157));
}
}
_b9083->setUpdates(_h9088);
continue;
}
T812::_m16311(_y8157);
}
return _b9083;
}

Serializable* T818::_m16152(T811* buff) {
NuggetaException* _k9093 = new NuggetaException();
short _r2008 = T812::_m16309(buff);
for (unsigned int _l2009 = 0; _l2009 < (unsigned int)_r2008; _l2009++) {
short _a2010 = T812::_m16309(buff);
if (_a2010 == 0) {
const char* _w2011 = T812::_m16310(buff);
_k9093->setMessageId(_w2011);
delete _w2011;
continue;
}
if (_a2010 == 1) {
const char* _o2012 = T812::_m16310(buff);
_k9093->setRequestId(_o2012);
delete _o2012;
continue;
}
if (_a2010 == 3) {
_k9093->setErrorCode((ErrorCode*)T812::readObject(this, buff));
continue;
}
if (_a2010 == 4) {
const char* _l2013 = T812::_m16310(buff);
_k9093->setReason(_l2013);
delete _l2013;
continue;
}
T812::_m16311(buff);
}
return _k9093;
}

Serializable* T818::_m16153(T811* buff) {
NCoinPackage* _v9101 = new NCoinPackage();
short _k2015 = T812::_m16309(buff);
for (unsigned int _p2016 = 0; _p2016 < (unsigned int)_k2015; _p2016++) {
short _v2017 = T812::_m16309(buff);
if (_v2017 == 0) {
const char* _d2018 = T812::_m16310(buff);
_v9101->setStoreId(_d2018);
delete _d2018;
continue;
}
if (_v2017 == 2) {
const char* _s2019 = T812::_m16310(buff);
_v9101->setCoinPackageId(_s2019);
delete _s2019;
continue;
}
if (_v2017 == 3) {
_v9101->setVirtualValue(T812::_m16317(buff));
continue;
}
if (_v2017 == 4) {
const char* _v2020 = T812::_m16310(buff);
_v9101->setProductId(_v2020);
delete _v2020;
continue;
}
T812::_m16311(buff);
}
return _v9101;
}

Serializable* T818::_m16154(T811* buff) {
BuyProductUrl* _r9109 = new BuyProductUrl();
short _g2022 = T812::_m16309(buff);
for (unsigned int _l2023 = 0; _l2023 < (unsigned int)_g2022; _l2023++) {
short _g2024 = T812::_m16309(buff);
if (_g2024 == 0) {
const char* _a2025 = T812::_m16310(buff);
_r9109->setMessageId(_a2025);
delete _a2025;
continue;
}
if (_g2024 == 1) {
const char* _l2026 = T812::_m16310(buff);
_r9109->setRequestId(_l2026);
delete _l2026;
continue;
}
if (_g2024 == 3) {
const char* _a2027 = T812::_m16310(buff);
_r9109->setUrl(_a2027);
delete _a2027;
continue;
}
T812::_m16311(buff);
}
return _r9109;
}

Serializable* T818::_m16155(T811* _x8163) {
BuyProductNotification* _l9117 = new BuyProductNotification();
short _h2029 = T812::_m16309(_x8163);
for (unsigned int _j2030 = 0; _j2030 < (unsigned int)_h2029; _j2030++) {
short _w2031 = T812::_m16309(_x8163);
if (_w2031 == 0) {
const char* _b2032 = T812::_m16310(_x8163);
_l9117->setMessageId(_b2032);
delete _b2032;
continue;
}
if (_w2031 == 1) {
const char* _q2033 = T812::_m16310(_x8163);
_l9117->setRequestId(_q2033);
delete _q2033;
continue;
}
T812::_m16311(_x8163);
}
return _l9117;
}

Serializable* T818::_m16156(T811* buff) {
NMatchMakingConditions* _o9124 = new NMatchMakingConditions();
short _d8165 = T812::_m16309(buff);
for (unsigned int _l2036 = 0; _l2036 < (unsigned int)_d8165; _l2036++) {
short _e2037 = T812::_m16309(buff);
if (_e2037 == 0) {
const char* _b2038 = T812::_m16310(buff);
_o9124->setStoreId(_b2038);
delete _b2038;
continue;
}
if (_e2037 == 2) {
_o9124->setMatchMakingType((MatchMakingType*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _o9124;
}

Serializable* T818::_m16157(T811* buff) {
OpenConnection* _m9130 = new OpenConnection();
short _u2040 = T812::_m16309(buff);
for (unsigned int _z2041 = 0; _z2041 < (unsigned int)_u2040; _z2041++) {
short _g2042 = T812::_m16309(buff);
if (_g2042 == 0) {
const char* _l2043 = T812::_m16310(buff);
_m9130->setMessageId(_l2043);
delete _l2043;
continue;
}
if (_g2042 == 1) {
const char* _b2044 = T812::_m16310(buff);
_m9130->setRequestId(_b2044);
delete _b2044;
continue;
}
if (_g2042 == 3) {
const char* _u2045 = T812::_m16310(buff);
_m9130->setIpAddress(_u2045);
delete _u2045;
continue;
}
if (_g2042 == 4) {
_m9130->setTcpPort(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _m9130;
}

Serializable* T818::_m16158(T811* buff) {
PlayerMessage* _i9138 = new PlayerMessage();
short _b2047 = T812::_m16309(buff);
for (unsigned int _e2048 = 0; _e2048 < (unsigned int)_b2047; _e2048++) {
short _p2049 = T812::_m16309(buff);
if (_p2049 == 0) {
const char* _e2050 = T812::_m16310(buff);
_i9138->setMessageId(_e2050);
delete _e2050;
continue;
}
if (_p2049 == 1) {
const char* _k2051 = T812::_m16310(buff);
_i9138->setStoreId(_k2051);
delete _k2051;
continue;
}
if (_p2049 == 6) {
const char* _n2052 = T812::_m16310(buff);
_i9138->setRequestId(_n2052);
delete _n2052;
continue;
}
if (_p2049 == 9) {
const char* _i2053 = T812::_m16310(buff);
_i9138->setPlayerId(_i2053);
delete _i2053;
continue;
}
if (_p2049 == 10) {
_i9138->setMessage((Message*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _i9138;
}

Serializable* T818::_m16159(T811* _f8169) {
NRawMessage* _h9147 = new NRawMessage();
short _n8171 = T812::_m16309(_f8169);
for (unsigned int _c2056 = 0; _c2056 < (unsigned int)_n8171; _c2056++) {
short _j2057 = T812::_m16309(_f8169);
if (_j2057 == 0) {
const char* _w2058 = T812::_m16310(_f8169);
_h9147->setMessageId(_w2058);
delete _w2058;
continue;
}
if (_j2057 == 1) {
const char* _d2059 = T812::_m16310(_f8169);
_h9147->setSenderId(_d2059);
delete _d2059;
continue;
}
if (_j2057 == 2) {
const char* _p2060 = T812::_m16310(_f8169);
_h9147->setStoreId(_p2060);
delete _p2060;
continue;
}
if (_j2057 == 7) {
const char* _p2061 = T812::_m16310(_f8169);
_h9147->setRequestId(_p2061);
delete _p2061;
continue;
}
if (_j2057 == 10) {
const char* _o9155 = T812::_m16310(_f8169);
_h9147->setGameId(_o9155);
delete _o9155;
continue;
}
if (_j2057 == 11) {
const char* _a9156 = T812::_m16310(_f8169);
_h9147->setContent(_a9156);
delete _a9156;
continue;
}
T812::_m16311(_f8169);
}
return _h9147;
}

Serializable* T818::_m16160(T811* buff) {
SessionExpired* _w9158 = new SessionExpired();
short _k2065 = T812::_m16309(buff);
for (unsigned int _b2066 = 0; _b2066 < (unsigned int)_k2065; _b2066++) {
short _f2067 = T812::_m16309(buff);
if (_f2067 == 0) {
const char* _k2068 = T812::_m16310(buff);
_w9158->setMessageId(_k2068);
delete _k2068;
continue;
}
if (_f2067 == 1) {
const char* _m2069 = T812::_m16310(buff);
_w9158->setRequestId(_m2069);
delete _m2069;
continue;
}
if (_f2067 == 3) {
const char* _z2070 = T812::_m16310(buff);
_w9158->setSessionId(_z2070);
delete _z2070;
continue;
}
T812::_m16311(buff);
}
return _w9158;
}

Serializable* T818::_m16161(T811* buff) {
GameMessageError* _v9166 = new GameMessageError();
short _x2072 = T812::_m16309(buff);
for (unsigned int _n2073 = 0; _n2073 < (unsigned int)_x2072; _n2073++) {
short _k2074 = T812::_m16309(buff);
if (_k2074 == 0) {
const char* _v2075 = T812::_m16310(buff);
_v9166->setMessageId(_v2075);
delete _v2075;
continue;
}
if (_k2074 == 1) {
const char* _f2076 = T812::_m16310(buff);
_v9166->setRequestId(_f2076);
delete _f2076;
continue;
}
if (_k2074 == 3) {
const char* _o2077 = T812::_m16310(buff);
_v9166->setReason(_o2077);
delete _o2077;
continue;
}
T812::_m16311(buff);
}
return _v9166;
}

Serializable* T818::_m16162(T811* buff) {
AdDisplayedNotification* _i9174 = new AdDisplayedNotification();
short _o2079 = T812::_m16309(buff);
for (unsigned int _t2080 = 0; _t2080 < (unsigned int)_o2079; _t2080++) {
short _l2081 = T812::_m16309(buff);
if (_l2081 == 0) {
const char* _h2082 = T812::_m16310(buff);
_i9174->setMessageId(_h2082);
delete _h2082;
continue;
}
if (_l2081 == 1) {
const char* _u2083 = T812::_m16310(buff);
_i9174->setRequestId(_u2083);
delete _u2083;
continue;
}
T812::_m16311(buff);
}
return _i9174;
}

Serializable* T818::_m16163(T811* _u8175) {
NPlayerProfile* _u9181 = new NPlayerProfile();
short _q8177 = T812::_m16309(_u8175);
for (unsigned int _l2086 = 0; _l2086 < (unsigned int)_q8177; _l2086++) {
short _w2087 = T812::_m16309(_u8175);
if (_w2087 == 0) {
const char* _r2088 = T812::_m16310(_u8175);
_u9181->setStoreId(_r2088);
delete _r2088;
continue;
}
if (_w2087 == 2) {
const char* _f2089 = T812::_m16310(_u8175);
_u9181->setAvatar(_f2089);
delete _f2089;
continue;
}
if (_w2087 == 3) {
const char* _w2090 = T812::_m16310(_u8175);
_u9181->setPlayerId(_w2090);
delete _w2090;
continue;
}
if (_w2087 == 5) {
const char* _u2091 = T812::_m16310(_u8175);
_u9181->setCountry(_u2091);
delete _u2091;
continue;
}
if (_w2087 == 9) {
_u9181->setNXP(T812::_m16308(_u8175));
continue;
}
if (_w2087 == 10) {
_u9181->setNEnergy(T812::_m16308(_u8175));
continue;
}
if (_w2087 == 13) {
_u9181->setNLevel((NuggetaLevel*)T812::readObject(this, _u8175));
continue;
}
T812::_m16311(_u8175);
}
return _u9181;
}

Serializable* T818::_m16164(T811* buff) {
FriendDemandNotification* _o9190 = new FriendDemandNotification();
short _d2093 = T812::_m16309(buff);
for (unsigned int _p2094 = 0; _p2094 < (unsigned int)_d2093; _p2094++) {
short _c2095 = T812::_m16309(buff);
if (_c2095 == 0) {
const char* _s2096 = T812::_m16310(buff);
_o9190->setMessageId(_s2096);
delete _s2096;
continue;
}
if (_c2095 == 1) {
const char* _c2097 = T812::_m16310(buff);
_o9190->setRequestId(_c2097);
delete _c2097;
continue;
}
if (_c2095 == 3) {
_o9190->setFriendDemand((NFriendDemand*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _o9190;
}

Serializable* T818::_m16165(T811* _f8181) {
GameChatNotification* _k9197 = new GameChatNotification();
short _o8183 = T812::_m16309(_f8181);
for (unsigned int _s2100 = 0; _s2100 < (unsigned int)_o8183; _s2100++) {
short _g2101 = T812::_m16309(_f8181);
if (_g2101 == 0) {
const char* _u2102 = T812::_m16310(_f8181);
_k9197->setMessageId(_u2102);
delete _u2102;
continue;
}
if (_g2101 == 1) {
const char* _e2103 = T812::_m16310(_f8181);
_k9197->setRequestId(_e2103);
delete _e2103;
continue;
}
if (_g2101 == 3) {
_k9197->setPlayer((NPlayer*)T812::readObject(this, _f8181));
continue;
}
if (_g2101 == 4) {
const char* _j2104 = T812::_m16310(_f8181);
_k9197->setMessage(_j2104);
delete _j2104;
continue;
}
T812::_m16311(_f8181);
}
return _k9197;
}

Serializable* T818::_m16166(T811* buff) {
PublicServer* _n9205 = new PublicServer();
short _y2106 = T812::_m16309(buff);
for (unsigned int _h2107 = 0; _h2107 < (unsigned int)_y2106; _h2107++) {
short _m2108 = T812::_m16309(buff);
if (_m2108 == 0) {
const char* _y2109 = T812::_m16310(buff);
_n9205->setStoreId(_y2109);
delete _y2109;
continue;
}
if (_m2108 == 3) {
const char* _j2110 = T812::_m16310(buff);
_n9205->setId(_j2110);
delete _j2110;
continue;
}
if (_m2108 == 4) {
const char* _l2111 = T812::_m16310(buff);
_n9205->setLocation(_l2111);
delete _l2111;
continue;
}
if (_m2108 == 5) {
_n9205->setPing(T812::_m16317(buff));
continue;
}
T812::_m16311(buff);
}
return _n9205;
}

Serializable* T818::_m16167(T811* _i8187) {
SwitchToServerInformation* _o9213 = new SwitchToServerInformation();
short _p8189 = T812::_m16309(_i8187);
for (unsigned int _q2114 = 0; _q2114 < (unsigned int)_p8189; _q2114++) {
short _g2115 = T812::_m16309(_i8187);
if (_g2115 == 0) {
const char* _r2116 = T812::_m16310(_i8187);
_o9213->setMessageId(_r2116);
delete _r2116;
continue;
}
if (_g2115 == 1) {
const char* _t2117 = T812::_m16310(_i8187);
_o9213->setRequestId(_t2117);
delete _t2117;
continue;
}
if (_g2115 == 3) {
const char* _j2118 = T812::_m16310(_i8187);
_o9213->setAddress(_j2118);
delete _j2118;
continue;
}
T812::_m16311(_i8187);
}
return _o9213;
}

Serializable* T818::_m16168(T811* buff) {
MyTurnNotification* _b9221 = new MyTurnNotification();
short _s2120 = T812::_m16309(buff);
for (unsigned int _e2121 = 0; _e2121 < (unsigned int)_s2120; _e2121++) {
short _f2122 = T812::_m16309(buff);
if (_f2122 == 0) {
const char* _g2123 = T812::_m16310(buff);
_b9221->setMessageId(_g2123);
delete _g2123;
continue;
}
if (_f2122 == 1) {
const char* _k2124 = T812::_m16310(buff);
_b9221->setRequestId(_k2124);
delete _k2124;
continue;
}
if (_f2122 == 3) {
const char* _t2125 = T812::_m16310(buff);
_b9221->setGameId(_t2125);
delete _t2125;
continue;
}
T812::_m16311(buff);
}
return _b9221;
}

Serializable* T818::_m16169(T811* buff) {
PlayerTurnNotification* _p9229 = new PlayerTurnNotification();
short _w2127 = T812::_m16309(buff);
for (unsigned int _k2128 = 0; _k2128 < (unsigned int)_w2127; _k2128++) {
short _f2129 = T812::_m16309(buff);
if (_f2129 == 0) {
const char* _y2130 = T812::_m16310(buff);
_p9229->setMessageId(_y2130);
delete _y2130;
continue;
}
if (_f2129 == 1) {
const char* _r2131 = T812::_m16310(buff);
_p9229->setRequestId(_r2131);
delete _r2131;
continue;
}
if (_f2129 == 3) {
_p9229->setCurrentPlayer((NPlayer*)T812::readObject(this, buff));
continue;
}
if (_f2129 == 4) {
const char* _m2132 = T812::_m16310(buff);
_p9229->setGameId(_m2132);
delete _m2132;
continue;
}
T812::_m16311(buff);
}
return _p9229;
}

Serializable* T818::_m16170(T811* buff) {
NStore* _g9237 = new NStore();
short _q2134 = T812::_m16309(buff);
for (unsigned int _i2135 = 0; _i2135 < (unsigned int)_q2134; _i2135++) {
short _i2136 = T812::_m16309(buff);
if (_i2136 == 1) {
const char* _n2137 = T812::_m16310(buff);
_g9237->setStoreId(_n2137);
delete _n2137;
continue;
}
if (_i2136 == 2) {
std::vector<NItem*>* _l9242 = 0;
unsigned char _h9243 = buff->_m16314();
if (_h9243 != T809::_g15500) {
buff->_m16315();
int _c9244 = buff->_m16316();
_l9242 = new std::vector<NItem*>();
for (unsigned int _r2141 = 0; _r2141 < (unsigned int)_c9244; _r2141++) {
_l9242->push_back((NItem*)T812::readObject(this, buff));
}
}
_g9237->setItems(_l9242);
continue;
}
T812::_m16311(buff);
}
return _g9237;
}

Serializable* T818::_m16171(T811* _e8193) {
NAchievementBoard* _m9247 = new NAchievementBoard();
short _c8195 = T812::_m16309(_e8193);
for (unsigned int _e2144 = 0; _e2144 < (unsigned int)_c8195; _e2144++) {
short _l2145 = T812::_m16309(_e8193);
if (_l2145 == 1) {
const char* _i2146 = T812::_m16310(_e8193);
_m9247->setStoreId(_i2146);
delete _i2146;
continue;
}
if (_l2145 == 2) {
std::vector<NAchievement*>* _m9252 = 0;
unsigned char _v9253 = _e8193->_m16314();
if (_v9253 != T809::_g15500) {
_e8193->_m16315();
int _g9254 = _e8193->_m16316();
_m9252 = new std::vector<NAchievement*>();
for (unsigned int _l2150 = 0; _l2150 < (unsigned int)_g9254; _l2150++) {
_m9252->push_back((NAchievement*)T812::readObject(this, _e8193));
}
}
_m9247->setAchievements(_m9252);
continue;
}
T812::_m16311(_e8193);
}
return _m9247;
}

Serializable* T818::_m16172(T811* buff) {
NLeaderboard* _x9257 = new NLeaderboard();
short _c2152 = T812::_m16309(buff);
for (unsigned int _e2153 = 0; _e2153 < (unsigned int)_c2152; _e2153++) {
short _x2154 = T812::_m16309(buff);
if (_x2154 == 2) {
const char* _s2155 = T812::_m16310(buff);
_x9257->setId(_s2155);
delete _s2155;
continue;
}
if (_x2154 == 3) {
const char* _h2156 = T812::_m16310(buff);
_x9257->setName(_h2156);
delete _h2156;
continue;
}
if (_x2154 == 4) {
std::vector<NLeaderboardEntry*>* _s9263 = 0;
unsigned char _c9264 = buff->_m16314();
if (_c9264 != T809::_g15500) {
buff->_m16315();
int _s9265 = buff->_m16316();
_s9263 = new std::vector<NLeaderboardEntry*>();
for (unsigned int _h2160 = 0; _h2160 < (unsigned int)_s9265; _h2160++) {
_s9263->push_back((NLeaderboardEntry*)T812::readObject(this, buff));
}
}
_x9257->setLeaderboardEntries(_s9263);
continue;
}
T812::_m16311(buff);
}
return _x9257;
}

Serializable* T818::_m16173(T811* _i8199) {
TestPrimitiveList* _h9268 = new TestPrimitiveList();
short _u8201 = T812::_m16309(_i8199);
for (unsigned int _q2163 = 0; _q2163 < (unsigned int)_u8201; _q2163++) {
short _s2164 = T812::_m16309(_i8199);
if (_s2164 == 0) {
const char* _b2165 = T812::_m16310(_i8199);
_h9268->setMessageId(_b2165);
delete _b2165;
continue;
}
if (_s2164 == 1) {
const char* _j2166 = T812::_m16310(_i8199);
_h9268->setRequestId(_j2166);
delete _j2166;
continue;
}
if (_s2164 == 3) {
std::vector<const char*>* _c9274 = T812::_m16318(this, _i8199);
_h9268->setStringList(_c9274);
continue;
}
if (_s2164 == 4) {
std::vector<int>* _p9275 = T812::_m16319(this, _i8199);
_h9268->setIntegerList(_p9275);
continue;
}
if (_s2164 == 5) {
std::vector<short>* _d9276 = T812::_m16320(this, _i8199);
_h9268->setShortList(_d9276);
continue;
}
if (_s2164 == 6) {
std::vector<long long>* _v9277 = T812::_m16321(this, _i8199);
_h9268->setLongList(_v9277);
continue;
}
if (_s2164 == 7) {
std::vector<float>* _n9278 = T812::_m16322(this, _i8199);
_h9268->setFloatList(_n9278);
continue;
}
if (_s2164 == 8) {
std::vector<double>* _a9279 = T812::_m16323(this, _i8199);
_h9268->setDoubleList(_a9279);
continue;
}
if (_s2164 == 9) {
std::vector<bool>* _k9280 = T812::_m16324(this, _i8199);
_h9268->setBooleanList(_k9280);
continue;
}
if (_s2164 == 14) {
_h9268->setPlayerMatrix2(T812::_m16325(this, _i8199));
continue;
}
T812::_m16311(_i8199);
}
return _h9268;
}

Serializable* T818::_m16174(T811* buff) {
OpenUrl* _r9282 = new OpenUrl();
short _b2175 = T812::_m16309(buff);
for (unsigned int _l2176 = 0; _l2176 < (unsigned int)_b2175; _l2176++) {
short _n2177 = T812::_m16309(buff);
if (_n2177 == 0) {
const char* _j2178 = T812::_m16310(buff);
_r9282->setMessageId(_j2178);
delete _j2178;
continue;
}
if (_n2177 == 1) {
const char* _t2179 = T812::_m16310(buff);
_r9282->setRequestId(_t2179);
delete _t2179;
continue;
}
if (_n2177 == 3) {
const char* _i2180 = T812::_m16310(buff);
_r9282->setUrl(_i2180);
delete _i2180;
continue;
}
T812::_m16311(buff);
}
return _r9282;
}

Serializable* T818::_m16175(T811* buff) {
TurnBasedContext* _p9290 = new TurnBasedContext();
short _u2182 = T812::_m16309(buff);
for (unsigned int _h2183 = 0; _h2183 < (unsigned int)_u2182; _h2183++) {
short _y2184 = T812::_m16309(buff);
if (_y2184 == 0) {
const char* _d2185 = T812::_m16310(buff);
_p9290->setMessageId(_d2185);
delete _d2185;
continue;
}
if (_y2184 == 1) {
const char* _x2186 = T812::_m16310(buff);
_p9290->setRequestId(_x2186);
delete _x2186;
continue;
}
if (_y2184 == 3) {
_p9290->setCurrentPlayer((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _p9290;
}

Serializable* T818::_m16176(T811* _m8205) {
DisconnectedContext* _a9297 = new DisconnectedContext();
short _w8207 = T812::_m16309(_m8205);
for (unsigned int _n2189 = 0; _n2189 < (unsigned int)_w8207; _n2189++) {
short _h2190 = T812::_m16309(_m8205);
if (_h2190 == 0) {
const char* _j2191 = T812::_m16310(_m8205);
_a9297->setMessageId(_j2191);
delete _j2191;
continue;
}
if (_h2190 == 1) {
const char* _j2192 = T812::_m16310(_m8205);
_a9297->setRequestId(_j2192);
delete _j2192;
continue;
}
if (_h2190 == 3) {
std::vector<NPlayer*>* _r9303 = 0;
unsigned char _h9304 = _m8205->_m16314();
if (_h9304 != T809::_g15500) {
_m8205->_m16315();
int _a9305 = _m8205->_m16316();
_r9303 = new std::vector<NPlayer*>();
for (unsigned int _k2196 = 0; _k2196 < (unsigned int)_a9305; _k2196++) {
_r9303->push_back((NPlayer*)T812::readObject(this, _m8205));
}
}
_a9297->setParticipants(_r9303);
continue;
}
T812::_m16311(_m8205);
}
return _a9297;
}

Serializable* T818::_m16177(T811* buff) {
OpenUrlData* _m9308 = new OpenUrlData();
short _b2198 = T812::_m16309(buff);
for (unsigned int _o2199 = 0; _o2199 < (unsigned int)_b2198; _o2199++) {
short _j2200 = T812::_m16309(buff);
if (_j2200 == 0) {
const char* _u2201 = T812::_m16310(buff);
_m9308->setMessageId(_u2201);
delete _u2201;
continue;
}
if (_j2200 == 1) {
const char* _p2202 = T812::_m16310(buff);
_m9308->setRequestId(_p2202);
delete _p2202;
continue;
}
if (_j2200 == 3) {
const char* _v2203 = T812::_m16310(buff);
_m9308->setSessionId(_v2203);
delete _v2203;
continue;
}
if (_j2200 == 4) {
const char* _y2204 = T812::_m16310(buff);
_m9308->setCallbackId(_y2204);
delete _y2204;
continue;
}
if (_j2200 == 5) {
const char* _l2205 = T812::_m16310(buff);
_m9308->setCallbackUrl(_l2205);
delete _l2205;
continue;
}
if (_j2200 == 6) {
_m9308->setThirdPartySource((ThirdPartySource*)T812::readObject(this, buff));
continue;
}
if (_j2200 == 7) {
const char* _b2206 = T812::_m16310(buff);
_m9308->setThirdPartyId(_b2206);
delete _b2206;
continue;
}
T812::_m16311(buff);
}
return _m9308;
}

Serializable* T818::_m16178(T811* _f8211) {
InviteThirdPartyFriendNotification* _f9319 = new InviteThirdPartyFriendNotification();
short _x8213 = T812::_m16309(_f8211);
for (unsigned int _m2209 = 0; _m2209 < (unsigned int)_x8213; _m2209++) {
short _z2210 = T812::_m16309(_f8211);
if (_z2210 == 0) {
const char* _q2211 = T812::_m16310(_f8211);
_f9319->setMessageId(_q2211);
delete _q2211;
continue;
}
if (_z2210 == 1) {
const char* _o2212 = T812::_m16310(_f8211);
_f9319->setRequestId(_o2212);
delete _o2212;
continue;
}
if (_z2210 == 3) {
const char* _r2213 = T812::_m16310(_f8211);
_f9319->setThirdPartyId(_r2213);
delete _r2213;
continue;
}
if (_z2210 == 4) {
_f9319->setExecutionStatus((ExecutionStatus*)T812::readObject(this, _f8211));
continue;
}
T812::_m16311(_f8211);
}
return _f9319;
}

Serializable* T818::_m16179(T811* buff) {
HeartBeatRequest* _o9327 = new HeartBeatRequest();
short _o2215 = T812::_m16309(buff);
for (unsigned int _e2216 = 0; _e2216 < (unsigned int)_o2215; _e2216++) {
short _p2217 = T812::_m16309(buff);
if (_p2217 == 0) {
const char* _m2218 = T812::_m16310(buff);
_o9327->setMessageId(_m2218);
delete _m2218;
continue;
}
if (_p2217 == 1) {
const char* _l2219 = T812::_m16310(buff);
_o9327->setRequestId(_l2219);
delete _l2219;
continue;
}
if (_p2217 == 3) {
_o9327->setCounter(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _o9327;
}

Serializable* T818::_m16180(T811* buff) {
HeartBeatResponse* _u9334 = new HeartBeatResponse();
short _p2221 = T812::_m16309(buff);
for (unsigned int _k2222 = 0; _k2222 < (unsigned int)_p2221; _k2222++) {
short _v2223 = T812::_m16309(buff);
if (_v2223 == 0) {
const char* _l2224 = T812::_m16310(buff);
_u9334->setMessageId(_l2224);
delete _l2224;
continue;
}
if (_v2223 == 1) {
const char* _z2225 = T812::_m16310(buff);
_u9334->setRequestId(_z2225);
delete _z2225;
continue;
}
if (_v2223 == 3) {
_u9334->setCounter(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _u9334;
}

Serializable* T818::_m16181(T811* _q8217) {
NLeaderboardEntry* _p9341 = new NLeaderboardEntry();
short _p8219 = T812::_m16309(_q8217);
for (unsigned int _c2228 = 0; _c2228 < (unsigned int)_p8219; _c2228++) {
short _d2229 = T812::_m16309(_q8217);
if (_d2229 == 1) {
const char* _i2230 = T812::_m16310(_q8217);
_p9341->setStoreId(_i2230);
delete _i2230;
continue;
}
if (_d2229 == 2) {
const char* _g2231 = T812::_m16310(_q8217);
_p9341->setData(_g2231);
delete _g2231;
continue;
}
if (_d2229 == 3) {
const char* _y2232 = T812::_m16310(_q8217);
_p9341->setId(_y2232);
delete _y2232;
continue;
}
if (_d2229 == 4) {
_p9341->setTimestamp(T812::_m16313(_q8217));
continue;
}
if (_d2229 == 6) {
_p9341->setScore((NScore*)T812::readObject(this, _q8217));
continue;
}
if (_d2229 == 7) {
const char* _x2233 = T812::_m16310(_q8217);
_p9341->setPlayerId(_x2233);
delete _x2233;
continue;
}
if (_d2229 == 8) {
const char* _e2234 = T812::_m16310(_q8217);
_p9341->setPlayerName(_e2234);
delete _e2234;
continue;
}
if (_d2229 == 9) {
const char* _i9350 = T812::_m16310(_q8217);
_p9341->setPlayerAvatarPath(_i9350);
delete _i9350;
continue;
}
T812::_m16311(_q8217);
}
return _p9341;
}

Serializable* T818::_m16182(T811* _y8223) {
StartDetails* _l9352 = new StartDetails();
short _z8225 = T812::_m16309(_y8223);
for (unsigned int _j2238 = 0; _j2238 < (unsigned int)_z8225; _j2238++) {
short _x2239 = T812::_m16309(_y8223);
if (_x2239 == 1) {
const char* _n2240 = T812::_m16310(_y8223);
_l9352->setStoreId(_n2240);
delete _n2240;
continue;
}
if (_x2239 == 2) {
const char* _h2241 = T812::_m16310(_y8223);
_l9352->setData(_h2241);
delete _h2241;
continue;
}
if (_x2239 == 3) {
_l9352->setUseDefaultImpl(T812::_m16312(_y8223));
continue;
}
if (_x2239 == 4) {
_l9352->setCurrentVersion(T812::_m16308(_y8223));
continue;
}
if (_x2239 == 5) {
_l9352->setNextVersion(T812::_m16308(_y8223));
continue;
}
if (_x2239 == 6) {
const char* _h2242 = T812::_m16310(_y8223);
_l9352->setTitle(_h2242);
delete _h2242;
continue;
}
if (_x2239 == 7) {
const char* _w2243 = T812::_m16310(_y8223);
_l9352->setText(_w2243);
delete _w2243;
continue;
}
if (_x2239 == 8) {
const char* _m9360 = T812::_m16310(_y8223);
_l9352->setUrl(_m9360);
delete _m9360;
continue;
}
T812::_m16311(_y8223);
}
return _l9352;
}

Serializable* T818::_m16183(T811* buff) {
StartRequest* _k9362 = new StartRequest();
short _b2246 = T812::_m16309(buff);
for (unsigned int _e2247 = 0; _e2247 < (unsigned int)_b2246; _e2247++) {
short _t2248 = T812::_m16309(buff);
if (_t2248 == 0) {
const char* _d2249 = T812::_m16310(buff);
_k9362->setMessageId(_d2249);
delete _d2249;
continue;
}
if (_t2248 == 1) {
const char* _c2250 = T812::_m16310(buff);
_k9362->setRequestId(_c2250);
delete _c2250;
continue;
}
T812::_m16311(buff);
}
return _k9362;
}

Serializable* T818::_m16184(T811* _t8229) {
StartResponse* _n9369 = new StartResponse();
short _r2252 = T812::_m16309(_t8229);
for (unsigned int _m2253 = 0; _m2253 < (unsigned int)_r2252; _m2253++) {
short _o2254 = T812::_m16309(_t8229);
if (_o2254 == 0) {
const char* _z2255 = T812::_m16310(_t8229);
_n9369->setMessageId(_z2255);
delete _z2255;
continue;
}
if (_o2254 == 1) {
const char* _a2256 = T812::_m16310(_t8229);
_n9369->setRequestId(_a2256);
delete _a2256;
continue;
}
if (_o2254 == 3) {
_n9369->setStartStatus((StartStatus*)T812::readObject(this, _t8229));
continue;
}
if (_o2254 == 4) {
_n9369->setStartDetails((StartDetails*)T812::readObject(this, _t8229));
continue;
}
if (_o2254 == 5) {
_n9369->setPlayerSessionType((PlayerSessionType*)T812::readObject(this, _t8229));
continue;
}
if (_o2254 == 6) {
_n9369->setPlayer((NPlayer*)T812::readObject(this, _t8229));
continue;
}
T812::_m16311(_t8229);
}
return _n9369;
}

Serializable* T818::_m16185(T811* buff) {
NuggetaLevel* _m9376 = new NuggetaLevel();
short _d8231 = T812::_m16309(buff);
for (unsigned int _x2259 = 0; _x2259 < (unsigned int)_d8231; _x2259++) {
short _c2260 = T812::_m16309(buff);
if (_c2260 == 0) {
const char* _k2261 = T812::_m16310(buff);
_m9376->setStoreId(_k2261);
delete _k2261;
continue;
}
if (_c2260 == 1) {
const char* _o2262 = T812::_m16310(buff);
_m9376->setData(_o2262);
delete _o2262;
continue;
}
if (_c2260 == 2) {
_m9376->setIndex(T812::_m16308(buff));
continue;
}
if (_c2260 == 3) {
_m9376->setXP(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _m9376;
}

Serializable* T818::_m16186(T811* _n8235) {
StorableSample* _t9383 = new StorableSample();
short _w8237 = T812::_m16309(_n8235);
for (unsigned int _q2265 = 0; _q2265 < (unsigned int)_w8237; _q2265++) {
short _y2266 = T812::_m16309(_n8235);
if (_y2266 == 0) {
const char* _y2267 = T812::_m16310(_n8235);
_t9383->setMessageId(_y2267);
delete _y2267;
continue;
}
if (_y2266 == 1) {
const char* _e2268 = T812::_m16310(_n8235);
_t9383->setRequestId(_e2268);
delete _e2268;
continue;
}
if (_y2266 == 3) {
const char* _q2269 = T812::_m16310(_n8235);
_t9383->setStoreId(_q2269);
delete _q2269;
continue;
}
if (_y2266 == 4) {
const char* _u2270 = T812::_m16310(_n8235);
_t9383->setData(_u2270);
delete _u2270;
continue;
}
if (_y2266 == 5) {
const char* _r2271 = T812::_m16310(_n8235);
_t9383->setGameId(_r2271);
delete _r2271;
continue;
}
if (_y2266 == 6) {
const char* _p2272 = T812::_m16310(_n8235);
_t9383->setSenderId(_p2272);
delete _p2272;
continue;
}
if (_y2266 == 7) {
const char* _f2273 = T812::_m16310(_n8235);
_t9383->setIdProperty(_f2273);
delete _f2273;
continue;
}
if (_y2266 == 8) {
_t9383->setNumberProperty(T812::_m16308(_n8235));
continue;
}
if (_y2266 == 9) {
_t9383->setBooleanProperty(T812::_m16312(_n8235));
continue;
}
T812::_m16311(_n8235);
}
return (Message*)  _t9383;
}

Serializable* T818::_m16187(T811* buff) {
NInvitation* _u9395 = new NInvitation();
short _y2275 = T812::_m16309(buff);
for (unsigned int _p2276 = 0; _p2276 < (unsigned int)_y2275; _p2276++) {
short _w2277 = T812::_m16309(buff);
if (_w2277 == 0) {
const char* _o2278 = T812::_m16310(buff);
_u9395->setStoreId(_o2278);
delete _o2278;
continue;
}
if (_w2277 == 2) {
const char* _i9400 = T812::_m16310(buff);
_u9395->setId(_i9400);
delete _i9400;
continue;
}
if (_w2277 == 3) {
_u9395->setInviter((NPlayer*)T812::readObject(this, buff));
continue;
}
if (_w2277 == 4) {
_u9395->setInvitee((NPlayer*)T812::readObject(this, buff));
continue;
}
if (_w2277 == 5) {
_u9395->setContent((Message*)T812::readObject(this, buff));
continue;
}
if (_w2277 == 8) {
_u9395->setStatus((NInvitationStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _u9395;
}

Serializable* T818::_m16188(T811* buff) {
NGameInvitation* _n9402 = new NGameInvitation();
short _j2281 = T812::_m16309(buff);
for (unsigned int _n2282 = 0; _n2282 < (unsigned int)_j2281; _n2282++) {
short _m2283 = T812::_m16309(buff);
if (_m2283 == 0) {
const char* _o2284 = T812::_m16310(buff);
_n9402->setMessageId(_o2284);
delete _o2284;
continue;
}
if (_m2283 == 1) {
const char* _l2285 = T812::_m16310(buff);
_n9402->setRequestId(_l2285);
delete _l2285;
continue;
}
if (_m2283 == 3) {
const char* _f2286 = T812::_m16310(buff);
_n9402->setGameId(_f2286);
delete _f2286;
continue;
}
T812::_m16311(buff);
}
return _n9402;
}

Serializable* T818::_m16189(T811* _f8241) {
InvitationRequestNotification* _s9410 = new InvitationRequestNotification();
short _h8243 = T812::_m16309(_f8241);
for (unsigned int _t2289 = 0; _t2289 < (unsigned int)_h8243; _t2289++) {
short _s2290 = T812::_m16309(_f8241);
if (_s2290 == 0) {
const char* _n2291 = T812::_m16310(_f8241);
_s9410->setMessageId(_n2291);
delete _n2291;
continue;
}
if (_s2290 == 1) {
const char* _v2292 = T812::_m16310(_f8241);
_s9410->setRequestId(_v2292);
delete _v2292;
continue;
}
if (_s2290 == 3) {
_s9410->setInvitation((NInvitation*)T812::readObject(this, _f8241));
continue;
}
T812::_m16311(_f8241);
}
return _s9410;
}

Serializable* T818::_m16190(T811* buff) {
InvitationAcceptedNotification* _t9417 = new InvitationAcceptedNotification();
short _n2294 = T812::_m16309(buff);
for (unsigned int _r2295 = 0; _r2295 < (unsigned int)_n2294; _r2295++) {
short _e2296 = T812::_m16309(buff);
if (_e2296 == 0) {
const char* _z2297 = T812::_m16310(buff);
_t9417->setMessageId(_z2297);
delete _z2297;
continue;
}
if (_e2296 == 1) {
const char* _r2298 = T812::_m16310(buff);
_t9417->setRequestId(_r2298);
delete _r2298;
continue;
}
if (_e2296 == 3) {
_t9417->setInvitation((NInvitation*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _t9417;
}

Serializable* T818::_m16191(T811* buff) {
InvitationRefusedNotification* _h9424 = new InvitationRefusedNotification();
short _k2300 = T812::_m16309(buff);
for (unsigned int _s2301 = 0; _s2301 < (unsigned int)_k2300; _s2301++) {
short _t2302 = T812::_m16309(buff);
if (_t2302 == 0) {
const char* _t2303 = T812::_m16310(buff);
_h9424->setMessageId(_t2303);
delete _t2303;
continue;
}
if (_t2302 == 1) {
const char* _o2304 = T812::_m16310(buff);
_h9424->setRequestId(_o2304);
delete _o2304;
continue;
}
if (_t2302 == 3) {
_h9424->setInvitation((NInvitation*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _h9424;
}

Serializable* T818::_m16192(T811* _n8247) {
InvitationExpiredNotification* _w9431 = new InvitationExpiredNotification();
short _j8249 = T812::_m16309(_n8247);
for (unsigned int _o2307 = 0; _o2307 < (unsigned int)_j8249; _o2307++) {
short _q2308 = T812::_m16309(_n8247);
if (_q2308 == 0) {
const char* _k2309 = T812::_m16310(_n8247);
_w9431->setMessageId(_k2309);
delete _k2309;
continue;
}
if (_q2308 == 1) {
const char* _u2310 = T812::_m16310(_n8247);
_w9431->setRequestId(_u2310);
delete _u2310;
continue;
}
T812::_m16311(_n8247);
}
return _w9431;
}

Serializable* T818::_m16193(T811* buff) {
AskForFriendResponse* _c9438 = new AskForFriendResponse();
short _g2312 = T812::_m16309(buff);
for (unsigned int _t2313 = 0; _t2313 < (unsigned int)_g2312; _t2313++) {
short _i2314 = T812::_m16309(buff);
if (_i2314 == 0) {
const char* _e2315 = T812::_m16310(buff);
_c9438->setMessageId(_e2315);
delete _e2315;
continue;
}
if (_i2314 == 1) {
const char* _m2316 = T812::_m16310(buff);
_c9438->setRequestId(_m2316);
delete _m2316;
continue;
}
if (_i2314 == 3) {
_c9438->setAskForFriendStatus((AskForFriendStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _c9438;
}

Serializable* T818::_m16194(T811* buff) {
AskForFriendByIdRequest* _k9445 = new AskForFriendByIdRequest();
short _u2318 = T812::_m16309(buff);
for (unsigned int _u2319 = 0; _u2319 < (unsigned int)_u2318; _u2319++) {
short _l2320 = T812::_m16309(buff);
if (_l2320 == 0) {
const char* _d2321 = T812::_m16310(buff);
_k9445->setMessageId(_d2321);
delete _d2321;
continue;
}
if (_l2320 == 1) {
const char* _m2322 = T812::_m16310(buff);
_k9445->setRequestId(_m2322);
delete _m2322;
continue;
}
if (_l2320 == 3) {
const char* _t2323 = T812::_m16310(buff);
_k9445->setId(_t2323);
delete _t2323;
continue;
}
T812::_m16311(buff);
}
return _k9445;
}

Serializable* T818::_m16195(T811* _h8253) {
AskForFriendByLoginRequest* _v9453 = new AskForFriendByLoginRequest();
short _j2325 = T812::_m16309(_h8253);
for (unsigned int _c2326 = 0; _c2326 < (unsigned int)_j2325; _c2326++) {
short _f2327 = T812::_m16309(_h8253);
if (_f2327 == 0) {
const char* _e2328 = T812::_m16310(_h8253);
_v9453->setMessageId(_e2328);
delete _e2328;
continue;
}
if (_f2327 == 1) {
const char* _j2329 = T812::_m16310(_h8253);
_v9453->setRequestId(_j2329);
delete _j2329;
continue;
}
if (_f2327 == 3) {
const char* _i2330 = T812::_m16310(_h8253);
_v9453->setLogin(_i2330);
delete _i2330;
continue;
}
T812::_m16311(_h8253);
}
return _v9453;
}

Serializable* T818::_m16196(T811* buff) {
SignUpResponse* _g9461 = new SignUpResponse();
short _h8255 = T812::_m16309(buff);
for (unsigned int _a2333 = 0; _a2333 < (unsigned int)_h8255; _a2333++) {
short _m2334 = T812::_m16309(buff);
if (_m2334 == 0) {
const char* _v2335 = T812::_m16310(buff);
_g9461->setMessageId(_v2335);
delete _v2335;
continue;
}
if (_m2334 == 1) {
const char* _f2336 = T812::_m16310(buff);
_g9461->setRequestId(_f2336);
delete _f2336;
continue;
}
if (_m2334 == 3) {
_g9461->setSignUpStatus((SignUpStatus*)T812::readObject(this, buff));
continue;
}
if (_m2334 == 4) {
_g9461->setPlayer((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _g9461;
}

Serializable* T818::_m16197(T811* buff) {
SignUpRequest* _e9468 = new SignUpRequest();
short _d2338 = T812::_m16309(buff);
for (unsigned int _d2339 = 0; _d2339 < (unsigned int)_d2338; _d2339++) {
short _o2340 = T812::_m16309(buff);
if (_o2340 == 0) {
const char* _n2341 = T812::_m16310(buff);
_e9468->setMessageId(_n2341);
delete _n2341;
continue;
}
if (_o2340 == 1) {
const char* _u2342 = T812::_m16310(buff);
_e9468->setRequestId(_u2342);
delete _u2342;
continue;
}
T812::_m16311(buff);
}
return _e9468;
}

Serializable* T818::_m16198(T811* buff) {
LoginResponse* _s9475 = new LoginResponse();
short _j2344 = T812::_m16309(buff);
for (unsigned int _o2345 = 0; _o2345 < (unsigned int)_j2344; _o2345++) {
short _g2346 = T812::_m16309(buff);
if (_g2346 == 0) {
const char* _v2347 = T812::_m16310(buff);
_s9475->setMessageId(_v2347);
delete _v2347;
continue;
}
if (_g2346 == 1) {
const char* _e2348 = T812::_m16310(buff);
_s9475->setRequestId(_e2348);
delete _e2348;
continue;
}
if (_g2346 == 3) {
_s9475->setLoginStatus((LoginStatus*)T812::readObject(this, buff));
continue;
}
if (_g2346 == 4) {
_s9475->setPlayer((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _s9475;
}

Serializable* T818::_m16199(T811* _j8259) {
LoginRequest* _l9482 = new LoginRequest();
short _c8261 = T812::_m16309(_j8259);
for (unsigned int _g2351 = 0; _g2351 < (unsigned int)_c8261; _g2351++) {
short _w2352 = T812::_m16309(_j8259);
if (_w2352 == 0) {
const char* _n2353 = T812::_m16310(_j8259);
_l9482->setMessageId(_n2353);
delete _n2353;
continue;
}
if (_w2352 == 1) {
const char* _y2354 = T812::_m16310(_j8259);
_l9482->setRequestId(_y2354);
delete _y2354;
continue;
}
T812::_m16311(_j8259);
}
return _l9482;
}

Serializable* T818::_m16200(T811* buff) {
SavePlayerProfileResponse* _n9489 = new SavePlayerProfileResponse();
short _i2356 = T812::_m16309(buff);
for (unsigned int _q2357 = 0; _q2357 < (unsigned int)_i2356; _q2357++) {
short _l2358 = T812::_m16309(buff);
if (_l2358 == 0) {
const char* _v2359 = T812::_m16310(buff);
_n9489->setMessageId(_v2359);
delete _v2359;
continue;
}
if (_l2358 == 1) {
const char* _n2360 = T812::_m16310(buff);
_n9489->setRequestId(_n2360);
delete _n2360;
continue;
}
if (_l2358 == 3) {
_n9489->setSavePlayerProfileStatus((SavePlayerProfileStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _n9489;
}

Serializable* T818::_m16201(T811* _d8265) {
SavePlayerProfileRequest* _f9496 = new SavePlayerProfileRequest();
short _o8267 = T812::_m16309(_d8265);
for (unsigned int _w2363 = 0; _w2363 < (unsigned int)_o8267; _w2363++) {
short _g2364 = T812::_m16309(_d8265);
if (_g2364 == 0) {
const char* _s2365 = T812::_m16310(_d8265);
_f9496->setMessageId(_s2365);
delete _s2365;
continue;
}
if (_g2364 == 1) {
const char* _e2366 = T812::_m16310(_d8265);
_f9496->setRequestId(_e2366);
delete _e2366;
continue;
}
if (_g2364 == 3) {
_f9496->setProfile((NPlayerProfile*)T812::readObject(this, _d8265));
continue;
}
T812::_m16311(_d8265);
}
return _f9496;
}

Serializable* T818::_m16202(T811* buff) {
GetPlayerProfileResponse* _l9503 = new GetPlayerProfileResponse();
short _p2368 = T812::_m16309(buff);
for (unsigned int _u2369 = 0; _u2369 < (unsigned int)_p2368; _u2369++) {
short _p2370 = T812::_m16309(buff);
if (_p2370 == 0) {
const char* _m2371 = T812::_m16310(buff);
_l9503->setMessageId(_m2371);
delete _m2371;
continue;
}
if (_p2370 == 1) {
const char* _k2372 = T812::_m16310(buff);
_l9503->setRequestId(_k2372);
delete _k2372;
continue;
}
if (_p2370 == 3) {
_l9503->setGetPlayerProfileStatus((GetPlayerProfileStatus*)T812::readObject(this, buff));
continue;
}
if (_p2370 == 4) {
_l9503->setProfile((NPlayerProfile*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _l9503;
}

Serializable* T818::_m16203(T811* buff) {
GetPlayerProfileRequest* _z9510 = new GetPlayerProfileRequest();
short _r2374 = T812::_m16309(buff);
for (unsigned int _k2375 = 0; _k2375 < (unsigned int)_r2374; _k2375++) {
short _o2376 = T812::_m16309(buff);
if (_o2376 == 0) {
const char* _q2377 = T812::_m16310(buff);
_z9510->setMessageId(_q2377);
delete _q2377;
continue;
}
if (_o2376 == 1) {
const char* _h2378 = T812::_m16310(buff);
_z9510->setRequestId(_h2378);
delete _h2378;
continue;
}
T812::_m16311(buff);
}
return _z9510;
}

Serializable* T818::_m16204(T811* buff) {
GetPlayerProfileByPlayerIdRequest* _p9517 = new GetPlayerProfileByPlayerIdRequest();
short _b2380 = T812::_m16309(buff);
for (unsigned int _f2381 = 0; _f2381 < (unsigned int)_b2380; _f2381++) {
short _l2382 = T812::_m16309(buff);
if (_l2382 == 0) {
const char* _h2383 = T812::_m16310(buff);
_p9517->setMessageId(_h2383);
delete _h2383;
continue;
}
if (_l2382 == 1) {
const char* _o2384 = T812::_m16310(buff);
_p9517->setRequestId(_o2384);
delete _o2384;
continue;
}
if (_l2382 == 3) {
const char* _h2385 = T812::_m16310(buff);
_p9517->setPlayerId(_h2385);
delete _h2385;
continue;
}
T812::_m16311(buff);
}
return _p9517;
}

Serializable* T818::_m16205(T811* _w8271) {
LogoutResponse* _p9525 = new LogoutResponse();
short _d8273 = T812::_m16309(_w8271);
for (unsigned int _m2388 = 0; _m2388 < (unsigned int)_d8273; _m2388++) {
short _e2389 = T812::_m16309(_w8271);
if (_e2389 == 0) {
const char* _h2390 = T812::_m16310(_w8271);
_p9525->setMessageId(_h2390);
delete _h2390;
continue;
}
if (_e2389 == 1) {
const char* _g2391 = T812::_m16310(_w8271);
_p9525->setRequestId(_g2391);
delete _g2391;
continue;
}
if (_e2389 == 3) {
_p9525->setLogoutStatus((LogoutStatus*)T812::readObject(this, _w8271));
continue;
}
if (_e2389 == 4) {
_p9525->setPlayer((NPlayer*)T812::readObject(this, _w8271));
continue;
}
T812::_m16311(_w8271);
}
return _p9525;
}

Serializable* T818::_m16206(T811* buff) {
LogoutRequest* _v9532 = new LogoutRequest();
short _k2393 = T812::_m16309(buff);
for (unsigned int _p2394 = 0; _p2394 < (unsigned int)_k2393; _p2394++) {
short _h2395 = T812::_m16309(buff);
if (_h2395 == 0) {
const char* _r2396 = T812::_m16310(buff);
_v9532->setMessageId(_r2396);
delete _r2396;
continue;
}
if (_h2395 == 1) {
const char* _s2397 = T812::_m16310(buff);
_v9532->setRequestId(_s2397);
delete _s2397;
continue;
}
T812::_m16311(buff);
}
return _v9532;
}

Serializable* T818::_m16207(T811* buff) {
GetFriendsResponse* _x9539 = new GetFriendsResponse();
short _r2399 = T812::_m16309(buff);
for (unsigned int _x2400 = 0; _x2400 < (unsigned int)_r2399; _x2400++) {
short _j2401 = T812::_m16309(buff);
if (_j2401 == 0) {
const char* _z2402 = T812::_m16310(buff);
_x9539->setMessageId(_z2402);
delete _z2402;
continue;
}
if (_j2401 == 1) {
const char* _p2403 = T812::_m16310(buff);
_x9539->setRequestId(_p2403);
delete _p2403;
continue;
}
if (_j2401 == 3) {
_x9539->setGetFriendsStatus((GetFriendsStatus*)T812::readObject(this, buff));
continue;
}
if (_j2401 == 4) {
std::vector<NPlayer*>* _i9545 = 0;
unsigned char _u9546 = buff->_m16314();
if (_u9546 != T809::_g15500) {
buff->_m16315();
int _w9547 = buff->_m16316();
_i9545 = new std::vector<NPlayer*>();
for (unsigned int _x2407 = 0; _x2407 < (unsigned int)_w9547; _x2407++) {
_i9545->push_back((NPlayer*)T812::readObject(this, buff));
}
}
_x9539->setFriends(_i9545);
continue;
}
T812::_m16311(buff);
}
return _x9539;
}

Serializable* T818::_m16208(T811* _k8277) {
GetFriendsRequest* _v9550 = new GetFriendsRequest();
short _d8279 = T812::_m16309(_k8277);
for (unsigned int _q2410 = 0; _q2410 < (unsigned int)_d8279; _q2410++) {
short _t2411 = T812::_m16309(_k8277);
if (_t2411 == 0) {
const char* _x2412 = T812::_m16310(_k8277);
_v9550->setMessageId(_x2412);
delete _x2412;
continue;
}
if (_t2411 == 1) {
const char* _w2413 = T812::_m16310(_k8277);
_v9550->setRequestId(_w2413);
delete _w2413;
continue;
}
T812::_m16311(_k8277);
}
return _v9550;
}

Serializable* T818::_m16209(T811* buff) {
GetFriendsByPlayerIdRequest* _s9557 = new GetFriendsByPlayerIdRequest();
short _c2415 = T812::_m16309(buff);
for (unsigned int _r2416 = 0; _r2416 < (unsigned int)_c2415; _r2416++) {
short _q2417 = T812::_m16309(buff);
if (_q2417 == 0) {
const char* _o2418 = T812::_m16310(buff);
_s9557->setMessageId(_o2418);
delete _o2418;
continue;
}
if (_q2417 == 1) {
const char* _q2419 = T812::_m16310(buff);
_s9557->setRequestId(_q2419);
delete _q2419;
continue;
}
if (_q2417 == 3) {
const char* _v2420 = T812::_m16310(buff);
_s9557->setPlayerId(_v2420);
delete _v2420;
continue;
}
T812::_m16311(buff);
}
return _s9557;
}

Serializable* T818::_m16210(T811* _i8283) {
GetThirdPartyFriendsResponse* _f9565 = new GetThirdPartyFriendsResponse();
short _z8285 = T812::_m16309(_i8283);
for (unsigned int _o2423 = 0; _o2423 < (unsigned int)_z8285; _o2423++) {
short _l2424 = T812::_m16309(_i8283);
if (_l2424 == 0) {
const char* _a2425 = T812::_m16310(_i8283);
_f9565->setMessageId(_a2425);
delete _a2425;
continue;
}
if (_l2424 == 1) {
const char* _h2426 = T812::_m16310(_i8283);
_f9565->setRequestId(_h2426);
delete _h2426;
continue;
}
if (_l2424 == 3) {
_f9565->setGetThirdPartyFriendsStatus((GetThirdPartyFriendsStatus*)T812::readObject(this, _i8283));
continue;
}
if (_l2424 == 4) {
std::vector<NPlayer*>* _d9571 = 0;
unsigned char _u9572 = _i8283->_m16314();
if (_u9572 != T809::_g15500) {
_i8283->_m16315();
int _o9573 = _i8283->_m16316();
_d9571 = new std::vector<NPlayer*>();
for (unsigned int _a2430 = 0; _a2430 < (unsigned int)_o9573; _a2430++) {
_d9571->push_back((NPlayer*)T812::readObject(this, _i8283));
}
}
_f9565->setThirdPartyFriends(_d9571);
continue;
}
T812::_m16311(_i8283);
}
return _f9565;
}

Serializable* T818::_m16211(T811* buff) {
GetThirdPartyFriendsRequest* _t9576 = new GetThirdPartyFriendsRequest();
short _e2432 = T812::_m16309(buff);
for (unsigned int _o2433 = 0; _o2433 < (unsigned int)_e2432; _o2433++) {
short _h2434 = T812::_m16309(buff);
if (_h2434 == 0) {
const char* _v2435 = T812::_m16310(buff);
_t9576->setMessageId(_v2435);
delete _v2435;
continue;
}
if (_h2434 == 1) {
const char* _v2436 = T812::_m16310(buff);
_t9576->setRequestId(_v2436);
delete _v2436;
continue;
}
if (_h2434 == 3) {
_t9576->setThirdPartySource((ThirdPartySource*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _t9576;
}

Serializable* T818::_m16212(T811* buff) {
GetFriendDemandsResponse* _s9583 = new GetFriendDemandsResponse();
short _g2438 = T812::_m16309(buff);
for (unsigned int _e2439 = 0; _e2439 < (unsigned int)_g2438; _e2439++) {
short _y2440 = T812::_m16309(buff);
if (_y2440 == 0) {
const char* _g2441 = T812::_m16310(buff);
_s9583->setMessageId(_g2441);
delete _g2441;
continue;
}
if (_y2440 == 1) {
const char* _e2442 = T812::_m16310(buff);
_s9583->setRequestId(_e2442);
delete _e2442;
continue;
}
if (_y2440 == 3) {
_s9583->setGetFriendDemandsStatus((GetFriendDemandsStatus*)T812::readObject(this, buff));
continue;
}
if (_y2440 == 4) {
std::vector<NFriendDemand*>* _k9589 = 0;
unsigned char _k9590 = buff->_m16314();
if (_k9590 != T809::_g15500) {
buff->_m16315();
int _w9591 = buff->_m16316();
_k9589 = new std::vector<NFriendDemand*>();
for (unsigned int _e2446 = 0; _e2446 < (unsigned int)_w9591; _e2446++) {
_k9589->push_back((NFriendDemand*)T812::readObject(this, buff));
}
}
_s9583->setFriendDemands(_k9589);
continue;
}
T812::_m16311(buff);
}
return _s9583;
}

Serializable* T818::_m16213(T811* _t8289) {
GetFriendDemandsRequest* _g9594 = new GetFriendDemandsRequest();
short _j8291 = T812::_m16309(_t8289);
for (unsigned int _g2449 = 0; _g2449 < (unsigned int)_j8291; _g2449++) {
short _l2450 = T812::_m16309(_t8289);
if (_l2450 == 0) {
const char* _e2451 = T812::_m16310(_t8289);
_g9594->setMessageId(_e2451);
delete _e2451;
continue;
}
if (_l2450 == 1) {
const char* _y2452 = T812::_m16310(_t8289);
_g9594->setRequestId(_y2452);
delete _y2452;
continue;
}
T812::_m16311(_t8289);
}
return _g9594;
}

Serializable* T818::_m16214(T811* buff) {
AcceptFriendDemandResponse* _j9601 = new AcceptFriendDemandResponse();
short _c2454 = T812::_m16309(buff);
for (unsigned int _f2455 = 0; _f2455 < (unsigned int)_c2454; _f2455++) {
short _t2456 = T812::_m16309(buff);
if (_t2456 == 0) {
const char* _q2457 = T812::_m16310(buff);
_j9601->setMessageId(_q2457);
delete _q2457;
continue;
}
if (_t2456 == 1) {
const char* _q2458 = T812::_m16310(buff);
_j9601->setRequestId(_q2458);
delete _q2458;
continue;
}
if (_t2456 == 3) {
_j9601->setAcceptFriendDemandStatus((AcceptFriendDemandStatus*)T812::readObject(this, buff));
continue;
}
if (_t2456 == 4) {
const char* _e2459 = T812::_m16310(buff);
_j9601->setFriendDemandId(_e2459);
delete _e2459;
continue;
}
T812::_m16311(buff);
}
return _j9601;
}

Serializable* T818::_m16215(T811* buff) {
AcceptFriendDemandRequest* _g9609 = new AcceptFriendDemandRequest();
short _i2461 = T812::_m16309(buff);
for (unsigned int _f2462 = 0; _f2462 < (unsigned int)_i2461; _f2462++) {
short _u2463 = T812::_m16309(buff);
if (_u2463 == 0) {
const char* _g2464 = T812::_m16310(buff);
_g9609->setMessageId(_g2464);
delete _g2464;
continue;
}
if (_u2463 == 1) {
const char* _w2465 = T812::_m16310(buff);
_g9609->setRequestId(_w2465);
delete _w2465;
continue;
}
if (_u2463 == 3) {
const char* _f2466 = T812::_m16310(buff);
_g9609->setFriendDemandId(_f2466);
delete _f2466;
continue;
}
T812::_m16311(buff);
}
return _g9609;
}

Serializable* T818::_m16216(T811* _k8295) {
RefuseFriendDemandResponse* _p9617 = new RefuseFriendDemandResponse();
short _r8297 = T812::_m16309(_k8295);
for (unsigned int _l2469 = 0; _l2469 < (unsigned int)_r8297; _l2469++) {
short _l2470 = T812::_m16309(_k8295);
if (_l2470 == 0) {
const char* _g2471 = T812::_m16310(_k8295);
_p9617->setMessageId(_g2471);
delete _g2471;
continue;
}
if (_l2470 == 1) {
const char* _r2472 = T812::_m16310(_k8295);
_p9617->setRequestId(_r2472);
delete _r2472;
continue;
}
if (_l2470 == 3) {
_p9617->setRefuseFriendDemandStatus((RefuseFriendDemandStatus*)T812::readObject(this, _k8295));
continue;
}
if (_l2470 == 4) {
const char* _t2473 = T812::_m16310(_k8295);
_p9617->setFriendDemandId(_t2473);
delete _t2473;
continue;
}
T812::_m16311(_k8295);
}
return _p9617;
}

Serializable* T818::_m16217(T811* buff) {
RefuseFriendDemandRequest* _g9625 = new RefuseFriendDemandRequest();
short _h2475 = T812::_m16309(buff);
for (unsigned int _d2476 = 0; _d2476 < (unsigned int)_h2475; _d2476++) {
short _f2477 = T812::_m16309(buff);
if (_f2477 == 0) {
const char* _g2478 = T812::_m16310(buff);
_g9625->setMessageId(_g2478);
delete _g2478;
continue;
}
if (_f2477 == 1) {
const char* _w2479 = T812::_m16310(buff);
_g9625->setRequestId(_w2479);
delete _w2479;
continue;
}
if (_f2477 == 3) {
const char* _x2480 = T812::_m16310(buff);
_g9625->setFriendDemandId(_x2480);
delete _x2480;
continue;
}
T812::_m16311(buff);
}
return _g9625;
}

Serializable* T818::_m16218(T811* buff) {
SubmitScoreResponse* _i9633 = new SubmitScoreResponse();
short _a2482 = T812::_m16309(buff);
for (unsigned int _s2483 = 0; _s2483 < (unsigned int)_a2482; _s2483++) {
short _w2484 = T812::_m16309(buff);
if (_w2484 == 0) {
const char* _y2485 = T812::_m16310(buff);
_i9633->setMessageId(_y2485);
delete _y2485;
continue;
}
if (_w2484 == 1) {
const char* _v2486 = T812::_m16310(buff);
_i9633->setRequestId(_v2486);
delete _v2486;
continue;
}
if (_w2484 == 3) {
_i9633->setSubmitScoreStatus((SubmitScoreStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _i9633;
}

Serializable* T818::_m16219(T811* _u8301) {
SubmitScoreRequest* _v9640 = new SubmitScoreRequest();
short _h8303 = T812::_m16309(_u8301);
for (unsigned int _l2489 = 0; _l2489 < (unsigned int)_h8303; _l2489++) {
short _u2490 = T812::_m16309(_u8301);
if (_u2490 == 0) {
const char* _t2491 = T812::_m16310(_u8301);
_v9640->setMessageId(_t2491);
delete _t2491;
continue;
}
if (_u2490 == 1) {
const char* _y2492 = T812::_m16310(_u8301);
_v9640->setRequestId(_y2492);
delete _y2492;
continue;
}
if (_u2490 == 3) {
_v9640->setScore((NScore*)T812::readObject(this, _u8301));
continue;
}
if (_u2490 == 4) {
const char* _y2493 = T812::_m16310(_u8301);
_v9640->setLeaderboardId(_y2493);
delete _y2493;
continue;
}
T812::_m16311(_u8301);
}
return _v9640;
}

Serializable* T818::_m16220(T811* buff) {
SubmitScoreWithPlayerNameRequest* _c9648 = new SubmitScoreWithPlayerNameRequest();
short _r2495 = T812::_m16309(buff);
for (unsigned int _h2496 = 0; _h2496 < (unsigned int)_r2495; _h2496++) {
short _u2497 = T812::_m16309(buff);
if (_u2497 == 0) {
const char* _m2498 = T812::_m16310(buff);
_c9648->setMessageId(_m2498);
delete _m2498;
continue;
}
if (_u2497 == 1) {
const char* _w2499 = T812::_m16310(buff);
_c9648->setRequestId(_w2499);
delete _w2499;
continue;
}
if (_u2497 == 3) {
const char* _w2500 = T812::_m16310(buff);
_c9648->setName(_w2500);
delete _w2500;
continue;
}
if (_u2497 == 4) {
_c9648->setScore((NScore*)T812::readObject(this, buff));
continue;
}
if (_u2497 == 5) {
const char* _p2501 = T812::_m16310(buff);
_c9648->setLeaderboardId(_p2501);
delete _p2501;
continue;
}
T812::_m16311(buff);
}
return _c9648;
}

Serializable* T818::_m16221(T811* _s8307) {
GetLeaderboardResponse* _v9657 = new GetLeaderboardResponse();
short _j8309 = T812::_m16309(_s8307);
for (unsigned int _p2504 = 0; _p2504 < (unsigned int)_j8309; _p2504++) {
short _l2505 = T812::_m16309(_s8307);
if (_l2505 == 0) {
const char* _y2506 = T812::_m16310(_s8307);
_v9657->setMessageId(_y2506);
delete _y2506;
continue;
}
if (_l2505 == 1) {
const char* _g2507 = T812::_m16310(_s8307);
_v9657->setRequestId(_g2507);
delete _g2507;
continue;
}
if (_l2505 == 3) {
_v9657->setGetLeaderboardStatus((GetLeaderboardStatus*)T812::readObject(this, _s8307));
continue;
}
if (_l2505 == 4) {
_v9657->setLeaderboard((NLeaderboard*)T812::readObject(this, _s8307));
continue;
}
T812::_m16311(_s8307);
}
return _v9657;
}

Serializable* T818::_m16222(T811* buff) {
GetLeaderboardRequest* _c9664 = new GetLeaderboardRequest();
short _e2509 = T812::_m16309(buff);
for (unsigned int _x2510 = 0; _x2510 < (unsigned int)_e2509; _x2510++) {
short _u2511 = T812::_m16309(buff);
if (_u2511 == 0) {
const char* _c2512 = T812::_m16310(buff);
_c9664->setMessageId(_c2512);
delete _c2512;
continue;
}
if (_u2511 == 1) {
const char* _k2513 = T812::_m16310(buff);
_c9664->setRequestId(_k2513);
delete _k2513;
continue;
}
if (_u2511 == 3) {
const char* _d2514 = T812::_m16310(buff);
_c9664->setLeaderboardId(_d2514);
delete _d2514;
continue;
}
if (_u2511 == 4) {
_c9664->setPeriod((LeaderboardPeriod*)T812::readObject(this, buff));
continue;
}
if (_u2511 == 5) {
_c9664->setStart(T812::_m16308(buff));
continue;
}
if (_u2511 == 6) {
_c9664->setLimit(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _c9664;
}

Serializable* T818::_m16223(T811* buff) {
BuyItemResponse* _z9672 = new BuyItemResponse();
short _n2516 = T812::_m16309(buff);
for (unsigned int _j2517 = 0; _j2517 < (unsigned int)_n2516; _j2517++) {
short _d2518 = T812::_m16309(buff);
if (_d2518 == 0) {
const char* _i2519 = T812::_m16310(buff);
_z9672->setMessageId(_i2519);
delete _i2519;
continue;
}
if (_d2518 == 1) {
const char* _k2520 = T812::_m16310(buff);
_z9672->setRequestId(_k2520);
delete _k2520;
continue;
}
if (_d2518 == 3) {
_z9672->setBuyItemStatus((BuyItemStatus*)T812::readObject(this, buff));
continue;
}
if (_d2518 == 4) {
_z9672->setBoughtItem((NItem*)T812::readObject(this, buff));
continue;
}
if (_d2518 == 5) {
_z9672->setQuantity(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _z9672;
}

Serializable* T818::_m16224(T811* _l8313) {
BuyItemRequest* _y9679 = new BuyItemRequest();
short _n8315 = T812::_m16309(_l8313);
for (unsigned int _u2523 = 0; _u2523 < (unsigned int)_n8315; _u2523++) {
short _f2524 = T812::_m16309(_l8313);
if (_f2524 == 0) {
const char* _z2525 = T812::_m16310(_l8313);
_y9679->setMessageId(_z2525);
delete _z2525;
continue;
}
if (_f2524 == 1) {
const char* _d2526 = T812::_m16310(_l8313);
_y9679->setRequestId(_d2526);
delete _d2526;
continue;
}
if (_f2524 == 3) {
const char* _t2527 = T812::_m16310(_l8313);
_y9679->setItemId(_t2527);
delete _t2527;
continue;
}
if (_f2524 == 4) {
_y9679->setQuantity(T812::_m16308(_l8313));
continue;
}
T812::_m16311(_l8313);
}
return _y9679;
}

Serializable* T818::_m16225(T811* buff) {
GetStoreResponse* _s9687 = new GetStoreResponse();
short _l2529 = T812::_m16309(buff);
for (unsigned int _v2530 = 0; _v2530 < (unsigned int)_l2529; _v2530++) {
short _k2531 = T812::_m16309(buff);
if (_k2531 == 0) {
const char* _y2532 = T812::_m16310(buff);
_s9687->setMessageId(_y2532);
delete _y2532;
continue;
}
if (_k2531 == 1) {
const char* _e2533 = T812::_m16310(buff);
_s9687->setRequestId(_e2533);
delete _e2533;
continue;
}
if (_k2531 == 3) {
_s9687->setGetStoreStatus((GetStoreStatus*)T812::readObject(this, buff));
continue;
}
if (_k2531 == 4) {
_s9687->setStore((NStore*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _s9687;
}

Serializable* T818::_m16226(T811* _x8319) {
GetStoreRequest* _u9694 = new GetStoreRequest();
short _k2535 = T812::_m16309(_x8319);
for (unsigned int _k2536 = 0; _k2536 < (unsigned int)_k2535; _k2536++) {
short _d2537 = T812::_m16309(_x8319);
if (_d2537 == 0) {
const char* _r2538 = T812::_m16310(_x8319);
_u9694->setMessageId(_r2538);
delete _r2538;
continue;
}
if (_d2537 == 1) {
const char* _y2539 = T812::_m16310(_x8319);
_u9694->setRequestId(_y2539);
delete _y2539;
continue;
}
T812::_m16311(_x8319);
}
return _u9694;
}

Serializable* T818::_m16227(T811* buff) {
ConsumeItemResponse* _l9701 = new ConsumeItemResponse();
short _g8321 = T812::_m16309(buff);
for (unsigned int _v2542 = 0; _v2542 < (unsigned int)_g8321; _v2542++) {
short _e2543 = T812::_m16309(buff);
if (_e2543 == 0) {
const char* _w2544 = T812::_m16310(buff);
_l9701->setMessageId(_w2544);
delete _w2544;
continue;
}
if (_e2543 == 1) {
const char* _g2545 = T812::_m16310(buff);
_l9701->setRequestId(_g2545);
delete _g2545;
continue;
}
if (_e2543 == 3) {
_l9701->setConsumeItemStatus((ConsumeItemStatus*)T812::readObject(this, buff));
continue;
}
if (_e2543 == 4) {
_l9701->setConsumedItem((NItem*)T812::readObject(this, buff));
continue;
}
if (_e2543 == 5) {
_l9701->setQuantity(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _l9701;
}

Serializable* T818::_m16228(T811* buff) {
ConsumeItemRequest* _v9708 = new ConsumeItemRequest();
short _q2547 = T812::_m16309(buff);
for (unsigned int _u2548 = 0; _u2548 < (unsigned int)_q2547; _u2548++) {
short _u2549 = T812::_m16309(buff);
if (_u2549 == 0) {
const char* _e2550 = T812::_m16310(buff);
_v9708->setMessageId(_e2550);
delete _e2550;
continue;
}
if (_u2549 == 1) {
const char* _v2551 = T812::_m16310(buff);
_v9708->setRequestId(_v2551);
delete _v2551;
continue;
}
if (_u2549 == 3) {
const char* _e2552 = T812::_m16310(buff);
_v9708->setItemId(_e2552);
delete _e2552;
continue;
}
if (_u2549 == 4) {
_v9708->setQuantity(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _v9708;
}

Serializable* T818::_m16229(T811* _o8325) {
IncreasePlayerWalletResponse* _a9716 = new IncreasePlayerWalletResponse();
short _z8327 = T812::_m16309(_o8325);
for (unsigned int _b2555 = 0; _b2555 < (unsigned int)_z8327; _b2555++) {
short _k2556 = T812::_m16309(_o8325);
if (_k2556 == 0) {
const char* _p2557 = T812::_m16310(_o8325);
_a9716->setMessageId(_p2557);
delete _p2557;
continue;
}
if (_k2556 == 1) {
const char* _e2558 = T812::_m16310(_o8325);
_a9716->setRequestId(_e2558);
delete _e2558;
continue;
}
if (_k2556 == 3) {
_a9716->setIncreasePlayerWalletStatus((IncreasePlayerWalletStatus*)T812::readObject(this, _o8325));
continue;
}
if (_k2556 == 4) {
_a9716->setValue(T812::_m16308(_o8325));
continue;
}
T812::_m16311(_o8325);
}
return _a9716;
}

Serializable* T818::_m16230(T811* buff) {
IncreasePlayerWalletRequest* _n9723 = new IncreasePlayerWalletRequest();
short _i2560 = T812::_m16309(buff);
for (unsigned int _k2561 = 0; _k2561 < (unsigned int)_i2560; _k2561++) {
short _x2562 = T812::_m16309(buff);
if (_x2562 == 0) {
const char* _n2563 = T812::_m16310(buff);
_n9723->setMessageId(_n2563);
delete _n2563;
continue;
}
if (_x2562 == 1) {
const char* _e2564 = T812::_m16310(buff);
_n9723->setRequestId(_e2564);
delete _e2564;
continue;
}
if (_x2562 == 3) {
_n9723->setValue(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _n9723;
}

Serializable* T818::_m16231(T811* buff) {
GetPlayerWalletResponse* _s9730 = new GetPlayerWalletResponse();
short _j2566 = T812::_m16309(buff);
for (unsigned int _e2567 = 0; _e2567 < (unsigned int)_j2566; _e2567++) {
short _l2568 = T812::_m16309(buff);
if (_l2568 == 0) {
const char* _i2569 = T812::_m16310(buff);
_s9730->setMessageId(_i2569);
delete _i2569;
continue;
}
if (_l2568 == 1) {
const char* _y2570 = T812::_m16310(buff);
_s9730->setRequestId(_y2570);
delete _y2570;
continue;
}
if (_l2568 == 3) {
_s9730->setGetPlayerWalletStatus((GetPlayerWalletStatus*)T812::readObject(this, buff));
continue;
}
if (_l2568 == 4) {
_s9730->setWallet((NPlayerWallet*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _s9730;
}

Serializable* T818::_m16232(T811* _x8331) {
GetPlayerWalletRequest* _i9737 = new GetPlayerWalletRequest();
short _f8333 = T812::_m16309(_x8331);
for (unsigned int _p2573 = 0; _p2573 < (unsigned int)_f8333; _p2573++) {
short _s2574 = T812::_m16309(_x8331);
if (_s2574 == 0) {
const char* _m2575 = T812::_m16310(_x8331);
_i9737->setMessageId(_m2575);
delete _m2575;
continue;
}
if (_s2574 == 1) {
const char* _r2576 = T812::_m16310(_x8331);
_i9737->setRequestId(_r2576);
delete _r2576;
continue;
}
T812::_m16311(_x8331);
}
return _i9737;
}

Serializable* T818::_m16233(T811* buff) {
GetAchievementBoardResponse* _s9744 = new GetAchievementBoardResponse();
short _j2578 = T812::_m16309(buff);
for (unsigned int _b2579 = 0; _b2579 < (unsigned int)_j2578; _b2579++) {
short _n2580 = T812::_m16309(buff);
if (_n2580 == 0) {
const char* _e2581 = T812::_m16310(buff);
_s9744->setMessageId(_e2581);
delete _e2581;
continue;
}
if (_n2580 == 1) {
const char* _b2582 = T812::_m16310(buff);
_s9744->setRequestId(_b2582);
delete _b2582;
continue;
}
if (_n2580 == 3) {
_s9744->setGetAchievementBoardStatus((GetAchievementBoardStatus*)T812::readObject(this, buff));
continue;
}
if (_n2580 == 4) {
_s9744->setAchievementBoard((NAchievementBoard*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _s9744;
}

Serializable* T818::_m16234(T811* buff) {
GetAchievementBoardRequest* _u9751 = new GetAchievementBoardRequest();
short _p2584 = T812::_m16309(buff);
for (unsigned int _s2585 = 0; _s2585 < (unsigned int)_p2584; _s2585++) {
short _p2586 = T812::_m16309(buff);
if (_p2586 == 0) {
const char* _w2587 = T812::_m16310(buff);
_u9751->setMessageId(_w2587);
delete _w2587;
continue;
}
if (_p2586 == 1) {
const char* _l2588 = T812::_m16310(buff);
_u9751->setRequestId(_l2588);
delete _l2588;
continue;
}
T812::_m16311(buff);
}
return _u9751;
}

Serializable* T818::_m16235(T811* buff) {
AchieveResponse* _r9758 = new AchieveResponse();
short _q2590 = T812::_m16309(buff);
for (unsigned int _s8339 = 0; _s8339 < (unsigned int)_q2590; _s8339++) {
short _o2592 = T812::_m16309(buff);
if (_o2592 == 0) {
const char* _n2593 = T812::_m16310(buff);
_r9758->setMessageId(_n2593);
delete _n2593;
continue;
}
if (_o2592 == 1) {
const char* _r2594 = T812::_m16310(buff);
_r9758->setRequestId(_r2594);
delete _r2594;
continue;
}
if (_o2592 == 3) {
_r9758->setAchieveStatus((AchieveStatus*)T812::readObject(this, buff));
continue;
}
if (_o2592 == 4) {
const char* _p2595 = T812::_m16310(buff);
_r9758->setAchivementId(_p2595);
delete _p2595;
continue;
}
if (_o2592 == 5) {
_r9758->setProgress(T812::_m16308(buff));
continue;
}
T812::_m16311(buff);
}
return _r9758;
}

Serializable* T818::_m16236(T811* buff) {
AchieveRequest* _z9766 = new AchieveRequest();
short _r2597 = T812::_m16309(buff);
for (unsigned int _t2598 = 0; _t2598 < (unsigned int)_r2597; _t2598++) {
short _k2599 = T812::_m16309(buff);
if (_k2599 == 0) {
const char* _b2600 = T812::_m16310(buff);
_z9766->setMessageId(_b2600);
delete _b2600;
continue;
}
if (_k2599 == 1) {
const char* _a2601 = T812::_m16310(buff);
_z9766->setRequestId(_a2601);
delete _a2601;
continue;
}
if (_k2599 == 3) {
const char* _t2602 = T812::_m16310(buff);
_z9766->setAchivementId(_t2602);
delete _t2602;
continue;
}
T812::_m16311(buff);
}
return _z9766;
}

Serializable* T818::_m16237(T811* _v8342) {
AchieveWithProgressRequest* _c9774 = new AchieveWithProgressRequest();
short _t8344 = T812::_m16309(_v8342);
for (unsigned int _o2605 = 0; _o2605 < (unsigned int)_t8344; _o2605++) {
short _g2606 = T812::_m16309(_v8342);
if (_g2606 == 0) {
const char* _y2607 = T812::_m16310(_v8342);
_c9774->setMessageId(_y2607);
delete _y2607;
continue;
}
if (_g2606 == 1) {
const char* _t2608 = T812::_m16310(_v8342);
_c9774->setRequestId(_t2608);
delete _t2608;
continue;
}
if (_g2606 == 3) {
const char* _s2609 = T812::_m16310(_v8342);
_c9774->setAchivementId(_s2609);
delete _s2609;
continue;
}
if (_g2606 == 4) {
_c9774->setValue(T812::_m16308(_v8342));
continue;
}
T812::_m16311(_v8342);
}
return _c9774;
}

Serializable* T818::_m16238(T811* buff) {
SearchImmediateGameResponse* _m9782 = new SearchImmediateGameResponse();
short _j2611 = T812::_m16309(buff);
for (unsigned int _x2612 = 0; _x2612 < (unsigned int)_j2611; _x2612++) {
short _k2613 = T812::_m16309(buff);
if (_k2613 == 0) {
const char* _q2614 = T812::_m16310(buff);
_m9782->setMessageId(_q2614);
delete _q2614;
continue;
}
if (_k2613 == 1) {
const char* _s2615 = T812::_m16310(buff);
_m9782->setRequestId(_s2615);
delete _s2615;
continue;
}
if (_k2613 == 3) {
_m9782->setSearchImmediateGameStatus((SearchImmediateGameStatus*)T812::readObject(this, buff));
continue;
}
if (_k2613 == 4) {
_m9782->setGame((NGame*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _m9782;
}

Serializable* T818::_m16239(T811* buff) {
SearchImmediateGameRequest* _r9789 = new SearchImmediateGameRequest();
short _r2617 = T812::_m16309(buff);
for (unsigned int _r2618 = 0; _r2618 < (unsigned int)_r2617; _r2618++) {
short _b2619 = T812::_m16309(buff);
if (_b2619 == 0) {
const char* _c2620 = T812::_m16310(buff);
_r9789->setMessageId(_c2620);
delete _c2620;
continue;
}
if (_b2619 == 1) {
const char* _u2621 = T812::_m16310(buff);
_r9789->setRequestId(_u2621);
delete _u2621;
continue;
}
T812::_m16311(buff);
}
return _r9789;
}

Serializable* T818::_m16240(T811* _g8348) {
SearchImmediateGameByConditionsRequest* _m9796 = new SearchImmediateGameByConditionsRequest();
short _j8350 = T812::_m16309(_g8348);
for (unsigned int _u2624 = 0; _u2624 < (unsigned int)_j8350; _u2624++) {
short _n2625 = T812::_m16309(_g8348);
if (_n2625 == 0) {
const char* _t2626 = T812::_m16310(_g8348);
_m9796->setMessageId(_t2626);
delete _t2626;
continue;
}
if (_n2625 == 1) {
const char* _f2627 = T812::_m16310(_g8348);
_m9796->setRequestId(_f2627);
delete _f2627;
continue;
}
if (_n2625 == 3) {
_m9796->setQuery((NuggetaQuery*)T812::readObject(this, _g8348));
continue;
}
if (_n2625 == 4) {
_m9796->setMatchMakingConditions((NMatchMakingConditions*)T812::readObject(this, _g8348));
continue;
}
T812::_m16311(_g8348);
}
return _m9796;
}

Serializable* T818::_m16241(T811* buff) {
JoinGameResponse* _y9803 = new JoinGameResponse();
short _q2629 = T812::_m16309(buff);
for (unsigned int _q2630 = 0; _q2630 < (unsigned int)_q2629; _q2630++) {
short _o2631 = T812::_m16309(buff);
if (_o2631 == 0) {
const char* _f2632 = T812::_m16310(buff);
_y9803->setMessageId(_f2632);
delete _f2632;
continue;
}
if (_o2631 == 1) {
const char* _q2633 = T812::_m16310(buff);
_y9803->setRequestId(_q2633);
delete _q2633;
continue;
}
if (_o2631 == 3) {
_y9803->setJoinGameStatus((JoinGameStatus*)T812::readObject(this, buff));
continue;
}
if (_o2631 == 4) {
_y9803->setGame((NGame*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _y9803;
}

Serializable* T818::_m16242(T811* _b8354) {
JoinGameRequest* _q9810 = new JoinGameRequest();
short _w8356 = T812::_m16309(_b8354);
for (unsigned int _y2636 = 0; _y2636 < (unsigned int)_w8356; _y2636++) {
short _p2637 = T812::_m16309(_b8354);
if (_p2637 == 0) {
const char* _v2638 = T812::_m16310(_b8354);
_q9810->setMessageId(_v2638);
delete _v2638;
continue;
}
if (_p2637 == 1) {
const char* _j2639 = T812::_m16310(_b8354);
_q9810->setRequestId(_j2639);
delete _j2639;
continue;
}
if (_p2637 == 3) {
const char* _d2640 = T812::_m16310(_b8354);
_q9810->setGameId(_d2640);
delete _d2640;
continue;
}
T812::_m16311(_b8354);
}
return _q9810;
}

Serializable* T818::_m16243(T811* buff) {
UnjoinGameResponse* _f9818 = new UnjoinGameResponse();
short _y2642 = T812::_m16309(buff);
for (unsigned int _r2643 = 0; _r2643 < (unsigned int)_y2642; _r2643++) {
short _d2644 = T812::_m16309(buff);
if (_d2644 == 0) {
const char* _r2645 = T812::_m16310(buff);
_f9818->setMessageId(_r2645);
delete _r2645;
continue;
}
if (_d2644 == 1) {
const char* _a2646 = T812::_m16310(buff);
_f9818->setRequestId(_a2646);
delete _a2646;
continue;
}
if (_d2644 == 3) {
_f9818->setUnjoinGameStatus((UnjoinGameStatus*)T812::readObject(this, buff));
continue;
}
if (_d2644 == 4) {
const char* _z2647 = T812::_m16310(buff);
_f9818->setGameId(_z2647);
delete _z2647;
continue;
}
T812::_m16311(buff);
}
return _f9818;
}

Serializable* T818::_m16244(T811* buff) {
UnjoinGameRequest* _q9826 = new UnjoinGameRequest();
short _j2649 = T812::_m16309(buff);
for (unsigned int _w2650 = 0; _w2650 < (unsigned int)_j2649; _w2650++) {
short _v2651 = T812::_m16309(buff);
if (_v2651 == 0) {
const char* _w2652 = T812::_m16310(buff);
_q9826->setMessageId(_w2652);
delete _w2652;
continue;
}
if (_v2651 == 1) {
const char* _f2653 = T812::_m16310(buff);
_q9826->setRequestId(_f2653);
delete _f2653;
continue;
}
if (_v2651 == 3) {
const char* _o2654 = T812::_m16310(buff);
_q9826->setGameId(_o2654);
delete _o2654;
continue;
}
T812::_m16311(buff);
}
return _q9826;
}

Serializable* T818::_m16245(T811* _r8360) {
StartGameResponse* _u9834 = new StartGameResponse();
short _t8362 = T812::_m16309(_r8360);
for (unsigned int _i2657 = 0; _i2657 < (unsigned int)_t8362; _i2657++) {
short _m2658 = T812::_m16309(_r8360);
if (_m2658 == 0) {
const char* _e2659 = T812::_m16310(_r8360);
_u9834->setMessageId(_e2659);
delete _e2659;
continue;
}
if (_m2658 == 1) {
const char* _u2660 = T812::_m16310(_r8360);
_u9834->setRequestId(_u2660);
delete _u2660;
continue;
}
if (_m2658 == 3) {
_u9834->setStartGameStatus((StartGameStatus*)T812::readObject(this, _r8360));
continue;
}
if (_m2658 == 4) {
const char* _t2661 = T812::_m16310(_r8360);
_u9834->setGameId(_t2661);
delete _t2661;
continue;
}
T812::_m16311(_r8360);
}
return _u9834;
}

Serializable* T818::_m16246(T811* buff) {
StartGameRequest* _v9842 = new StartGameRequest();
short _j2663 = T812::_m16309(buff);
for (unsigned int _m2664 = 0; _m2664 < (unsigned int)_j2663; _m2664++) {
short _o2665 = T812::_m16309(buff);
if (_o2665 == 0) {
const char* _f2666 = T812::_m16310(buff);
_v9842->setMessageId(_f2666);
delete _f2666;
continue;
}
if (_o2665 == 1) {
const char* _f2667 = T812::_m16310(buff);
_v9842->setRequestId(_f2667);
delete _f2667;
continue;
}
if (_o2665 == 3) {
const char* _i2668 = T812::_m16310(buff);
_v9842->setGameId(_i2668);
delete _i2668;
continue;
}
T812::_m16311(buff);
}
return _v9842;
}

Serializable* T818::_m16247(T811* buff) {
StopGameResponse* _p9850 = new StopGameResponse();
short _c2670 = T812::_m16309(buff);
for (unsigned int _v2671 = 0; _v2671 < (unsigned int)_c2670; _v2671++) {
short _u2672 = T812::_m16309(buff);
if (_u2672 == 0) {
const char* _y2673 = T812::_m16310(buff);
_p9850->setMessageId(_y2673);
delete _y2673;
continue;
}
if (_u2672 == 1) {
const char* _n2674 = T812::_m16310(buff);
_p9850->setRequestId(_n2674);
delete _n2674;
continue;
}
if (_u2672 == 3) {
_p9850->setStopGameStatus((StopGameStatus*)T812::readObject(this, buff));
continue;
}
if (_u2672 == 4) {
const char* _k2675 = T812::_m16310(buff);
_p9850->setGameId(_k2675);
delete _k2675;
continue;
}
T812::_m16311(buff);
}
return _p9850;
}

Serializable* T818::_m16248(T811* buff) {
StopGameRequest* _x9858 = new StopGameRequest();
short _f2677 = T812::_m16309(buff);
for (unsigned int _r8368 = 0; _r8368 < (unsigned int)_f2677; _r8368++) {
short _f2679 = T812::_m16309(buff);
if (_f2679 == 0) {
const char* _p2680 = T812::_m16310(buff);
_x9858->setMessageId(_p2680);
delete _p2680;
continue;
}
if (_f2679 == 1) {
const char* _x2681 = T812::_m16310(buff);
_x9858->setRequestId(_x2681);
delete _x2681;
continue;
}
if (_f2679 == 3) {
const char* _g2682 = T812::_m16310(buff);
_x9858->setGameId(_g2682);
delete _g2682;
continue;
}
T812::_m16311(buff);
}
return _x9858;
}

Serializable* T818::_m16249(T811* buff) {
CreateGameResponse* _k9866 = new CreateGameResponse();
short _l2684 = T812::_m16309(buff);
for (unsigned int _l2685 = 0; _l2685 < (unsigned int)_l2684; _l2685++) {
short _i2686 = T812::_m16309(buff);
if (_i2686 == 0) {
const char* _d2687 = T812::_m16310(buff);
_k9866->setMessageId(_d2687);
delete _d2687;
continue;
}
if (_i2686 == 1) {
const char* _m2688 = T812::_m16310(buff);
_k9866->setRequestId(_m2688);
delete _m2688;
continue;
}
if (_i2686 == 3) {
_k9866->setCreateGameStatus((CreateGameStatus*)T812::readObject(this, buff));
continue;
}
if (_i2686 == 4) {
const char* _v2689 = T812::_m16310(buff);
_k9866->setGameId(_v2689);
delete _v2689;
continue;
}
T812::_m16311(buff);
}
return _k9866;
}

Serializable* T818::_m16250(T811* _o8371) {
CreateGameRequest* _s9874 = new CreateGameRequest();
short _e8373 = T812::_m16309(_o8371);
for (unsigned int _s2692 = 0; _s2692 < (unsigned int)_e8373; _s2692++) {
short _m2693 = T812::_m16309(_o8371);
if (_m2693 == 0) {
const char* _x2694 = T812::_m16310(_o8371);
_s9874->setMessageId(_x2694);
delete _x2694;
continue;
}
if (_m2693 == 1) {
const char* _b2695 = T812::_m16310(_o8371);
_s9874->setRequestId(_b2695);
delete _b2695;
continue;
}
if (_m2693 == 3) {
_s9874->setGame((NGame*)T812::readObject(this, _o8371));
continue;
}
T812::_m16311(_o8371);
}
return _s9874;
}

Serializable* T818::_m16251(T811* buff) {
GetGamesResponse* _m9881 = new GetGamesResponse();
short _r2697 = T812::_m16309(buff);
for (unsigned int _n2698 = 0; _n2698 < (unsigned int)_r2697; _n2698++) {
short _m2699 = T812::_m16309(buff);
if (_m2699 == 0) {
const char* _q2700 = T812::_m16310(buff);
_m9881->setMessageId(_q2700);
delete _q2700;
continue;
}
if (_m2699 == 1) {
const char* _d2701 = T812::_m16310(buff);
_m9881->setRequestId(_d2701);
delete _d2701;
continue;
}
if (_m2699 == 3) {
_m9881->setGetGamesStatus((GetGamesStatus*)T812::readObject(this, buff));
continue;
}
if (_m2699 == 4) {
std::vector<NGame*>* _l9887 = 0;
unsigned char _h9888 = buff->_m16314();
if (_h9888 != T809::_g15500) {
buff->_m16315();
int _q9889 = buff->_m16316();
_l9887 = new std::vector<NGame*>();
for (unsigned int _q2705 = 0; _q2705 < (unsigned int)_q9889; _q2705++) {
_l9887->push_back((NGame*)T812::readObject(this, buff));
}
}
_m9881->setGames(_l9887);
continue;
}
T812::_m16311(buff);
}
return _m9881;
}

Serializable* T818::_m16252(T811* _h8377) {
GetGamesRequest* _e9892 = new GetGamesRequest();
short _g8379 = T812::_m16309(_h8377);
for (unsigned int _f2708 = 0; _f2708 < (unsigned int)_g8379; _f2708++) {
short _o2709 = T812::_m16309(_h8377);
if (_o2709 == 0) {
const char* _c2710 = T812::_m16310(_h8377);
_e9892->setMessageId(_c2710);
delete _c2710;
continue;
}
if (_o2709 == 1) {
const char* _s2711 = T812::_m16310(_h8377);
_e9892->setRequestId(_s2711);
delete _s2711;
continue;
}
if (_o2709 == 3) {
_e9892->setDbQuery((NuggetaQuery*)T812::readObject(this, _h8377));
continue;
}
T812::_m16311(_h8377);
}
return _e9892;
}

Serializable* T818::_m16253(T811* buff) {
SaveAsGhostResponse* _g9899 = new SaveAsGhostResponse();
short _c2713 = T812::_m16309(buff);
for (unsigned int _i2714 = 0; _i2714 < (unsigned int)_c2713; _i2714++) {
short _u2715 = T812::_m16309(buff);
if (_u2715 == 0) {
const char* _u2716 = T812::_m16310(buff);
_g9899->setMessageId(_u2716);
delete _u2716;
continue;
}
if (_u2715 == 1) {
const char* _n2717 = T812::_m16310(buff);
_g9899->setRequestId(_n2717);
delete _n2717;
continue;
}
if (_u2715 == 3) {
_g9899->setSaveAsGhostStatus((SaveAsGhostStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _g9899;
}

Serializable* T818::_m16254(T811* buff) {
SaveAsGhostRequest* _t9906 = new SaveAsGhostRequest();
short _l2719 = T812::_m16309(buff);
for (unsigned int _n2720 = 0; _n2720 < (unsigned int)_l2719; _n2720++) {
short _c2721 = T812::_m16309(buff);
if (_c2721 == 0) {
const char* _q2722 = T812::_m16310(buff);
_t9906->setMessageId(_q2722);
delete _q2722;
continue;
}
if (_c2721 == 1) {
const char* _j2723 = T812::_m16310(buff);
_t9906->setRequestId(_j2723);
delete _j2723;
continue;
}
if (_c2721 == 3) {
_t9906->setGame((NGame*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _t9906;
}

Serializable* T818::_m16255(T811* _q8383) {
GetGhostsResponse* _t9913 = new GetGhostsResponse();
short _w8385 = T812::_m16309(_q8383);
for (unsigned int _l2726 = 0; _l2726 < (unsigned int)_w8385; _l2726++) {
short _f2727 = T812::_m16309(_q8383);
if (_f2727 == 0) {
const char* _u2728 = T812::_m16310(_q8383);
_t9913->setMessageId(_u2728);
delete _u2728;
continue;
}
if (_f2727 == 1) {
const char* _f2729 = T812::_m16310(_q8383);
_t9913->setRequestId(_f2729);
delete _f2729;
continue;
}
if (_f2727 == 3) {
_t9913->setGetGhostsStatus((GetGhostsStatus*)T812::readObject(this, _q8383));
continue;
}
if (_f2727 == 4) {
std::vector<NGame*>* _q9919 = 0;
unsigned char _t9920 = _q8383->_m16314();
if (_t9920 != T809::_g15500) {
_q8383->_m16315();
int _g9921 = _q8383->_m16316();
_q9919 = new std::vector<NGame*>();
for (unsigned int _v2733 = 0; _v2733 < (unsigned int)_g9921; _v2733++) {
_q9919->push_back((NGame*)T812::readObject(this, _q8383));
}
}
_t9913->setGhosts(_q9919);
continue;
}
T812::_m16311(_q8383);
}
return _t9913;
}

Serializable* T818::_m16256(T811* buff) {
GetGhostsRequest* _j9924 = new GetGhostsRequest();
short _d2735 = T812::_m16309(buff);
for (unsigned int _y2736 = 0; _y2736 < (unsigned int)_d2735; _y2736++) {
short _q2737 = T812::_m16309(buff);
if (_q2737 == 0) {
const char* _t2738 = T812::_m16310(buff);
_j9924->setMessageId(_t2738);
delete _t2738;
continue;
}
if (_q2737 == 1) {
const char* _p2739 = T812::_m16310(buff);
_j9924->setRequestId(_p2739);
delete _p2739;
continue;
}
if (_q2737 == 3) {
_j9924->setDbQuery((NuggetaQuery*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _j9924;
}

Serializable* T818::_m16257(T811* buff) {
LoadGhostResponse* _r9931 = new LoadGhostResponse();
short _k2741 = T812::_m16309(buff);
for (unsigned int _f2742 = 0; _f2742 < (unsigned int)_k2741; _f2742++) {
short _s2743 = T812::_m16309(buff);
if (_s2743 == 0) {
const char* _x2744 = T812::_m16310(buff);
_r9931->setMessageId(_x2744);
delete _x2744;
continue;
}
if (_s2743 == 1) {
const char* _p2745 = T812::_m16310(buff);
_r9931->setRequestId(_p2745);
delete _p2745;
continue;
}
if (_s2743 == 3) {
_r9931->setLoadGhostStatus((LoadGhostStatus*)T812::readObject(this, buff));
continue;
}
if (_s2743 == 4) {
_r9931->setGame((NGame*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _r9931;
}

Serializable* T818::_m16258(T811* _g8389) {
LoadGhostRequest* _l9938 = new LoadGhostRequest();
short _q8391 = T812::_m16309(_g8389);
for (unsigned int _e2748 = 0; _e2748 < (unsigned int)_q8391; _e2748++) {
short _n2749 = T812::_m16309(_g8389);
if (_n2749 == 0) {
const char* _q2750 = T812::_m16310(_g8389);
_l9938->setMessageId(_q2750);
delete _q2750;
continue;
}
if (_n2749 == 1) {
const char* _r2751 = T812::_m16310(_g8389);
_l9938->setRequestId(_r2751);
delete _r2751;
continue;
}
if (_n2749 == 3) {
const char* _f2752 = T812::_m16310(_g8389);
_l9938->setGameId(_f2752);
delete _f2752;
continue;
}
T812::_m16311(_g8389);
}
return _l9938;
}

Serializable* T818::_m16259(T811* buff) {
SendGameChatResponse* _k9946 = new SendGameChatResponse();
short _h2754 = T812::_m16309(buff);
for (unsigned int _z2755 = 0; _z2755 < (unsigned int)_h2754; _z2755++) {
short _i2756 = T812::_m16309(buff);
if (_i2756 == 0) {
const char* _o2757 = T812::_m16310(buff);
_k9946->setMessageId(_o2757);
delete _o2757;
continue;
}
if (_i2756 == 1) {
const char* _s2758 = T812::_m16310(buff);
_k9946->setRequestId(_s2758);
delete _s2758;
continue;
}
if (_i2756 == 3) {
_k9946->setSendGameChatStatus((SendGameChatStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _k9946;
}

Serializable* T818::_m16260(T811* _h8395) {
SendGameChatRequest* _f9953 = new SendGameChatRequest();
short _g8397 = T812::_m16309(_h8395);
for (unsigned int _t2761 = 0; _t2761 < (unsigned int)_g8397; _t2761++) {
short _s2762 = T812::_m16309(_h8395);
if (_s2762 == 0) {
const char* _p2763 = T812::_m16310(_h8395);
_f9953->setMessageId(_p2763);
delete _p2763;
continue;
}
if (_s2762 == 1) {
const char* _x2764 = T812::_m16310(_h8395);
_f9953->setRequestId(_x2764);
delete _x2764;
continue;
}
if (_s2762 == 3) {
const char* _w2765 = T812::_m16310(_h8395);
_f9953->setGameId(_w2765);
delete _w2765;
continue;
}
if (_s2762 == 4) {
const char* _w2766 = T812::_m16310(_h8395);
_f9953->setMessage(_w2766);
delete _w2766;
continue;
}
T812::_m16311(_h8395);
}
return _f9953;
}

Serializable* T818::_m16261(T811* buff) {
SendGameChatToPlayerRequest* _j9962 = new SendGameChatToPlayerRequest();
short _w2768 = T812::_m16309(buff);
for (unsigned int _v2769 = 0; _v2769 < (unsigned int)_w2768; _v2769++) {
short _v2770 = T812::_m16309(buff);
if (_v2770 == 0) {
const char* _d2771 = T812::_m16310(buff);
_j9962->setMessageId(_d2771);
delete _d2771;
continue;
}
if (_v2770 == 1) {
const char* _e2772 = T812::_m16310(buff);
_j9962->setRequestId(_e2772);
delete _e2772;
continue;
}
if (_v2770 == 3) {
const char* _e2773 = T812::_m16310(buff);
_j9962->setGameId(_e2773);
delete _e2773;
continue;
}
if (_v2770 == 4) {
const char* _m2774 = T812::_m16310(buff);
_j9962->setPlayerId(_m2774);
delete _m2774;
continue;
}
if (_v2770 == 5) {
const char* _h2775 = T812::_m16310(buff);
_j9962->setMessage(_h2775);
delete _h2775;
continue;
}
T812::_m16311(buff);
}
return _j9962;
}

Serializable* T818::_m16262(T811* buff) {
SendGameChatToPlayerListRequest* _u9972 = new SendGameChatToPlayerListRequest();
short _v2777 = T812::_m16309(buff);
for (unsigned int _w2778 = 0; _w2778 < (unsigned int)_v2777; _w2778++) {
short _z2779 = T812::_m16309(buff);
if (_z2779 == 0) {
const char* _t2780 = T812::_m16310(buff);
_u9972->setMessageId(_t2780);
delete _t2780;
continue;
}
if (_z2779 == 1) {
const char* _v2781 = T812::_m16310(buff);
_u9972->setRequestId(_v2781);
delete _v2781;
continue;
}
if (_z2779 == 3) {
const char* _h2782 = T812::_m16310(buff);
_u9972->setGameId(_h2782);
delete _h2782;
continue;
}
if (_z2779 == 4) {
const char* _b2783 = T812::_m16310(buff);
_u9972->setMessage(_b2783);
delete _b2783;
continue;
}
T812::_m16311(buff);
}
return _u9972;
}

Serializable* T818::_m16263(T811* _k8401) {
GetStorablesResponse* _x9981 = new GetStorablesResponse();
short _b8403 = T812::_m16309(_k8401);
for (unsigned int _i2786 = 0; _i2786 < (unsigned int)_b8403; _i2786++) {
short _d2787 = T812::_m16309(_k8401);
if (_d2787 == 0) {
const char* _x2788 = T812::_m16310(_k8401);
_x9981->setMessageId(_x2788);
delete _x2788;
continue;
}
if (_d2787 == 1) {
const char* _v2789 = T812::_m16310(_k8401);
_x9981->setRequestId(_v2789);
delete _v2789;
continue;
}
if (_d2787 == 3) {
_x9981->setGetStorablesStatus((GetStorablesStatus*)T812::readObject(this, _k8401));
continue;
}
if (_d2787 == 4) {
std::vector<Storable*>* _n9987 = 0;
unsigned char _c9988 = _k8401->_m16314();
if (_c9988 != T809::_g15500) {
_k8401->_m16315();
int _s9989 = _k8401->_m16316();
_n9987 = new std::vector<Storable*>();
for (unsigned int _s2793 = 0; _s2793 < (unsigned int)_s9989; _s2793++) {
_n9987->push_back((Storable*)T812::readObject(this, _k8401));
}
}
_x9981->setStorables(_n9987);
continue;
}
T812::_m16311(_k8401);
}
return _x9981;
}

Serializable* T818::_m16264(T811* buff) {
GetStorablesRequest* _o9992 = new GetStorablesRequest();
short _p2795 = T812::_m16309(buff);
for (unsigned int _e2796 = 0; _e2796 < (unsigned int)_p2795; _e2796++) {
short _v2797 = T812::_m16309(buff);
if (_v2797 == 0) {
const char* _e2798 = T812::_m16310(buff);
_o9992->setMessageId(_e2798);
delete _e2798;
continue;
}
if (_v2797 == 1) {
const char* _x2799 = T812::_m16310(buff);
_o9992->setRequestId(_x2799);
delete _x2799;
continue;
}
if (_v2797 == 3) {
_o9992->setDbQuery((NuggetaQuery*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _o9992;
}

Serializable* T818::_m16265(T811* buff) {
SaveStorableResponse* _p9999 = new SaveStorableResponse();
short _j2801 = T812::_m16309(buff);
for (unsigned int _g2802 = 0; _g2802 < (unsigned int)_j2801; _g2802++) {
short _u2803 = T812::_m16309(buff);
if (_u2803 == 0) {
const char* _s2804 = T812::_m16310(buff);
_p9999->setMessageId(_s2804);
delete _s2804;
continue;
}
if (_u2803 == 1) {
const char* _d2805 = T812::_m16310(buff);
_p9999->setRequestId(_d2805);
delete _d2805;
continue;
}
if (_u2803 == 3) {
_p9999->setSaveStorableStatus((SaveStorableStatus*)T812::readObject(this, buff));
continue;
}
if (_u2803 == 4) {
const char* _n2806 = T812::_m16310(buff);
_p9999->setStoreId(_n2806);
delete _n2806;
continue;
}
T812::_m16311(buff);
}
return _p9999;
}

Serializable* T818::_m16266(T811* buff) {
SaveStorableRequest* _w10007 = new SaveStorableRequest();
short _u2808 = T812::_m16309(buff);
for (unsigned int _x2809 = 0; _x2809 < (unsigned int)_u2808; _x2809++) {
short _y2810 = T812::_m16309(buff);
if (_y2810 == 0) {
const char* _m2811 = T812::_m16310(buff);
_w10007->setMessageId(_m2811);
delete _m2811;
continue;
}
if (_y2810 == 1) {
const char* _d2812 = T812::_m16310(buff);
_w10007->setRequestId(_d2812);
delete _d2812;
continue;
}
if (_y2810 == 3) {
_w10007->setStorable((Storable*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _w10007;
}

Serializable* T818::_m16267(T811* _h8407) {
NextPlayerTurnResponse* _c10014 = new NextPlayerTurnResponse();
short _r8409 = T812::_m16309(_h8407);
for (unsigned int _u2815 = 0; _u2815 < (unsigned int)_r8409; _u2815++) {
short _s2816 = T812::_m16309(_h8407);
if (_s2816 == 0) {
const char* _h2817 = T812::_m16310(_h8407);
_c10014->setMessageId(_h2817);
delete _h2817;
continue;
}
if (_s2816 == 1) {
const char* _t2818 = T812::_m16310(_h8407);
_c10014->setRequestId(_t2818);
delete _t2818;
continue;
}
if (_s2816 == 3) {
_c10014->setNextPlayerTurnStatus((NextPlayerTurnStatus*)T812::readObject(this, _h8407));
continue;
}
T812::_m16311(_h8407);
}
return _c10014;
}

Serializable* T818::_m16268(T811* buff) {
NextPlayerTurnRequest* _m10021 = new NextPlayerTurnRequest();
short _n2820 = T812::_m16309(buff);
for (unsigned int _p2821 = 0; _p2821 < (unsigned int)_n2820; _p2821++) {
short _e2822 = T812::_m16309(buff);
if (_e2822 == 0) {
const char* _u2823 = T812::_m16310(buff);
_m10021->setMessageId(_u2823);
delete _u2823;
continue;
}
if (_e2822 == 1) {
const char* _f2824 = T812::_m16310(buff);
_m10021->setRequestId(_f2824);
delete _f2824;
continue;
}
if (_e2822 == 3) {
const char* _y2825 = T812::_m16310(buff);
_m10021->setGameId(_y2825);
delete _y2825;
continue;
}
T812::_m16311(buff);
}
return _m10021;
}

Serializable* T818::_m16269(T811* buff) {
SetPlayerNameResponse* _j10029 = new SetPlayerNameResponse();
short _d2827 = T812::_m16309(buff);
for (unsigned int _k2828 = 0; _k2828 < (unsigned int)_d2827; _k2828++) {
short _l2829 = T812::_m16309(buff);
if (_l2829 == 0) {
const char* _l2830 = T812::_m16310(buff);
_j10029->setMessageId(_l2830);
delete _l2830;
continue;
}
if (_l2829 == 1) {
const char* _m2831 = T812::_m16310(buff);
_j10029->setRequestId(_m2831);
delete _m2831;
continue;
}
if (_l2829 == 3) {
_j10029->setSetPlayerNameStatus((SetPlayerNameStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _j10029;
}

Serializable* T818::_m16270(T811* _n8413) {
SetPlayerNameRequest* _f10036 = new SetPlayerNameRequest();
short _f2833 = T812::_m16309(_n8413);
for (unsigned int _s2834 = 0; _s2834 < (unsigned int)_f2833; _s2834++) {
short _m2835 = T812::_m16309(_n8413);
if (_m2835 == 0) {
const char* _e2836 = T812::_m16310(_n8413);
_f10036->setMessageId(_e2836);
delete _e2836;
continue;
}
if (_m2835 == 1) {
const char* _u2837 = T812::_m16310(_n8413);
_f10036->setRequestId(_u2837);
delete _u2837;
continue;
}
if (_m2835 == 3) {
const char* _i2838 = T812::_m16310(_n8413);
_f10036->setName(_i2838);
delete _i2838;
continue;
}
T812::_m16311(_n8413);
}
return _f10036;
}

Serializable* T818::_m16271(T811* buff) {
UpdateStorableResponse* _x10044 = new UpdateStorableResponse();
short _i8415 = T812::_m16309(buff);
for (unsigned int _u2841 = 0; _u2841 < (unsigned int)_i8415; _u2841++) {
short _t2842 = T812::_m16309(buff);
if (_t2842 == 0) {
const char* _m2843 = T812::_m16310(buff);
_x10044->setMessageId(_m2843);
delete _m2843;
continue;
}
if (_t2842 == 1) {
const char* _k2844 = T812::_m16310(buff);
_x10044->setRequestId(_k2844);
delete _k2844;
continue;
}
if (_t2842 == 3) {
_x10044->setUpdateStorableStatus((UpdateStorableStatus*)T812::readObject(this, buff));
continue;
}
if (_t2842 == 4) {
const char* _p2845 = T812::_m16310(buff);
_x10044->setStoreId(_p2845);
delete _p2845;
continue;
}
T812::_m16311(buff);
}
return _x10044;
}

Serializable* T818::_m16272(T811* buff) {
UpdateStorableRequest* _u10052 = new UpdateStorableRequest();
short _j2847 = T812::_m16309(buff);
for (unsigned int _i2848 = 0; _i2848 < (unsigned int)_j2847; _i2848++) {
short _j2849 = T812::_m16309(buff);
if (_j2849 == 0) {
const char* _c2850 = T812::_m16310(buff);
_u10052->setMessageId(_c2850);
delete _c2850;
continue;
}
if (_j2849 == 1) {
const char* _k2851 = T812::_m16310(buff);
_u10052->setRequestId(_k2851);
delete _k2851;
continue;
}
if (_j2849 == 3) {
_u10052->setStorable((Storable*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _u10052;
}

Serializable* T818::_m16273(T811* buff) {
RemoveStorableResponse* _z10059 = new RemoveStorableResponse();
short _s2853 = T812::_m16309(buff);
for (unsigned int _t2854 = 0; _t2854 < (unsigned int)_s2853; _t2854++) {
short _t2855 = T812::_m16309(buff);
if (_t2855 == 0) {
const char* _y2856 = T812::_m16310(buff);
_z10059->setMessageId(_y2856);
delete _y2856;
continue;
}
if (_t2855 == 1) {
const char* _m2857 = T812::_m16310(buff);
_z10059->setRequestId(_m2857);
delete _m2857;
continue;
}
if (_t2855 == 3) {
_z10059->setRemoveStorableStatus((RemoveStorableStatus*)T812::readObject(this, buff));
continue;
}
if (_t2855 == 4) {
const char* _q2858 = T812::_m16310(buff);
_z10059->setStoreId(_q2858);
delete _q2858;
continue;
}
T812::_m16311(buff);
}
return _z10059;
}

Serializable* T818::_m16274(T811* buff) {
RemoveStorableRequest* _d10067 = new RemoveStorableRequest();
short _e2860 = T812::_m16309(buff);
for (unsigned int _h8421 = 0; _h8421 < (unsigned int)_e2860; _h8421++) {
short _q2862 = T812::_m16309(buff);
if (_q2862 == 0) {
const char* _o2863 = T812::_m16310(buff);
_d10067->setMessageId(_o2863);
delete _o2863;
continue;
}
if (_q2862 == 1) {
const char* _k2864 = T812::_m16310(buff);
_d10067->setRequestId(_k2864);
delete _k2864;
continue;
}
if (_q2862 == 3) {
_d10067->setStorable((Storable*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _d10067;
}

Serializable* T818::_m16275(T811* _v8424) {
InviteThirdPartyFriendResponse* _k10074 = new InviteThirdPartyFriendResponse();
short _g2866 = T812::_m16309(_v8424);
for (unsigned int _l2867 = 0; _l2867 < (unsigned int)_g2866; _l2867++) {
short _x2868 = T812::_m16309(_v8424);
if (_x2868 == 0) {
const char* _n2869 = T812::_m16310(_v8424);
_k10074->setMessageId(_n2869);
delete _n2869;
continue;
}
if (_x2868 == 1) {
const char* _h2870 = T812::_m16310(_v8424);
_k10074->setRequestId(_h2870);
delete _h2870;
continue;
}
if (_x2868 == 3) {
_k10074->setInviteThirdPartyFriendStatus((InviteThirdPartyFriendStatus*)T812::readObject(this, _v8424));
continue;
}
if (_x2868 == 4) {
const char* _q2871 = T812::_m16310(_v8424);
_k10074->setThirdPartyId(_q2871);
delete _q2871;
continue;
}
T812::_m16311(_v8424);
}
return _k10074;
}

Serializable* T818::_m16276(T811* buff) {
InviteThirdPartyFriendRequest* _s10082 = new InviteThirdPartyFriendRequest();
short _x8426 = T812::_m16309(buff);
for (unsigned int _j2874 = 0; _j2874 < (unsigned int)_x8426; _j2874++) {
short _a2875 = T812::_m16309(buff);
if (_a2875 == 0) {
const char* _g2876 = T812::_m16310(buff);
_s10082->setMessageId(_g2876);
delete _g2876;
continue;
}
if (_a2875 == 1) {
const char* _v2877 = T812::_m16310(buff);
_s10082->setRequestId(_v2877);
delete _v2877;
continue;
}
if (_a2875 == 3) {
const char* _r2878 = T812::_m16310(buff);
_s10082->setThirdPartyId(_r2878);
delete _r2878;
continue;
}
if (_a2875 == 4) {
const char* _m2879 = T812::_m16310(buff);
_s10082->setTitle(_m2879);
delete _m2879;
continue;
}
if (_a2875 == 5) {
const char* _q2880 = T812::_m16310(buff);
_s10082->setInviteMessage(_q2880);
delete _q2880;
continue;
}
if (_a2875 == 6) {
const char* _c2881 = T812::_m16310(buff);
_s10082->setPictureUrl(_c2881);
delete _c2881;
continue;
}
if (_a2875 == 7) {
const char* _y2882 = T812::_m16310(buff);
_s10082->setLink(_y2882);
delete _y2882;
continue;
}
if (_a2875 == 8) {
_s10082->setThirdPartySource((ThirdPartySource*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _s10082;
}

Serializable* T818::_m16277(T811* _o8430) {
PublishThirdPartyMessageResponse* _l10094 = new PublishThirdPartyMessageResponse();
short _q8432 = T812::_m16309(_o8430);
for (unsigned int _i2885 = 0; _i2885 < (unsigned int)_q8432; _i2885++) {
short _h2886 = T812::_m16309(_o8430);
if (_h2886 == 0) {
const char* _c2887 = T812::_m16310(_o8430);
_l10094->setMessageId(_c2887);
delete _c2887;
continue;
}
if (_h2886 == 1) {
const char* _f2888 = T812::_m16310(_o8430);
_l10094->setRequestId(_f2888);
delete _f2888;
continue;
}
if (_h2886 == 3) {
_l10094->setPublishThirdPartyMessageStatus((PublishThirdPartyMessageStatus*)T812::readObject(this, _o8430));
continue;
}
T812::_m16311(_o8430);
}
return _l10094;
}

Serializable* T818::_m16278(T811* buff) {
PublishThirdPartyMessageRequest* _d10101 = new PublishThirdPartyMessageRequest();
short _k2890 = T812::_m16309(buff);
for (unsigned int _w2891 = 0; _w2891 < (unsigned int)_k2890; _w2891++) {
short _s2892 = T812::_m16309(buff);
if (_s2892 == 0) {
const char* _k2893 = T812::_m16310(buff);
_d10101->setMessageId(_k2893);
delete _k2893;
continue;
}
if (_s2892 == 1) {
const char* _l2894 = T812::_m16310(buff);
_d10101->setRequestId(_l2894);
delete _l2894;
continue;
}
if (_s2892 == 3) {
const char* _o2895 = T812::_m16310(buff);
_d10101->setTitle(_o2895);
delete _o2895;
continue;
}
if (_s2892 == 4) {
const char* _b2896 = T812::_m16310(buff);
_d10101->setMessage(_b2896);
delete _b2896;
continue;
}
if (_s2892 == 5) {
const char* _x2897 = T812::_m16310(buff);
_d10101->setPictureUrl(_x2897);
delete _x2897;
continue;
}
if (_s2892 == 6) {
const char* _e2898 = T812::_m16310(buff);
_d10101->setLink(_e2898);
delete _e2898;
continue;
}
if (_s2892 == 7) {
_d10101->setThirdPartySource((ThirdPartySource*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _d10101;
}

Serializable* T818::_m16279(T811* buff) {
ThirdPartyLoginResponse* _i10112 = new ThirdPartyLoginResponse();
short _n2900 = T812::_m16309(buff);
for (unsigned int _c2901 = 0; _c2901 < (unsigned int)_n2900; _c2901++) {
short _q2902 = T812::_m16309(buff);
if (_q2902 == 0) {
const char* _g2903 = T812::_m16310(buff);
_i10112->setMessageId(_g2903);
delete _g2903;
continue;
}
if (_q2902 == 1) {
const char* _f2904 = T812::_m16310(buff);
_i10112->setRequestId(_f2904);
delete _f2904;
continue;
}
if (_q2902 == 3) {
_i10112->setThirdPartyLoginStatus((ThirdPartyLoginStatus*)T812::readObject(this, buff));
continue;
}
if (_q2902 == 4) {
_i10112->setPlayer((NPlayer*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _i10112;
}

Serializable* T818::_m16280(T811* _y8436) {
ThirdPartyLoginRequest* _m10119 = new ThirdPartyLoginRequest();
short _i8438 = T812::_m16309(_y8436);
for (unsigned int _y2907 = 0; _y2907 < (unsigned int)_i8438; _y2907++) {
short _n2908 = T812::_m16309(_y8436);
if (_n2908 == 0) {
const char* _y2909 = T812::_m16310(_y8436);
_m10119->setMessageId(_y2909);
delete _y2909;
continue;
}
if (_n2908 == 1) {
const char* _u2910 = T812::_m16310(_y8436);
_m10119->setRequestId(_u2910);
delete _u2910;
continue;
}
if (_n2908 == 3) {
_m10119->setThirdPartySource((ThirdPartySource*)T812::readObject(this, _y8436));
continue;
}
T812::_m16311(_y8436);
}
return _m10119;
}

Serializable* T818::_m16281(T811* buff) {
ThirdPartyLoginWithTokenRequest* _z10126 = new ThirdPartyLoginWithTokenRequest();
short _b2912 = T812::_m16309(buff);
for (unsigned int _q2913 = 0; _q2913 < (unsigned int)_b2912; _q2913++) {
short _c2914 = T812::_m16309(buff);
if (_c2914 == 0) {
const char* _e2915 = T812::_m16310(buff);
_z10126->setMessageId(_e2915);
delete _e2915;
continue;
}
if (_c2914 == 1) {
const char* _f2916 = T812::_m16310(buff);
_z10126->setRequestId(_f2916);
delete _f2916;
continue;
}
if (_c2914 == 3) {
_z10126->setThirdPartySource((ThirdPartySource*)T812::readObject(this, buff));
continue;
}
if (_c2914 == 4) {
const char* _h2917 = T812::_m16310(buff);
_z10126->setAccessToken(_h2917);
delete _h2917;
continue;
}
T812::_m16311(buff);
}
return _z10126;
}

Serializable* T818::_m16282(T811* _f8442) {
SaveGameResponse* _y10134 = new SaveGameResponse();
short _p8444 = T812::_m16309(_f8442);
for (unsigned int _m2920 = 0; _m2920 < (unsigned int)_p8444; _m2920++) {
short _q2921 = T812::_m16309(_f8442);
if (_q2921 == 0) {
const char* _e2922 = T812::_m16310(_f8442);
_y10134->setMessageId(_e2922);
delete _e2922;
continue;
}
if (_q2921 == 1) {
const char* _z2923 = T812::_m16310(_f8442);
_y10134->setRequestId(_z2923);
delete _z2923;
continue;
}
if (_q2921 == 3) {
_y10134->setSaveGameStatus((SaveGameStatus*)T812::readObject(this, _f8442));
continue;
}
if (_q2921 == 4) {
const char* _r2924 = T812::_m16310(_f8442);
_y10134->setGameId(_r2924);
delete _r2924;
continue;
}
T812::_m16311(_f8442);
}
return _y10134;
}

Serializable* T818::_m16283(T811* buff) {
SaveGameRequest* _e10142 = new SaveGameRequest();
short _w2926 = T812::_m16309(buff);
for (unsigned int _g2927 = 0; _g2927 < (unsigned int)_w2926; _g2927++) {
short _a2928 = T812::_m16309(buff);
if (_a2928 == 0) {
const char* _w2929 = T812::_m16310(buff);
_e10142->setMessageId(_w2929);
delete _w2929;
continue;
}
if (_a2928 == 1) {
const char* _q2930 = T812::_m16310(buff);
_e10142->setRequestId(_q2930);
delete _q2930;
continue;
}
if (_a2928 == 3) {
_e10142->setGame((NGame*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _e10142;
}

Serializable* T818::_m16284(T811* buff) {
LoadGameResponse* _e10149 = new LoadGameResponse();
short _f2932 = T812::_m16309(buff);
for (unsigned int _b2933 = 0; _b2933 < (unsigned int)_f2932; _b2933++) {
short _y2934 = T812::_m16309(buff);
if (_y2934 == 0) {
const char* _x2935 = T812::_m16310(buff);
_e10149->setMessageId(_x2935);
delete _x2935;
continue;
}
if (_y2934 == 1) {
const char* _j2936 = T812::_m16310(buff);
_e10149->setRequestId(_j2936);
delete _j2936;
continue;
}
if (_y2934 == 3) {
_e10149->setLoadGameStatus((LoadGameStatus*)T812::readObject(this, buff));
continue;
}
if (_y2934 == 4) {
_e10149->setGame((NGame*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _e10149;
}

Serializable* T818::_m16285(T811* _p8448) {
LoadGameRequest* _f10156 = new LoadGameRequest();
short _s8450 = T812::_m16309(_p8448);
for (unsigned int _k2939 = 0; _k2939 < (unsigned int)_s8450; _k2939++) {
short _p2940 = T812::_m16309(_p8448);
if (_p2940 == 0) {
const char* _h2941 = T812::_m16310(_p8448);
_f10156->setMessageId(_h2941);
delete _h2941;
continue;
}
if (_p2940 == 1) {
const char* _p2942 = T812::_m16310(_p8448);
_f10156->setRequestId(_p2942);
delete _p2942;
continue;
}
if (_p2940 == 3) {
const char* _x2943 = T812::_m16310(_p8448);
_f10156->setGameId(_x2943);
delete _x2943;
continue;
}
T812::_m16311(_p8448);
}
return _f10156;
}

Serializable* T818::_m16286(T811* buff) {
SavePlayerStorableResponse* _t10164 = new SavePlayerStorableResponse();
short _q2945 = T812::_m16309(buff);
for (unsigned int _b2946 = 0; _b2946 < (unsigned int)_q2945; _b2946++) {
short _y2947 = T812::_m16309(buff);
if (_y2947 == 0) {
const char* _j2948 = T812::_m16310(buff);
_t10164->setMessageId(_j2948);
delete _j2948;
continue;
}
if (_y2947 == 1) {
const char* _v2949 = T812::_m16310(buff);
_t10164->setRequestId(_v2949);
delete _v2949;
continue;
}
if (_y2947 == 3) {
_t10164->setSavePlayerStorableStatus((SavePlayerStorableStatus*)T812::readObject(this, buff));
continue;
}
if (_y2947 == 4) {
const char* _q2950 = T812::_m16310(buff);
_t10164->setStoreId(_q2950);
delete _q2950;
continue;
}
T812::_m16311(buff);
}
return _t10164;
}

Serializable* T818::_m16287(T811* _h8454) {
SavePlayerStorableRequest* _y10172 = new SavePlayerStorableRequest();
short _l2952 = T812::_m16309(_h8454);
for (unsigned int _p2953 = 0; _p2953 < (unsigned int)_l2952; _p2953++) {
short _d2954 = T812::_m16309(_h8454);
if (_d2954 == 0) {
const char* _z2955 = T812::_m16310(_h8454);
_y10172->setMessageId(_z2955);
delete _z2955;
continue;
}
if (_d2954 == 1) {
const char* _p2956 = T812::_m16310(_h8454);
_y10172->setRequestId(_p2956);
delete _p2956;
continue;
}
if (_d2954 == 3) {
_y10172->setStorable((Storable*)T812::readObject(this, _h8454));
continue;
}
T812::_m16311(_h8454);
}
return _y10172;
}

Serializable* T818::_m16288(T811* buff) {
UpdatePlayerStorableResponse* _w10179 = new UpdatePlayerStorableResponse();
short _r8456 = T812::_m16309(buff);
for (unsigned int _w2959 = 0; _w2959 < (unsigned int)_r8456; _w2959++) {
short _e2960 = T812::_m16309(buff);
if (_e2960 == 0) {
const char* _x2961 = T812::_m16310(buff);
_w10179->setMessageId(_x2961);
delete _x2961;
continue;
}
if (_e2960 == 1) {
const char* _i2962 = T812::_m16310(buff);
_w10179->setRequestId(_i2962);
delete _i2962;
continue;
}
if (_e2960 == 3) {
_w10179->setUpdatePlayerStorableStatus((UpdatePlayerStorableStatus*)T812::readObject(this, buff));
continue;
}
if (_e2960 == 4) {
const char* _b2963 = T812::_m16310(buff);
_w10179->setStoreId(_b2963);
delete _b2963;
continue;
}
T812::_m16311(buff);
}
return _w10179;
}

Serializable* T818::_m16289(T811* buff) {
UpdatePlayerStorableRequest* _v10187 = new UpdatePlayerStorableRequest();
short _u2965 = T812::_m16309(buff);
for (unsigned int _b2966 = 0; _b2966 < (unsigned int)_u2965; _b2966++) {
short _c2967 = T812::_m16309(buff);
if (_c2967 == 0) {
const char* _r2968 = T812::_m16310(buff);
_v10187->setMessageId(_r2968);
delete _r2968;
continue;
}
if (_c2967 == 1) {
const char* _m2969 = T812::_m16310(buff);
_v10187->setRequestId(_m2969);
delete _m2969;
continue;
}
if (_c2967 == 3) {
_v10187->setStorable((Storable*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _v10187;
}

Serializable* T818::_m16290(T811* _c8460) {
RemovePlayerStorableResponse* _f10194 = new RemovePlayerStorableResponse();
short _d8462 = T812::_m16309(_c8460);
for (unsigned int _u2972 = 0; _u2972 < (unsigned int)_d8462; _u2972++) {
short _r2973 = T812::_m16309(_c8460);
if (_r2973 == 0) {
const char* _g2974 = T812::_m16310(_c8460);
_f10194->setMessageId(_g2974);
delete _g2974;
continue;
}
if (_r2973 == 1) {
const char* _r2975 = T812::_m16310(_c8460);
_f10194->setRequestId(_r2975);
delete _r2975;
continue;
}
if (_r2973 == 3) {
_f10194->setRemovePlayerStorableStatus((RemovePlayerStorableStatus*)T812::readObject(this, _c8460));
continue;
}
if (_r2973 == 4) {
const char* _t2976 = T812::_m16310(_c8460);
_f10194->setStoreId(_t2976);
delete _t2976;
continue;
}
T812::_m16311(_c8460);
}
return _f10194;
}

Serializable* T818::_m16291(T811* buff) {
RemovePlayerStorableRequest* _q10202 = new RemovePlayerStorableRequest();
short _r2978 = T812::_m16309(buff);
for (unsigned int _t2979 = 0; _t2979 < (unsigned int)_r2978; _t2979++) {
short _g2980 = T812::_m16309(buff);
if (_g2980 == 0) {
const char* _o2981 = T812::_m16310(buff);
_q10202->setMessageId(_o2981);
delete _o2981;
continue;
}
if (_g2980 == 1) {
const char* _u2982 = T812::_m16310(buff);
_q10202->setRequestId(_u2982);
delete _u2982;
continue;
}
if (_g2980 == 3) {
_q10202->setStorable((Storable*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _q10202;
}

Serializable* T818::_m16292(T811* _v8466) {
GetPlayerStorablesResponse* _f10209 = new GetPlayerStorablesResponse();
short _l8468 = T812::_m16309(_v8466);
for (unsigned int _d2985 = 0; _d2985 < (unsigned int)_l8468; _d2985++) {
short _j2986 = T812::_m16309(_v8466);
if (_j2986 == 0) {
const char* _r2987 = T812::_m16310(_v8466);
_f10209->setMessageId(_r2987);
delete _r2987;
continue;
}
if (_j2986 == 1) {
const char* _f2988 = T812::_m16310(_v8466);
_f10209->setRequestId(_f2988);
delete _f2988;
continue;
}
if (_j2986 == 3) {
_f10209->setGetPlayerStorablesStatus((GetPlayerStorablesStatus*)T812::readObject(this, _v8466));
continue;
}
if (_j2986 == 4) {
std::vector<Storable*>* _u10215 = 0;
unsigned char _p10216 = _v8466->_m16314();
if (_p10216 != T809::_g15500) {
_v8466->_m16315();
int _d10217 = _v8466->_m16316();
_u10215 = new std::vector<Storable*>();
for (unsigned int _h2992 = 0; _h2992 < (unsigned int)_d10217; _h2992++) {
_u10215->push_back((Storable*)T812::readObject(this, _v8466));
}
}
_f10209->setStorables(_u10215);
continue;
}
T812::_m16311(_v8466);
}
return _f10209;
}

Serializable* T818::_m16293(T811* buff) {
GetPlayerStorablesRequest* _x10220 = new GetPlayerStorablesRequest();
short _h2994 = T812::_m16309(buff);
for (unsigned int _l2995 = 0; _l2995 < (unsigned int)_h2994; _l2995++) {
short _x2996 = T812::_m16309(buff);
if (_x2996 == 0) {
const char* _l2997 = T812::_m16310(buff);
_x10220->setMessageId(_l2997);
delete _l2997;
continue;
}
if (_x2996 == 1) {
const char* _v2998 = T812::_m16310(buff);
_x10220->setRequestId(_v2998);
delete _v2998;
continue;
}
if (_x2996 == 3) {
_x10220->setDbQuery((NuggetaQuery*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _x10220;
}

Serializable* T818::_m16294(T811* buff) {
PauseSessionMonitoringResponse* _b10227 = new PauseSessionMonitoringResponse();
short _k3000 = T812::_m16309(buff);
for (unsigned int _c3001 = 0; _c3001 < (unsigned int)_k3000; _c3001++) {
short _a3002 = T812::_m16309(buff);
if (_a3002 == 0) {
const char* _q3003 = T812::_m16310(buff);
_b10227->setMessageId(_q3003);
delete _q3003;
continue;
}
if (_a3002 == 1) {
const char* _b3004 = T812::_m16310(buff);
_b10227->setRequestId(_b3004);
delete _b3004;
continue;
}
if (_a3002 == 3) {
_b10227->setPauseSessionMonitoringStatus((PauseSessionMonitoringStatus*)T812::readObject(this, buff));
continue;
}
T812::_m16311(buff);
}
return _b10227;
}

Serializable* T818::_m16295(T811* buff) {
PauseSessionMonitoringRequest* _b10234 = new PauseSessionMonitoringRequest();
short _f3006 = T812::_m16309(buff);
for (unsigned int _b3007 = 0; _b3007 < (unsigned int)_f3006; _b3007++) {
short _c3008 = T812::_m16309(buff);
if (_c3008 == 0) {
const char* _y3009 = T812::_m16310(buff);
_b10234->setMessageId(_y3009);
delete _y3009;
continue;
}
if (_c3008 == 1) {
const char* _v3010 = T812::_m16310(buff);
_b10234->setRequestId(_v3010);
delete _v3010;
continue;
}
T812::_m16311(buff);
}
return _b10234;
}

Serializable* T818::_m16296(T811* _q8472) {
ResumeSessionMonitoringResponse* _m10241 = new ResumeSessionMonitoringResponse();
short _r8474 = T812::_m16309(_q8472);
for (unsigned int _o3013 = 0; _o3013 < (unsigned int)_r8474; _o3013++) {
short _o3014 = T812::_m16309(_q8472);
if (_o3014 == 0) {
const char* _r3015 = T812::_m16310(_q8472);
_m10241->setMessageId(_r3015);
delete _r3015;
continue;
}
if (_o3014 == 1) {
const char* _c3016 = T812::_m16310(_q8472);
_m10241->setRequestId(_c3016);
delete _c3016;
continue;
}
if (_o3014 == 3) {
_m10241->setResumeSessionMonitoringStatus((ResumeSessionMonitoringStatus*)T812::readObject(this, _q8472));
continue;
}
T812::_m16311(_q8472);
}
return _m10241;
}

Serializable* T818::_m16297(T811* buff) {
ResumeSessionMonitoringRequest* _j10248 = new ResumeSessionMonitoringRequest();
short _u3018 = T812::_m16309(buff);
for (unsigned int _m3019 = 0; _m3019 < (unsigned int)_u3018; _m3019++) {
short _o3020 = T812::_m16309(buff);
if (_o3020 == 0) {
const char* _o3021 = T812::_m16310(buff);
_j10248->setMessageId(_o3021);
delete _o3021;
continue;
}
if (_o3020 == 1) {
const char* _r3022 = T812::_m16310(buff);
_j10248->setRequestId(_r3022);
delete _r3022;
continue;
}
T812::_m16311(buff);
}
return _j10248;
}

Serializable* T818::_m16298(T811* buff) {
PublishFriendThirdPartyMessageResponse* _y10255 = new PublishFriendThirdPartyMessageResponse();
short _y3024 = T812::_m16309(buff);
for (unsigned int _g3025 = 0; _g3025 < (unsigned int)_y3024; _g3025++) {
short _c3026 = T812::_m16309(buff);
if (_c3026 == 0) {
const char* _i3027 = T812::_m16310(buff);
_y10255->setMessageId(_i3027);
delete _i3027;
continue;
}
if (_c3026 == 1) {
const char* _b3028 = T812::_m16310(buff);
_y10255->setRequestId(_b3028);
delete _b3028;
continue;
}
if (_c3026 == 3) {
_y10255->setPublishFriendThirdPartyMessageStatus((PublishFriendThirdPartyMessageStatus*)T812::readObject(this, buff));
continue;
}
if (_c3026 == 4) {
const char* _h3029 = T812::_m16310(buff);
_y10255->setThirdPartyId(_h3029);
delete _h3029;
continue;
}
T812::_m16311(buff);
}
return _y10255;
}

Serializable* T818::_m16299(T811* _w8478) {
PublishFriendThirdPartyMessageRequest* _t10263 = new PublishFriendThirdPartyMessageRequest();
short _n8480 = T812::_m16309(_w8478);
for (unsigned int _w3032 = 0; _w3032 < (unsigned int)_n8480; _w3032++) {
short _k3033 = T812::_m16309(_w8478);
if (_k3033 == 0) {
const char* _l3034 = T812::_m16310(_w8478);
_t10263->setMessageId(_l3034);
delete _l3034;
continue;
}
if (_k3033 == 1) {
const char* _t3035 = T812::_m16310(_w8478);
_t10263->setRequestId(_t3035);
delete _t3035;
continue;
}
if (_k3033 == 3) {
const char* _u3036 = T812::_m16310(_w8478);
_t10263->setTitle(_u3036);
delete _u3036;
continue;
}
if (_k3033 == 4) {
const char* _k3037 = T812::_m16310(_w8478);
_t10263->setMessage(_k3037);
delete _k3037;
continue;
}
if (_k3033 == 5) {
const char* _m10271 = T812::_m16310(_w8478);
_t10263->setPictureUrl(_m10271);
delete _m10271;
continue;
}
if (_k3033 == 6) {
const char* _y10272 = T812::_m16310(_w8478);
_t10263->setLink(_y10272);
delete _y10272;
continue;
}
if (_k3033 == 7) {
const char* _o10273 = T812::_m16310(_w8478);
_t10263->setThirdPartyId(_o10273);
delete _o10273;
continue;
}
if (_k3033 == 8) {
_t10263->setThirdPartySource((ThirdPartySource*)T812::readObject(this, _w8478));
continue;
}
T812::_m16311(_w8478);
}
return _t10263;
}

Serializable* T818::_m16300(T811* buff) {
InvitePlayerResponse* _r10275 = new InvitePlayerResponse();
short _t3042 = T812::_m16309(buff);
for (unsigned int _s3043 = 0; _s3043 < (unsigned int)_t3042; _s3043++) {
short _f3044 = T812::_m16309(buff);
if (_f3044 == 0) {
const char* _a3045 = T812::_m16310(buff);
_r10275->setMessageId(_a3045);
delete _a3045;
continue;
}
if (_f3044 == 1) {
const char* _d3046 = T812::_m16310(buff);
_r10275->setRequestId(_d3046);
delete _d3046;
continue;
}
if (_f3044 == 3) {
_r10275->setInvitePlayerStatus((InvitePlayerStatus*)T812::readObject(this, buff));
continue;
}
if (_f3044 == 4) {
const char* _m3047 = T812::_m16310(buff);
_r10275->setInvitationId(_m3047);
delete _m3047;
continue;
}
T812::_m16311(buff);
}
return _r10275;
}

Serializable* T818::_m16301(T811* _n8484) {
InvitePlayerRequest* _y10283 = new InvitePlayerRequest();
short _k8486 = T812::_m16309(_n8484);
for (unsigned int _e3050 = 0; _e3050 < (unsigned int)_k8486; _e3050++) {
short _f3051 = T812::_m16309(_n8484);
if (_f3051 == 0) {
const char* _v3052 = T812::_m16310(_n8484);
_y10283->setMessageId(_v3052);
delete _v3052;
continue;
}
if (_f3051 == 1) {
const char* _s3053 = T812::_m16310(_n8484);
_y10283->setRequestId(_s3053);
delete _s3053;
continue;
}
if (_f3051 == 3) {
const char* _d3054 = T812::_m16310(_n8484);
_y10283->setPlayerId(_d3054);
delete _d3054;
continue;
}
if (_f3051 == 4) {
_y10283->setInvitationContent((Message*)T812::readObject(this, _n8484));
continue;
}
if (_f3051 == 5) {
_y10283->setInvitation((NInvitation*)T812::readObject(this, _n8484));
continue;
}
T812::_m16311(_n8484);
}
return _y10283;
}

Serializable* T818::_m16302(T811* buff) {
GetInvitationsResponse* _t10291 = new GetInvitationsResponse();
short _y3056 = T812::_m16309(buff);
for (unsigned int _w3057 = 0; _w3057 < (unsigned int)_y3056; _w3057++) {
short _i3058 = T812::_m16309(buff);
if (_i3058 == 0) {
const char* _o3059 = T812::_m16310(buff);
_t10291->setMessageId(_o3059);
delete _o3059;
continue;
}
if (_i3058 == 1) {
const char* _u3060 = T812::_m16310(buff);
_t10291->setRequestId(_u3060);
delete _u3060;
continue;
}
if (_i3058 == 3) {
_t10291->setGetInvitationsStatus((GetInvitationsStatus*)T812::readObject(this, buff));
continue;
}
if (_i3058 == 4) {
std::vector<NInvitation*>* _e10297 = 0;
unsigned char _q10298 = buff->_m16314();
if (_q10298 != T809::_g15500) {
buff->_m16315();
int _d10299 = buff->_m16316();
_e10297 = new std::vector<NInvitation*>();
for (unsigned int _v10300 = 0; _v10300 < (unsigned int)_d10299; _v10300++) {
_e10297->push_back((NInvitation*)T812::readObject(this, buff));
}
}
_t10291->setInvitations(_e10297);
continue;
}
T812::_m16311(buff);
}
return _t10291;
}

Serializable* T818::_m16303(T811* _a8490) {
GetInvitationsRequest* _s10302 = new GetInvitationsRequest();
short _m8492 = T812::_m16309(_a8490);
for (unsigned int _k3067 = 0; _k3067 < (unsigned int)_m8492; _k3067++) {
short _h3068 = T812::_m16309(_a8490);
if (_h3068 == 0) {
const char* _x3069 = T812::_m16310(_a8490);
_s10302->setMessageId(_x3069);
delete _x3069;
continue;
}
if (_h3068 == 1) {
const char* _e3070 = T812::_m16310(_a8490);
_s10302->setRequestId(_e3070);
delete _e3070;
continue;
}
if (_h3068 == 3) {
_s10302->setNuggetaQuery((NuggetaQuery*)T812::readObject(this, _a8490));
continue;
}
T812::_m16311(_a8490);
}
return _s10302;
}

Serializable* T818::_m16304(T811* buff) {
AcceptInvitationResponse* _d10309 = new AcceptInvitationResponse();
short _l3072 = T812::_m16309(buff);
for (unsigned int _k3073 = 0; _k3073 < (unsigned int)_l3072; _k3073++) {
short _n3074 = T812::_m16309(buff);
if (_n3074 == 0) {
const char* _d3075 = T812::_m16310(buff);
_d10309->setMessageId(_d3075);
delete _d3075;
continue;
}
if (_n3074 == 1) {
const char* _z3076 = T812::_m16310(buff);
_d10309->setRequestId(_z3076);
delete _z3076;
continue;
}
if (_n3074 == 3) {
_d10309->setAcceptInvitationStatus((AcceptInvitationStatus*)T812::readObject(this, buff));
continue;
}
if (_n3074 == 4) {
const char* _q3077 = T812::_m16310(buff);
_d10309->setInvitationId(_q3077);
delete _q3077;
continue;
}
T812::_m16311(buff);
}
return _d10309;
}

Serializable* T818::_m16305(T811* buff) {
AcceptInvitationRequest* _i10317 = new AcceptInvitationRequest();
short _g3079 = T812::_m16309(buff);
for (unsigned int _j3080 = 0; _j3080 < (unsigned int)_g3079; _j3080++) {
short _b3081 = T812::_m16309(buff);
if (_b3081 == 0) {
const char* _n3082 = T812::_m16310(buff);
_i10317->setMessageId(_n3082);
delete _n3082;
continue;
}
if (_b3081 == 1) {
const char* _w3083 = T812::_m16310(buff);
_i10317->setRequestId(_w3083);
delete _w3083;
continue;
}
if (_b3081 == 3) {
const char* _x3084 = T812::_m16310(buff);
_i10317->setInvitationId(_x3084);
delete _x3084;
continue;
}
T812::_m16311(buff);
}
return _i10317;
}

Serializable* T818::_m16306(T811* _g8496) {
RefuseInvitationResponse* _q10325 = new RefuseInvitationResponse();
short _j8498 = T812::_m16309(_g8496);
for (unsigned int _n3087 = 0; _n3087 < (unsigned int)_j8498; _n3087++) {
short _n3088 = T812::_m16309(_g8496);
if (_n3088 == 0) {
const char* _z3089 = T812::_m16310(_g8496);
_q10325->setMessageId(_z3089);
delete _z3089;
continue;
}
if (_n3088 == 1) {
const char* _h3090 = T812::_m16310(_g8496);
_q10325->setRequestId(_h3090);
delete _h3090;
continue;
}
if (_n3088 == 3) {
_q10325->setRefuseInvitationStatus((RefuseInvitationStatus*)T812::readObject(this, _g8496));
continue;
}
if (_n3088 == 4) {
const char* _n10331 = T812::_m16310(_g8496);
_q10325->setInvitationId(_n10331);
delete _n10331;
continue;
}
T812::_m16311(_g8496);
}
return _q10325;
}

Serializable* T818::_m16307(T811* _k10332) {
RefuseInvitationRequest* _f10333 = new RefuseInvitationRequest();
short _x10334 = T812::_m16309(_k10332);
for (unsigned int _s10335 = 0; _s10335 < (unsigned int)_x10334; _s10335++) {
short _f10336 = T812::_m16309(_k10332);
if (_f10336 == 0) {
const char* _m10337 = T812::_m16310(_k10332);
_f10333->setMessageId(_m10337);
delete _m10337;
continue;
}
if (_f10336 == 1) {
const char* _v10338 = T812::_m16310(_k10332);
_f10333->setRequestId(_v10338);
delete _v10338;
continue;
}
if (_f10336 == 3) {
const char* _k10339 = T812::_m16310(_k10332);
_f10333->setInvitationId(_k10339);
delete _k10339;
continue;
}
T812::_m16311(_k10332);
}
return _f10333;
}

T818::T818(){
}

T818::~T818(){
}


#include "LoadGameResponse.h"

short LoadGameResponse::serializerID = -10979;

















const char* LoadGameResponse::getMessageId() {
    return _MessageId;
}

void LoadGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LoadGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void LoadGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* LoadGameResponse::getRequestId() {
return _RequestId;
}

void LoadGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LoadGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void LoadGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

LoadGameStatus* LoadGameResponse::getLoadGameStatus() {
return _LoadGameStatus;
}

void LoadGameResponse::setLoadGameStatus(LoadGameStatus* value) {
_LoadGameStatus = value;
_LoadGameStatusSet = true;
}

bool LoadGameResponse::isLoadGameStatusSet() {
return _LoadGameStatusSet;
}

void LoadGameResponse::unSetLoadGameStatus() {
_LoadGameStatusSet = false;
}

NGame* LoadGameResponse::getGame() {
return _Game;
}

void LoadGameResponse::setGame(NGame* value) {
if (_Game && _Game != value) {
delete _Game;
}
_Game = value;
_GameSet = true;
}

bool LoadGameResponse::isGameSet() {
return _GameSet;
}

void LoadGameResponse::unSetGame() {
_GameSet = false;
}

//@Override
short LoadGameResponse::getSerializerID() {
return serializerID;
}

void* LoadGameResponse::clone() {
LoadGameResponse* _l14021 = new LoadGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l14021->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l14021->setRequestId(_RequestId);
}
if (_LoadGameStatusSet == true && Utils::isNull(_LoadGameStatus) == false) {
_l14021->setLoadGameStatus(_LoadGameStatus);
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_l14021->setGame((NGame*)(_Game->clone()));
}
return _l14021;
}

const char* LoadGameResponse::toString() {
const char* _p14022 = "";
_p14022 = NUtils::concat(_p14022, NUtils::concat(NUtils::concat("[", "LoadGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p14022 = NUtils::concat(_p14022, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p14022 = NUtils::concat(_p14022, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_LoadGameStatusSet == true && Utils::isNull(_LoadGameStatus) == false) {
_p14022 = NUtils::concat(_p14022, NUtils::concat(NUtils::concat("_LoadGameStatus=", _LoadGameStatus->toString()), "| "));
}
if (_GameSet == true && Utils::isNull(_Game) == false) {
_p14022 = NUtils::concat(_p14022, NUtils::concat(NUtils::concat("_Game=", _Game->toString()), "| "));
}
_p14022 = NUtils::concat(_p14022, "]");
return _p14022;
}

LoadGameResponse::LoadGameResponse(){
this->_GameSet = false;
this->_Game = 0;
this->_LoadGameStatusSet = false;
this->_LoadGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LoadGameResponse::~LoadGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Game) {
delete _Game;
_Game=0;
}
}


#include "GetLeaderboardResponse.h"

short GetLeaderboardResponse::serializerID = -10319;

















const char* GetLeaderboardResponse::getMessageId() {
    return _MessageId;
}

void GetLeaderboardResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetLeaderboardResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetLeaderboardResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetLeaderboardResponse::getRequestId() {
return _RequestId;
}

void GetLeaderboardResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetLeaderboardResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetLeaderboardResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetLeaderboardStatus* GetLeaderboardResponse::getGetLeaderboardStatus() {
return _GetLeaderboardStatus;
}

void GetLeaderboardResponse::setGetLeaderboardStatus(GetLeaderboardStatus* value) {
_GetLeaderboardStatus = value;
_GetLeaderboardStatusSet = true;
}

bool GetLeaderboardResponse::isGetLeaderboardStatusSet() {
return _GetLeaderboardStatusSet;
}

void GetLeaderboardResponse::unSetGetLeaderboardStatus() {
_GetLeaderboardStatusSet = false;
}

NLeaderboard* GetLeaderboardResponse::getLeaderboard() {
return _Leaderboard;
}

void GetLeaderboardResponse::setLeaderboard(NLeaderboard* value) {
if (_Leaderboard && _Leaderboard != value) {
delete _Leaderboard;
}
_Leaderboard = value;
_LeaderboardSet = true;
}

bool GetLeaderboardResponse::isLeaderboardSet() {
return _LeaderboardSet;
}

void GetLeaderboardResponse::unSetLeaderboard() {
_LeaderboardSet = false;
}

//@Override
short GetLeaderboardResponse::getSerializerID() {
return serializerID;
}

void* GetLeaderboardResponse::clone() {
GetLeaderboardResponse* _k14070 = new GetLeaderboardResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k14070->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k14070->setRequestId(_RequestId);
}
if (_GetLeaderboardStatusSet == true && Utils::isNull(_GetLeaderboardStatus) == false) {
_k14070->setGetLeaderboardStatus(_GetLeaderboardStatus);
}
if (_LeaderboardSet == true && Utils::isNull(_Leaderboard) == false) {
_k14070->setLeaderboard((NLeaderboard*)(_Leaderboard->clone()));
}
return _k14070;
}

const char* GetLeaderboardResponse::toString() {
const char* _q14071 = "";
_q14071 = NUtils::concat(_q14071, NUtils::concat(NUtils::concat("[", "GetLeaderboardResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q14071 = NUtils::concat(_q14071, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q14071 = NUtils::concat(_q14071, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetLeaderboardStatusSet == true && Utils::isNull(_GetLeaderboardStatus) == false) {
_q14071 = NUtils::concat(_q14071, NUtils::concat(NUtils::concat("_GetLeaderboardStatus=", _GetLeaderboardStatus->toString()), "| "));
}
if (_LeaderboardSet == true && Utils::isNull(_Leaderboard) == false) {
_q14071 = NUtils::concat(_q14071, NUtils::concat(NUtils::concat("_Leaderboard=", _Leaderboard->toString()), "| "));
}
_q14071 = NUtils::concat(_q14071, "]");
return _q14071;
}

GetLeaderboardResponse::GetLeaderboardResponse(){
this->_LeaderboardSet = false;
this->_Leaderboard = 0;
this->_GetLeaderboardStatusSet = false;
this->_GetLeaderboardStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetLeaderboardResponse::~GetLeaderboardResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Leaderboard) {
delete _Leaderboard;
_Leaderboard=0;
}
}


#include "JoinGameStatus.h"

std::vector<JoinGameStatus*>* JoinGameStatus::_values = new std::vector<JoinGameStatus*>();

JoinGameStatus* JoinGameStatus::ACCEPTED = new JoinGameStatus("ACCEPTED", 0);

JoinGameStatus* JoinGameStatus::REJECTED_NO_MORE_SEAT = new JoinGameStatus("REJECTED_NO_MORE_SEAT", 1);

JoinGameStatus* JoinGameStatus::GAME_NOT_FOUND = new JoinGameStatus("GAME_NOT_FOUND", 2);

JoinGameStatus* JoinGameStatus::ALREADY_IN_GAME = new JoinGameStatus("ALREADY_IN_GAME", 3);

JoinGameStatus* JoinGameStatus::REJECTED = new JoinGameStatus("REJECTED", 4);

JoinGameStatus* JoinGameStatus::INVALID_CALL = new JoinGameStatus("INVALID_CALL", 5);

JoinGameStatus* JoinGameStatus::INTERNAL_ERROR = new JoinGameStatus("INTERNAL_ERROR", 6);

std::vector<JoinGameStatus*>* JoinGameStatus::values() {
    return _values;
}





int JoinGameStatus::getValue() {
return _value;
}

const char* JoinGameStatus::name() {
return _name;
}

int JoinGameStatus::ordinal() {
return _value;
}

JoinGameStatus::JoinGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

JoinGameStatus* JoinGameStatus::fromValue(int value) {
for (unsigned int _t6851 = 0; _t6851 < (unsigned int)_values->size(); _t6851++) {
JoinGameStatus* _w6852 = (*_values)[_t6851];
if (_w6852->getValue() == value) {
return _w6852;
}
}
return 0;
}

JoinGameStatus* JoinGameStatus::valueOf(const char* name) {
for (unsigned int _v15149 = 0; _v15149 < (unsigned int)_values->size(); _v15149++) {
JoinGameStatus* _u15150 = (*_values)[_v15149];
if (strcmp(name, _u15150->name()) == 0) {
return _u15150;
}
}
return 0;
}

//@Override
short JoinGameStatus::getSerializerID() {
return -10498;
}

const char* JoinGameStatus::toString() {
return NUtils::concat("JoinGameStatus.", _name);
}

void* JoinGameStatus::clone() {
return this;
}

JoinGameStatus::~JoinGameStatus(){
}


#include "GetStoreStatus.h"

std::vector<GetStoreStatus*>* GetStoreStatus::_values = new std::vector<GetStoreStatus*>();

GetStoreStatus* GetStoreStatus::SUCCESS = new GetStoreStatus("SUCCESS", 0);

GetStoreStatus* GetStoreStatus::FAILURE = new GetStoreStatus("FAILURE", 1);

GetStoreStatus* GetStoreStatus::INTERNAL_ERROR = new GetStoreStatus("INTERNAL_ERROR", 2);

std::vector<GetStoreStatus*>* GetStoreStatus::values() {
    return _values;
}





int GetStoreStatus::getValue() {
return _value;
}

const char* GetStoreStatus::name() {
return _name;
}

int GetStoreStatus::ordinal() {
return _value;
}

GetStoreStatus::GetStoreStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

GetStoreStatus* GetStoreStatus::fromValue(int value) {
for (unsigned int _e7023 = 0; _e7023 < (unsigned int)_values->size(); _e7023++) {
GetStoreStatus* _l7024 = (*_values)[_e7023];
if (_l7024->getValue() == value) {
return _l7024;
}
}
return 0;
}

GetStoreStatus* GetStoreStatus::valueOf(const char* name) {
for (unsigned int _x15411 = 0; _x15411 < (unsigned int)_values->size(); _x15411++) {
GetStoreStatus* _k15412 = (*_values)[_x15411];
if (strcmp(name, _k15412->name()) == 0) {
return _k15412;
}
}
return 0;
}

//@Override
short GetStoreStatus::getSerializerID() {
return -10358;
}

const char* GetStoreStatus::toString() {
return NUtils::concat("GetStoreStatus.", _name);
}

void* GetStoreStatus::clone() {
return this;
}

GetStoreStatus::~GetStoreStatus(){
}


#include "AchieveRequest.h"

short AchieveRequest::serializerID = -10457;













const char* AchieveRequest::getMessageId() {
    return _MessageId;
}

void AchieveRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AchieveRequest::isMessageIdSet() {
return _MessageIdSet;
}

void AchieveRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* AchieveRequest::getRequestId() {
return _RequestId;
}

void AchieveRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AchieveRequest::isRequestIdSet() {
return _RequestIdSet;
}

void AchieveRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* AchieveRequest::getAchivementId() {
return _AchivementId;
}

void AchieveRequest::setAchivementId(const char* value) {
if (_AchivementId && _AchivementId != value) {
delete _AchivementId;
}
if (value) {
_AchivementId = strdup(value);
} else {
_AchivementId = 0;
}
_AchivementIdSet = true;
}

bool AchieveRequest::isAchivementIdSet() {
return _AchivementIdSet;
}

void AchieveRequest::unSetAchivementId() {
_AchivementIdSet = false;
}

//@Override
short AchieveRequest::getSerializerID() {
return serializerID;
}

void* AchieveRequest::clone() {
AchieveRequest* _y15455 = new AchieveRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15455->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15455->setRequestId(_RequestId);
}
if (_AchivementIdSet == true && Utils::isNull(_AchivementId) == false) {
_y15455->setAchivementId(_AchivementId);
}
return _y15455;
}

const char* AchieveRequest::toString() {
const char* _k15456 = "";
_k15456 = NUtils::concat(_k15456, NUtils::concat(NUtils::concat("[", "AchieveRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_k15456 = NUtils::concat(_k15456, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_k15456 = NUtils::concat(_k15456, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_AchivementIdSet == true && Utils::isNull(_AchivementId) == false) {
_k15456 = NUtils::concat(_k15456, NUtils::concat(NUtils::concat("_AchivementId=", _AchivementId), "| "));
}
_k15456 = NUtils::concat(_k15456, "]");
return _k15456;
}

AchieveRequest::AchieveRequest(){
this->_AchivementIdSet = false;
this->_AchivementId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AchieveRequest::~AchieveRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_AchivementId) {
delete _AchivementId;
_AchivementId = 0;
}
}


#include "NextPlayerTurnStatus.h"

std::vector<NextPlayerTurnStatus*>* NextPlayerTurnStatus::_values = new std::vector<NextPlayerTurnStatus*>();

NextPlayerTurnStatus* NextPlayerTurnStatus::SUCCESS = new NextPlayerTurnStatus("SUCCESS", 0);

NextPlayerTurnStatus* NextPlayerTurnStatus::FAILURE = new NextPlayerTurnStatus("FAILURE", 1);

NextPlayerTurnStatus* NextPlayerTurnStatus::INVALID_CALL = new NextPlayerTurnStatus("INVALID_CALL", 2);

NextPlayerTurnStatus* NextPlayerTurnStatus::INTERNAL_ERROR = new NextPlayerTurnStatus("INTERNAL_ERROR", 3);

NextPlayerTurnStatus* NextPlayerTurnStatus::GAME_NOT_FOUND = new NextPlayerTurnStatus("GAME_NOT_FOUND", 4);

std::vector<NextPlayerTurnStatus*>* NextPlayerTurnStatus::values() {
    return _values;
}





int NextPlayerTurnStatus::getValue() {
return _value;
}

const char* NextPlayerTurnStatus::name() {
return _name;
}

int NextPlayerTurnStatus::ordinal() {
return _value;
}

NextPlayerTurnStatus::NextPlayerTurnStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

NextPlayerTurnStatus* NextPlayerTurnStatus::fromValue(int value) {
for (unsigned int _a5989 = 0; _a5989 < (unsigned int)_values->size(); _a5989++) {
NextPlayerTurnStatus* _r5990 = (*_values)[_a5989];
if (_r5990->getValue() == value) {
return _r5990;
}
}
return 0;
}

NextPlayerTurnStatus* NextPlayerTurnStatus::valueOf(const char* name) {
for (unsigned int _b14085 = 0; _b14085 < (unsigned int)_values->size(); _b14085++) {
NextPlayerTurnStatus* _d14086 = (*_values)[_b14085];
if (strcmp(name, _d14086->name()) == 0) {
return _d14086;
}
}
return 0;
}

//@Override
short NextPlayerTurnStatus::getSerializerID() {
return -10818;
}

const char* NextPlayerTurnStatus::toString() {
return NUtils::concat("NextPlayerTurnStatus.", _name);
}

void* NextPlayerTurnStatus::clone() {
return this;
}

NextPlayerTurnStatus::~NextPlayerTurnStatus(){
}


#include "SaveAsGhostStatus.h"

std::vector<SaveAsGhostStatus*>* SaveAsGhostStatus::_values = new std::vector<SaveAsGhostStatus*>();

SaveAsGhostStatus* SaveAsGhostStatus::SUCCESS = new SaveAsGhostStatus("SUCCESS", 0);

SaveAsGhostStatus* SaveAsGhostStatus::FAILURE = new SaveAsGhostStatus("FAILURE", 1);

SaveAsGhostStatus* SaveAsGhostStatus::INVALID_CALL = new SaveAsGhostStatus("INVALID_CALL", 2);

SaveAsGhostStatus* SaveAsGhostStatus::INTERNAL_ERROR = new SaveAsGhostStatus("INTERNAL_ERROR", 3);

std::vector<SaveAsGhostStatus*>* SaveAsGhostStatus::values() {
    return _values;
}





int SaveAsGhostStatus::getValue() {
return _value;
}

const char* SaveAsGhostStatus::name() {
return _name;
}

int SaveAsGhostStatus::ordinal() {
return _value;
}

SaveAsGhostStatus::SaveAsGhostStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SaveAsGhostStatus* SaveAsGhostStatus::fromValue(int value) {
for (unsigned int _m7189 = 0; _m7189 < (unsigned int)_values->size(); _m7189++) {
SaveAsGhostStatus* _v7190 = (*_values)[_m7189];
if (_v7190->getValue() == value) {
return _v7190;
}
}
return 0;
}

SaveAsGhostStatus* SaveAsGhostStatus::valueOf(const char* name) {
for (unsigned int _o15582 = 0; _o15582 < (unsigned int)_values->size(); _o15582++) {
SaveAsGhostStatus* _i15583 = (*_values)[_o15582];
if (strcmp(name, _i15583->name()) == 0) {
return _i15583;
}
}
return 0;
}

//@Override
short SaveAsGhostStatus::getSerializerID() {
return -10698;
}

const char* SaveAsGhostStatus::toString() {
return NUtils::concat("SaveAsGhostStatus.", _name);
}

void* SaveAsGhostStatus::clone() {
return this;
}

SaveAsGhostStatus::~SaveAsGhostStatus(){
}


#include "LogoutRequest.h"

short LogoutRequest::serializerID = -10137;









const char* LogoutRequest::getMessageId() {
    return _MessageId;
}

void LogoutRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LogoutRequest::isMessageIdSet() {
return _MessageIdSet;
}

void LogoutRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* LogoutRequest::getRequestId() {
return _RequestId;
}

void LogoutRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LogoutRequest::isRequestIdSet() {
return _RequestIdSet;
}

void LogoutRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short LogoutRequest::getSerializerID() {
return serializerID;
}

void* LogoutRequest::clone() {
LogoutRequest* _r14986 = new LogoutRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_r14986->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_r14986->setRequestId(_RequestId);
}
return _r14986;
}

const char* LogoutRequest::toString() {
const char* _w14987 = "";
_w14987 = NUtils::concat(_w14987, NUtils::concat(NUtils::concat("[", "LogoutRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w14987 = NUtils::concat(_w14987, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w14987 = NUtils::concat(_w14987, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_w14987 = NUtils::concat(_w14987, "]");
return _w14987;
}

LogoutRequest::LogoutRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LogoutRequest::~LogoutRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "StorableSample.h"

short StorableSample::serializerID = -3230;





































const char* StorableSample::getMessageId() {
    return _MessageId;
}

void StorableSample::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StorableSample::isMessageIdSet() {
return _MessageIdSet;
}

void StorableSample::unSetMessageId() {
_MessageIdSet = false;
}

const char* StorableSample::getRequestId() {
return _RequestId;
}

void StorableSample::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StorableSample::isRequestIdSet() {
return _RequestIdSet;
}

void StorableSample::unSetRequestId() {
_RequestIdSet = false;
}

const char* StorableSample::getStoreId() {
return _StoreId;
}

void StorableSample::setStoreId(const char* value) {
if (_StoreId && _StoreId != value) {
delete _StoreId;
}
if (value) {
_StoreId = strdup(value);
} else {
_StoreId = 0;
}
_StoreIdSet = true;
}

bool StorableSample::isStoreIdSet() {
return _StoreIdSet;
}

void StorableSample::unSetStoreId() {
_StoreIdSet = false;
}

const char* StorableSample::getData() {
return _Data;
}

void StorableSample::setData(const char* value) {
if (_Data && _Data != value) {
delete _Data;
}
if (value) {
_Data = strdup(value);
} else {
_Data = 0;
}
_DataSet = true;
}

bool StorableSample::isDataSet() {
return _DataSet;
}

void StorableSample::unSetData() {
_DataSet = false;
}

const char* StorableSample::getGameId() {
return _GameId;
}

void StorableSample::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool StorableSample::isGameIdSet() {
return _GameIdSet;
}

void StorableSample::unSetGameId() {
_GameIdSet = false;
}

const char* StorableSample::getSenderId() {
return _SenderId;
}

void StorableSample::setSenderId(const char* value) {
if (_SenderId && _SenderId != value) {
delete _SenderId;
}
if (value) {
_SenderId = strdup(value);
} else {
_SenderId = 0;
}
_SenderIdSet = true;
}

bool StorableSample::isSenderIdSet() {
return _SenderIdSet;
}

void StorableSample::unSetSenderId() {
_SenderIdSet = false;
}

const char* StorableSample::getIdProperty() {
return _IdProperty;
}

void StorableSample::setIdProperty(const char* value) {
if (_IdProperty && _IdProperty != value) {
delete _IdProperty;
}
if (value) {
_IdProperty = strdup(value);
} else {
_IdProperty = 0;
}
_IdPropertySet = true;
}

bool StorableSample::isIdPropertySet() {
return _IdPropertySet;
}

void StorableSample::unSetIdProperty() {
_IdPropertySet = false;
}

int StorableSample::getNumberProperty() {
return _NumberProperty;
}

void StorableSample::setNumberProperty(int value) {
_NumberProperty = value;
_NumberPropertySet = true;
}

bool StorableSample::isNumberPropertySet() {
return _NumberPropertySet;
}

void StorableSample::unSetNumberProperty() {
_NumberPropertySet = false;
}

bool StorableSample::isBooleanProperty() {
return _BooleanProperty;
}

void StorableSample::setBooleanProperty(bool value) {
_BooleanProperty = value;
_BooleanPropertySet = true;
}

bool StorableSample::isBooleanPropertySet() {
return _BooleanPropertySet;
}

void StorableSample::unSetBooleanProperty() {
_BooleanPropertySet = false;
}

//@Override
short StorableSample::getSerializerID() {
return serializerID;
}

void* StorableSample::clone() {
StorableSample* _u10747 = new StorableSample();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u10747->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u10747->setRequestId(_RequestId);
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_u10747->setStoreId(_StoreId);
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_u10747->setData(_Data);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_u10747->setGameId(_GameId);
}
if (_SenderIdSet == true && Utils::isNull(_SenderId) == false) {
_u10747->setSenderId(_SenderId);
}
if (_IdPropertySet == true && Utils::isNull(_IdProperty) == false) {
_u10747->setIdProperty(_IdProperty);
}
if (_NumberPropertySet == true && Utils::isNullInteger(_NumberProperty) == false) {
_u10747->setNumberProperty(_NumberProperty);
}
if (_BooleanPropertySet == true && Utils::isNullBoolean(_BooleanProperty) == false) {
_u10747->setBooleanProperty(_BooleanProperty);
}
return _u10747;
}

const char* StorableSample::toString() {
const char* _b10748 = "";
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("[", "StorableSample"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StoreIdSet == true && Utils::isNull(_StoreId) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_StoreId=", _StoreId), "| "));
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_Data=", _Data), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
if (_SenderIdSet == true && Utils::isNull(_SenderId) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_SenderId=", _SenderId), "| "));
}
if (_IdPropertySet == true && Utils::isNull(_IdProperty) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_IdProperty=", _IdProperty), "| "));
}
if (_NumberPropertySet == true && Utils::isNullInteger(_NumberProperty) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_NumberProperty=", _NumberProperty), "| "));
}
if (_BooleanPropertySet == true && Utils::isNullBoolean(_BooleanProperty) == false) {
_b10748 = NUtils::concat(_b10748, NUtils::concat(NUtils::concat("_BooleanProperty=", _BooleanProperty), "| "));
}
_b10748 = NUtils::concat(_b10748, "]");
return _b10748;
}

StorableSample::StorableSample(){
this->_BooleanPropertySet = false;
this->_NumberPropertySet = false;
this->_NumberProperty = 0;
this->_IdPropertySet = false;
this->_IdProperty = 0;
this->_SenderIdSet = false;
this->_SenderId = 0;
this->_GameIdSet = false;
this->_GameId = 0;
this->_DataSet = false;
this->_Data = 0;
this->_StoreIdSet = false;
this->_StoreId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StorableSample::~StorableSample(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StoreId) {
delete _StoreId;
_StoreId = 0;
}
if (_Data) {
delete _Data;
_Data = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
if (_SenderId) {
delete _SenderId;
_SenderId = 0;
}
if (_IdProperty) {
delete _IdProperty;
_IdProperty = 0;
}
}


#include "ResumeSessionMonitoringRequest.h"

short ResumeSessionMonitoringRequest::serializerID = -11097;









const char* ResumeSessionMonitoringRequest::getMessageId() {
    return _MessageId;
}

void ResumeSessionMonitoringRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ResumeSessionMonitoringRequest::isMessageIdSet() {
return _MessageIdSet;
}

void ResumeSessionMonitoringRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* ResumeSessionMonitoringRequest::getRequestId() {
return _RequestId;
}

void ResumeSessionMonitoringRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ResumeSessionMonitoringRequest::isRequestIdSet() {
return _RequestIdSet;
}

void ResumeSessionMonitoringRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short ResumeSessionMonitoringRequest::getSerializerID() {
return serializerID;
}

void* ResumeSessionMonitoringRequest::clone() {
ResumeSessionMonitoringRequest* _l13834 = new ResumeSessionMonitoringRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l13834->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l13834->setRequestId(_RequestId);
}
return _l13834;
}

const char* ResumeSessionMonitoringRequest::toString() {
const char* _o13835 = "";
_o13835 = NUtils::concat(_o13835, NUtils::concat(NUtils::concat("[", "ResumeSessionMonitoringRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_o13835 = NUtils::concat(_o13835, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_o13835 = NUtils::concat(_o13835, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_o13835 = NUtils::concat(_o13835, "]");
return _o13835;
}

ResumeSessionMonitoringRequest::ResumeSessionMonitoringRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ResumeSessionMonitoringRequest::~ResumeSessionMonitoringRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "NInvitationStatus.h"

std::vector<NInvitationStatus*>* NInvitationStatus::_values = new std::vector<NInvitationStatus*>();

NInvitationStatus* NInvitationStatus::PENDING = new NInvitationStatus("PENDING", 0);

NInvitationStatus* NInvitationStatus::ACCEPTED = new NInvitationStatus("ACCEPTED", 1);

NInvitationStatus* NInvitationStatus::REFUSED = new NInvitationStatus("REFUSED", 2);

NInvitationStatus* NInvitationStatus::EXPIRED = new NInvitationStatus("EXPIRED", 3);

std::vector<NInvitationStatus*>* NInvitationStatus::values() {
    return _values;
}





int NInvitationStatus::getValue() {
return _value;
}

const char* NInvitationStatus::name() {
return _name;
}

int NInvitationStatus::ordinal() {
return _value;
}

NInvitationStatus::NInvitationStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

NInvitationStatus* NInvitationStatus::fromValue(int value) {
for (unsigned int _k6884 = 0; _k6884 < (unsigned int)_values->size(); _k6884++) {
NInvitationStatus* _p6885 = (*_values)[_k6884];
if (_p6885->getValue() == value) {
return _p6885;
}
}
return 0;
}

NInvitationStatus* NInvitationStatus::valueOf(const char* name) {
for (unsigned int _g15182 = 0; _g15182 < (unsigned int)_values->size(); _g15182++) {
NInvitationStatus* _a15183 = (*_values)[_g15182];
if (strcmp(name, _a15183->name()) == 0) {
return _a15183;
}
}
return 0;
}

//@Override
short NInvitationStatus::getSerializerID() {
return -42;
}

const char* NInvitationStatus::toString() {
return NUtils::concat("NInvitationStatus.", _name);
}

void* NInvitationStatus::clone() {
return this;
}

NInvitationStatus::~NInvitationStatus(){
}


#include "T803.h"







const char* T803::_p14637 = "x";



T803::T803(const char* name, T810* serializerFactory, MessageListener* messageListener, const char* _h14634):AbstractNetworkConnection(name, serializerFactory, messageListener){

    this->_f14638 = 0;
    this->_i14635 = 0;
    this->_v6495 = 0;
    log = NLoggerFactory::getLogger("HttpConnection");
    this->_v6495 = NUtils::nstrdup(_h14634);
}

//@Override
void T803::_m16331() {
    if (connectionState != ConnectionState::INITIAL) {
        return;
    }
    connectionState = ConnectionState::STARTING;
    _f14638 = new T802(serializerFactory, messageListener, connectionInvalidVersionDetectedListenerCollection, connectionLostListenerCollection);
    NHttpRequest* _w14639 = new NHttpRequestImpl();
    NetConnectionReceivedHandler* _y14640 = new NetConnectionReceivedHandler(this, &T803::onData28);
    NetConnectionSendFailHandler* _b14642 = new NetConnectionSendFailHandler(this, &T803::onFail29);
    long long int _l14643 = NSystem::currentTimeMillis();
    _w14639->get(name, NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(_v6495, "?init=init&p="), T803::_p14637), "&id="), _l14643), _y14640, _b14642);
}

void T803::_m16950() {
if (connectionState != ConnectionState::STARTED) {
    return;
}
NHttpRequest* _c14644 = new NHttpRequestImpl();
NetConnectionReceivedHandler* _c14645 = new NetConnectionReceivedHandler(this, &T803::onData30);
NetConnectionSendFailHandler* _p6507 = new NetConnectionSendFailHandler(this, &T803::onFail31);
long long int _x6508 = NSystem::currentTimeMillis();
_c14644->get(name, NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(_v6495, "?session_id="), _i14635), "&id="), _x6508), "&p="), T803::_p14637), "&send=p"), _c14645, _p6507);
}

//@Override
void T803::_m16332() {
if (connectionState != ConnectionState::STARTED) {
connectionState = ConnectionState::STOPPED;
tryStop();
} else if (connectionState != ConnectionState::STARTING) {
connectionState = ConnectionState::STOPPED;
tryStop();
} else {
log->error(NUtils::concat("invalid status ", connectionState));
}
}

//@Override
void T803::tryStop() {
}

//@Override
void T803::_m16341(Message* msg) {
if (connectionState != ConnectionState::STARTED) {
return;
}
_m16953(msg);
}

//@Override
void T803::_m16342(Message* _c14651, Message* _m14652) {
connectionState = ConnectionState::STOPPING;
_m16953(_c14651);
try {
(*messageListener)(_m14652);
} catch (std::exception* e) {
log->errorCause("Error occured while processing message : ", e);
}
}

void T803::_m16953(Message* _e14653) {
NHttpRequest* _t14654 = new NHttpRequestImpl();
NetConnectionReceivedHandler* _c14655 = new NetConnectionReceivedHandler(this, &T803::onData32);
NetConnectionSendFailHandler* _c14657 = new NetConnectionSendFailHandler(this, &T803::onFail33);
const char* _r14658 = _f14638->_m16954(_e14653);
long long int _c14659 = NSystem::currentTimeMillis();
_t14654->post(name, NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat(_v6495, "?session_id="), _i14635), "&id="), _c14659), "&p="), T803::_p14637), "&send=send"), _r14658, _c14655, _c14657);
}

T803::~T803(){
if (_v6495) {
delete _v6495;
_v6495 = 0;
}
if (_i14635) {
delete _i14635;
_i14635 = 0;
}
if (_f14638) {
delete _f14638;
_f14638=0;
}
}

//@Override
void T803::onData28(unsigned char _p14641) {
if (connectionState == ConnectionState::STARTING) {
_i14635 = (const char*)_p14641;
;
connectionState = ConnectionState::STARTED;
connectionReadyListenerCollection->fireConnectionReady();
_m16950();
} else {
log->error("invalid connection status");
}
}

//@Override
void T803::onFail29() {
if (connectionState == ConnectionState::STARTING) {
connectionFailListenerCollection->fireConnectionFail();
} else {
log->error("invalid connection status");
}
}

//@Override
void T803::onData30(unsigned char _w14646) {
try {
if (connectionState != ConnectionState::STARTED) {
return;
}
const char* _m14647 = (const char*)_w14646;
if (_m14647 != 0 && sizeof(_m14647) > 0) {
if (strcmp(_m14647, "INVALID_SESSION_ID") == 0) {
connectionLostListenerCollection->fireConnectionLost();
return;
}
}
_f14638->_m16952(_m14647);
_m16950();
} catch (std::exception* exception) {
if (!_e14636) {
_e14636 = true;
log->debugCause("can't poll: ", exception);
connectionLostListenerCollection->fireConnectionLost();
} else {
;
}
}
}

//@Override
void T803::onFail31() {
if (connectionState == ConnectionState::STARTED) {
connectionLostListenerCollection->fireConnectionLost();
}
}

//@Override
void T803::onData32(unsigned char _i14656) {
}

//@Override
void T803::onFail33() {
if (connectionState == ConnectionState::STARTED) {
connectionLostListenerCollection->fireConnectionLost();
}
}


#include "T798.h"







T798::T798(const char* _l10368, const char* _k10369){
    this->_f3128 = 0;
    this->_n3127 = 0;
    this->_g10367 = NLoggerFactory::getLogger("ConnectionFactoryImpl");
    this->_n3127 = NUtils::nstrdup(_l10368);
    this->_f3128 = NUtils::nstrdup(_k10369);
}

//@Override
T799* T798::_m16326(const char* _m10370, MessageListener* _f10371, const char* _h10372) {
    std::vector<const char*>* _x10373 = NUtils::split(_h10372, ":");
    const char* _h10374 = (*_x10373)[0];
    int _var34;
    std::istringstream((*_x10373)[1]) >> _var34;
    int _i10375 = _var34;
    int _s10376 = _i10375 + 1;
    T795* _q10377 = new T795(_f10371);
    std::vector<const char*>* _i10378 = NUtils::split(_n3127, "/");
    std::vector<const char*>* _z10379 = NUtils::split(_f3128, "/");
    for (unsigned int _f10380 = 0; _f10380 < (unsigned int)_i10378->size(); _f10380++) {
        const char* _j10381 = (*_i10378)[_f10380];
        const char* _x10382 = (*_z10379)[_f10380];
        T810* _n10383 = 0;
        if (strcmp(_x10382, "bin") == 0) {
            _n10383 = new T818();
        } else {
            _n10383 = new T819();
        }
        if (strcmp(_j10381, "sock") == 0) {
            _q10377->_m16327(new T805(_m10370, _n10383, _f10371, _h10374, _i10375, 0));
        } else if (strcmp(_j10381, "wsock") == 0) {
            const char* _c10384 = NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat("ws://", _h10374), ":"), _s10376), "/nuggeta/");
            _q10377->_m16327(new T805(_m10370, _n10383, _f10371, 0, 0, _c10384));
        } else if (strcmp(_j10381, "http") == 0) {
            _q10377->_m16327(new T803(_m10370, _n10383, _f10371, NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat("http://", _h10374), ":"), _s10376), "/httpstream/")));
        } else {
            _g10367->error(NUtils::concat("Unsupported network ", _j10381));
        }
    }
    if (strcmp(_m10370, "a12-plug") == 0) {
        _q10377->_m16327(new T803(_m10370, new T819(), _f10371, NUtils::concat(NUtils::concat("http://", _h10374), "/httpstream/")));
    } else {
        _q10377->_m16327(new T803(_m10370, new T819(), _f10371, NUtils::concat(NUtils::concat(NUtils::concat(NUtils::concat("http://", _h10374), "/"), _s10376), "/httpstream/")));
    }
    return _q10377;
}

T798::~T798(){
if (_g10367) {
    delete _g10367;
    _g10367=0;
}
if (_n3127) {
    delete _n3127;
    _n3127 = 0;
}
if (_f3128) {
    delete _f3128;
    _f3128 = 0;
}
}


#include "UpdatePlayerStorableStatus.h"

std::vector<UpdatePlayerStorableStatus*>* UpdatePlayerStorableStatus::_values = new std::vector<UpdatePlayerStorableStatus*>();

UpdatePlayerStorableStatus* UpdatePlayerStorableStatus::SUCCESS = new UpdatePlayerStorableStatus("SUCCESS", 0);

UpdatePlayerStorableStatus* UpdatePlayerStorableStatus::FAILURE = new UpdatePlayerStorableStatus("FAILURE", 1);

UpdatePlayerStorableStatus* UpdatePlayerStorableStatus::INVALID_CALL = new UpdatePlayerStorableStatus("INVALID_CALL", 2);

UpdatePlayerStorableStatus* UpdatePlayerStorableStatus::INTERNAL_ERROR = new UpdatePlayerStorableStatus("INTERNAL_ERROR", 3);

std::vector<UpdatePlayerStorableStatus*>* UpdatePlayerStorableStatus::values() {
    return _values;
}





int UpdatePlayerStorableStatus::getValue() {
return _value;
}

const char* UpdatePlayerStorableStatus::name() {
return _name;
}

int UpdatePlayerStorableStatus::ordinal() {
return _value;
}

UpdatePlayerStorableStatus::UpdatePlayerStorableStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

UpdatePlayerStorableStatus* UpdatePlayerStorableStatus::fromValue(int value) {
for (unsigned int _w7261 = 0; _w7261 < (unsigned int)_values->size(); _w7261++) {
UpdatePlayerStorableStatus* _y7262 = (*_values)[_w7261];
if (_y7262->getValue() == value) {
return _y7262;
}
}
return 0;
}

UpdatePlayerStorableStatus* UpdatePlayerStorableStatus::valueOf(const char* name) {
for (unsigned int _y15747 = 0; _y15747 < (unsigned int)_values->size(); _y15747++) {
UpdatePlayerStorableStatus* _c15748 = (*_values)[_y15747];
if (strcmp(name, _c15748->name()) == 0) {
return _c15748;
}
}
return 0;
}

//@Override
short UpdatePlayerStorableStatus::getSerializerID() {
return -11018;
}

const char* UpdatePlayerStorableStatus::toString() {
return NUtils::concat("UpdatePlayerStorableStatus.", _name);
}

void* UpdatePlayerStorableStatus::clone() {
return this;
}

UpdatePlayerStorableStatus::~UpdatePlayerStorableStatus(){
}


#include "ThirdPartyLoginWithTokenRequest.h"

short ThirdPartyLoginWithTokenRequest::serializerID = -10936;

















const char* ThirdPartyLoginWithTokenRequest::getMessageId() {
    return _MessageId;
}

void ThirdPartyLoginWithTokenRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool ThirdPartyLoginWithTokenRequest::isMessageIdSet() {
return _MessageIdSet;
}

void ThirdPartyLoginWithTokenRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* ThirdPartyLoginWithTokenRequest::getRequestId() {
return _RequestId;
}

void ThirdPartyLoginWithTokenRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool ThirdPartyLoginWithTokenRequest::isRequestIdSet() {
return _RequestIdSet;
}

void ThirdPartyLoginWithTokenRequest::unSetRequestId() {
_RequestIdSet = false;
}

ThirdPartySource* ThirdPartyLoginWithTokenRequest::getThirdPartySource() {
return _ThirdPartySource;
}

void ThirdPartyLoginWithTokenRequest::setThirdPartySource(ThirdPartySource* value) {
_ThirdPartySource = value;
_ThirdPartySourceSet = true;
}

bool ThirdPartyLoginWithTokenRequest::isThirdPartySourceSet() {
return _ThirdPartySourceSet;
}

void ThirdPartyLoginWithTokenRequest::unSetThirdPartySource() {
_ThirdPartySourceSet = false;
}

const char* ThirdPartyLoginWithTokenRequest::getAccessToken() {
return _AccessToken;
}

void ThirdPartyLoginWithTokenRequest::setAccessToken(const char* value) {
if (_AccessToken && _AccessToken != value) {
delete _AccessToken;
}
if (value) {
_AccessToken = strdup(value);
} else {
_AccessToken = 0;
}
_AccessTokenSet = true;
}

bool ThirdPartyLoginWithTokenRequest::isAccessTokenSet() {
return _AccessTokenSet;
}

void ThirdPartyLoginWithTokenRequest::unSetAccessToken() {
_AccessTokenSet = false;
}

//@Override
short ThirdPartyLoginWithTokenRequest::getSerializerID() {
return serializerID;
}

void* ThirdPartyLoginWithTokenRequest::clone() {
ThirdPartyLoginWithTokenRequest* _j14091 = new ThirdPartyLoginWithTokenRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_j14091->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_j14091->setRequestId(_RequestId);
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_j14091->setThirdPartySource(_ThirdPartySource);
}
if (_AccessTokenSet == true && Utils::isNull(_AccessToken) == false) {
_j14091->setAccessToken(_AccessToken);
}
return _j14091;
}

const char* ThirdPartyLoginWithTokenRequest::toString() {
const char* _q14092 = "";
_q14092 = NUtils::concat(_q14092, NUtils::concat(NUtils::concat("[", "ThirdPartyLoginWithTokenRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q14092 = NUtils::concat(_q14092, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q14092 = NUtils::concat(_q14092, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_q14092 = NUtils::concat(_q14092, NUtils::concat(NUtils::concat("_ThirdPartySource=", _ThirdPartySource->toString()), "| "));
}
if (_AccessTokenSet == true && Utils::isNull(_AccessToken) == false) {
_q14092 = NUtils::concat(_q14092, NUtils::concat(NUtils::concat("_AccessToken=", _AccessToken), "| "));
}
_q14092 = NUtils::concat(_q14092, "]");
return _q14092;
}

ThirdPartyLoginWithTokenRequest::ThirdPartyLoginWithTokenRequest(){
this->_AccessTokenSet = false;
this->_AccessToken = 0;
this->_ThirdPartySourceSet = false;
this->_ThirdPartySource = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

ThirdPartyLoginWithTokenRequest::~ThirdPartyLoginWithTokenRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_AccessToken) {
delete _AccessToken;
_AccessToken = 0;
}
}


#include "NAchievement.h"

short NAchievement::serializerID = -3103;









































const char* NAchievement::getStoreId() {
    return _storeId;
}

void NAchievement::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool NAchievement::isstoreIdSet() {
return _storeIdSet;
}

void NAchievement::unSetstoreId() {
_storeIdSet = false;
}

const char* NAchievement::getId() {
return _Id;
}

void NAchievement::setId(const char* value) {
if (_Id && _Id != value) {
delete _Id;
}
if (value) {
_Id = strdup(value);
} else {
_Id = 0;
}
_IdSet = true;
}

bool NAchievement::isIdSet() {
return _IdSet;
}

void NAchievement::unSetId() {
_IdSet = false;
}

const char* NAchievement::getName() {
return _Name;
}

void NAchievement::setName(const char* value) {
if (_Name && _Name != value) {
delete _Name;
}
if (value) {
_Name = strdup(value);
} else {
_Name = 0;
}
_NameSet = true;
}

bool NAchievement::isNameSet() {
return _NameSet;
}

void NAchievement::unSetName() {
_NameSet = false;
}

bool NAchievement::isAchieved() {
return _Achieved;
}

void NAchievement::setAchieved(bool value) {
_Achieved = value;
_AchievedSet = true;
}

bool NAchievement::isAchievedSet() {
return _AchievedSet;
}

void NAchievement::unSetAchieved() {
_AchievedSet = false;
}

const char* NAchievement::getDescription() {
return _Description;
}

void NAchievement::setDescription(const char* value) {
if (_Description && _Description != value) {
delete _Description;
}
if (value) {
_Description = strdup(value);
} else {
_Description = 0;
}
_DescriptionSet = true;
}

bool NAchievement::isDescriptionSet() {
return _DescriptionSet;
}

void NAchievement::unSetDescription() {
_DescriptionSet = false;
}

int NAchievement::getNXP() {
return _NXP;
}

void NAchievement::setNXP(int value) {
_NXP = value;
_NXPSet = true;
}

bool NAchievement::isNXPSet() {
return _NXPSet;
}

void NAchievement::unSetNXP() {
_NXPSet = false;
}

int NAchievement::getNEnergy() {
return _NEnergy;
}

void NAchievement::setNEnergy(int value) {
_NEnergy = value;
_NEnergySet = true;
}

bool NAchievement::isNEnergySet() {
return _NEnergySet;
}

void NAchievement::unSetNEnergy() {
_NEnergySet = false;
}

NAchievementType* NAchievement::getType() {
return _Type;
}

void NAchievement::setType(NAchievementType* value) {
_Type = value;
_TypeSet = true;
}

bool NAchievement::isTypeSet() {
return _TypeSet;
}

void NAchievement::unSetType() {
_TypeSet = false;
}

int NAchievement::getGoal() {
return _Goal;
}

void NAchievement::setGoal(int value) {
_Goal = value;
_GoalSet = true;
}

bool NAchievement::isGoalSet() {
return _GoalSet;
}

void NAchievement::unSetGoal() {
_GoalSet = false;
}

int NAchievement::getProgress() {
return _Progress;
}

void NAchievement::setProgress(int value) {
_Progress = value;
_ProgressSet = true;
}

bool NAchievement::isProgressSet() {
return _ProgressSet;
}

void NAchievement::unSetProgress() {
_ProgressSet = false;
}

//@Override
short NAchievement::getSerializerID() {
return serializerID;
}

void* NAchievement::clone() {
NAchievement* _t15743 = new NAchievement();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_t15743->setStoreId(_storeId);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_t15743->setId(_Id);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_t15743->setName(_Name);
}
if (_AchievedSet == true && Utils::isNullBoolean(_Achieved) == false) {
_t15743->setAchieved(_Achieved);
}
if (_DescriptionSet == true && Utils::isNull(_Description) == false) {
_t15743->setDescription(_Description);
}
if (_NXPSet == true && Utils::isNullInteger(_NXP) == false) {
_t15743->setNXP(_NXP);
}
if (_NEnergySet == true && Utils::isNullInteger(_NEnergy) == false) {
_t15743->setNEnergy(_NEnergy);
}
if (_TypeSet == true && Utils::isNull(_Type) == false) {
_t15743->setType(_Type);
}
if (_GoalSet == true && Utils::isNullInteger(_Goal) == false) {
_t15743->setGoal(_Goal);
}
if (_ProgressSet == true && Utils::isNullInteger(_Progress) == false) {
_t15743->setProgress(_Progress);
}
return _t15743;
}

const char* NAchievement::toString() {
const char* _p15744 = "";
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("[", "NAchievement"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_AchievedSet == true && Utils::isNullBoolean(_Achieved) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_Achieved=", _Achieved), "| "));
}
if (_DescriptionSet == true && Utils::isNull(_Description) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_Description=", _Description), "| "));
}
if (_NXPSet == true && Utils::isNullInteger(_NXP) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_NXP=", _NXP), "| "));
}
if (_NEnergySet == true && Utils::isNullInteger(_NEnergy) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_NEnergy=", _NEnergy), "| "));
}
if (_TypeSet == true && Utils::isNull(_Type) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_Type=", _Type->toString()), "| "));
}
if (_GoalSet == true && Utils::isNullInteger(_Goal) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_Goal=", _Goal), "| "));
}
if (_ProgressSet == true && Utils::isNullInteger(_Progress) == false) {
_p15744 = NUtils::concat(_p15744, NUtils::concat(NUtils::concat("_Progress=", _Progress), "| "));
}
_p15744 = NUtils::concat(_p15744, "]");
return _p15744;
}

NAchievement::NAchievement(){
this->_ProgressSet = false;
this->_Progress = 0;
this->_GoalSet = false;
this->_Goal = 0;
this->_TypeSet = false;
this->_Type = 0;
this->_NEnergySet = false;
this->_NEnergy = 0;
this->_NXPSet = false;
this->_NXP = 0;
this->_DescriptionSet = false;
this->_Description = 0;
this->_AchievedSet = false;
this->_NameSet = false;
this->_Name = 0;
this->_IdSet = false;
this->_Id = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

NAchievement::~NAchievement(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Id) {
delete _Id;
_Id = 0;
}
if (_Name) {
delete _Name;
_Name = 0;
}
if (_Description) {
delete _Description;
_Description = 0;
}
}


#include "T806.h"

NLogger* T806::_x14714 = NLoggerFactory::getLogger("ApiImpl");



T806::T806():T807(){

    this->_h14810 = 0;
    this->_r14795 = 0;
    this->_z14782 = 0;
    this->_n14732 = 0;
    this->_u14715 = 0;
    _u14715 = new AdApiImpl();
}

void T806::_m16920(Message* _z14716, bool _v14717, bool _u14718, bool _c14719) {
}

const char* T806::_m16936() {
return 0;
}

const char* T806::_m16938() {
return 0;
}

//@Override
const char* T806::_m16329(Message* _k14720, void* _o14721) {
return 0;
}

BannerAd* T806::displayBannerAd(AdContext* adContext) {
BannerAd* _x14722 = _u14715->displayBannerAd(adContext);
if (_x14722 != 0) {
_sendMessage0(new AdDisplayedNotification());
}
return _x14722;
}

InterstitialAd* T806::_m16958() {
InterstitialAd* _r14723 = _u14715->displayInterstitialAd();
if (_r14723 != 0) {
_sendMessage0(new AdDisplayedNotification());
}
return _r14723;
}

const char* T806::getAvatar(NPlayer* player) {
if (player->getThirdPartyId() != 0) {
if (player->getLoginSource() == ThirdPartySource::FACEBOOK) {
return NUtils::concat(NUtils::concat("http://graph.facebook.com/", player->getThirdPartyId()), "/picture");
} else if (player->getLoginSource() == ThirdPartySource::GOOGLEPLUS) {
return NUtils::concat(NUtils::concat("https://profiles.google.com/s2/photos/profile/", player->getThirdPartyId()), "?sz=50");
} else
return 0;
} else {
return 0;
}
}

bool T806::_m16960(ThirdPartySource* thirdPartySource) {
if (thirdPartySource == ThirdPartySource::FACEBOOK) {
return NuggetaSocialFacebook::isAvailable();
}
return false;
}

//@Override
const char* T806::thirdPartyLogin(ThirdPartySource* thirdPartySource) {
if (_m16960(thirdPartySource)) {
return _m16961(thirdPartySource);
} else {
return T807::thirdPartyLogin(thirdPartySource);
}
}

const char* T806::_m16961(ThirdPartySource* thirdPartySource) {
const char* _x6557 = _m16936();
ThirdPartyLoginResponseHandler* _b6558 = new ThirdPartyLoginResponseHandler(this, &T806::onThirdPartyLoginResponse35);
ThirdPartyLoginResponse* _c6561 = new ThirdPartyLoginResponse();
_c6561->setMessageId(_x6557);
if (thirdPartySource == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::loginFB(_c6561, _b6558);
}
return _x6557;
}

//@Override
const char* T806::thirdPartyLoginRequest(ThirdPartySource* thirdPartySource, ThirdPartyLoginResponseHandler* thirdPartyLoginResponseHandler) {
if (_m16960(thirdPartySource)) {
return _m16963(thirdPartySource, thirdPartyLoginResponseHandler);
} else {
return T807::thirdPartyLoginRequest(thirdPartySource, thirdPartyLoginResponseHandler);
}
}



const char* T806::_m16963(ThirdPartySource* _l14724, ThirdPartyLoginResponseHandler* _c14734) {
this->_n14732 = _c14734;
const char* _i6563 = _m16938();
ThirdPartyLoginResponseHandler* _y14736 = new ThirdPartyLoginResponseHandler(this, &T806::onThirdPartyLoginResponse36);
ThirdPartyLoginResponse* _a14740 = new ThirdPartyLoginResponse();
_a14740->setRequestId(_i6563);
if (_l14724 == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::loginFB(_a14740, _y14736);
}
return _i6563;
}

const char* T806::getThirdPartyFriends(ThirdPartySource* thirdPartySource) {
if (_m16960(thirdPartySource)) {
return _m16964(thirdPartySource);
} else {
return T807::getThirdPartyFriends(thirdPartySource);
}
}

const char* T806::_m16964(ThirdPartySource* thirdPartySource) {
const char* _o14726 = _m16936();
GetThirdPartyFriendsResponseHandler* _h6569 = new GetThirdPartyFriendsResponseHandler(this, &T806::onGetThirdPartyFriendsResponse37);
GetThirdPartyFriendsResponse* _k6570 = new GetThirdPartyFriendsResponse();
_k6570->setMessageId(_o14726);
if (thirdPartySource == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::getFriendsFB(_k6570, _h6569);
}
return _o14726;
}

//@Override
const char* T806::getThirdPartyFriendsRequest(ThirdPartySource* _l14725, GetThirdPartyFriendsResponseHandler* getThirdPartyFriendsResponseHandler) {
if (_m16960(_l14725)) {
return _m16966(_l14725, getThirdPartyFriendsResponseHandler);
} else {
return T807::getThirdPartyFriendsRequest(_l14725, getThirdPartyFriendsResponseHandler);
}
}

const char* T806::_m16966(ThirdPartySource* thirdPartySource, GetThirdPartyFriendsResponseHandler* _c14747) {
const char* _j6571 = _m16938();
GetThirdPartyFriendsResponse* _y6572 = new GetThirdPartyFriendsResponse();
_y6572->setRequestId(_j6571);
if (thirdPartySource == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::getFriendsFB(_y6572, _c14747);
}
return _j6571;
}

//@Override
const char* T806::publishFriendThirdPartyMessage(const char* title, const char* message, const char* pictureUrl, const char* link, const char* thirdPartyId, ThirdPartySource* thirdPartySource) {
if (_m16960(thirdPartySource)) {
return _m16967(title, message, pictureUrl, link, thirdPartyId, thirdPartySource);
} else {
return T807::publishFriendThirdPartyMessage(title, message, pictureUrl, link, thirdPartyId, thirdPartySource);
}
}

const char* T806::_m16967(const char* title, const char* message, const char* pictureUrl, const char* link, const char* thirdPartyId, ThirdPartySource* thirdPartySource) {
const char* _t6573 = _m16936();
PublishFriendThirdPartyMessageResponseHandler* _r6574 = new PublishFriendThirdPartyMessageResponseHandler(this, &T806::onPublishFriendThirdPartyMessageResponse38);
if (thirdPartyId != 0) {
PublishFriendThirdPartyMessageResponse* _r6575 = new PublishFriendThirdPartyMessageResponse();
_r6575->setMessageId(_t6573);
if (thirdPartySource == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::publishFB(_r6575, _r6574, title, message, pictureUrl, link, thirdPartyId);
}
} else {
PublishFriendThirdPartyMessageResponse* _s6576 = new PublishFriendThirdPartyMessageResponse();
_s6576->setMessageId(_t6573);
_s6576->setPublishFriendThirdPartyMessageStatus(PublishFriendThirdPartyMessageStatus::INVALID_CALL);
(*_r6574)(_s6576);
}
return _t6573;
}

//@Override
const char* T806::publishFriendThirdPartyMessageRequest(const char* title, const char* message, const char* pictureUrl, const char* link, const char* thirdPartyId, ThirdPartySource* thirdPartySource, PublishFriendThirdPartyMessageResponseHandler* publishFriendThirdPartyMessageResponseHandler) {
if (_m16960(thirdPartySource)) {
return _m16969(title, message, pictureUrl, link, thirdPartyId, thirdPartySource, publishFriendThirdPartyMessageResponseHandler);
} else {
return T807::publishFriendThirdPartyMessageRequest(title, message, pictureUrl, link, thirdPartyId, thirdPartySource, publishFriendThirdPartyMessageResponseHandler);
}
}

const char* T806::_m16969(const char* title, const char* message, const char* pictureUrl, const char* link, const char* thirdPartyId, ThirdPartySource* _h14733, PublishFriendThirdPartyMessageResponseHandler* publishFriendThirdPartyMessageResponseHandler) {
const char* _n14735 = _m16938();
if (thirdPartyId != 0) {
PublishFriendThirdPartyMessageResponse* _t6578 = new PublishFriendThirdPartyMessageResponse();
_t6578->setRequestId(_n14735);
if (_h14733 == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::publishFB(_t6578, publishFriendThirdPartyMessageResponseHandler, title, message, pictureUrl, link, thirdPartyId);
}
} else {
PublishFriendThirdPartyMessageResponse* _h6579 = new PublishFriendThirdPartyMessageResponse();
_h6579->setRequestId(_n14735);
_h6579->setPublishFriendThirdPartyMessageStatus(PublishFriendThirdPartyMessageStatus::INVALID_CALL);
(*publishFriendThirdPartyMessageResponseHandler)(_h6579);
}
return _n14735;
}

//@Override
const char* T806::publishThirdPartyMessage(const char* title, const char* message, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource) {
if (_m16960(thirdPartySource)) {
return _m16970(title, message, pictureUrl, link, thirdPartySource);
} else {
return T807::publishThirdPartyMessage(title, message, pictureUrl, link, thirdPartySource);
}
}

const char* T806::_m16970(const char* title, const char* message, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource) {
const char* _q14742 = _m16936();
PublishFriendThirdPartyMessageResponseHandler* _o6581 = new PublishFriendThirdPartyMessageResponseHandler(this, &T806::onPublishFriendThirdPartyMessageResponse39);
PublishFriendThirdPartyMessageResponse* _q14745 = new PublishFriendThirdPartyMessageResponse();
_q14745->setMessageId(_q14742);
if (thirdPartySource == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::publishFB(_q14745, _o6581, title, message, pictureUrl, link, 0);
}
return _q14742;
}

//@Override
const char* T806::publishThirdPartyMessageRequest(const char* title, const char* message, const char* pictureUrl, const char* link, ThirdPartySource* _t14741, PublishThirdPartyMessageResponseHandler* publishThirdPartyMessageResponseHandler) {
if (_m16960(_t14741)) {
return _m16971(title, message, pictureUrl, link, _t14741, publishThirdPartyMessageResponseHandler);
} else {
return T807::publishThirdPartyMessageRequest(title, message, pictureUrl, link, _t14741, publishThirdPartyMessageResponseHandler);
}
}



const char* T806::_m16971(const char* title, const char* message, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource, PublishThirdPartyMessageResponseHandler* _p14788) {
this->_z14782 = _p14788;
const char* _v14748 = _m16938();
PublishFriendThirdPartyMessageResponseHandler* _n6587 = new PublishFriendThirdPartyMessageResponseHandler(this, &T806::onPublishFriendThirdPartyMessageResponse40);
PublishFriendThirdPartyMessageResponse* _r14749 = new PublishFriendThirdPartyMessageResponse();
_r14749->setRequestId(_v14748);
if (thirdPartySource == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::publishFB(_r14749, _n6587, title, message, pictureUrl, link, 0);
}
return _v14748;
}

//@Override
const char* T806::inviteThirdPartyFriend(const char* thirdPartyId, const char* title, const char* inviteMessage, const char* pictureUrl, const char* link, ThirdPartySource* thirdPartySource) {
if (_m16960(thirdPartySource)) {
return _m16972(thirdPartyId, title, inviteMessage, pictureUrl, link, thirdPartySource);
} else {
return T807::inviteThirdPartyFriend(thirdPartyId, title, inviteMessage, pictureUrl, link, thirdPartySource);
}
}



const char* T806::_m16972(const char* thirdPartyId, const char* title, const char* message, const char* pictureUrl, const char* link, ThirdPartySource* _o14746) {
_r14795 = thirdPartyId;
const char* _t14756 = _m16936();
PublishFriendThirdPartyMessageResponseHandler* _y14757 = new PublishFriendThirdPartyMessageResponseHandler(this, &T806::onPublishFriendThirdPartyMessageResponse41);
if (thirdPartyId != 0) {
PublishFriendThirdPartyMessageResponse* _g14759 = new PublishFriendThirdPartyMessageResponse();
_g14759->setMessageId(_t14756);
if (_o14746 == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::publishFB(_g14759, _y14757, title, message, pictureUrl, link, 0);
}
} else {
PublishFriendThirdPartyMessageResponse* _o6598 = new PublishFriendThirdPartyMessageResponse();
_o6598->setMessageId(_t14756);
_o6598->setPublishFriendThirdPartyMessageStatus(PublishFriendThirdPartyMessageStatus::INVALID_CALL);
(*_y14757)(_o6598);
}
return _t14756;
}

//@Override
const char* T806::inviteThirdPartyFriendRequest(const char* _k14754, const char* _u14750, const char* _g14751, const char* _l14752, const char* _s14753, ThirdPartySource* _q14755, InviteThirdPartyFriendResponseHandler* inviteThirdPartyFriendResponseHandler) {
if (_m16960(_q14755)) {
return _m16973(_k14754, _u14750, _g14751, _l14752, _s14753, _q14755, inviteThirdPartyFriendResponseHandler);
} else {
return T807::inviteThirdPartyFriendRequest(_k14754, _u14750, _g14751, _l14752, _s14753, _q14755, inviteThirdPartyFriendResponseHandler);
}
}



const char* T806::_m16973(const char* _j14811, const char* _y14812, const char* _c14813, const char* _w14814, const char* _x14815, ThirdPartySource* _f14816, InviteThirdPartyFriendResponseHandler* _q14817) {
this->_h14810 = _q14817;
this->_r14795 = _j14811;
const char* _n14818 = _m16938();
PublishFriendThirdPartyMessageResponseHandler* _f14819 = new PublishFriendThirdPartyMessageResponseHandler(this, &T806::onPublishFriendThirdPartyMessageResponse42);
if (_j14811 != 0) {
PublishFriendThirdPartyMessageResponse* _v14824 = new PublishFriendThirdPartyMessageResponse();
_v14824->setRequestId(_n14818);
if (_f14816 == ThirdPartySource::FACEBOOK) {
NuggetaSocialFacebook::publishFB(_v14824, _f14819, _y14812, _c14813, _w14814, _x14815, 0);
}
} else {
PublishFriendThirdPartyMessageResponse* _j14825 = new PublishFriendThirdPartyMessageResponse();
_j14825->setRequestId(_n14818);
_j14825->setPublishFriendThirdPartyMessageStatus(PublishFriendThirdPartyMessageStatus::INVALID_CALL);
(*_f14819)(_j14825);
}
return _n14818;
}

//@Override
const char* T806::invitePlayer(const char* playerId, Message* invitationContent) {
InvitePlayerRequest* _w6607 = new InvitePlayerRequest();
_w6607->setPlayerId(playerId);
NInvitation* _h6608 = new NInvitation();
_h6608->setContent((Message*)_cloneSerializable(invitationContent));
_w6607->setInvitation(_h6608);
const char* _n6609 = _sendMessage0(_w6607);
return _n6609;
}

//@Override
const char* T806::invitePlayerRequest(const char* playerId, Message* invitationContent, InvitePlayerResponseHandler* invitePlayerResponseHandler) {
InvitePlayerRequest* _v14829 = new InvitePlayerRequest();
_v14829->setPlayerId(playerId);
NInvitation* _e14830 = new NInvitation();
_e14830->setContent((Message*)_cloneSerializable(invitationContent));
_v14829->setInvitation(_e14830);
const char* _l14831 = _request0(_v14829, invitePlayerResponseHandler);
return _l14831;
}

T806::~T806(){
if (_u14715) {
delete _u14715;
_u14715=0;
}
if (_n14732) {
delete _n14732;
_n14732=0;
}
if (_z14782) {
delete _z14782;
_z14782=0;
}
if (_r14795) {
delete _r14795;
_r14795 = 0;
}
if (_h14810) {
delete _h14810;
_h14810=0;
}
}

//@Override
void T806::onThirdPartyLoginResponse35(ThirdPartyLoginResponse* thirdpartyloginresponse) {
ThirdPartyLoginStatus* _o6559 = thirdpartyloginresponse->getThirdPartyLoginStatus();
if (_o6559 == ThirdPartyLoginStatus::CONNECTED) {
NPlayer* _c6560 = thirdpartyloginresponse->getPlayer();
thirdPartyLoginWithToken(_c6560->getLoginSource(), _c6560->getAccessToken());
} else {
_m16920(thirdpartyloginresponse, true, false, true);
}
}

//@Override
void T806::onThirdPartyLoginResponse36(ThirdPartyLoginResponse* _y14737) {
ThirdPartyLoginStatus* _c14738 = _y14737->getThirdPartyLoginStatus();
if (_c14738 == ThirdPartyLoginStatus::CONNECTED) {
NPlayer* _x14739 = _y14737->getPlayer();
thirdPartyLoginWithTokenRequest(_x14739->getLoginSource(), _x14739->getAccessToken(), _n14732);
} else {
(*_n14732)(_y14737);
}
}

//@Override
void T806::onGetThirdPartyFriendsResponse37(GetThirdPartyFriendsResponse* _f14744) {
_m16920(_f14744, true, false, true);
}

//@Override
void T806::onPublishFriendThirdPartyMessageResponse38(PublishFriendThirdPartyMessageResponse* _l14758) {
_m16920(_l14758, true, false, true);
}

//@Override
void T806::onPublishFriendThirdPartyMessageResponse39(PublishFriendThirdPartyMessageResponse* publishFriendThirdPartyMessageResponse) {
PublishThirdPartyMessageResponse* _d6582 = new PublishThirdPartyMessageResponse();
_d6582->setMessageId(_d6582->getMessageId());
PublishFriendThirdPartyMessageStatus* _z6583 = publishFriendThirdPartyMessageResponse->getPublishFriendThirdPartyMessageStatus();
if (_z6583 == PublishFriendThirdPartyMessageStatus::CANCELED) {
_d6582->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::CANCELED);
} else if (_z6583 == PublishFriendThirdPartyMessageStatus::INTERNAL_ERROR) {
_d6582->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::INTERNAL_ERROR);
} else if (_z6583 == PublishFriendThirdPartyMessageStatus::INVALID_CALL) {
_d6582->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::INVALID_CALL);
} else if (_z6583 == PublishFriendThirdPartyMessageStatus::SUCCESS) {
_d6582->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::SUCCESS);
}
_m16920(_d6582, true, false, true);
}

//@Override
void T806::onPublishFriendThirdPartyMessageResponse40(PublishFriendThirdPartyMessageResponse* publishFriendThirdPartyMessageResponse) {
PublishThirdPartyMessageResponse* _z14792 = new PublishThirdPartyMessageResponse();
_z14792->setMessageId(_z14792->getMessageId());
PublishFriendThirdPartyMessageStatus* _f6589 = publishFriendThirdPartyMessageResponse->getPublishFriendThirdPartyMessageStatus();
if (_f6589 == PublishFriendThirdPartyMessageStatus::CANCELED) {
_z14792->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::CANCELED);
} else if (_f6589 == PublishFriendThirdPartyMessageStatus::INTERNAL_ERROR) {
_z14792->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::INTERNAL_ERROR);
} else if (_f6589 == PublishFriendThirdPartyMessageStatus::INVALID_CALL) {
_z14792->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::INVALID_CALL);
} else if (_f6589 == PublishFriendThirdPartyMessageStatus::SUCCESS) {
_z14792->setPublishThirdPartyMessageStatus(PublishThirdPartyMessageStatus::SUCCESS);
}
(*_z14782)(_z14792);
}

//@Override
void T806::onPublishFriendThirdPartyMessageResponse41(PublishFriendThirdPartyMessageResponse* publishFriendThirdPartyMessageResponse) {
PublishFriendThirdPartyMessageStatus* _e6594 = publishFriendThirdPartyMessageResponse->getPublishFriendThirdPartyMessageStatus();
if (_e6594 == PublishFriendThirdPartyMessageStatus::SUCCESS) {
InviteThirdPartyFriendNotification* _j6595 = new InviteThirdPartyFriendNotification();
_j6595->setExecutionStatus(ExecutionStatus::OK);
_j6595->setThirdPartyId(_r14795);
_sendMessage0(_j6595);
} else {
InviteThirdPartyFriendResponse* _u6596 = new InviteThirdPartyFriendResponse();
_u6596->setMessageId(_u6596->getMessageId());
if (_e6594 == PublishFriendThirdPartyMessageStatus::CANCELED) {
_u6596->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::CANCELED);
} else if (_e6594 == PublishFriendThirdPartyMessageStatus::INTERNAL_ERROR) {
_u6596->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::INTERNAL_ERROR);
} else if (_e6594 == PublishFriendThirdPartyMessageStatus::INVALID_CALL) {
_u6596->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::INVALID_CALL);
} else if (_e6594 == PublishFriendThirdPartyMessageStatus::SUCCESS) {
_u6596->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::SUCCESS);
}
_m16920(_u6596, true, false, true);
}
}

//@Override
void T806::onPublishFriendThirdPartyMessageResponse42(PublishFriendThirdPartyMessageResponse* _o14760) {
PublishFriendThirdPartyMessageStatus* _u14821 = _o14760->getPublishFriendThirdPartyMessageStatus();
if (_u14821 == PublishFriendThirdPartyMessageStatus::SUCCESS) {
InviteThirdPartyFriendNotification* _x14822 = new InviteThirdPartyFriendNotification();
_x14822->setExecutionStatus(ExecutionStatus::OK);
_x14822->setThirdPartyId(_r14795);
_request0(_x14822, _h14810);
} else {
InviteThirdPartyFriendResponse* _u14823 = new InviteThirdPartyFriendResponse();
_u14823->setMessageId(_u14823->getMessageId());
if (_u14821 == PublishFriendThirdPartyMessageStatus::CANCELED) {
_u14823->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::CANCELED);
} else if (_u14821 == PublishFriendThirdPartyMessageStatus::INTERNAL_ERROR) {
_u14823->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::INTERNAL_ERROR);
} else if (_u14821 == PublishFriendThirdPartyMessageStatus::INVALID_CALL) {
_u14823->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::INVALID_CALL);
} else if (_u14821 == PublishFriendThirdPartyMessageStatus::SUCCESS) {
_u14823->setInviteThirdPartyFriendStatus(InviteThirdPartyFriendStatus::SUCCESS);
}
_m16920(_u14823, true, false, true);
}
}


#include "PauseSessionMonitoringResponse.h"

short PauseSessionMonitoringResponse::serializerID = -11079;













const char* PauseSessionMonitoringResponse::getMessageId() {
    return _MessageId;
}

void PauseSessionMonitoringResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool PauseSessionMonitoringResponse::isMessageIdSet() {
return _MessageIdSet;
}

void PauseSessionMonitoringResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* PauseSessionMonitoringResponse::getRequestId() {
return _RequestId;
}

void PauseSessionMonitoringResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool PauseSessionMonitoringResponse::isRequestIdSet() {
return _RequestIdSet;
}

void PauseSessionMonitoringResponse::unSetRequestId() {
_RequestIdSet = false;
}

PauseSessionMonitoringStatus* PauseSessionMonitoringResponse::getPauseSessionMonitoringStatus() {
return _PauseSessionMonitoringStatus;
}

void PauseSessionMonitoringResponse::setPauseSessionMonitoringStatus(PauseSessionMonitoringStatus* value) {
_PauseSessionMonitoringStatus = value;
_PauseSessionMonitoringStatusSet = true;
}

bool PauseSessionMonitoringResponse::isPauseSessionMonitoringStatusSet() {
return _PauseSessionMonitoringStatusSet;
}

void PauseSessionMonitoringResponse::unSetPauseSessionMonitoringStatus() {
_PauseSessionMonitoringStatusSet = false;
}

//@Override
short PauseSessionMonitoringResponse::getSerializerID() {
return serializerID;
}

void* PauseSessionMonitoringResponse::clone() {
PauseSessionMonitoringResponse* _w15612 = new PauseSessionMonitoringResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w15612->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w15612->setRequestId(_RequestId);
}
if (_PauseSessionMonitoringStatusSet == true && Utils::isNull(_PauseSessionMonitoringStatus) == false) {
_w15612->setPauseSessionMonitoringStatus(_PauseSessionMonitoringStatus);
}
return _w15612;
}

const char* PauseSessionMonitoringResponse::toString() {
const char* _g15613 = "";
_g15613 = NUtils::concat(_g15613, NUtils::concat(NUtils::concat("[", "PauseSessionMonitoringResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_g15613 = NUtils::concat(_g15613, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_g15613 = NUtils::concat(_g15613, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_PauseSessionMonitoringStatusSet == true && Utils::isNull(_PauseSessionMonitoringStatus) == false) {
_g15613 = NUtils::concat(_g15613, NUtils::concat(NUtils::concat("_PauseSessionMonitoringStatus=", _PauseSessionMonitoringStatus->toString()), "| "));
}
_g15613 = NUtils::concat(_g15613, "]");
return _g15613;
}

PauseSessionMonitoringResponse::PauseSessionMonitoringResponse(){
this->_PauseSessionMonitoringStatusSet = false;
this->_PauseSessionMonitoringStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

PauseSessionMonitoringResponse::~PauseSessionMonitoringResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "HeartBeatRequest.h"

short HeartBeatRequest::serializerID = -3174;













const char* HeartBeatRequest::getMessageId() {
    return _MessageId;
}

void HeartBeatRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool HeartBeatRequest::isMessageIdSet() {
return _MessageIdSet;
}

void HeartBeatRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* HeartBeatRequest::getRequestId() {
return _RequestId;
}

void HeartBeatRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool HeartBeatRequest::isRequestIdSet() {
return _RequestIdSet;
}

void HeartBeatRequest::unSetRequestId() {
_RequestIdSet = false;
}

int HeartBeatRequest::getCounter() {
return _Counter;
}

void HeartBeatRequest::setCounter(int value) {
_Counter = value;
_CounterSet = true;
}

bool HeartBeatRequest::isCounterSet() {
return _CounterSet;
}

void HeartBeatRequest::unSetCounter() {
_CounterSet = false;
}

//@Override
short HeartBeatRequest::getSerializerID() {
return serializerID;
}

void* HeartBeatRequest::clone() {
HeartBeatRequest* _d14114 = new HeartBeatRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d14114->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d14114->setRequestId(_RequestId);
}
if (_CounterSet == true && Utils::isNullInteger(_Counter) == false) {
_d14114->setCounter(_Counter);
}
return _d14114;
}

const char* HeartBeatRequest::toString() {
const char* _p14115 = "";
_p14115 = NUtils::concat(_p14115, NUtils::concat(NUtils::concat("[", "HeartBeatRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p14115 = NUtils::concat(_p14115, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p14115 = NUtils::concat(_p14115, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_CounterSet == true && Utils::isNullInteger(_Counter) == false) {
_p14115 = NUtils::concat(_p14115, NUtils::concat(NUtils::concat("_Counter=", _Counter), "| "));
}
_p14115 = NUtils::concat(_p14115, "]");
return _p14115;
}

HeartBeatRequest::HeartBeatRequest(){
this->_CounterSet = false;
this->_Counter = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

HeartBeatRequest::~HeartBeatRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "SaveGameStatus.h"

std::vector<SaveGameStatus*>* SaveGameStatus::_values = new std::vector<SaveGameStatus*>();

SaveGameStatus* SaveGameStatus::SUCCESS = new SaveGameStatus("SUCCESS", 0);

SaveGameStatus* SaveGameStatus::INVALID_CALL = new SaveGameStatus("INVALID_CALL", 1);

SaveGameStatus* SaveGameStatus::INTERNAL_ERROR = new SaveGameStatus("INTERNAL_ERROR", 2);

SaveGameStatus* SaveGameStatus::UNKNOWN_GAME_ID = new SaveGameStatus("UNKNOWN_GAME_ID", 4);

std::vector<SaveGameStatus*>* SaveGameStatus::values() {
    return _values;
}





int SaveGameStatus::getValue() {
return _value;
}

const char* SaveGameStatus::name() {
return _name;
}

int SaveGameStatus::ordinal() {
return _value;
}

SaveGameStatus::SaveGameStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

SaveGameStatus* SaveGameStatus::fromValue(int value) {
for (unsigned int _b5776 = 0; _b5776 < (unsigned int)_values->size(); _b5776++) {
SaveGameStatus* _x5777 = (*_values)[_b5776];
if (_x5777->getValue() == value) {
return _x5777;
}
}
return 0;
}

SaveGameStatus* SaveGameStatus::valueOf(const char* name) {
for (unsigned int _x13814 = 0; _x13814 < (unsigned int)_values->size(); _x13814++) {
SaveGameStatus* _h13815 = (*_values)[_x13814];
if (strcmp(name, _h13815->name()) == 0) {
return _h13815;
}
}
return 0;
}

//@Override
short SaveGameStatus::getSerializerID() {
return -10958;
}

const char* SaveGameStatus::toString() {
return NUtils::concat("SaveGameStatus.", _name);
}

void* SaveGameStatus::clone() {
return this;
}

SaveGameStatus::~SaveGameStatus(){
}


#include "ClientApplication.h"

std::vector<ClientApplication*>* ClientApplication::_values = new std::vector<ClientApplication*>();

ClientApplication* ClientApplication::PC = new ClientApplication("PC", 0);

ClientApplication* ClientApplication::MOBILE = new ClientApplication("MOBILE", 1);

std::vector<ClientApplication*>* ClientApplication::values() {
    return _values;
}





int ClientApplication::getValue() {
return _value;
}

const char* ClientApplication::name() {
return _name;
}

int ClientApplication::ordinal() {
return _value;
}

ClientApplication::ClientApplication(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

ClientApplication* ClientApplication::fromValue(int value) {
for (unsigned int _w6538 = 0; _w6538 < (unsigned int)_values->size(); _w6538++) {
ClientApplication* _m6539 = (*_values)[_w6538];
if (_m6539->getValue() == value) {
return _m6539;
}
}
return 0;
}

ClientApplication* ClientApplication::valueOf(const char* name) {
for (unsigned int _b14701 = 0; _b14701 < (unsigned int)_values->size(); _b14701++) {
ClientApplication* _w14702 = (*_values)[_b14701];
if (strcmp(name, _w14702->name()) == 0) {
return _w14702;
}
}
return 0;
}

//@Override
short ClientApplication::getSerializerID() {
return -20;
}

const char* ClientApplication::toString() {
return NUtils::concat("ClientApplication.", _name);
}

void* ClientApplication::clone() {
return this;
}

ClientApplication::~ClientApplication(){
}


#include "IncreasePlayerWalletStatus.h"

std::vector<IncreasePlayerWalletStatus*>* IncreasePlayerWalletStatus::_values = new std::vector<IncreasePlayerWalletStatus*>();

IncreasePlayerWalletStatus* IncreasePlayerWalletStatus::SUCCESS = new IncreasePlayerWalletStatus("SUCCESS", 0);

IncreasePlayerWalletStatus* IncreasePlayerWalletStatus::FAILURE = new IncreasePlayerWalletStatus("FAILURE", 1);

IncreasePlayerWalletStatus* IncreasePlayerWalletStatus::INVALID_CALL = new IncreasePlayerWalletStatus("INVALID_CALL", 2);

IncreasePlayerWalletStatus* IncreasePlayerWalletStatus::INTERNAL_ERROR = new IncreasePlayerWalletStatus("INTERNAL_ERROR", 3);

std::vector<IncreasePlayerWalletStatus*>* IncreasePlayerWalletStatus::values() {
    return _values;
}





int IncreasePlayerWalletStatus::getValue() {
return _value;
}

const char* IncreasePlayerWalletStatus::name() {
return _name;
}

int IncreasePlayerWalletStatus::ordinal() {
return _value;
}

IncreasePlayerWalletStatus::IncreasePlayerWalletStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

IncreasePlayerWalletStatus* IncreasePlayerWalletStatus::fromValue(int value) {
for (unsigned int _f5973 = 0; _f5973 < (unsigned int)_values->size(); _f5973++) {
IncreasePlayerWalletStatus* _w5974 = (*_values)[_f5973];
if (_w5974->getValue() == value) {
return _w5974;
}
}
return 0;
}

IncreasePlayerWalletStatus* IncreasePlayerWalletStatus::valueOf(const char* name) {
for (unsigned int _h14066 = 0; _h14066 < (unsigned int)_values->size(); _h14066++) {
IncreasePlayerWalletStatus* _d14067 = (*_values)[_h14066];
if (strcmp(name, _d14067->name()) == 0) {
return _d14067;
}
}
return 0;
}

//@Override
short IncreasePlayerWalletStatus::getSerializerID() {
return -10398;
}

const char* IncreasePlayerWalletStatus::toString() {
return NUtils::concat("IncreasePlayerWalletStatus.", _name);
}

void* IncreasePlayerWalletStatus::clone() {
return this;
}

IncreasePlayerWalletStatus::~IncreasePlayerWalletStatus(){
}


#include "StartDetails.h"

short StartDetails::serializerID = -3179;

































const char* StartDetails::getStoreId() {
    return _storeId;
}

void StartDetails::setStoreId(const char* value) {
if (_storeId && _storeId != value) {
    delete _storeId;
}
if (value) {
    _storeId = strdup(value);
} else {
    _storeId = 0;
}
_storeIdSet = true;
}

bool StartDetails::isstoreIdSet() {
return _storeIdSet;
}

void StartDetails::unSetstoreId() {
_storeIdSet = false;
}

const char* StartDetails::getData() {
return _Data;
}

void StartDetails::setData(const char* value) {
if (_Data && _Data != value) {
delete _Data;
}
if (value) {
_Data = strdup(value);
} else {
_Data = 0;
}
_DataSet = true;
}

bool StartDetails::isDataSet() {
return _DataSet;
}

void StartDetails::unSetData() {
_DataSet = false;
}

bool StartDetails::isUseDefaultImpl() {
return _UseDefaultImpl;
}

void StartDetails::setUseDefaultImpl(bool value) {
_UseDefaultImpl = value;
_UseDefaultImplSet = true;
}

bool StartDetails::isUseDefaultImplSet() {
return _UseDefaultImplSet;
}

void StartDetails::unSetUseDefaultImpl() {
_UseDefaultImplSet = false;
}

int StartDetails::getCurrentVersion() {
return _CurrentVersion;
}

void StartDetails::setCurrentVersion(int value) {
_CurrentVersion = value;
_CurrentVersionSet = true;
}

bool StartDetails::isCurrentVersionSet() {
return _CurrentVersionSet;
}

void StartDetails::unSetCurrentVersion() {
_CurrentVersionSet = false;
}

int StartDetails::getNextVersion() {
return _NextVersion;
}

void StartDetails::setNextVersion(int value) {
_NextVersion = value;
_NextVersionSet = true;
}

bool StartDetails::isNextVersionSet() {
return _NextVersionSet;
}

void StartDetails::unSetNextVersion() {
_NextVersionSet = false;
}

const char* StartDetails::getTitle() {
return _Title;
}

void StartDetails::setTitle(const char* value) {
if (_Title && _Title != value) {
delete _Title;
}
if (value) {
_Title = strdup(value);
} else {
_Title = 0;
}
_TitleSet = true;
}

bool StartDetails::isTitleSet() {
return _TitleSet;
}

void StartDetails::unSetTitle() {
_TitleSet = false;
}

const char* StartDetails::getText() {
return _Text;
}

void StartDetails::setText(const char* value) {
if (_Text && _Text != value) {
delete _Text;
}
if (value) {
_Text = strdup(value);
} else {
_Text = 0;
}
_TextSet = true;
}

bool StartDetails::isTextSet() {
return _TextSet;
}

void StartDetails::unSetText() {
_TextSet = false;
}

const char* StartDetails::getUrl() {
return _Url;
}

void StartDetails::setUrl(const char* value) {
if (_Url && _Url != value) {
delete _Url;
}
if (value) {
_Url = strdup(value);
} else {
_Url = 0;
}
_UrlSet = true;
}

bool StartDetails::isUrlSet() {
return _UrlSet;
}

void StartDetails::unSetUrl() {
_UrlSet = false;
}

//@Override
short StartDetails::getSerializerID() {
return serializerID;
}

void* StartDetails::clone() {
StartDetails* _s14025 = new StartDetails();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_s14025->setStoreId(_storeId);
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_s14025->setData(_Data);
}
if (_UseDefaultImplSet == true && Utils::isNullBoolean(_UseDefaultImpl) == false) {
_s14025->setUseDefaultImpl(_UseDefaultImpl);
}
if (_CurrentVersionSet == true && Utils::isNullInteger(_CurrentVersion) == false) {
_s14025->setCurrentVersion(_CurrentVersion);
}
if (_NextVersionSet == true && Utils::isNullInteger(_NextVersion) == false) {
_s14025->setNextVersion(_NextVersion);
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_s14025->setTitle(_Title);
}
if (_TextSet == true && Utils::isNull(_Text) == false) {
_s14025->setText(_Text);
}
if (_UrlSet == true && Utils::isNull(_Url) == false) {
_s14025->setUrl(_Url);
}
return _s14025;
}

const char* StartDetails::toString() {
const char* _j14026 = "";
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("[", "StartDetails"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_DataSet == true && Utils::isNull(_Data) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_Data=", _Data), "| "));
}
if (_UseDefaultImplSet == true && Utils::isNullBoolean(_UseDefaultImpl) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_UseDefaultImpl=", _UseDefaultImpl), "| "));
}
if (_CurrentVersionSet == true && Utils::isNullInteger(_CurrentVersion) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_CurrentVersion=", _CurrentVersion), "| "));
}
if (_NextVersionSet == true && Utils::isNullInteger(_NextVersion) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_NextVersion=", _NextVersion), "| "));
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_Title=", _Title), "| "));
}
if (_TextSet == true && Utils::isNull(_Text) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_Text=", _Text), "| "));
}
if (_UrlSet == true && Utils::isNull(_Url) == false) {
_j14026 = NUtils::concat(_j14026, NUtils::concat(NUtils::concat("_Url=", _Url), "| "));
}
_j14026 = NUtils::concat(_j14026, "]");
return _j14026;
}

StartDetails::StartDetails(){
this->_UrlSet = false;
this->_Url = 0;
this->_TextSet = false;
this->_Text = 0;
this->_TitleSet = false;
this->_Title = 0;
this->_NextVersionSet = false;
this->_NextVersion = 0;
this->_CurrentVersionSet = false;
this->_CurrentVersion = 0;
this->_UseDefaultImplSet = false;
this->_DataSet = false;
this->_Data = 0;
this->_storeIdSet = false;
this->_storeId = 0;
}

StartDetails::~StartDetails(){
if (_storeId) {
delete _storeId;
_storeId = 0;
}
if (_Data) {
delete _Data;
_Data = 0;
}
if (_Title) {
delete _Title;
_Title = 0;
}
if (_Text) {
delete _Text;
_Text = 0;
}
if (_Url) {
delete _Url;
_Url = 0;
}
}


#include "T811.h"



T811::T811(ByteBuffer* _n15590){
    this->_g7199 = 0;
    this->_g7199 = _n15590;
}

//@Override
void T811::_m16032(int _e15591, short _l15592) {
    _g7199->putShortAt(_e15591, _l15592);
}

//@Override
void T811::_m16029(int _x15593) {
_g7199->skip(_x15593);
}

//@Override
void T811::_m16948() {
}

//@Override
void T811::_m16947(int length) {
}

//@Override
int T811::_m16986() {
return _g7199->limit();
}

//@Override
int T811::_m16028() {
return _g7199->position();
}

//@Override
short T811::_m16316() {
return _g7199->getShort();
}

CppByteArray* T811::_m17032(int _s15594) {
return _g7199->getBytes(_s15594);
}

double T811::_m16892() {
return _g7199->getDouble();
}

//@Override
const char* T811::_m16893() {
int _t15595 = _m16316();
CppByteArray* _d15597 = _m17032(_t15595);
const char* _w15598 = ByteUtil::getString(_d15597);
delete _d15597;
return _w15598;
}

int T811::_m16315() {
return _g7199->getInt();
}

long long int T811::_m16890() {
return _g7199->getLong();
}

unsigned char T811::_m16314() {
return _g7199->get();
}

float T811::_m16891() {
return _g7199->getFloat();
}

void T811::_m16035(short _r15599) {
_g7199->putShort(_r15599);
}

void T811::_m16036(unsigned char _b15600) {
_g7199->put(_b15600);
}

void T811::_m16038(int _b15601, int _q15602) {
_g7199->putIntAt(_b15601, _q15602);
}

//@Override
void T811::_m16991(const char* _f15603) {
CppByteArray* _q15604 = ByteUtil::getBytes(_f15603);
int _r15605 = _q15604->size();
_m16035((short)_r15605);
_g7199->putBytes(_q15604);
delete _q15604;
}

void T811::_m16992(double value) {
_g7199->putDouble(value);
}

void T811::_m16993(int value) {
_g7199->putInt(value);
}

void T811::_m16994(long long value) {
_g7199->putLong(value);
}

void T811::_m16995(float _o15609) {
_g7199->putFloat(_o15609);
}

ByteBuffer* T811::_m17030() {
return _g7199;
}

T811::~T811(){
if (_g7199) {
delete _g7199;
_g7199=0;
}
}


#include "UnjoinGameResponse.h"

short UnjoinGameResponse::serializerID = -10519;

















const char* UnjoinGameResponse::getMessageId() {
    return _MessageId;
}

void UnjoinGameResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool UnjoinGameResponse::isMessageIdSet() {
return _MessageIdSet;
}

void UnjoinGameResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* UnjoinGameResponse::getRequestId() {
return _RequestId;
}

void UnjoinGameResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool UnjoinGameResponse::isRequestIdSet() {
return _RequestIdSet;
}

void UnjoinGameResponse::unSetRequestId() {
_RequestIdSet = false;
}

UnjoinGameStatus* UnjoinGameResponse::getUnjoinGameStatus() {
return _UnjoinGameStatus;
}

void UnjoinGameResponse::setUnjoinGameStatus(UnjoinGameStatus* value) {
_UnjoinGameStatus = value;
_UnjoinGameStatusSet = true;
}

bool UnjoinGameResponse::isUnjoinGameStatusSet() {
return _UnjoinGameStatusSet;
}

void UnjoinGameResponse::unSetUnjoinGameStatus() {
_UnjoinGameStatusSet = false;
}

const char* UnjoinGameResponse::getGameId() {
return _GameId;
}

void UnjoinGameResponse::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool UnjoinGameResponse::isGameIdSet() {
return _GameIdSet;
}

void UnjoinGameResponse::unSetGameId() {
_GameIdSet = false;
}

//@Override
short UnjoinGameResponse::getSerializerID() {
return serializerID;
}

void* UnjoinGameResponse::clone() {
UnjoinGameResponse* _m14842 = new UnjoinGameResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_m14842->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_m14842->setRequestId(_RequestId);
}
if (_UnjoinGameStatusSet == true && Utils::isNull(_UnjoinGameStatus) == false) {
_m14842->setUnjoinGameStatus(_UnjoinGameStatus);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_m14842->setGameId(_GameId);
}
return _m14842;
}

const char* UnjoinGameResponse::toString() {
const char* _u14843 = "";
_u14843 = NUtils::concat(_u14843, NUtils::concat(NUtils::concat("[", "UnjoinGameResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_u14843 = NUtils::concat(_u14843, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_u14843 = NUtils::concat(_u14843, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_UnjoinGameStatusSet == true && Utils::isNull(_UnjoinGameStatus) == false) {
_u14843 = NUtils::concat(_u14843, NUtils::concat(NUtils::concat("_UnjoinGameStatus=", _UnjoinGameStatus->toString()), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_u14843 = NUtils::concat(_u14843, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_u14843 = NUtils::concat(_u14843, "]");
return _u14843;
}

UnjoinGameResponse::UnjoinGameResponse(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_UnjoinGameStatusSet = false;
this->_UnjoinGameStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

UnjoinGameResponse::~UnjoinGameResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "GetPlayerWalletResponse.h"

short GetPlayerWalletResponse::serializerID = -10419;

















const char* GetPlayerWalletResponse::getMessageId() {
    return _MessageId;
}

void GetPlayerWalletResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetPlayerWalletResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetPlayerWalletResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetPlayerWalletResponse::getRequestId() {
return _RequestId;
}

void GetPlayerWalletResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetPlayerWalletResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetPlayerWalletResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetPlayerWalletStatus* GetPlayerWalletResponse::getGetPlayerWalletStatus() {
return _GetPlayerWalletStatus;
}

void GetPlayerWalletResponse::setGetPlayerWalletStatus(GetPlayerWalletStatus* value) {
_GetPlayerWalletStatus = value;
_GetPlayerWalletStatusSet = true;
}

bool GetPlayerWalletResponse::isGetPlayerWalletStatusSet() {
return _GetPlayerWalletStatusSet;
}

void GetPlayerWalletResponse::unSetGetPlayerWalletStatus() {
_GetPlayerWalletStatusSet = false;
}

NPlayerWallet* GetPlayerWalletResponse::getWallet() {
return _Wallet;
}

void GetPlayerWalletResponse::setWallet(NPlayerWallet* value) {
if (_Wallet && _Wallet != value) {
delete _Wallet;
}
_Wallet = value;
_WalletSet = true;
}

bool GetPlayerWalletResponse::isWalletSet() {
return _WalletSet;
}

void GetPlayerWalletResponse::unSetWallet() {
_WalletSet = false;
}

//@Override
short GetPlayerWalletResponse::getSerializerID() {
return serializerID;
}

void* GetPlayerWalletResponse::clone() {
GetPlayerWalletResponse* _s10745 = new GetPlayerWalletResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s10745->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s10745->setRequestId(_RequestId);
}
if (_GetPlayerWalletStatusSet == true && Utils::isNull(_GetPlayerWalletStatus) == false) {
_s10745->setGetPlayerWalletStatus(_GetPlayerWalletStatus);
}
if (_WalletSet == true && Utils::isNull(_Wallet) == false) {
_s10745->setWallet((NPlayerWallet*)(_Wallet->clone()));
}
return _s10745;
}

const char* GetPlayerWalletResponse::toString() {
const char* _n10746 = "";
_n10746 = NUtils::concat(_n10746, NUtils::concat(NUtils::concat("[", "GetPlayerWalletResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n10746 = NUtils::concat(_n10746, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n10746 = NUtils::concat(_n10746, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetPlayerWalletStatusSet == true && Utils::isNull(_GetPlayerWalletStatus) == false) {
_n10746 = NUtils::concat(_n10746, NUtils::concat(NUtils::concat("_GetPlayerWalletStatus=", _GetPlayerWalletStatus->toString()), "| "));
}
if (_WalletSet == true && Utils::isNull(_Wallet) == false) {
_n10746 = NUtils::concat(_n10746, NUtils::concat(NUtils::concat("_Wallet=", _Wallet->toString()), "| "));
}
_n10746 = NUtils::concat(_n10746, "]");
return _n10746;
}

GetPlayerWalletResponse::GetPlayerWalletResponse(){
this->_WalletSet = false;
this->_Wallet = 0;
this->_GetPlayerWalletStatusSet = false;
this->_GetPlayerWalletStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetPlayerWalletResponse::~GetPlayerWalletResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Wallet) {
delete _Wallet;
_Wallet=0;
}
}


#include "T802.h"

















T802::T802(T810* _u14892, MessageListener* _k14895, ConnectionInvalidVersionDetectedListenerCollection* _i14897, ConnectionLostListenerCollection* _g14898){
    this->_t6671 = 0;
    this->_u6670 = 0;
    this->_v14896 = 10;
    this->_q6668 = 0;
    this->_w14894 = -1;
    this->_v14893 = new std::vector<unsigned char>();
    this->_r6665 = 0;
    this->_w14891 = NLoggerFactory::getLogger("Network");
    this->_r6665 = _u14892;
    this->_q6668 = _k14895;
    this->_u6670 = _i14897;
    this->_t6671 = _g14898;
}

T811* T802::_m16980(Message* msg) {
    ByteBuffer* _h14900 = ByteBuffer::allocate();
    T811* _a14901 = new T811(_h14900);
    _a14901->_m16029(4);
    T813::_m16037(_r6665, msg, _a14901);
    int _n6674 = _a14901->_m16028() - 4;
    _a14901->_m16038(0, _n6674);
    _h14900->flip();
    return _a14901;
}

const char* T802::_m16954(Message* _n14903) {
T817* _i14904 = new T817("");
T816::_m16606(_r6665, _n14903, _i14904);
const char* _k14905 = _i14904->toString();
int _r14906 = sizeof(_k14905);
const char* _h14907 = _m16981(NUtils::concat(_r14906, ""), _v14896);
const char* _a14908 = NUtils::concat(_h14907, _k14905);
return _a14908;
}

void T802::_m16982(CppByteArray* _d14909) {
for (unsigned int _o14910 = 0; _o14910 < (unsigned int)_d14909->size(); _o14910++) {
_m16983((*_d14909)[_o14910]);
}
}

void T802::_m16983(unsigned char _e14911) {
_v14893->push_back((unsigned char)_e14911);
if (_w14894 == -1) {
if (_v14893->size() == 4) {
ByteBuffer* _n14912 = ByteBuffer::allocate();
for (unsigned int _i6682 = 0; _i6682 < (unsigned int)4; _i6682++) {
    _n14912->put((*_v14893)[_i6682]);
}
_n14912->flip();
_v14893->clear();
_w14894 = _n14912->getInt();
delete _n14912;
}
} else {
if (_v14893->size() == _w14894) {
ByteBuffer* _t14914 = ByteBuffer::allocate();
for (unsigned int _w14915 = 0; _w14915 < (unsigned int)_w14894; _w14915++) {
    _t14914->put((*_v14893)[_w14915]);
}
_t14914->flip();
Message* _e6685 = 0;
try {
    T811* _w14917 = new T811(_t14914);
    _e6685 = (Message*)T812::readObject(_r6665, _w14917);
    delete _w14917;
    _v14893->clear();
    _w14894 = -1;
    try {
        (*_q6668)(_e6685);
    } catch (std::exception* e) {
        _w14891->errorCause(NUtils::concat("Error occured while processing message : ", _e6685->toString()), e);
    }
} catch (std::exception* e) {
    _w14891->errorCause("Can't read command ", e);
    _u6670->fireInvalidVersionDetected();
}
}
}
}

const char* T802::_m16981(const char* _v14918, int _b14919) {
int _h6687 = sizeof(_v14918);
for (unsigned int _r14921 = _h6687; _r14921 < (unsigned int)_b14919; _r14921++) {
_v14918 = NUtils::concat("0", _v14918);
}
return _v14918;
}

void T802::_m16952(const char* _f14922) {
T817* _f14923 = 0;
while (sizeof(_f14922) > 0) {
const char* _y14924 = NUtils::substr(_f14922, 0, _v14896);
int _var43;
std::istringstream(_y14924) >> _var43;
int _d14925 = _var43;
_f14922 = NUtils::substr(_f14922, _v14896);
_f14923 = new T817(NUtils::substr(_f14922, 0, _d14925));
Message* _k14926 = 0;
try {
_k14926 = (Message*)T815::_m16617(_r6665, _f14923);
_f14922 = NUtils::substr(_f14922, _d14925);
try {
(*_q6668)(_k14926);
} catch (std::exception* e) {
_w14891->errorCause("Error occured while processing message : ", e);
}
} catch (std::exception* e) {
_w14891->errorCause("Can't read command ", e);
_u6670->fireInvalidVersionDetected();
return;
}
}
}

T802::~T802(){
if (_w14891) {
delete _w14891;
_w14891=0;
}
if (_r6665) {
delete _r6665;
_r6665=0;
}
if (_q6668) {
delete _q6668;
_q6668=0;
}
if (_u6670) {
delete _u6670;
_u6670=0;
}
if (_t6671) {
delete _t6671;
_t6671=0;
}
}


#include "T815.h"

Serializable* T815::_m16617(T810* _l14237, T808* _e14238) {
    Serializable* _x14239 = 0;
    try {
        unsigned char _v14240 = _e14238->_m16314();
        if (_v14240 == T809::_g15500) {
            return 0;
        }
        _e14238->_m16315();
        short _c14241 = _e14238->_m16316();
        _x14239 = _l14237->_m16050(_e14238, _c14241);
    } catch (std::exception* e) {
        throw new std::exception();
    }
    return _x14239;
}

std::vector<int>* T815::_m16883(T810* _w14242, T808* _v14243) {
unsigned char _r6132 = _v14243->_m16314();
if (_r6132 == T809::_g15500) {
    return 0;
}
_v14243->_m16315();
short _n6133 = _v14243->_m16316();
std::vector<int>* _b14246 = new std::vector<int>();
for (unsigned int _n6135 = 0; _n6135 < (unsigned int)_n6133; _n6135++) {
    unsigned char _j6136 = _v14243->_m16314();
    if (_j6136 == T809::_g15500) {
        _b14246->push_back(Utils::NULL_INTEGER);
    } else {
        _b14246->push_back(_v14243->_m16315());
    }
}
return _b14246;
}

std::vector<short>* T815::_m16884(T810* factory, T808* stream) {
unsigned char _o14244 = stream->_m16314();
if (_o14244 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _s14245 = stream->_m16316();
std::vector<short>* _u14253 = new std::vector<short>();
for (unsigned int _s14247 = 0; _s14247 < (unsigned int)_s14245; _s14247++) {
unsigned char _n14248 = stream->_m16314();
if (_n14248 == T809::_g15500) {
    _u14253->push_back(Utils::NULL_SHORT);
} else {
    _u14253->push_back(stream->_m16316());
}
}
return _u14253;
}

std::vector<long long>* T815::_m16885(T810* _y14249, T808* _x14250) {
unsigned char _s6142 = _x14250->_m16314();
if (_s6142 == T809::_g15500) {
return 0;
}
_x14250->_m16315();
short _s6143 = _x14250->_m16316();
std::vector<long long>* _w14260 = new std::vector<long long>();
for (unsigned int _d6145 = 0; _d6145 < (unsigned int)_s6143; _d6145++) {
unsigned char _e6146 = _x14250->_m16314();
if (_e6146 == T809::_g15500) {
_w14260->push_back(Utils::NULL_LONG);
} else {
_w14260->push_back(_x14250->_m16890());
}
}
return _w14260;
}

std::vector<float>* T815::_m16886(T810* factory, T808* stream) {
unsigned char _o14251 = stream->_m16314();
if (_o14251 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _a14252 = stream->_m16316();
std::vector<float>* _j14267 = new std::vector<float>();
for (unsigned int _z14254 = 0; _z14254 < (unsigned int)_a14252; _z14254++) {
unsigned char _u14255 = stream->_m16314();
if (_u14255 == T809::_g15500) {
_j14267->push_back(Utils::NULL_FLOAT);
} else {
_j14267->push_back(stream->_m16891());
}
}
return _j14267;
}

std::vector<double>* T815::_m16887(T810* _g14256, T808* _l14257) {
unsigned char _b6152 = _l14257->_m16314();
if (_b6152 == T809::_g15500) {
return 0;
}
_l14257->_m16315();
short _l6153 = _l14257->_m16316();
std::vector<double>* _t14274 = new std::vector<double>();
for (unsigned int _v6155 = 0; _v6155 < (unsigned int)_l6153; _v6155++) {
unsigned char _u14262 = _l14257->_m16314();
if (_u14262 == T809::_g15500) {
_t14274->push_back(Utils::NULL_DOUBLE);
} else {
_t14274->push_back(_l14257->_m16892());
}
}
return _t14274;
}

std::vector<const char*>* T815::_m16882(T810* factory, T808* stream) {
unsigned char _i14258 = stream->_m16314();
if (_i14258 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _b14259 = stream->_m16316();
std::vector<const char*>* _v14281 = new std::vector<const char*>();
for (unsigned int _r14261 = 0; _r14261 < (unsigned int)_b14259; _r14261++) {
_v14281->push_back(_m16877(stream));
}
return _v14281;
}

std::vector<bool>* T815::_m16888(T810* factory, T808* stream) {
unsigned char _w6161 = stream->_m16314();
if (_w6161 == T809::_g15500) {
return 0;
}
stream->_m16315();
short _x14286 = stream->_m16316();
std::vector<bool>* _p14287 = new std::vector<bool>();
for (unsigned int _t14288 = 0; _t14288 < (unsigned int)_x14286; _t14288++) {
unsigned char _p14289 = stream->_m16314();
if (_p14289 == T809::_g15500) {
_p14287->push_back(Utils::NULL_BOOLEAN);
} else {
_p14287->push_back(stream->_m16314() == (unsigned char)1);
}
}
return _p14287;
}

NMatrix2* T815::_m16889(T810* _b14290, T808* _o14264) {
unsigned char _q14265 = _o14264->_m16314();
if (_q14265 == T809::_g15500) {
return 0;
}
_o14264->_m16315();
short _m14293 = _o14264->_m16316();
short _n14294 = _o14264->_m16316();
NMatrix2* _c14295 = new NMatrix2(_m14293, _n14294);
int _v14296 = _m14293 * _n14294;
for (unsigned int _b14297 = 0; _b14297 < (unsigned int)_v14296; _b14297++) {
_c14295->addItem(_m16617(_b14290, _o14264));
}
return _c14295;
}

const char* T815::_m16877(T808* stream) {
unsigned char _c6172 = stream->_m16314();
if (_c6172 == T809::_g15500) {
return 0;
}
return stream->_m16893();
}

NDate* T815::_m16941(T808* stream) {
unsigned char _f6173 = stream->_m16314();
if (_f6173 == T809::_g15500) {
return Utils::NULL_DATE;
}
return new NDate(stream->_m16890());
}

double T815::_m16880(T808* stream) {
unsigned char _b6174 = stream->_m16314();
if (_b6174 == T809::_g15500) {
return Utils::NULL_DOUBLE;
}
return stream->_m16892();
}

int T815::_m16875(T808* stream) {
unsigned char _n6175 = stream->_m16314();
if (_n6175 == T809::_g15500) {
return Utils::NULL_INTEGER;
}
return stream->_m16315();
}

long long T815::_m16881(T808* _s14271) {
unsigned char _q14272 = _s14271->_m16314();
if (_q14272 == T809::_g15500) {
return Utils::NULL_LONG;
}
return _s14271->_m16890();
}

unsigned char T815::_m16942(T808* stream) {
unsigned char _n6177 = stream->_m16314();
if (_n6177 == T809::_g15500) {
return Utils::NULL_BYTE;
}
return stream->_m16314();
}

short T815::_m16943(T808* stream) {
unsigned char _s6178 = stream->_m16314();
if (_s6178 == T809::_g15500) {
return Utils::NULL_SHORT;
}
return stream->_m16316();
}

float T815::_m16944(T808* stream) {
unsigned char _q6179 = stream->_m16314();
if (_q6179 == T809::_g15500) {
return Utils::NULL_FLOAT;
}
return stream->_m16891();
}

bool T815::_m16879(T808* stream) {
unsigned char _q14279 = stream->_m16314();
if (_q14279 == T809::_g15500) {
return Utils::NULL_BOOLEAN;
}
return stream->_m16314() == (unsigned char)1;
}

int T815::_m16945(T808* _u14278) {
return _u14278->_m16315();
}

long long int T815::_m16946(T808* stream) {
return stream->_m16890();
}

short T815::_m16876(T808* stream) {
return stream->_m16316();
}

void T815::_m16878(T808* _l14319) {
unsigned char _j14320 = _l14319->_m16314();
if (_j14320 == T809::_g15500) {
return;
}
if (_j14320 == T809::_v15501) {
int _v14321 = _l14319->_m16315();
_l14319->_m16947(_v14321);
return;
}
_l14319->_m16948();
}

T815::T815(){
}

T815::~T815(){
}


#include "LoadGhostStatus.h"

std::vector<LoadGhostStatus*>* LoadGhostStatus::_values = new std::vector<LoadGhostStatus*>();

LoadGhostStatus* LoadGhostStatus::SUCCESS = new LoadGhostStatus("SUCCESS", 0);

LoadGhostStatus* LoadGhostStatus::FAILURE = new LoadGhostStatus("FAILURE", 1);

LoadGhostStatus* LoadGhostStatus::INVALID_CALL = new LoadGhostStatus("INVALID_CALL", 2);

LoadGhostStatus* LoadGhostStatus::INTERNAL_ERROR = new LoadGhostStatus("INTERNAL_ERROR", 3);

std::vector<LoadGhostStatus*>* LoadGhostStatus::values() {
    return _values;
}





int LoadGhostStatus::getValue() {
return _value;
}

const char* LoadGhostStatus::name() {
return _name;
}

int LoadGhostStatus::ordinal() {
return _value;
}

LoadGhostStatus::LoadGhostStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

LoadGhostStatus* LoadGhostStatus::fromValue(int value) {
for (unsigned int _m7281 = 0; _m7281 < (unsigned int)_values->size(); _m7281++) {
LoadGhostStatus* _i7282 = (*_values)[_m7281];
if (_i7282->getValue() == value) {
return _i7282;
}
}
return 0;
}

LoadGhostStatus* LoadGhostStatus::valueOf(const char* name) {
for (unsigned int _f15767 = 0; _f15767 < (unsigned int)_values->size(); _f15767++) {
LoadGhostStatus* _c15768 = (*_values)[_f15767];
if (strcmp(name, _c15768->name()) == 0) {
return _c15768;
}
}
return 0;
}

//@Override
short LoadGhostStatus::getSerializerID() {
return -10738;
}

const char* LoadGhostStatus::toString() {
return NUtils::concat("LoadGhostStatus.", _name);
}

void* LoadGhostStatus::clone() {
return this;
}

LoadGhostStatus::~LoadGhostStatus(){
}


#include "AcceptFriendDemandResponse.h"

short AcceptFriendDemandResponse::serializerID = -10259;

















const char* AcceptFriendDemandResponse::getMessageId() {
    return _MessageId;
}

void AcceptFriendDemandResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool AcceptFriendDemandResponse::isMessageIdSet() {
return _MessageIdSet;
}

void AcceptFriendDemandResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* AcceptFriendDemandResponse::getRequestId() {
return _RequestId;
}

void AcceptFriendDemandResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool AcceptFriendDemandResponse::isRequestIdSet() {
return _RequestIdSet;
}

void AcceptFriendDemandResponse::unSetRequestId() {
_RequestIdSet = false;
}

AcceptFriendDemandStatus* AcceptFriendDemandResponse::getAcceptFriendDemandStatus() {
return _AcceptFriendDemandStatus;
}

void AcceptFriendDemandResponse::setAcceptFriendDemandStatus(AcceptFriendDemandStatus* value) {
_AcceptFriendDemandStatus = value;
_AcceptFriendDemandStatusSet = true;
}

bool AcceptFriendDemandResponse::isAcceptFriendDemandStatusSet() {
return _AcceptFriendDemandStatusSet;
}

void AcceptFriendDemandResponse::unSetAcceptFriendDemandStatus() {
_AcceptFriendDemandStatusSet = false;
}

const char* AcceptFriendDemandResponse::getFriendDemandId() {
return _FriendDemandId;
}

void AcceptFriendDemandResponse::setFriendDemandId(const char* value) {
if (_FriendDemandId && _FriendDemandId != value) {
delete _FriendDemandId;
}
if (value) {
_FriendDemandId = strdup(value);
} else {
_FriendDemandId = 0;
}
_FriendDemandIdSet = true;
}

bool AcceptFriendDemandResponse::isFriendDemandIdSet() {
return _FriendDemandIdSet;
}

void AcceptFriendDemandResponse::unSetFriendDemandId() {
_FriendDemandIdSet = false;
}

//@Override
short AcceptFriendDemandResponse::getSerializerID() {
return serializerID;
}

void* AcceptFriendDemandResponse::clone() {
AcceptFriendDemandResponse* _y15584 = new AcceptFriendDemandResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15584->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15584->setRequestId(_RequestId);
}
if (_AcceptFriendDemandStatusSet == true && Utils::isNull(_AcceptFriendDemandStatus) == false) {
_y15584->setAcceptFriendDemandStatus(_AcceptFriendDemandStatus);
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_y15584->setFriendDemandId(_FriendDemandId);
}
return _y15584;
}

const char* AcceptFriendDemandResponse::toString() {
const char* _s15585 = "";
_s15585 = NUtils::concat(_s15585, NUtils::concat(NUtils::concat("[", "AcceptFriendDemandResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s15585 = NUtils::concat(_s15585, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s15585 = NUtils::concat(_s15585, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_AcceptFriendDemandStatusSet == true && Utils::isNull(_AcceptFriendDemandStatus) == false) {
_s15585 = NUtils::concat(_s15585, NUtils::concat(NUtils::concat("_AcceptFriendDemandStatus=", _AcceptFriendDemandStatus->toString()), "| "));
}
if (_FriendDemandIdSet == true && Utils::isNull(_FriendDemandId) == false) {
_s15585 = NUtils::concat(_s15585, NUtils::concat(NUtils::concat("_FriendDemandId=", _FriendDemandId), "| "));
}
_s15585 = NUtils::concat(_s15585, "]");
return _s15585;
}

AcceptFriendDemandResponse::AcceptFriendDemandResponse(){
this->_FriendDemandIdSet = false;
this->_FriendDemandId = 0;
this->_AcceptFriendDemandStatusSet = false;
this->_AcceptFriendDemandStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

AcceptFriendDemandResponse::~AcceptFriendDemandResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_FriendDemandId) {
delete _FriendDemandId;
_FriendDemandId = 0;
}
}


#include "TestPrimitiveList.h"

short TestPrimitiveList::serializerID = -3156;









































const char* TestPrimitiveList::getMessageId() {
    return _MessageId;
}

void TestPrimitiveList::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool TestPrimitiveList::isMessageIdSet() {
return _MessageIdSet;
}

void TestPrimitiveList::unSetMessageId() {
_MessageIdSet = false;
}

const char* TestPrimitiveList::getRequestId() {
return _RequestId;
}

void TestPrimitiveList::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool TestPrimitiveList::isRequestIdSet() {
return _RequestIdSet;
}

void TestPrimitiveList::unSetRequestId() {
_RequestIdSet = false;
}

std::vector<const char*>* TestPrimitiveList::getStringList() {
return _StringList;
}

void TestPrimitiveList::setStringList(std::vector<const char*>* value) {
if (_StringList) {
for (unsigned int i=0; i < _StringList->size(); i++) {
delete (*_StringList)[i];
}
}
if (_StringList && _StringList != value) {
delete _StringList;
}
_StringList = value;
_StringListSet = true;
}

bool TestPrimitiveList::isStringListSet() {
return _StringListSet;
}

void TestPrimitiveList::unSetStringList() {
_StringListSet = false;
}

std::vector<int>* TestPrimitiveList::getIntegerList() {
return _IntegerList;
}

void TestPrimitiveList::setIntegerList(std::vector<int>* value) {
if (_IntegerList && _IntegerList != value) {
delete _IntegerList;
}
_IntegerList = value;
_IntegerListSet = true;
}

bool TestPrimitiveList::isIntegerListSet() {
return _IntegerListSet;
}

void TestPrimitiveList::unSetIntegerList() {
_IntegerListSet = false;
}

std::vector<short>* TestPrimitiveList::getShortList() {
return _ShortList;
}

void TestPrimitiveList::setShortList(std::vector<short>* value) {
if (_ShortList && _ShortList != value) {
delete _ShortList;
}
_ShortList = value;
_ShortListSet = true;
}

bool TestPrimitiveList::isShortListSet() {
return _ShortListSet;
}

void TestPrimitiveList::unSetShortList() {
_ShortListSet = false;
}

std::vector<long long>* TestPrimitiveList::getLongList() {
return _LongList;
}

void TestPrimitiveList::setLongList(std::vector<long long>* value) {
if (_LongList && _LongList != value) {
delete _LongList;
}
_LongList = value;
_LongListSet = true;
}

bool TestPrimitiveList::isLongListSet() {
return _LongListSet;
}

void TestPrimitiveList::unSetLongList() {
_LongListSet = false;
}

std::vector<float>* TestPrimitiveList::getFloatList() {
return _FloatList;
}

void TestPrimitiveList::setFloatList(std::vector<float>* value) {
if (_FloatList && _FloatList != value) {
delete _FloatList;
}
_FloatList = value;
_FloatListSet = true;
}

bool TestPrimitiveList::isFloatListSet() {
return _FloatListSet;
}

void TestPrimitiveList::unSetFloatList() {
_FloatListSet = false;
}

std::vector<double>* TestPrimitiveList::getDoubleList() {
return _DoubleList;
}

void TestPrimitiveList::setDoubleList(std::vector<double>* value) {
if (_DoubleList && _DoubleList != value) {
delete _DoubleList;
}
_DoubleList = value;
_DoubleListSet = true;
}

bool TestPrimitiveList::isDoubleListSet() {
return _DoubleListSet;
}

void TestPrimitiveList::unSetDoubleList() {
_DoubleListSet = false;
}

std::vector<bool>* TestPrimitiveList::getBooleanList() {
return _BooleanList;
}

void TestPrimitiveList::setBooleanList(std::vector<bool>* value) {
if (_BooleanList && _BooleanList != value) {
delete _BooleanList;
}
_BooleanList = value;
_BooleanListSet = true;
}

bool TestPrimitiveList::isBooleanListSet() {
return _BooleanListSet;
}

void TestPrimitiveList::unSetBooleanList() {
_BooleanListSet = false;
}

NMatrix2* TestPrimitiveList::getPlayerMatrix2() {
return _PlayerMatrix2;
}

void TestPrimitiveList::setPlayerMatrix2(NMatrix2* value) {
if (_PlayerMatrix2 && _PlayerMatrix2 != value) {
delete _PlayerMatrix2;
}
_PlayerMatrix2 = value;
_PlayerMatrix2Set = true;
}

bool TestPrimitiveList::isPlayerMatrix2Set() {
return _PlayerMatrix2Set;
}

void TestPrimitiveList::unSetPlayerMatrix2() {
_PlayerMatrix2Set = false;
}

//@Override
short TestPrimitiveList::getSerializerID() {
return serializerID;
}

void* TestPrimitiveList::clone() {
TestPrimitiveList* _d15480 = new TestPrimitiveList();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_d15480->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_d15480->setRequestId(_RequestId);
}
if (_StringListSet == true && Utils::isNull(_StringList) == false) {
std::vector<const char*>* _p15481 = new std::vector<const char*>();
for (unsigned int _u7091 = 0; _u7091 < (unsigned int)_StringList->size(); ++_u7091) {
_p15481->push_back((*_StringList)[_u7091]);
}
_d15480->setStringList(_p15481);
}
if (_IntegerListSet == true && Utils::isNull(_IntegerList) == false) {
std::vector<int>* _e15483 = new std::vector<int>();
for (unsigned int _e7093 = 0; _e7093 < (unsigned int)_IntegerList->size(); ++_e7093) {
_e15483->push_back((*_IntegerList)[_e7093]);
}
_d15480->setIntegerList(_e15483);
}
if (_ShortListSet == true && Utils::isNull(_ShortList) == false) {
std::vector<short>* _b15485 = new std::vector<short>();
for (unsigned int _s7095 = 0; _s7095 < (unsigned int)_ShortList->size(); ++_s7095) {
_b15485->push_back((*_ShortList)[_s7095]);
}
_d15480->setShortList(_b15485);
}
if (_LongListSet == true && Utils::isNull(_LongList) == false) {
std::vector<long long>* _y15487 = new std::vector<long long>();
for (unsigned int _l7097 = 0; _l7097 < (unsigned int)_LongList->size(); ++_l7097) {
_y15487->push_back((*_LongList)[_l7097]);
}
_d15480->setLongList(_y15487);
}
if (_FloatListSet == true && Utils::isNull(_FloatList) == false) {
std::vector<float>* _o15489 = new std::vector<float>();
for (unsigned int _x7099 = 0; _x7099 < (unsigned int)_FloatList->size(); ++_x7099) {
_o15489->push_back((*_FloatList)[_x7099]);
}
_d15480->setFloatList(_o15489);
}
if (_DoubleListSet == true && Utils::isNull(_DoubleList) == false) {
std::vector<double>* _f15491 = new std::vector<double>();
for (unsigned int _h7101 = 0; _h7101 < (unsigned int)_DoubleList->size(); ++_h7101) {
_f15491->push_back((*_DoubleList)[_h7101]);
}
_d15480->setDoubleList(_f15491);
}
if (_BooleanListSet == true && Utils::isNull(_BooleanList) == false) {
std::vector<bool>* _x15493 = new std::vector<bool>();
for (unsigned int _s15494 = 0; _s15494 < (unsigned int)_BooleanList->size(); ++_s15494) {
_x15493->push_back((*_BooleanList)[_s15494]);
}
_d15480->setBooleanList(_x15493);
}
if (_PlayerMatrix2Set == true && Utils::isNull(_PlayerMatrix2) == false) {
_d15480->setPlayerMatrix2((NMatrix2*)(_PlayerMatrix2->clone()));
}
return _d15480;
}

const char* TestPrimitiveList::toString() {
const char* _y15495 = "";
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("[", "TestPrimitiveList"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StringListSet == true && Utils::isNull(_StringList) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_StringList=", "N/A"), "| "));
}
if (_IntegerListSet == true && Utils::isNull(_IntegerList) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_IntegerList=", "N/A"), "| "));
}
if (_ShortListSet == true && Utils::isNull(_ShortList) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_ShortList=", "N/A"), "| "));
}
if (_LongListSet == true && Utils::isNull(_LongList) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_LongList=", "N/A"), "| "));
}
if (_FloatListSet == true && Utils::isNull(_FloatList) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_FloatList=", "N/A"), "| "));
}
if (_DoubleListSet == true && Utils::isNull(_DoubleList) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_DoubleList=", "N/A"), "| "));
}
if (_BooleanListSet == true && Utils::isNull(_BooleanList) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_BooleanList=", "N/A"), "| "));
}
if (_PlayerMatrix2Set == true && Utils::isNull(_PlayerMatrix2) == false) {
_y15495 = NUtils::concat(_y15495, NUtils::concat(NUtils::concat("_PlayerMatrix2=", "N/A"), "| "));
}
_y15495 = NUtils::concat(_y15495, "]");
return _y15495;
}

TestPrimitiveList::TestPrimitiveList(){
this->_PlayerMatrix2Set = false;
this->_PlayerMatrix2 = 0;
this->_BooleanListSet = false;
this->_BooleanList = new std::vector<bool>();
this->_DoubleListSet = false;
this->_DoubleList = new std::vector<double>();
this->_FloatListSet = false;
this->_FloatList = new std::vector<float>();
this->_LongListSet = false;
this->_LongList = new std::vector<long long>();
this->_ShortListSet = false;
this->_ShortList = new std::vector<short>();
this->_IntegerListSet = false;
this->_IntegerList = new std::vector<int>();
this->_StringListSet = false;
this->_StringList = new std::vector<const char*>();
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

TestPrimitiveList::~TestPrimitiveList(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StringList) {
for (unsigned int i=0; i < _StringList->size(); i++) {
delete (*_StringList)[i];
}
delete _StringList;
_StringList=0;;
}
if (_PlayerMatrix2) {
delete _PlayerMatrix2;
_PlayerMatrix2=0;
}
}


#include "HandshakeResponse.h"

short HandshakeResponse::serializerID = -3001;

































const char* HandshakeResponse::getMessageId() {
    return _MessageId;
}

void HandshakeResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool HandshakeResponse::isMessageIdSet() {
return _MessageIdSet;
}

void HandshakeResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* HandshakeResponse::getRequestId() {
return _RequestId;
}

void HandshakeResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool HandshakeResponse::isRequestIdSet() {
return _RequestIdSet;
}

void HandshakeResponse::unSetRequestId() {
_RequestIdSet = false;
}

ExecutionStatus* HandshakeResponse::getExecutionStatus() {
return _ExecutionStatus;
}

void HandshakeResponse::setExecutionStatus(ExecutionStatus* value) {
_ExecutionStatus = value;
_ExecutionStatusSet = true;
}

bool HandshakeResponse::isExecutionStatusSet() {
return _ExecutionStatusSet;
}

void HandshakeResponse::unSetExecutionStatus() {
_ExecutionStatusSet = false;
}

HandshakeState* HandshakeResponse::getReason() {
return _Reason;
}

void HandshakeResponse::setReason(HandshakeState* value) {
_Reason = value;
_ReasonSet = true;
}

bool HandshakeResponse::isReasonSet() {
return _ReasonSet;
}

void HandshakeResponse::unSetReason() {
_ReasonSet = false;
}

const char* HandshakeResponse::getPlayerIdsStored() {
return _playerIdsStored;
}

void HandshakeResponse::setPlayerIdsStored(const char* value) {
if (_playerIdsStored && _playerIdsStored != value) {
delete _playerIdsStored;
}
if (value) {
_playerIdsStored = strdup(value);
} else {
_playerIdsStored = 0;
}
_playerIdsStoredSet = true;
}

bool HandshakeResponse::isplayerIdsStoredSet() {
return _playerIdsStoredSet;
}

void HandshakeResponse::unSetplayerIdsStored() {
_playerIdsStoredSet = false;
}

const char* HandshakeResponse::getSessionId() {
return _sessionId;
}

void HandshakeResponse::setSessionId(const char* value) {
if (_sessionId && _sessionId != value) {
delete _sessionId;
}
if (value) {
_sessionId = strdup(value);
} else {
_sessionId = 0;
}
_sessionIdSet = true;
}

bool HandshakeResponse::issessionIdSet() {
return _sessionIdSet;
}

void HandshakeResponse::unSetsessionId() {
_sessionIdSet = false;
}

PlayerSessionType* HandshakeResponse::getPlayerSessionType() {
return _PlayerSessionType;
}

void HandshakeResponse::setPlayerSessionType(PlayerSessionType* value) {
_PlayerSessionType = value;
_PlayerSessionTypeSet = true;
}

bool HandshakeResponse::isPlayerSessionTypeSet() {
return _PlayerSessionTypeSet;
}

void HandshakeResponse::unSetPlayerSessionType() {
_PlayerSessionTypeSet = false;
}

NPlayer* HandshakeResponse::getPlayer() {
return _Player;
}

void HandshakeResponse::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool HandshakeResponse::isPlayerSet() {
return _PlayerSet;
}

void HandshakeResponse::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short HandshakeResponse::getSerializerID() {
return serializerID;
}

void* HandshakeResponse::clone() {
HandshakeResponse* _e15259 = new HandshakeResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e15259->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e15259->setRequestId(_RequestId);
}
if (_ExecutionStatusSet == true && Utils::isNull(_ExecutionStatus) == false) {
_e15259->setExecutionStatus(_ExecutionStatus);
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_e15259->setReason(_Reason);
}
if (_playerIdsStoredSet == true && Utils::isNull(_playerIdsStored) == false) {
_e15259->setPlayerIdsStored(_playerIdsStored);
}
if (_sessionIdSet == true && Utils::isNull(_sessionId) == false) {
_e15259->setSessionId(_sessionId);
}
if (_PlayerSessionTypeSet == true && Utils::isNull(_PlayerSessionType) == false) {
_e15259->setPlayerSessionType(_PlayerSessionType);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_e15259->setPlayer((NPlayer*)(_Player->clone()));
}
return _e15259;
}

const char* HandshakeResponse::toString() {
const char* _p15260 = "";
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("[", "HandshakeResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ExecutionStatusSet == true && Utils::isNull(_ExecutionStatus) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_ExecutionStatus=", _ExecutionStatus->toString()), "| "));
}
if (_ReasonSet == true && Utils::isNull(_Reason) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_Reason=", _Reason->toString()), "| "));
}
if (_playerIdsStoredSet == true && Utils::isNull(_playerIdsStored) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_playerIdsStored=", _playerIdsStored), "| "));
}
if (_sessionIdSet == true && Utils::isNull(_sessionId) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_sessionId=", _sessionId), "| "));
}
if (_PlayerSessionTypeSet == true && Utils::isNull(_PlayerSessionType) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_PlayerSessionType=", _PlayerSessionType->toString()), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_p15260 = NUtils::concat(_p15260, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_p15260 = NUtils::concat(_p15260, "]");
return _p15260;
}

HandshakeResponse::HandshakeResponse(){
this->_PlayerSet = false;
this->_Player = 0;
this->_PlayerSessionTypeSet = false;
this->_PlayerSessionType = 0;
this->_sessionIdSet = false;
this->_sessionId = 0;
this->_playerIdsStoredSet = false;
this->_playerIdsStored = 0;
this->_ReasonSet = false;
this->_Reason = 0;
this->_ExecutionStatusSet = false;
this->_ExecutionStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

HandshakeResponse::~HandshakeResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_playerIdsStored) {
delete _playerIdsStored;
_playerIdsStored = 0;
}
if (_sessionId) {
delete _sessionId;
_sessionId = 0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "InvitePlayerRequest.h"

short InvitePlayerRequest::serializerID = -11137;





















const char* InvitePlayerRequest::getMessageId() {
    return _MessageId;
}

void InvitePlayerRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InvitePlayerRequest::isMessageIdSet() {
return _MessageIdSet;
}

void InvitePlayerRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* InvitePlayerRequest::getRequestId() {
return _RequestId;
}

void InvitePlayerRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InvitePlayerRequest::isRequestIdSet() {
return _RequestIdSet;
}

void InvitePlayerRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* InvitePlayerRequest::getPlayerId() {
return _PlayerId;
}

void InvitePlayerRequest::setPlayerId(const char* value) {
if (_PlayerId && _PlayerId != value) {
delete _PlayerId;
}
if (value) {
_PlayerId = strdup(value);
} else {
_PlayerId = 0;
}
_PlayerIdSet = true;
}

bool InvitePlayerRequest::isPlayerIdSet() {
return _PlayerIdSet;
}

void InvitePlayerRequest::unSetPlayerId() {
_PlayerIdSet = false;
}

Message* InvitePlayerRequest::getInvitationContent() {
return _InvitationContent;
}

void InvitePlayerRequest::setInvitationContent(Message* value) {
if (_InvitationContent && _InvitationContent != value) {
delete _InvitationContent;
}
_InvitationContent = value;
_InvitationContentSet = true;
}

bool InvitePlayerRequest::isInvitationContentSet() {
return _InvitationContentSet;
}

void InvitePlayerRequest::unSetInvitationContent() {
_InvitationContentSet = false;
}

NInvitation* InvitePlayerRequest::getInvitation() {
return _Invitation;
}

void InvitePlayerRequest::setInvitation(NInvitation* value) {
if (_Invitation && _Invitation != value) {
delete _Invitation;
}
_Invitation = value;
_InvitationSet = true;
}

bool InvitePlayerRequest::isInvitationSet() {
return _InvitationSet;
}

void InvitePlayerRequest::unSetInvitation() {
_InvitationSet = false;
}

//@Override
short InvitePlayerRequest::getSerializerID() {
return serializerID;
}

void* InvitePlayerRequest::clone() {
InvitePlayerRequest* _w15216 = new InvitePlayerRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_w15216->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_w15216->setRequestId(_RequestId);
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_w15216->setPlayerId(_PlayerId);
}
if (_InvitationContentSet == true && Utils::isNull(_InvitationContent) == false) {
_w15216->setInvitationContent((Message*)(_InvitationContent->clone()));
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_w15216->setInvitation((NInvitation*)(_Invitation->clone()));
}
return _w15216;
}

const char* InvitePlayerRequest::toString() {
const char* _y15217 = "";
_y15217 = NUtils::concat(_y15217, NUtils::concat(NUtils::concat("[", "InvitePlayerRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_y15217 = NUtils::concat(_y15217, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_y15217 = NUtils::concat(_y15217, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_PlayerIdSet == true && Utils::isNull(_PlayerId) == false) {
_y15217 = NUtils::concat(_y15217, NUtils::concat(NUtils::concat("_PlayerId=", _PlayerId), "| "));
}
if (_InvitationContentSet == true && Utils::isNull(_InvitationContent) == false) {
_y15217 = NUtils::concat(_y15217, NUtils::concat(NUtils::concat("_InvitationContent=", _InvitationContent->toString()), "| "));
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_y15217 = NUtils::concat(_y15217, NUtils::concat(NUtils::concat("_Invitation=", _Invitation->toString()), "| "));
}
_y15217 = NUtils::concat(_y15217, "]");
return _y15217;
}

InvitePlayerRequest::InvitePlayerRequest(){
this->_InvitationSet = false;
this->_Invitation = 0;
this->_InvitationContentSet = false;
this->_InvitationContent = 0;
this->_PlayerIdSet = false;
this->_PlayerId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InvitePlayerRequest::~InvitePlayerRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_PlayerId) {
delete _PlayerId;
_PlayerId = 0;
}
if (_InvitationContent) {
delete _InvitationContent;
_InvitationContent=0;
}
if (_Invitation) {
delete _Invitation;
_Invitation=0;
}
}


#include "T817.h"







T817::T817(const char* data){
    this->_r14929 = 0;
    this->_z14928 = 0;
    this->_c14927 = 0;
    _r14929 = sizeof(data);
    this->_c14927 = new StringBuilder(data);
}

const char* T817::_m16984(int _v14930) {
    const char* _x14931 = _c14927->substring(_z14928, _z14928 + _v14930);
    this->_z14928 = _z14928 + _v14930;
    return _x14931;
}

void T817::_m16985(const char* _s14932) {
_c14927->appendString(_s14932);
_z14928 = _c14927->length1();
}

//@Override
const char* T817::toString() {
return _c14927->toString();
}

//@Override
int T817::_m16028() {
return _z14928;
}

//@Override
int T817::_m16986() {
return _c14927->length1();
}

//@Override
void T817::_m16029(int _m14933) {
}

//@Override
void T817::_m16948() {
int _var44;
std::istringstream(_m16984(1)) >> _var44;
int _v6697 = _var44;
int _var45;
std::istringstream(_m16984(_v6697)) >> _var45;
int _y6698 = _var45;
this->_z14928 = _z14928 + _y6698;
}

//@Override
void T817::_m16947(int length) {
this->_z14928 = _z14928 + length;
}

//@Override
void T817::_m16032(int position, short _l14938) {
std::stringstream _ss46;
_ss46 << _l14938;
_m16987(position, _ss46.str().c_str());
}

void T817::_m16987(int _p14939, const char* strValue) {
StringBuilder* _l14941 = new StringBuilder("");
_l14941->appendString(_c14927->substring(0, _p14939));
int _e14942 = sizeof(strValue);
std::stringstream _ss47;
_ss47 << _e14942;
const char* _r14943 = _ss47.str().c_str();
int _j14944 = sizeof(_r14943);
std::stringstream _ss48;
_ss48 << _j14944;
_l14941->appendString(_ss48.str().c_str());
_l14941->appendString(_r14943);
_l14941->appendString(strValue);
_l14941->appendString(_c14927->substring(_p14939, _c14927->length1()));
_c14927 = _l14941;
_z14928 = _l14941->length1();
_r14929 = _l14941->length1();
}

void T817::_m16988(const char* _x14945) {
_m16989(sizeof(_x14945));
_m16985(_x14945);
}

//@Override
short T817::_m16316() {
short _var49;
std::istringstream(_m16990()) >> _var49;
return _var49;
}

//@Override
double T817::_m16892() {
double _var50;
std::istringstream(_m16990()) >> _var50;
return _var50;
}

//@Override
int T817::_m16315() {
int _var51;
std::istringstream(_m16990()) >> _var51;
return _var51;
}

//@Override
long long int T817::_m16890() {
long long int _var52;
std::istringstream(_m16990()) >> _var52;
return _var52;
}

//@Override
const char* T817::_m16893() {
return _m16990();
}

//@Override
unsigned char T817::_m16314() {
return (unsigned char)_m16990()[0];
}

//@Override
float T817::_m16891() {
float _var53;
std::istringstream(_m16990()) >> _var53;
return _var53;
}

//@Override
void T817::_m16035(short _g14946) {
std::stringstream _ss54;
_ss54 << _g14946;
_m16988(_ss54.str().c_str());
}

//@Override
void T817::_m16991(const char* _q14947) {
_m16988(_q14947);
}

//@Override
void T817::_m16036(unsigned char _l14948) {
std::stringstream _ss55;
_ss55 << _l14948;
_m16988(_ss55.str().c_str());
}

//@Override
void T817::_m16038(int _w14949, int intValue) {
std::stringstream _ss56;
_ss56 << intValue;
_m16987(_w14949, _ss56.str().c_str());
}

//@Override
void T817::_m16992(double _c14951) {
std::stringstream _ss57;
_ss57 << _c14951;
_m16988(_ss57.str().c_str());
}

//@Override
void T817::_m16993(int _i14952) {
std::stringstream _ss58;
_ss58 << _i14952;
_m16988(_ss58.str().c_str());
}

//@Override
void T817::_m16994(long long _o14953) {
std::stringstream _ss59;
_ss59 << _o14953;
_m16988(_ss59.str().c_str());
}

//@Override
void T817::_m16995(float _q14954) {
std::stringstream _ss60;
_ss60 << _q14954;
_m16988(_ss60.str().c_str());
}

void T817::_m16989(int length) {
std::stringstream _ss61;
_ss61 << length;
const char* _u14956 = _ss61.str().c_str();
int _k6704 = sizeof(_u14956);
std::stringstream _ss62;
_ss62 << _k6704;
_c14927->appendString(_ss62.str().c_str());
_c14927->appendString(_u14956);
}

const char* T817::_m16996(const char* _a14958, int _k14959) {
int _c6705 = sizeof(_a14958);
for (unsigned int _q14961 = _c6705; _q14961 < (unsigned int)_k14959; _q14961++) {
_a14958 = NUtils::concat("0", _a14958);
}
return _a14958;
}

const char* T817::_m16990() {
int _var63;
std::istringstream(_m16984(1)) >> _var63;
int _o14962 = _var63;
int _var64;
std::istringstream(_m16984(_o14962)) >> _var64;
int _i14963 = _var64;
return _m16984(_i14963);
}

T817::~T817(){
if (_c14927) {
delete _c14927;
_c14927=0;
}
}


#include "LoadGameRequest.h"

short LoadGameRequest::serializerID = -10977;













const char* LoadGameRequest::getMessageId() {
    return _MessageId;
}

void LoadGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool LoadGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void LoadGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* LoadGameRequest::getRequestId() {
return _RequestId;
}

void LoadGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool LoadGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void LoadGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* LoadGameRequest::getGameId() {
return _GameId;
}

void LoadGameRequest::setGameId(const char* value) {
if (_GameId && _GameId != value) {
delete _GameId;
}
if (value) {
_GameId = strdup(value);
} else {
_GameId = 0;
}
_GameIdSet = true;
}

bool LoadGameRequest::isGameIdSet() {
return _GameIdSet;
}

void LoadGameRequest::unSetGameId() {
_GameIdSet = false;
}

//@Override
short LoadGameRequest::getSerializerID() {
return serializerID;
}

void* LoadGameRequest::clone() {
LoadGameRequest* _e13870 = new LoadGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_e13870->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_e13870->setRequestId(_RequestId);
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_e13870->setGameId(_GameId);
}
return _e13870;
}

const char* LoadGameRequest::toString() {
const char* _s13871 = "";
_s13871 = NUtils::concat(_s13871, NUtils::concat(NUtils::concat("[", "LoadGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_s13871 = NUtils::concat(_s13871, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_s13871 = NUtils::concat(_s13871, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GameIdSet == true && Utils::isNull(_GameId) == false) {
_s13871 = NUtils::concat(_s13871, NUtils::concat(NUtils::concat("_GameId=", _GameId), "| "));
}
_s13871 = NUtils::concat(_s13871, "]");
return _s13871;
}

LoadGameRequest::LoadGameRequest(){
this->_GameIdSet = false;
this->_GameId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

LoadGameRequest::~LoadGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_GameId) {
delete _GameId;
_GameId = 0;
}
}


#include "ConsumeItemStatus.h"

std::vector<ConsumeItemStatus*>* ConsumeItemStatus::_values = new std::vector<ConsumeItemStatus*>();

ConsumeItemStatus* ConsumeItemStatus::SUCCESS = new ConsumeItemStatus("SUCCESS", 0);

ConsumeItemStatus* ConsumeItemStatus::NOT_ENOUGH_QUANTITY = new ConsumeItemStatus("NOT_ENOUGH_QUANTITY", 1);

ConsumeItemStatus* ConsumeItemStatus::UNKNOWN_ITEM = new ConsumeItemStatus("UNKNOWN_ITEM", 2);

ConsumeItemStatus* ConsumeItemStatus::INVALID_CALL = new ConsumeItemStatus("INVALID_CALL", 3);

ConsumeItemStatus* ConsumeItemStatus::INTERNAL_ERROR = new ConsumeItemStatus("INTERNAL_ERROR", 4);

std::vector<ConsumeItemStatus*>* ConsumeItemStatus::values() {
    return _values;
}





int ConsumeItemStatus::getValue() {
return _value;
}

const char* ConsumeItemStatus::name() {
return _name;
}

int ConsumeItemStatus::ordinal() {
return _value;
}

ConsumeItemStatus::ConsumeItemStatus(const char* name, int value){
this->_name = 0;
this->_value = 0;
this->_value = value;
this->_name = NUtils::nstrdup(name);
_values->push_back(this);
}

ConsumeItemStatus* ConsumeItemStatus::fromValue(int value) {
for (unsigned int _z6928 = 0; _z6928 < (unsigned int)_values->size(); _z6928++) {
ConsumeItemStatus* _k6929 = (*_values)[_z6928];
if (_k6929->getValue() == value) {
return _k6929;
}
}
return 0;
}

ConsumeItemStatus* ConsumeItemStatus::valueOf(const char* name) {
for (unsigned int _t15226 = 0; _t15226 < (unsigned int)_values->size(); _t15226++) {
ConsumeItemStatus* _x15227 = (*_values)[_t15226];
if (strcmp(name, _x15227->name()) == 0) {
return _x15227;
}
}
return 0;
}

//@Override
short ConsumeItemStatus::getSerializerID() {
return -10378;
}

const char* ConsumeItemStatus::toString() {
return NUtils::concat("ConsumeItemStatus.", _name);
}

void* ConsumeItemStatus::clone() {
return this;
}

ConsumeItemStatus::~ConsumeItemStatus(){
}


#include "StopPlugConnectionResponse.h"

short StopPlugConnectionResponse::serializerID = -3078;









const char* StopPlugConnectionResponse::getMessageId() {
    return _MessageId;
}

void StopPlugConnectionResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StopPlugConnectionResponse::isMessageIdSet() {
return _MessageIdSet;
}

void StopPlugConnectionResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* StopPlugConnectionResponse::getRequestId() {
return _RequestId;
}

void StopPlugConnectionResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StopPlugConnectionResponse::isRequestIdSet() {
return _RequestIdSet;
}

void StopPlugConnectionResponse::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short StopPlugConnectionResponse::getSerializerID() {
return serializerID;
}

void* StopPlugConnectionResponse::clone() {
StopPlugConnectionResponse* _v15568 = new StopPlugConnectionResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v15568->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v15568->setRequestId(_RequestId);
}
return _v15568;
}

const char* StopPlugConnectionResponse::toString() {
const char* _x15569 = "";
_x15569 = NUtils::concat(_x15569, NUtils::concat(NUtils::concat("[", "StopPlugConnectionResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x15569 = NUtils::concat(_x15569, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x15569 = NUtils::concat(_x15569, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_x15569 = NUtils::concat(_x15569, "]");
return _x15569;
}

StopPlugConnectionResponse::StopPlugConnectionResponse(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StopPlugConnectionResponse::~StopPlugConnectionResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "NRoom.h"

short NRoom::serializerID = -3008;

//@Override
short NRoom::getSerializerID() {
    return serializerID;
}

void* NRoom::clone() {
NRoom* _o14076 = new NRoom();
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
    _o14076->setStoreId(_storeId);
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
    _o14076->setId(_Id);
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
    _o14076->setName(_Name);
}
if (_PlayersSet == true && Utils::isNull(_Players) == false) {
    std::vector<NPlayer*>* _n14077 = new std::vector<NPlayer*>();
    for (unsigned int i = 0; i < (unsigned int)_Players->size(); i++) {
        void* _q14078 = _Players->at(i);
        if (_q14078 != 0) {
            _n14077->push_back((NPlayer*)((NPlayer*)_q14078)->clone());
        } else {
            _n14077->push_back((NPlayer*)_q14078);
        }
    }
    _o14076->setPlayers(_n14077);
}
return _o14076;
}

const char* NRoom::toString() {
const char* _o14079 = "";
_o14079 = NUtils::concat(_o14079, NUtils::concat(NUtils::concat("[", "NRoom"), " --> "));
if (_storeIdSet == true && Utils::isNull(_storeId) == false) {
_o14079 = NUtils::concat(_o14079, NUtils::concat(NUtils::concat("_storeId=", _storeId), "| "));
}
if (_IdSet == true && Utils::isNull(_Id) == false) {
_o14079 = NUtils::concat(_o14079, NUtils::concat(NUtils::concat("_Id=", _Id), "| "));
}
if (_NameSet == true && Utils::isNull(_Name) == false) {
_o14079 = NUtils::concat(_o14079, NUtils::concat(NUtils::concat("_Name=", _Name), "| "));
}
if (_PlayersSet == true && Utils::isNull(_Players) == false) {
_o14079 = NUtils::concat(_o14079, NUtils::concat(NUtils::concat("_Players=", "N/A"), "| "));
}
_o14079 = NUtils::concat(_o14079, "]");
return _o14079;
}

NRoom::NRoom(){
}

NRoom::~NRoom(){
}


#include "GetGhostsResponse.h"

short GetGhostsResponse::serializerID = -10719;

















const char* GetGhostsResponse::getMessageId() {
    return _MessageId;
}

void GetGhostsResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool GetGhostsResponse::isMessageIdSet() {
return _MessageIdSet;
}

void GetGhostsResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* GetGhostsResponse::getRequestId() {
return _RequestId;
}

void GetGhostsResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool GetGhostsResponse::isRequestIdSet() {
return _RequestIdSet;
}

void GetGhostsResponse::unSetRequestId() {
_RequestIdSet = false;
}

GetGhostsStatus* GetGhostsResponse::getGetGhostsStatus() {
return _GetGhostsStatus;
}

void GetGhostsResponse::setGetGhostsStatus(GetGhostsStatus* value) {
_GetGhostsStatus = value;
_GetGhostsStatusSet = true;
}

bool GetGhostsResponse::isGetGhostsStatusSet() {
return _GetGhostsStatusSet;
}

void GetGhostsResponse::unSetGetGhostsStatus() {
_GetGhostsStatusSet = false;
}

std::vector<NGame*>* GetGhostsResponse::getGhosts() {
return _Ghosts;
}

void GetGhostsResponse::setGhosts(std::vector<NGame*>* value) {
if (_Ghosts) {
for (unsigned int i=0; i < _Ghosts->size(); i++) {
delete (*_Ghosts)[i];
}
}
if (_Ghosts && _Ghosts != value) {
delete _Ghosts;
}
_Ghosts = value;
_GhostsSet = true;
}

bool GetGhostsResponse::isGhostsSet() {
return _GhostsSet;
}

void GetGhostsResponse::unSetGhosts() {
_GhostsSet = false;
}

//@Override
short GetGhostsResponse::getSerializerID() {
return serializerID;
}

void* GetGhostsResponse::clone() {
GetGhostsResponse* _f15513 = new GetGhostsResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_f15513->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_f15513->setRequestId(_RequestId);
}
if (_GetGhostsStatusSet == true && Utils::isNull(_GetGhostsStatus) == false) {
_f15513->setGetGhostsStatus(_GetGhostsStatus);
}
if (_GhostsSet == true && Utils::isNull(_Ghosts) == false) {
std::vector<NGame*>* _j15514 = new std::vector<NGame*>();
for (unsigned int i = 0; i < (unsigned int)_Ghosts->size(); i++) {
void* _j15515 = _Ghosts->at(i);
if (_j15515 != 0) {
_j15514->push_back((NGame*)((NGame*)_j15515)->clone());
} else {
_j15514->push_back((NGame*)_j15515);
}
}
_f15513->setGhosts(_j15514);
}
return _f15513;
}

const char* GetGhostsResponse::toString() {
const char* _q15516 = "";
_q15516 = NUtils::concat(_q15516, NUtils::concat(NUtils::concat("[", "GetGhostsResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_q15516 = NUtils::concat(_q15516, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_q15516 = NUtils::concat(_q15516, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_GetGhostsStatusSet == true && Utils::isNull(_GetGhostsStatus) == false) {
_q15516 = NUtils::concat(_q15516, NUtils::concat(NUtils::concat("_GetGhostsStatus=", _GetGhostsStatus->toString()), "| "));
}
if (_GhostsSet == true && Utils::isNull(_Ghosts) == false) {
_q15516 = NUtils::concat(_q15516, NUtils::concat(NUtils::concat("_Ghosts=", "N/A"), "| "));
}
_q15516 = NUtils::concat(_q15516, "]");
return _q15516;
}

GetGhostsResponse::GetGhostsResponse(){
this->_GhostsSet = false;
this->_Ghosts = new std::vector<NGame*>();
this->_GetGhostsStatusSet = false;
this->_GetGhostsStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

GetGhostsResponse::~GetGhostsResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Ghosts) {
for (unsigned int i=0; i < _Ghosts->size(); i++) {
delete (*_Ghosts)[i];
}
delete _Ghosts;
_Ghosts=0;;
}
}


#include "SearchImmediateGameRequest.h"

short SearchImmediateGameRequest::serializerID = -10477;









const char* SearchImmediateGameRequest::getMessageId() {
    return _MessageId;
}

void SearchImmediateGameRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool SearchImmediateGameRequest::isMessageIdSet() {
return _MessageIdSet;
}

void SearchImmediateGameRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* SearchImmediateGameRequest::getRequestId() {
return _RequestId;
}

void SearchImmediateGameRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool SearchImmediateGameRequest::isRequestIdSet() {
return _RequestIdSet;
}

void SearchImmediateGameRequest::unSetRequestId() {
_RequestIdSet = false;
}

//@Override
short SearchImmediateGameRequest::getSerializerID() {
return serializerID;
}

void* SearchImmediateGameRequest::clone() {
SearchImmediateGameRequest* _i14705 = new SearchImmediateGameRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_i14705->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_i14705->setRequestId(_RequestId);
}
return _i14705;
}

const char* SearchImmediateGameRequest::toString() {
const char* _x14706 = "";
_x14706 = NUtils::concat(_x14706, NUtils::concat(NUtils::concat("[", "SearchImmediateGameRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_x14706 = NUtils::concat(_x14706, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_x14706 = NUtils::concat(_x14706, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
_x14706 = NUtils::concat(_x14706, "]");
return _x14706;
}

SearchImmediateGameRequest::SearchImmediateGameRequest(){
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

SearchImmediateGameRequest::~SearchImmediateGameRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
}


#include "InviteThirdPartyFriendRequest.h"

short InviteThirdPartyFriendRequest::serializerID = -10897;

































const char* InviteThirdPartyFriendRequest::getMessageId() {
    return _MessageId;
}

void InviteThirdPartyFriendRequest::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InviteThirdPartyFriendRequest::isMessageIdSet() {
return _MessageIdSet;
}

void InviteThirdPartyFriendRequest::unSetMessageId() {
_MessageIdSet = false;
}

const char* InviteThirdPartyFriendRequest::getRequestId() {
return _RequestId;
}

void InviteThirdPartyFriendRequest::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InviteThirdPartyFriendRequest::isRequestIdSet() {
return _RequestIdSet;
}

void InviteThirdPartyFriendRequest::unSetRequestId() {
_RequestIdSet = false;
}

const char* InviteThirdPartyFriendRequest::getThirdPartyId() {
return _ThirdPartyId;
}

void InviteThirdPartyFriendRequest::setThirdPartyId(const char* value) {
if (_ThirdPartyId && _ThirdPartyId != value) {
delete _ThirdPartyId;
}
if (value) {
_ThirdPartyId = strdup(value);
} else {
_ThirdPartyId = 0;
}
_ThirdPartyIdSet = true;
}

bool InviteThirdPartyFriendRequest::isThirdPartyIdSet() {
return _ThirdPartyIdSet;
}

void InviteThirdPartyFriendRequest::unSetThirdPartyId() {
_ThirdPartyIdSet = false;
}

const char* InviteThirdPartyFriendRequest::getTitle() {
return _Title;
}

void InviteThirdPartyFriendRequest::setTitle(const char* value) {
if (_Title && _Title != value) {
delete _Title;
}
if (value) {
_Title = strdup(value);
} else {
_Title = 0;
}
_TitleSet = true;
}

bool InviteThirdPartyFriendRequest::isTitleSet() {
return _TitleSet;
}

void InviteThirdPartyFriendRequest::unSetTitle() {
_TitleSet = false;
}

const char* InviteThirdPartyFriendRequest::getInviteMessage() {
return _InviteMessage;
}

void InviteThirdPartyFriendRequest::setInviteMessage(const char* value) {
if (_InviteMessage && _InviteMessage != value) {
delete _InviteMessage;
}
if (value) {
_InviteMessage = strdup(value);
} else {
_InviteMessage = 0;
}
_InviteMessageSet = true;
}

bool InviteThirdPartyFriendRequest::isInviteMessageSet() {
return _InviteMessageSet;
}

void InviteThirdPartyFriendRequest::unSetInviteMessage() {
_InviteMessageSet = false;
}

const char* InviteThirdPartyFriendRequest::getPictureUrl() {
return _PictureUrl;
}

void InviteThirdPartyFriendRequest::setPictureUrl(const char* value) {
if (_PictureUrl && _PictureUrl != value) {
delete _PictureUrl;
}
if (value) {
_PictureUrl = strdup(value);
} else {
_PictureUrl = 0;
}
_PictureUrlSet = true;
}

bool InviteThirdPartyFriendRequest::isPictureUrlSet() {
return _PictureUrlSet;
}

void InviteThirdPartyFriendRequest::unSetPictureUrl() {
_PictureUrlSet = false;
}

const char* InviteThirdPartyFriendRequest::getLink() {
return _Link;
}

void InviteThirdPartyFriendRequest::setLink(const char* value) {
if (_Link && _Link != value) {
delete _Link;
}
if (value) {
_Link = strdup(value);
} else {
_Link = 0;
}
_LinkSet = true;
}

bool InviteThirdPartyFriendRequest::isLinkSet() {
return _LinkSet;
}

void InviteThirdPartyFriendRequest::unSetLink() {
_LinkSet = false;
}

ThirdPartySource* InviteThirdPartyFriendRequest::getThirdPartySource() {
return _ThirdPartySource;
}

void InviteThirdPartyFriendRequest::setThirdPartySource(ThirdPartySource* value) {
_ThirdPartySource = value;
_ThirdPartySourceSet = true;
}

bool InviteThirdPartyFriendRequest::isThirdPartySourceSet() {
return _ThirdPartySourceSet;
}

void InviteThirdPartyFriendRequest::unSetThirdPartySource() {
_ThirdPartySourceSet = false;
}

//@Override
short InviteThirdPartyFriendRequest::getSerializerID() {
return serializerID;
}

void* InviteThirdPartyFriendRequest::clone() {
InviteThirdPartyFriendRequest* _h14966 = new InviteThirdPartyFriendRequest();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h14966->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h14966->setRequestId(_RequestId);
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_h14966->setThirdPartyId(_ThirdPartyId);
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_h14966->setTitle(_Title);
}
if (_InviteMessageSet == true && Utils::isNull(_InviteMessage) == false) {
_h14966->setInviteMessage(_InviteMessage);
}
if (_PictureUrlSet == true && Utils::isNull(_PictureUrl) == false) {
_h14966->setPictureUrl(_PictureUrl);
}
if (_LinkSet == true && Utils::isNull(_Link) == false) {
_h14966->setLink(_Link);
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_h14966->setThirdPartySource(_ThirdPartySource);
}
return _h14966;
}

const char* InviteThirdPartyFriendRequest::toString() {
const char* _n14967 = "";
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("[", "InviteThirdPartyFriendRequest"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_ThirdPartyIdSet == true && Utils::isNull(_ThirdPartyId) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_ThirdPartyId=", _ThirdPartyId), "| "));
}
if (_TitleSet == true && Utils::isNull(_Title) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_Title=", _Title), "| "));
}
if (_InviteMessageSet == true && Utils::isNull(_InviteMessage) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_InviteMessage=", _InviteMessage), "| "));
}
if (_PictureUrlSet == true && Utils::isNull(_PictureUrl) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_PictureUrl=", _PictureUrl), "| "));
}
if (_LinkSet == true && Utils::isNull(_Link) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_Link=", _Link), "| "));
}
if (_ThirdPartySourceSet == true && Utils::isNull(_ThirdPartySource) == false) {
_n14967 = NUtils::concat(_n14967, NUtils::concat(NUtils::concat("_ThirdPartySource=", _ThirdPartySource->toString()), "| "));
}
_n14967 = NUtils::concat(_n14967, "]");
return _n14967;
}

InviteThirdPartyFriendRequest::InviteThirdPartyFriendRequest(){
this->_ThirdPartySourceSet = false;
this->_ThirdPartySource = 0;
this->_LinkSet = false;
this->_Link = 0;
this->_PictureUrlSet = false;
this->_PictureUrl = 0;
this->_InviteMessageSet = false;
this->_InviteMessage = 0;
this->_TitleSet = false;
this->_Title = 0;
this->_ThirdPartyIdSet = false;
this->_ThirdPartyId = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InviteThirdPartyFriendRequest::~InviteThirdPartyFriendRequest(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_ThirdPartyId) {
delete _ThirdPartyId;
_ThirdPartyId = 0;
}
if (_Title) {
delete _Title;
_Title = 0;
}
if (_InviteMessage) {
delete _InviteMessage;
_InviteMessage = 0;
}
if (_PictureUrl) {
delete _PictureUrl;
_PictureUrl = 0;
}
if (_Link) {
delete _Link;
_Link = 0;
}
}


#include "StartResponse.h"

short StartResponse::serializerID = -3181;

























const char* StartResponse::getMessageId() {
    return _MessageId;
}

void StartResponse::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool StartResponse::isMessageIdSet() {
return _MessageIdSet;
}

void StartResponse::unSetMessageId() {
_MessageIdSet = false;
}

const char* StartResponse::getRequestId() {
return _RequestId;
}

void StartResponse::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool StartResponse::isRequestIdSet() {
return _RequestIdSet;
}

void StartResponse::unSetRequestId() {
_RequestIdSet = false;
}

StartStatus* StartResponse::getStartStatus() {
return _StartStatus;
}

void StartResponse::setStartStatus(StartStatus* value) {
_StartStatus = value;
_StartStatusSet = true;
}

bool StartResponse::isStartStatusSet() {
return _StartStatusSet;
}

void StartResponse::unSetStartStatus() {
_StartStatusSet = false;
}

StartDetails* StartResponse::getStartDetails() {
return _StartDetails;
}

void StartResponse::setStartDetails(StartDetails* value) {
if (_StartDetails && _StartDetails != value) {
delete _StartDetails;
}
_StartDetails = value;
_StartDetailsSet = true;
}

bool StartResponse::isStartDetailsSet() {
return _StartDetailsSet;
}

void StartResponse::unSetStartDetails() {
_StartDetailsSet = false;
}

PlayerSessionType* StartResponse::getPlayerSessionType() {
return _PlayerSessionType;
}

void StartResponse::setPlayerSessionType(PlayerSessionType* value) {
_PlayerSessionType = value;
_PlayerSessionTypeSet = true;
}

bool StartResponse::isPlayerSessionTypeSet() {
return _PlayerSessionTypeSet;
}

void StartResponse::unSetPlayerSessionType() {
_PlayerSessionTypeSet = false;
}

NPlayer* StartResponse::getPlayer() {
return _Player;
}

void StartResponse::setPlayer(NPlayer* value) {
if (_Player && _Player != value) {
delete _Player;
}
_Player = value;
_PlayerSet = true;
}

bool StartResponse::isPlayerSet() {
return _PlayerSet;
}

void StartResponse::unSetPlayer() {
_PlayerSet = false;
}

//@Override
short StartResponse::getSerializerID() {
return serializerID;
}

void* StartResponse::clone() {
StartResponse* _t15759 = new StartResponse();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_t15759->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_t15759->setRequestId(_RequestId);
}
if (_StartStatusSet == true && Utils::isNull(_StartStatus) == false) {
_t15759->setStartStatus(_StartStatus);
}
if (_StartDetailsSet == true && Utils::isNull(_StartDetails) == false) {
_t15759->setStartDetails((StartDetails*)(_StartDetails->clone()));
}
if (_PlayerSessionTypeSet == true && Utils::isNull(_PlayerSessionType) == false) {
_t15759->setPlayerSessionType(_PlayerSessionType);
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_t15759->setPlayer((NPlayer*)(_Player->clone()));
}
return _t15759;
}

const char* StartResponse::toString() {
const char* _l15760 = "";
_l15760 = NUtils::concat(_l15760, NUtils::concat(NUtils::concat("[", "StartResponse"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_l15760 = NUtils::concat(_l15760, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_l15760 = NUtils::concat(_l15760, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_StartStatusSet == true && Utils::isNull(_StartStatus) == false) {
_l15760 = NUtils::concat(_l15760, NUtils::concat(NUtils::concat("_StartStatus=", _StartStatus->toString()), "| "));
}
if (_StartDetailsSet == true && Utils::isNull(_StartDetails) == false) {
_l15760 = NUtils::concat(_l15760, NUtils::concat(NUtils::concat("_StartDetails=", _StartDetails->toString()), "| "));
}
if (_PlayerSessionTypeSet == true && Utils::isNull(_PlayerSessionType) == false) {
_l15760 = NUtils::concat(_l15760, NUtils::concat(NUtils::concat("_PlayerSessionType=", _PlayerSessionType->toString()), "| "));
}
if (_PlayerSet == true && Utils::isNull(_Player) == false) {
_l15760 = NUtils::concat(_l15760, NUtils::concat(NUtils::concat("_Player=", _Player->toString()), "| "));
}
_l15760 = NUtils::concat(_l15760, "]");
return _l15760;
}

StartResponse::StartResponse(){
this->_PlayerSet = false;
this->_Player = 0;
this->_PlayerSessionTypeSet = false;
this->_PlayerSessionType = 0;
this->_StartDetailsSet = false;
this->_StartDetails = 0;
this->_StartStatusSet = false;
this->_StartStatus = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

StartResponse::~StartResponse(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_StartDetails) {
delete _StartDetails;
_StartDetails=0;
}
if (_Player) {
delete _Player;
_Player=0;
}
}


#include "InvitationAcceptedNotification.h"

short InvitationAcceptedNotification::serializerID = -3235;













const char* InvitationAcceptedNotification::getMessageId() {
    return _MessageId;
}

void InvitationAcceptedNotification::setMessageId(const char* value) {
if (_MessageId && _MessageId != value) {
    delete _MessageId;
}
if (value) {
    _MessageId = strdup(value);
} else {
    _MessageId = 0;
}
_MessageIdSet = true;
}

bool InvitationAcceptedNotification::isMessageIdSet() {
return _MessageIdSet;
}

void InvitationAcceptedNotification::unSetMessageId() {
_MessageIdSet = false;
}

const char* InvitationAcceptedNotification::getRequestId() {
return _RequestId;
}

void InvitationAcceptedNotification::setRequestId(const char* value) {
if (_RequestId && _RequestId != value) {
delete _RequestId;
}
if (value) {
_RequestId = strdup(value);
} else {
_RequestId = 0;
}
_RequestIdSet = true;
}

bool InvitationAcceptedNotification::isRequestIdSet() {
return _RequestIdSet;
}

void InvitationAcceptedNotification::unSetRequestId() {
_RequestIdSet = false;
}

NInvitation* InvitationAcceptedNotification::getInvitation() {
return _Invitation;
}

void InvitationAcceptedNotification::setInvitation(NInvitation* value) {
if (_Invitation && _Invitation != value) {
delete _Invitation;
}
_Invitation = value;
_InvitationSet = true;
}

bool InvitationAcceptedNotification::isInvitationSet() {
return _InvitationSet;
}

void InvitationAcceptedNotification::unSetInvitation() {
_InvitationSet = false;
}

//@Override
short InvitationAcceptedNotification::getSerializerID() {
return serializerID;
}

void* InvitationAcceptedNotification::clone() {
InvitationAcceptedNotification* _h14068 = new InvitationAcceptedNotification();
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_h14068->setMessageId(_MessageId);
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_h14068->setRequestId(_RequestId);
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_h14068->setInvitation((NInvitation*)(_Invitation->clone()));
}
return _h14068;
}

const char* InvitationAcceptedNotification::toString() {
const char* _v14069 = "";
_v14069 = NUtils::concat(_v14069, NUtils::concat(NUtils::concat("[", "InvitationAcceptedNotification"), " --> "));
if (_MessageIdSet == true && Utils::isNull(_MessageId) == false) {
_v14069 = NUtils::concat(_v14069, NUtils::concat(NUtils::concat("_MessageId=", _MessageId), "| "));
}
if (_RequestIdSet == true && Utils::isNull(_RequestId) == false) {
_v14069 = NUtils::concat(_v14069, NUtils::concat(NUtils::concat("_RequestId=", _RequestId), "| "));
}
if (_InvitationSet == true && Utils::isNull(_Invitation) == false) {
_v14069 = NUtils::concat(_v14069, NUtils::concat(NUtils::concat("_Invitation=", _Invitation->toString()), "| "));
}
_v14069 = NUtils::concat(_v14069, "]");
return _v14069;
}

InvitationAcceptedNotification::InvitationAcceptedNotification(){
this->_InvitationSet = false;
this->_Invitation = 0;
this->_RequestIdSet = false;
this->_RequestId = 0;
this->_MessageIdSet = false;
this->_MessageId = 0;
}

InvitationAcceptedNotification::~InvitationAcceptedNotification(){
if (_MessageId) {
delete _MessageId;
_MessageId = 0;
}
if (_RequestId) {
delete _RequestId;
_RequestId = 0;
}
if (_Invitation) {
delete _Invitation;
_Invitation=0;
}
}


#include "T819.h"

void T819::_m15769(Serializable* _n10749, T808* _n10750) {
    T817* _x10751 = (T817*)_n10750;
    if (_n10749->getSerializerID() == -1) {
        _m16344(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -2) {
        _m16345(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3) {
        _m16346(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -4) {
        _m16347(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -8) {
        _m16348(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -9) {
        _m16349(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -12) {
        _m16350(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -18) {
        _m16351(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -19) {
        _m16352(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -20) {
        _m16353(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -21) {
        _m16354(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -22) {
        _m16355(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -23) {
        _m16356(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -24) {
        _m16357(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -34) {
        _m16358(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -38) {
        _m16359(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -39) {
        _m16360(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -42) {
        _m16361(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10018) {
        _m16362(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10038) {
        _m16363(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10078) {
        _m16364(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10098) {
        _m16365(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10118) {
        _m16366(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10138) {
        _m16367(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10198) {
        _m16368(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10218) {
        _m16369(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10238) {
        _m16370(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10258) {
        _m16371(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10278) {
        _m16372(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10298) {
        _m16373(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10318) {
        _m16374(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10338) {
        _m16375(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10358) {
        _m16376(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10378) {
        _m16377(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10398) {
        _m16378(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10418) {
        _m16379(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10438) {
        _m16380(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10458) {
        _m16381(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10478) {
        _m16382(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10498) {
        _m16383(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10518) {
        _m16384(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10618) {
        _m16385(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10638) {
        _m16386(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10658) {
        _m16387(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10678) {
        _m16388(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10698) {
        _m16389(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10718) {
        _m16390(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10738) {
        _m16391(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10758) {
        _m16392(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10778) {
        _m16393(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10798) {
        _m16394(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10818) {
        _m16395(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10838) {
        _m16396(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10858) {
        _m16397(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10878) {
        _m16398(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10898) {
        _m16399(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10918) {
        _m16400(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10938) {
        _m16401(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10958) {
        _m16402(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10978) {
        _m16403(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10998) {
        _m16404(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11018) {
        _m16405(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11038) {
        _m16406(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11058) {
        _m16407(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11078) {
        _m16408(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11098) {
        _m16409(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11118) {
        _m16410(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11138) {
        _m16411(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11158) {
        _m16412(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11178) {
        _m16413(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11198) {
        _m16414(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3000) {
        _m16415(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3001) {
        _m16416(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3002) {
        _m16417(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3003) {
        _m16418(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3004) {
        _m16419(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3005) {
        _m16420(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3006) {
        _m16421(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3008) {
        _m16422(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3009) {
        _m16423(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3010) {
        _m16424(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3011) {
        _m16425(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3012) {
        _m16426(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3013) {
        _m16427(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3017) {
        _m16428(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3019) {
        _m16429(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3020) {
        _m16430(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3021) {
        _m16431(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3042) {
        _m16432(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3077) {
        _m16433(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3078) {
        _m16434(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3088) {
        _m16435(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3089) {
        _m16436(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3090) {
        _m16437(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3093) {
        _m16438(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3098) {
        _m16439(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3099) {
        _m16440(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3100) {
        _m16441(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3101) {
        _m16442(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3103) {
        _m16443(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3105) {
        _m16444(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3106) {
        _m16445(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3107) {
        _m16446(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3109) {
        _m16447(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3111) {
        _m16448(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3112) {
        _m16449(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3113) {
        _m16450(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3118) {
        _m16451(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3119) {
        _m16452(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3121) {
        _m16453(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3122) {
        _m16454(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3124) {
        _m16455(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3127) {
        _m16456(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3129) {
        _m16457(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3135) {
        _m16458(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3136) {
        _m16459(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3137) {
        _m16460(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3139) {
        _m16461(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3140) {
        _m16462(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3142) {
        _m16463(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3143) {
        _m16464(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3145) {
        _m16465(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3156) {
        _m16466(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3157) {
        _m16467(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3158) {
        _m16468(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3159) {
        _m16469(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3164) {
        _m16470(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3165) {
        _m16471(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3174) {
        _m16472(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3175) {
        _m16473(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3178) {
        _m16474(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3179) {
        _m16475(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3180) {
        _m16476(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3181) {
        _m16477(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3204) {
        _m16478(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3230) {
        _m16479(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3232) {
        _m16480(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3233) {
        _m16481(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3234) {
        _m16482(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3235) {
        _m16483(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3236) {
        _m16484(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -3237) {
        _m16485(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10019) {
        _m16486(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10017) {
        _m16487(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10016) {
        _m16488(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10039) {
        _m16489(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10037) {
        _m16490(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10079) {
        _m16491(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10077) {
        _m16492(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10099) {
        _m16493(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10097) {
        _m16494(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10119) {
        _m16495(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10117) {
        _m16496(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10116) {
        _m16497(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10139) {
        _m16498(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10137) {
        _m16499(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10199) {
        _m16500(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10197) {
        _m16501(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10196) {
        _m16502(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10219) {
        _m16503(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10217) {
        _m16504(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10239) {
        _m16505(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10237) {
        _m16506(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10259) {
        _m16507(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10257) {
        _m16508(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10279) {
        _m16509(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10277) {
        _m16510(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10299) {
        _m16511(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10297) {
        _m16512(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10296) {
        _m16513(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10319) {
        _m16514(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10317) {
        _m16515(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10339) {
        _m16516(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10337) {
        _m16517(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10359) {
        _m16518(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10357) {
        _m16519(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10379) {
        _m16520(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10377) {
        _m16521(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10399) {
        _m16522(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10397) {
        _m16523(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10419) {
        _m16524(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10417) {
        _m16525(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10439) {
        _m16526(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10437) {
        _m16527(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10459) {
        _m16528(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10457) {
        _m16529(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10456) {
        _m16530(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10479) {
        _m16531(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10477) {
        _m16532(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10476) {
        _m16533(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10499) {
        _m16534(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10497) {
        _m16535(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10519) {
        _m16536(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10517) {
        _m16537(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10619) {
        _m16538(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10617) {
        _m16539(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10639) {
        _m16540(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10637) {
        _m16541(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10659) {
        _m16542(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10657) {
        _m16543(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10679) {
        _m16544(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10677) {
        _m16545(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10699) {
        _m16546(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10697) {
        _m16547(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10719) {
        _m16548(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10717) {
        _m16549(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10739) {
        _m16550(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10737) {
        _m16551(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10759) {
        _m16552(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10757) {
        _m16553(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10756) {
        _m16554(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10755) {
        _m16555(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10779) {
        _m16556(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10777) {
        _m16557(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10799) {
        _m16558(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10797) {
        _m16559(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10819) {
        _m16560(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10817) {
        _m16561(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10839) {
        _m16562(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10837) {
        _m16563(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10859) {
        _m16564(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10857) {
        _m16565(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10879) {
        _m16566(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10877) {
        _m16567(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10899) {
        _m16568(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10897) {
        _m16569(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10919) {
        _m16570(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10917) {
        _m16571(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10939) {
        _m16572(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10937) {
        _m16573(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10936) {
        _m16574(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10959) {
        _m16575(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10957) {
        _m16576(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10979) {
        _m16577(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10977) {
        _m16578(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10999) {
        _m16579(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -10997) {
        _m16580(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11019) {
        _m16581(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11017) {
        _m16582(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11039) {
        _m16583(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11037) {
        _m16584(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11059) {
        _m16585(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11057) {
        _m16586(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11079) {
        _m16587(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11077) {
        _m16588(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11099) {
        _m16589(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11097) {
        _m16590(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11119) {
        _m16591(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11117) {
        _m16592(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11139) {
        _m16593(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11137) {
        _m16594(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11159) {
        _m16595(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11157) {
        _m16596(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11179) {
        _m16597(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11177) {
        _m16598(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11199) {
        _m16599(_n10749, _x10751);
        return;
    }
    if (_n10749->getSerializerID() == -11197) {
        _m16600(_n10749, _x10751);
        return;
    }
}

void T819::_m16344(Serializable* serializable, T817* buff) {
DnsStatus* _j10754 = (DnsStatus*)serializable;
T816::_m16601(_j10754->getValue(), buff);
}

void T819::_m16345(Serializable* serializable, T817* buff) {
MatchMakingType* _a10757 = (MatchMakingType*)serializable;
T816::_m16601(_a10757->getValue(), buff);
}

void T819::_m16346(Serializable* serializable, T817* buff) {
LeaderboardOrder* _o10760 = (LeaderboardOrder*)serializable;
T816::_m16601(_o10760->getValue(), buff);
}

void T819::_m16347(Serializable* serializable, T817* buff) {
LeaderboardPeriod* _o10763 = (LeaderboardPeriod*)serializable;
T816::_m16601(_o10763->getValue(), buff);
}

void T819::_m16348(Serializable* serializable, T817* buff) {
ErrorCode* _e10766 = (ErrorCode*)serializable;
T816::_m16601(_e10766->getValue(), buff);
}

void T819::_m16349(Serializable* serializable, T817* buff) {
ThirdPartySource* _r10769 = (ThirdPartySource*)serializable;
T816::_m16601(_r10769->getValue(), buff);
}

void T819::_m16350(Serializable* serializable, T817* buff) {
LogLevel* _o10772 = (LogLevel*)serializable;
T816::_m16601(_o10772->getValue(), buff);
}

void T819::_m16351(Serializable* serializable, T817* buff) {
HandshakeState* _e10775 = (HandshakeState*)serializable;
T816::_m16601(_e10775->getValue(), buff);
}

void T819::_m16352(Serializable* serializable, T817* buff) {
PlayerState* _y10778 = (PlayerState*)serializable;
T816::_m16601(_y10778->getValue(), buff);
}

void T819::_m16353(Serializable* serializable, T817* buff) {
ClientApplication* _b10781 = (ClientApplication*)serializable;
T816::_m16601(_b10781->getValue(), buff);
}

void T819::_m16354(Serializable* serializable, T817* buff) {
GameRunningState* _f10784 = (GameRunningState*)serializable;
T816::_m16601(_f10784->getValue(), buff);
}

void T819::_m16355(Serializable* serializable, T817* buff) {
Period* _m10787 = (Period*)serializable;
T816::_m16601(_m10787->getValue(), buff);
}

void T819::_m16356(Serializable* serializable, T817* buff) {
NFriendDemandStatus* _v10790 = (NFriendDemandStatus*)serializable;
T816::_m16601(_v10790->getValue(), buff);
}

void T819::_m16357(Serializable* serializable, T817* buff) {
ExecutionStatus* _j10793 = (ExecutionStatus*)serializable;
T816::_m16601(_j10793->getValue(), buff);
}

void T819::_m16358(Serializable* serializable, T817* buff) {
StartStatus* _i10796 = (StartStatus*)serializable;
T816::_m16601(_i10796->getValue(), buff);
}

void T819::_m16359(Serializable* serializable, T817* buff) {
PlayerSessionType* _j10799 = (PlayerSessionType*)serializable;
T816::_m16601(_j10799->getValue(), buff);
}

void T819::_m16360(Serializable* serializable, T817* buff) {
NAchievementType* _v10802 = (NAchievementType*)serializable;
T816::_m16601(_v10802->getValue(), buff);
}

void T819::_m16361(Serializable* serializable, T817* buff) {
NInvitationStatus* _h10805 = (NInvitationStatus*)serializable;
T816::_m16601(_h10805->getValue(), buff);
}

void T819::_m16362(Serializable* serializable, T817* buff) {
AskForFriendStatus* _l10808 = (AskForFriendStatus*)serializable;
T816::_m16601(_l10808->getValue(), buff);
}

void T819::_m16363(Serializable* serializable, T817* buff) {
SignUpStatus* _z10811 = (SignUpStatus*)serializable;
T816::_m16601(_z10811->getValue(), buff);
}

void T819::_m16364(Serializable* serializable, T817* buff) {
LoginStatus* _n10814 = (LoginStatus*)serializable;
T816::_m16601(_n10814->getValue(), buff);
}

void T819::_m16365(Serializable* serializable, T817* buff) {
SavePlayerProfileStatus* _r10817 = (SavePlayerProfileStatus*)serializable;
T816::_m16601(_r10817->getValue(), buff);
}

void T819::_m16366(Serializable* serializable, T817* buff) {
GetPlayerProfileStatus* _j10820 = (GetPlayerProfileStatus*)serializable;
T816::_m16601(_j10820->getValue(), buff);
}

void T819::_m16367(Serializable* serializable, T817* buff) {
LogoutStatus* _l10823 = (LogoutStatus*)serializable;
T816::_m16601(_l10823->getValue(), buff);
}

void T819::_m16368(Serializable* serializable, T817* buff) {
GetFriendsStatus* _j10826 = (GetFriendsStatus*)serializable;
T816::_m16601(_j10826->getValue(), buff);
}

void T819::_m16369(Serializable* serializable, T817* buff) {
GetThirdPartyFriendsStatus* _b10829 = (GetThirdPartyFriendsStatus*)serializable;
T816::_m16601(_b10829->getValue(), buff);
}

void T819::_m16370(Serializable* serializable, T817* buff) {
GetFriendDemandsStatus* _o10832 = (GetFriendDemandsStatus*)serializable;
T816::_m16601(_o10832->getValue(), buff);
}

void T819::_m16371(Serializable* serializable, T817* buff) {
AcceptFriendDemandStatus* _b10835 = (AcceptFriendDemandStatus*)serializable;
T816::_m16601(_b10835->getValue(), buff);
}

void T819::_m16372(Serializable* serializable, T817* buff) {
RefuseFriendDemandStatus* _w10838 = (RefuseFriendDemandStatus*)serializable;
T816::_m16601(_w10838->getValue(), buff);
}

void T819::_m16373(Serializable* serializable, T817* buff) {
SubmitScoreStatus* _f10841 = (SubmitScoreStatus*)serializable;
T816::_m16601(_f10841->getValue(), buff);
}

void T819::_m16374(Serializable* serializable, T817* buff) {
GetLeaderboardStatus* _o10844 = (GetLeaderboardStatus*)serializable;
T816::_m16601(_o10844->getValue(), buff);
}

void T819::_m16375(Serializable* serializable, T817* buff) {
BuyItemStatus* _h10847 = (BuyItemStatus*)serializable;
T816::_m16601(_h10847->getValue(), buff);
}

void T819::_m16376(Serializable* serializable, T817* buff) {
GetStoreStatus* _g10850 = (GetStoreStatus*)serializable;
T816::_m16601(_g10850->getValue(), buff);
}

void T819::_m16377(Serializable* serializable, T817* buff) {
ConsumeItemStatus* _a10853 = (ConsumeItemStatus*)serializable;
T816::_m16601(_a10853->getValue(), buff);
}

void T819::_m16378(Serializable* serializable, T817* buff) {
IncreasePlayerWalletStatus* _t10856 = (IncreasePlayerWalletStatus*)serializable;
T816::_m16601(_t10856->getValue(), buff);
}

void T819::_m16379(Serializable* serializable, T817* buff) {
GetPlayerWalletStatus* _o10859 = (GetPlayerWalletStatus*)serializable;
T816::_m16601(_o10859->getValue(), buff);
}

void T819::_m16380(Serializable* serializable, T817* buff) {
GetAchievementBoardStatus* _x10862 = (GetAchievementBoardStatus*)serializable;
T816::_m16601(_x10862->getValue(), buff);
}

void T819::_m16381(Serializable* serializable, T817* buff) {
AchieveStatus* _t10865 = (AchieveStatus*)serializable;
T816::_m16601(_t10865->getValue(), buff);
}

void T819::_m16382(Serializable* serializable, T817* buff) {
SearchImmediateGameStatus* _j10868 = (SearchImmediateGameStatus*)serializable;
T816::_m16601(_j10868->getValue(), buff);
}

void T819::_m16383(Serializable* serializable, T817* buff) {
JoinGameStatus* _w10871 = (JoinGameStatus*)serializable;
T816::_m16601(_w10871->getValue(), buff);
}

void T819::_m16384(Serializable* serializable, T817* buff) {
UnjoinGameStatus* _t10874 = (UnjoinGameStatus*)serializable;
T816::_m16601(_t10874->getValue(), buff);
}

void T819::_m16385(Serializable* serializable, T817* buff) {
StartGameStatus* _p10877 = (StartGameStatus*)serializable;
T816::_m16601(_p10877->getValue(), buff);
}

void T819::_m16386(Serializable* serializable, T817* buff) {
StopGameStatus* _g10880 = (StopGameStatus*)serializable;
T816::_m16601(_g10880->getValue(), buff);
}

void T819::_m16387(Serializable* serializable, T817* buff) {
CreateGameStatus* _w10883 = (CreateGameStatus*)serializable;
T816::_m16601(_w10883->getValue(), buff);
}

void T819::_m16388(Serializable* serializable, T817* buff) {
GetGamesStatus* _l10886 = (GetGamesStatus*)serializable;
T816::_m16601(_l10886->getValue(), buff);
}

void T819::_m16389(Serializable* serializable, T817* buff) {
SaveAsGhostStatus* _t10889 = (SaveAsGhostStatus*)serializable;
T816::_m16601(_t10889->getValue(), buff);
}

void T819::_m16390(Serializable* serializable, T817* buff) {
GetGhostsStatus* _i10892 = (GetGhostsStatus*)serializable;
T816::_m16601(_i10892->getValue(), buff);
}

void T819::_m16391(Serializable* serializable, T817* buff) {
LoadGhostStatus* _y10895 = (LoadGhostStatus*)serializable;
T816::_m16601(_y10895->getValue(), buff);
}

void T819::_m16392(Serializable* serializable, T817* buff) {
SendGameChatStatus* _e10898 = (SendGameChatStatus*)serializable;
T816::_m16601(_e10898->getValue(), buff);
}

void T819::_m16393(Serializable* serializable, T817* buff) {
GetStorablesStatus* _m10901 = (GetStorablesStatus*)serializable;
T816::_m16601(_m10901->getValue(), buff);
}

void T819::_m16394(Serializable* serializable, T817* buff) {
SaveStorableStatus* _m10904 = (SaveStorableStatus*)serializable;
T816::_m16601(_m10904->getValue(), buff);
}

void T819::_m16395(Serializable* serializable, T817* buff) {
NextPlayerTurnStatus* _j10907 = (NextPlayerTurnStatus*)serializable;
T816::_m16601(_j10907->getValue(), buff);
}

void T819::_m16396(Serializable* serializable, T817* buff) {
SetPlayerNameStatus* _e10910 = (SetPlayerNameStatus*)serializable;
T816::_m16601(_e10910->getValue(), buff);
}

void T819::_m16397(Serializable* serializable, T817* buff) {
UpdateStorableStatus* _b10913 = (UpdateStorableStatus*)serializable;
T816::_m16601(_b10913->getValue(), buff);
}

void T819::_m16398(Serializable* serializable, T817* buff) {
RemoveStorableStatus* _r10916 = (RemoveStorableStatus*)serializable;
T816::_m16601(_r10916->getValue(), buff);
}

void T819::_m16399(Serializable* serializable, T817* buff) {
InviteThirdPartyFriendStatus* _s10919 = (InviteThirdPartyFriendStatus*)serializable;
T816::_m16601(_s10919->getValue(), buff);
}

void T819::_m16400(Serializable* serializable, T817* buff) {
PublishThirdPartyMessageStatus* _b10922 = (PublishThirdPartyMessageStatus*)serializable;
T816::_m16601(_b10922->getValue(), buff);
}

void T819::_m16401(Serializable* serializable, T817* buff) {
ThirdPartyLoginStatus* _l10925 = (ThirdPartyLoginStatus*)serializable;
T816::_m16601(_l10925->getValue(), buff);
}

void T819::_m16402(Serializable* serializable, T817* buff) {
SaveGameStatus* _k10928 = (SaveGameStatus*)serializable;
T816::_m16601(_k10928->getValue(), buff);
}

void T819::_m16403(Serializable* serializable, T817* buff) {
LoadGameStatus* _z10931 = (LoadGameStatus*)serializable;
T816::_m16601(_z10931->getValue(), buff);
}

void T819::_m16404(Serializable* serializable, T817* buff) {
SavePlayerStorableStatus* _v10934 = (SavePlayerStorableStatus*)serializable;
T816::_m16601(_v10934->getValue(), buff);
}

void T819::_m16405(Serializable* serializable, T817* buff) {
UpdatePlayerStorableStatus* _w10937 = (UpdatePlayerStorableStatus*)serializable;
T816::_m16601(_w10937->getValue(), buff);
}

void T819::_m16406(Serializable* serializable, T817* buff) {
RemovePlayerStorableStatus* _r10940 = (RemovePlayerStorableStatus*)serializable;
T816::_m16601(_r10940->getValue(), buff);
}

void T819::_m16407(Serializable* serializable, T817* buff) {
GetPlayerStorablesStatus* _r10943 = (GetPlayerStorablesStatus*)serializable;
T816::_m16601(_r10943->getValue(), buff);
}

void T819::_m16408(Serializable* serializable, T817* buff) {
PauseSessionMonitoringStatus* _j10946 = (PauseSessionMonitoringStatus*)serializable;
T816::_m16601(_j10946->getValue(), buff);
}

void T819::_m16409(Serializable* serializable, T817* buff) {
ResumeSessionMonitoringStatus* _u10949 = (ResumeSessionMonitoringStatus*)serializable;
T816::_m16601(_u10949->getValue(), buff);
}

void T819::_m16410(Serializable* serializable, T817* buff) {
PublishFriendThirdPartyMessageStatus* _y10952 = (PublishFriendThirdPartyMessageStatus*)serializable;
T816::_m16601(_y10952->getValue(), buff);
}

void T819::_m16411(Serializable* serializable, T817* buff) {
InvitePlayerStatus* _l10955 = (InvitePlayerStatus*)serializable;
T816::_m16601(_l10955->getValue(), buff);
}

void T819::_m16412(Serializable* serializable, T817* buff) {
GetInvitationsStatus* _a10958 = (GetInvitationsStatus*)serializable;
T816::_m16601(_a10958->getValue(), buff);
}

void T819::_m16413(Serializable* serializable, T817* buff) {
AcceptInvitationStatus* _v10961 = (AcceptInvitationStatus*)serializable;
T816::_m16601(_v10961->getValue(), buff);
}

void T819::_m16414(Serializable* serializable, T817* buff) {
RefuseInvitationStatus* _c10964 = (RefuseInvitationStatus*)serializable;
T816::_m16601(_c10964->getValue(), buff);
}

void T819::_m16415(Serializable* serializable, T817* buff) {
int _d3561 = buff->_m16028();
buff->_m16029(2);
short _i3562 = 0;
bool _b3563 = false;
Handshake* _a10970 = (Handshake*)serializable;
if (_a10970->isMessageIdSet() == true) {
_b3563 = T816::_m16602(_a10970->getMessageId(), (short)0, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->isRequestIdSet() == true) {
_b3563 = T816::_m16602(_a10970->getRequestId(), (short)1, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->isVersionSet() == true) {
_b3563 = T816::_m16602(_a10970->getVersion(), (short)3, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->isReasonSet() == true) {
_b3563 = T816::_m16603(this, _a10970->getReason(), (short)4, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->isplayerIdsStoredSet() == true) {
_b3563 = T816::_m16602(_a10970->getPlayerIdsStored(), (short)5, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->issessionIdSet() == true) {
_b3563 = T816::_m16602(_a10970->getSessionId(), (short)6, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->isplatformSet() == true) {
_b3563 = T816::_m16602(_a10970->getPlatform(), (short)7, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->isspIdSet() == true) {
_b3563 = T816::_m16602(_a10970->getSpId(), (short)8, buff);
if (_b3563) {
_i3562++;
}
}
if (_a10970->isdebugSpIdSet() == true) {
_b3563 = T816::_m16602(_a10970->getDebugSpId(), (short)9, buff);
if (_b3563) {
_i3562++;
}
}
buff->_m16032(_d3561, _i3562);
}

void T819::_m16416(Serializable* serializable, T817* buff) {
int _u3565 = buff->_m16028();
buff->_m16029(2);
short _j3566 = 0;
bool _v3567 = false;
HandshakeResponse* _r10976 = (HandshakeResponse*)serializable;
if (_r10976->isMessageIdSet() == true) {
_v3567 = T816::_m16602(_r10976->getMessageId(), (short)0, buff);
if (_v3567) {
_j3566++;
}
}
if (_r10976->isRequestIdSet() == true) {
_v3567 = T816::_m16602(_r10976->getRequestId(), (short)1, buff);
if (_v3567) {
_j3566++;
}
}
if (_r10976->isExecutionStatusSet() == true) {
_v3567 = T816::_m16603(this, _r10976->getExecutionStatus(), (short)3, buff);
if (_v3567) {
_j3566++;
}
}
if (_r10976->isReasonSet() == true) {
_v3567 = T816::_m16603(this, _r10976->getReason(), (short)4, buff);
if (_v3567) {
_j3566++;
}
}
if (_r10976->isplayerIdsStoredSet() == true) {
_v3567 = T816::_m16602(_r10976->getPlayerIdsStored(), (short)5, buff);
if (_v3567) {
_j3566++;
}
}
if (_r10976->issessionIdSet() == true) {
_v3567 = T816::_m16602(_r10976->getSessionId(), (short)6, buff);
if (_v3567) {
_j3566++;
}
}
if (_r10976->isPlayerSessionTypeSet() == true) {
_v3567 = T816::_m16603(this, _r10976->getPlayerSessionType(), (short)7, buff);
if (_v3567) {
_j3566++;
}
}
if (_r10976->isPlayerSet() == true) {
_v3567 = T816::_m16603(this, _r10976->getPlayer(), (short)8, buff);
if (_v3567) {
_j3566++;
}
}
buff->_m16032(_u3565, _j3566);
}

void T819::_m16417(Serializable* serializable, T817* buff) {
int _k3569 = buff->_m16028();
buff->_m16029(2);
short _j3570 = 0;
bool _o3571 = false;
InvalidVersion* _f10982 = (InvalidVersion*)serializable;
if (_f10982->isMessageIdSet() == true) {
_o3571 = T816::_m16602(_f10982->getMessageId(), (short)0, buff);
if (_o3571) {
_j3570++;
}
}
if (_f10982->isRequestIdSet() == true) {
_o3571 = T816::_m16602(_f10982->getRequestId(), (short)1, buff);
if (_o3571) {
_j3570++;
}
}
buff->_m16032(_k3569, _j3570);
}

void T819::_m16418(Serializable* serializable, T817* buff) {
int _u3573 = buff->_m16028();
buff->_m16029(2);
short _f3574 = 0;
bool _n3575 = false;
NPlayer* _m10988 = (NPlayer*)serializable;
if (_m10988->isstoreIdSet() == true) {
_n3575 = T816::_m16602(_m10988->getStoreId(), (short)0, buff);
if (_n3575) {
_f3574++;
}
}
if (_m10988->isIDSet() == true) {
_n3575 = T816::_m16602(_m10988->getID(), (short)2, buff);
if (_n3575) {
_f3574++;
}
}
if (_m10988->isAccessTokenSet() == true) {
_n3575 = T816::_m16602(_m10988->getAccessToken(), (short)5, buff);
if (_n3575) {
_f3574++;
}
}
if (_m10988->isNameSet() == true) {
_n3575 = T816::_m16602(_m10988->getName(), (short)6, buff);
if (_n3575) {
_f3574++;
}
}
if (_m10988->isConnectedSet() == true) {
_n3575 = T816::_m16604(_m10988->isConnected(), (short)7, buff);
if (_n3575) {
_f3574++;
}
}
if (_m10988->isLoginSourceSet() == true) {
_n3575 = T816::_m16603(this, _m10988->getLoginSource(), (short)8, buff);
if (_n3575) {
_f3574++;
}
}
if (_m10988->isThirdPartyIdSet() == true) {
_n3575 = T816::_m16602(_m10988->getThirdPartyId(), (short)9, buff);
if (_n3575) {
_f3574++;
}
}
if (_m10988->isLangSet() == true) {
_n3575 = T816::_m16602(_m10988->getLang(), (short)12, buff);
if (_n3575) {
_f3574++;
}
}
buff->_m16032(_u3573, _f3574);
}

void T819::_m16419(Serializable* serializable, T817* buff) {
int _s3577 = buff->_m16028();
buff->_m16029(2);
short _k3578 = 0;
bool _f3579 = false;
GameStateChange* _r10994 = (GameStateChange*)serializable;
if (_r10994->isMessageIdSet() == true) {
_f3579 = T816::_m16602(_r10994->getMessageId(), (short)0, buff);
if (_f3579) {
_k3578++;
}
}
if (_r10994->isRequestIdSet() == true) {
_f3579 = T816::_m16602(_r10994->getRequestId(), (short)1, buff);
if (_f3579) {
_k3578++;
}
}
if (_r10994->isGameIdSet() == true) {
_f3579 = T816::_m16602(_r10994->getGameId(), (short)3, buff);
if (_f3579) {
_k3578++;
}
}
if (_r10994->isGameRunningStateSet() == true) {
_f3579 = T816::_m16603(this, _r10994->getGameRunningState(), (short)4, buff);
if (_f3579) {
_k3578++;
}
}
buff->_m16032(_s3577, _k3578);
}

void T819::_m16420(Serializable* serializable, T817* buff) {
int _q3581 = buff->_m16028();
buff->_m16029(2);
short _b3582 = 0;
bool _h3583 = false;
NFriendDemand* _t11000 = (NFriendDemand*)serializable;
if (_t11000->isstoreIdSet() == true) {
_h3583 = T816::_m16602(_t11000->getStoreId(), (short)0, buff);
if (_h3583) {
_b3582++;
}
}
if (_t11000->isEmitterSet() == true) {
_h3583 = T816::_m16603(this, _t11000->getEmitter(), (short)2, buff);
if (_h3583) {
_b3582++;
}
}
if (_t11000->isReceiverIdSet() == true) {
_h3583 = T816::_m16602(_t11000->getReceiverId(), (short)3, buff);
if (_h3583) {
_b3582++;
}
}
if (_t11000->isCustomMessageSet() == true) {
_h3583 = T816::_m16602(_t11000->getCustomMessage(), (short)4, buff);
if (_h3583) {
_b3582++;
}
}
if (_t11000->isFriendDemandStatusSet() == true) {
_h3583 = T816::_m16603(this, _t11000->getFriendDemandStatus(), (short)5, buff);
if (_h3583) {
_b3582++;
}
}
if (_t11000->isIdSet() == true) {
_h3583 = T816::_m16602(_t11000->getId(), (short)6, buff);
if (_h3583) {
_b3582++;
}
}
buff->_m16032(_q3581, _b3582);
}

void T819::_m16421(Serializable* serializable, T817* buff) {
int _n3585 = buff->_m16028();
buff->_m16029(2);
short _e3586 = 0;
bool _i3587 = false;
NScore* _r11006 = (NScore*)serializable;
if (_r11006->isstoreIdSet() == true) {
_i3587 = T816::_m16602(_r11006->getStoreId(), (short)0, buff);
if (_i3587) {
_e3586++;
}
}
if (_r11006->isValueSet() == true) {
_i3587 = T816::_m16605(_r11006->getValue(), (short)2, buff);
if (_i3587) {
_e3586++;
}
}
buff->_m16032(_n3585, _e3586);
}

void T819::_m16422(Serializable* serializable, T817* buff) {
int _o3589 = buff->_m16028();
buff->_m16029(2);
short _o3590 = 0;
bool _q3591 = false;
NRoom* _r11012 = (NRoom*)serializable;
if (_r11012->isstoreIdSet() == true) {
_q3591 = T816::_m16602(_r11012->getStoreId(), (short)0, buff);
if (_q3591) {
_o3590++;
}
}
if (_r11012->isIdSet() == true) {
_q3591 = T816::_m16602(_r11012->getId(), (short)2, buff);
if (_q3591) {
_o3590++;
}
}
if (_r11012->isNameSet() == true) {
_q3591 = T816::_m16602(_r11012->getName(), (short)3, buff);
if (_q3591) {
_o3590++;
}
}
if (_r11012->isPlayersSet() == true) {
std::vector<NPlayer*>* _k11013 = _r11012->getPlayers();
if (_k11013 == 0) {
_q3591 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _l11014 = buff->_m16028();
buff->_m16029(4);
int _q11015 = _k11013->size();
buff->_m16035((short)_q11015);
for (unsigned int _p3596 = 0; _p3596 < (unsigned int)_q11015; _p3596++) {
NPlayer* _s3597 = (*_k11013)[_p3596];
if (_s3597 == 0) {
buff->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _s3597, buff);
}
}
buff->_m16038(_l11014, buff->_m16028() - _l11014);
_q3591 = true;
}
if (_q3591) {
_o3590++;
}
}
buff->_m16032(_o3589, _o3590);
}

void T819::_m16423(Serializable* serializable, T817* buff) {
int _y3598 = buff->_m16028();
buff->_m16029(2);
short _e3599 = 0;
bool _n3600 = false;
NGame* _i11023 = (NGame*)serializable;
if (_i11023->isstoreIdSet() == true) {
_n3600 = T816::_m16602(_i11023->getStoreId(), (short)0, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isIdSet() == true) {
_n3600 = T816::_m16602(_i11023->getId(), (short)2, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isNameSet() == true) {
_n3600 = T816::_m16602(_i11023->getName(), (short)3, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isPlayersSet() == true) {
std::vector<NPlayer*>* _z11024 = _i11023->getPlayers();
if (_z11024 == 0) {
_n3600 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _o11025 = buff->_m16028();
buff->_m16029(4);
int _w11026 = _z11024->size();
buff->_m16035((short)_w11026);
for (unsigned int _y3605 = 0; _y3605 < (unsigned int)_w11026; _y3605++) {
NPlayer* _c3606 = (*_z11024)[_y3605];
if (_c3606 == 0) {
buff->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _c3606, buff);
}
}
buff->_m16038(_o11025, buff->_m16028() - _o11025);
_n3600 = true;
}
if (_n3600) {
_e3599++;
}
}
if (_i11023->isGameRunningStateSet() == true) {
_n3600 = T816::_m16603(this, _i11023->getGameRunningState(), (short)2502, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isGameCharacteristicsSet() == true) {
_n3600 = T816::_m16603(this, _i11023->getGameCharacteristics(), (short)2503, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isGameStateSet() == true) {
_n3600 = T816::_m16603(this, _i11023->getGameState(), (short)2504, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isMatchMakingConditionsSet() == true) {
_n3600 = T816::_m16603(this, _i11023->getMatchMakingConditions(), (short)2505, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isTurnBasedContextSet() == true) {
_n3600 = T816::_m16603(this, _i11023->getTurnBasedContext(), (short)2506, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isDisconnectedContextSet() == true) {
_n3600 = T816::_m16603(this, _i11023->getDisconnectedContext(), (short)2507, buff);
if (_n3600) {
_e3599++;
}
}
if (_i11023->isOwnerSet() == true) {
_n3600 = T816::_m16603(this, _i11023->getOwner(), (short)2508, buff);
if (_n3600) {
_e3599++;
}
}
buff->_m16032(_y3598, _e3599);
}

void T819::_m16424(Serializable* serializable, T817* buff) {
int _x3607 = buff->_m16028();
buff->_m16029(2);
short _f3608 = 0;
bool _r3609 = false;
NGameCharacteristics* _j11034 = (NGameCharacteristics*)serializable;
if (_j11034->isstoreIdSet() == true) {
_r3609 = T816::_m16602(_j11034->getStoreId(), (short)0, buff);
if (_r3609) {
_f3608++;
}
}
if (_j11034->isMinPlayerSet() == true) {
_r3609 = T816::_m16607(_j11034->getMinPlayer(), (short)2, buff);
if (_r3609) {
_f3608++;
}
}
if (_j11034->isMaxPlayerSet() == true) {
_r3609 = T816::_m16607(_j11034->getMaxPlayer(), (short)3, buff);
if (_r3609) {
_f3608++;
}
}
if (_j11034->isAutoStopSet() == true) {
_r3609 = T816::_m16604(_j11034->isAutoStop(), (short)4, buff);
if (_r3609) {
_f3608++;
}
}
if (_j11034->isAutoStartSet() == true) {
_r3609 = T816::_m16604(_j11034->isAutoStart(), (short)5, buff);
if (_r3609) {
_f3608++;
}
}
buff->_m16032(_x3607, _f3608);
}

void T819::_m16425(Serializable* serializable, T817* buff) {
int _e3611 = buff->_m16028();
buff->_m16029(2);
short _v3612 = 0;
bool _x3613 = false;
PlayerEnterGame* _w11040 = (PlayerEnterGame*)serializable;
if (_w11040->isMessageIdSet() == true) {
_x3613 = T816::_m16602(_w11040->getMessageId(), (short)0, buff);
if (_x3613) {
_v3612++;
}
}
if (_w11040->isRequestIdSet() == true) {
_x3613 = T816::_m16602(_w11040->getRequestId(), (short)1, buff);
if (_x3613) {
_v3612++;
}
}
if (_w11040->isGameIdSet() == true) {
_x3613 = T816::_m16602(_w11040->getGameId(), (short)3, buff);
if (_x3613) {
_v3612++;
}
}
if (_w11040->isPlayerSet() == true) {
_x3613 = T816::_m16603(this, _w11040->getPlayer(), (short)4, buff);
if (_x3613) {
_v3612++;
}
}
buff->_m16032(_e3611, _v3612);
}

void T819::_m16426(Serializable* serializable, T817* buff) {
int _c3615 = buff->_m16028();
buff->_m16029(2);
short _k3616 = 0;
bool _r3617 = false;
AdminPublicMessage* _z11046 = (AdminPublicMessage*)serializable;
if (_z11046->isMessageIdSet() == true) {
_r3617 = T816::_m16602(_z11046->getMessageId(), (short)0, buff);
if (_r3617) {
_k3616++;
}
}
if (_z11046->isRequestIdSet() == true) {
_r3617 = T816::_m16602(_z11046->getRequestId(), (short)1, buff);
if (_r3617) {
_k3616++;
}
}
if (_z11046->isPlayerIdSet() == true) {
_r3617 = T816::_m16602(_z11046->getPlayerId(), (short)4, buff);
if (_r3617) {
_k3616++;
}
}
if (_z11046->isMessageSet() == true) {
_r3617 = T816::_m16602(_z11046->getMessage(), (short)5, buff);
if (_r3617) {
_k3616++;
}
}
buff->_m16032(_c3615, _k3616);
}

void T819::_m16427(Serializable* serializable, T817* buff) {
int _g3619 = buff->_m16028();
buff->_m16029(2);
short _l3620 = 0;
bool _t3621 = false;
FriendshipNotification* _b11052 = (FriendshipNotification*)serializable;
if (_b11052->isMessageIdSet() == true) {
_t3621 = T816::_m16602(_b11052->getMessageId(), (short)0, buff);
if (_t3621) {
_l3620++;
}
}
if (_b11052->isRequestIdSet() == true) {
_t3621 = T816::_m16602(_b11052->getRequestId(), (short)1, buff);
if (_t3621) {
_l3620++;
}
}
if (_b11052->isFriendSet() == true) {
_t3621 = T816::_m16603(this, _b11052->getFriend(), (short)4, buff);
if (_t3621) {
_l3620++;
}
}
buff->_m16032(_g3619, _l3620);
}

void T819::_m16428(Serializable* serializable, T817* buff) {
int _w3623 = buff->_m16028();
buff->_m16029(2);
short _p3624 = 0;
bool _b3625 = false;
PlayerUnjoinGame* _s11058 = (PlayerUnjoinGame*)serializable;
if (_s11058->isMessageIdSet() == true) {
_b3625 = T816::_m16602(_s11058->getMessageId(), (short)0, buff);
if (_b3625) {
_p3624++;
}
}
if (_s11058->isRequestIdSet() == true) {
_b3625 = T816::_m16602(_s11058->getRequestId(), (short)1, buff);
if (_b3625) {
_p3624++;
}
}
if (_s11058->isGameIdSet() == true) {
_b3625 = T816::_m16602(_s11058->getGameId(), (short)3, buff);
if (_b3625) {
_p3624++;
}
}
if (_s11058->isPlayerSet() == true) {
_b3625 = T816::_m16603(this, _s11058->getPlayer(), (short)4, buff);
if (_b3625) {
_p3624++;
}
}
buff->_m16032(_w3623, _p3624);
}

void T819::_m16429(Serializable* serializable, T817* buff) {
int _j3627 = buff->_m16028();
buff->_m16029(2);
short _t3628 = 0;
bool _l3629 = false;
DnsRequest* _d11064 = (DnsRequest*)serializable;
if (_d11064->isMessageIdSet() == true) {
_l3629 = T816::_m16602(_d11064->getMessageId(), (short)0, buff);
if (_l3629) {
_t3628++;
}
}
if (_d11064->isRequestIdSet() == true) {
_l3629 = T816::_m16602(_d11064->getRequestId(), (short)1, buff);
if (_l3629) {
_t3628++;
}
}
if (_d11064->isGameIdSet() == true) {
_l3629 = T816::_m16602(_d11064->getGameId(), (short)3, buff);
if (_l3629) {
_t3628++;
}
}
if (_d11064->isGameVersionSet() == true) {
_l3629 = T816::_m16607(_d11064->getGameVersion(), (short)4, buff);
if (_l3629) {
_t3628++;
}
}
if (_d11064->isGameDeployedVersionSet() == true) {
_l3629 = T816::_m16607(_d11064->getGameDeployedVersion(), (short)5, buff);
if (_l3629) {
_t3628++;
}
}
if (_d11064->isPlatformSet() == true) {
_l3629 = T816::_m16602(_d11064->getPlatform(), (short)6, buff);
if (_l3629) {
_t3628++;
}
}
buff->_m16032(_j3627, _t3628);
}

void T819::_m16430(Serializable* _n10767, T817* _s10768) {
int _g3631 = _s10768->_m16028();
_s10768->_m16029(2);
short _c3632 = 0;
bool _s3633 = false;
DnsResponse* _b11070 = (DnsResponse*)_n10767;
if (_b11070->isMessageIdSet() == true) {
_s3633 = T816::_m16602(_b11070->getMessageId(), (short)0, _s10768);
if (_s3633) {
_c3632++;
}
}
if (_b11070->isRequestIdSet() == true) {
_s3633 = T816::_m16602(_b11070->getRequestId(), (short)1, _s10768);
if (_s3633) {
_c3632++;
}
}
if (_b11070->isIpAddressSet() == true) {
_s3633 = T816::_m16602(_b11070->getIpAddress(), (short)3, _s10768);
if (_s3633) {
_c3632++;
}
}
if (_b11070->isTcpPortSet() == true) {
_s3633 = T816::_m16607(_b11070->getTcpPort(), (short)4, _s10768);
if (_s3633) {
_c3632++;
}
}
if (_b11070->isDnsStatusSet() == true) {
_s3633 = T816::_m16603(this, _b11070->getDnsStatus(), (short)5, _s10768);
if (_s3633) {
_c3632++;
}
}
if (_b11070->isStartDetailsSet() == true) {
_s3633 = T816::_m16603(this, _b11070->getStartDetails(), (short)6, _s10768);
if (_s3633) {
_c3632++;
}
}
_s10768->_m16032(_g3631, _c3632);
}

void T819::_m16431(Serializable* _g10773, T817* _r10774) {
int _m3635 = _r10774->_m16028();
_r10774->_m16029(2);
short _i3636 = 0;
bool _r3637 = false;
ConnectionLost* _y11076 = (ConnectionLost*)_g10773;
if (_y11076->isMessageIdSet() == true) {
_r3637 = T816::_m16602(_y11076->getMessageId(), (short)0, _r10774);
if (_r3637) {
_i3636++;
}
}
if (_y11076->isRequestIdSet() == true) {
_r3637 = T816::_m16602(_y11076->getRequestId(), (short)1, _r10774);
if (_r3637) {
_i3636++;
}
}
_r10774->_m16032(_m3635, _i3636);
}

void T819::_m16432(Serializable* _o10791, T817* _f10792) {
int _h3639 = _f10792->_m16028();
_f10792->_m16029(2);
short _o3640 = 0;
bool _j3641 = false;
NWorldUpdate* _u11082 = (NWorldUpdate*)_o10791;
if (_u11082->isstoreIdSet() == true) {
_j3641 = T816::_m16602(_u11082->getStoreId(), (short)0, _f10792);
if (_j3641) {
_o3640++;
}
}
if (_u11082->isUpdateSet() == true) {
_j3641 = T816::_m16607(_u11082->getUpdate(), (short)2, _f10792);
if (_j3641) {
_o3640++;
}
}
if (_u11082->isValuesSet() == true) {
std::vector<Message*>* _h11083 = _u11082->getValues();
if (_h11083 == 0) {
_j3641 = false;
} else {
_f10792->_m16035((short)3);
_f10792->_m16036(T809::_y15502);
int _d11084 = _f10792->_m16028();
_f10792->_m16029(4);
int _o11085 = _h11083->size();
_f10792->_m16035((short)_o11085);
for (unsigned int _n3646 = 0; _n3646 < (unsigned int)_o11085; _n3646++) {
Message* _d3647 = (*_h11083)[_n3646];
if (_d3647 == 0) {
_f10792->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _d3647, _f10792);
}
}
_f10792->_m16038(_d11084, _f10792->_m16028() - _d11084);
_j3641 = true;
}
if (_j3641) {
_o3640++;
}
}
_f10792->_m16032(_h3639, _o3640);
}

void T819::_m16433(Serializable* _h10800, T817* _c10801) {
int _s3648 = _c10801->_m16028();
_c10801->_m16029(2);
short _o3649 = 0;
bool _h3650 = false;
StopPlugConnectionRequest* _i11093 = (StopPlugConnectionRequest*)_h10800;
if (_i11093->isMessageIdSet() == true) {
_h3650 = T816::_m16602(_i11093->getMessageId(), (short)0, _c10801);
if (_h3650) {
_o3649++;
}
}
if (_i11093->isRequestIdSet() == true) {
_h3650 = T816::_m16602(_i11093->getRequestId(), (short)1, _c10801);
if (_h3650) {
_o3649++;
}
}
_c10801->_m16032(_s3648, _o3649);
}

void T819::_m16434(Serializable* _a10806, T817* _i10807) {
int _y3652 = _i10807->_m16028();
_i10807->_m16029(2);
short _j3653 = 0;
bool _l3654 = false;
StopPlugConnectionResponse* _j11099 = (StopPlugConnectionResponse*)_a10806;
if (_j11099->isMessageIdSet() == true) {
_l3654 = T816::_m16602(_j11099->getMessageId(), (short)0, _i10807);
if (_l3654) {
_j3653++;
}
}
if (_j11099->isRequestIdSet() == true) {
_l3654 = T816::_m16602(_j11099->getRequestId(), (short)1, _i10807);
if (_l3654) {
_j3653++;
}
}
_i10807->_m16032(_y3652, _j3653);
}

void T819::_m16435(Serializable* _j10815, T817* _y10816) {
int _m3656 = _y10816->_m16028();
_y10816->_m16029(2);
short _q3657 = 0;
bool _v3658 = false;
ConnectionInterrupted* _e11105 = (ConnectionInterrupted*)_j10815;
if (_e11105->isMessageIdSet() == true) {
_v3658 = T816::_m16602(_e11105->getMessageId(), (short)0, _y10816);
if (_v3658) {
_q3657++;
}
}
if (_e11105->isRequestIdSet() == true) {
_v3658 = T816::_m16602(_e11105->getRequestId(), (short)1, _y10816);
if (_v3658) {
_q3657++;
}
}
_y10816->_m16032(_m3656, _q3657);
}

void T819::_m16436(Serializable* _u10821, T817* _e10822) {
int _y3660 = _e10822->_m16028();
_e10822->_m16029(2);
short _o3661 = 0;
bool _i3662 = false;
ConnectionResumed* _x11111 = (ConnectionResumed*)_u10821;
if (_x11111->isMessageIdSet() == true) {
_i3662 = T816::_m16602(_x11111->getMessageId(), (short)0, _e10822);
if (_i3662) {
_o3661++;
}
}
if (_x11111->isRequestIdSet() == true) {
_i3662 = T816::_m16602(_x11111->getRequestId(), (short)1, _e10822);
if (_i3662) {
_o3661++;
}
}
_e10822->_m16032(_y3660, _o3661);
}

void T819::_m16437(Serializable* _g10830, T817* _t10831) {
int _h3664 = _t10831->_m16028();
_t10831->_m16029(2);
short _r3665 = 0;
bool _j3666 = false;
ConnectionStop* _x11117 = (ConnectionStop*)_g10830;
if (_x11117->isMessageIdSet() == true) {
_j3666 = T816::_m16602(_x11117->getMessageId(), (short)0, _t10831);
if (_j3666) {
_r3665++;
}
}
if (_x11117->isRequestIdSet() == true) {
_j3666 = T816::_m16602(_x11117->getRequestId(), (short)1, _t10831);
if (_j3666) {
_r3665++;
}
}
_t10831->_m16032(_h3664, _r3665);
}

void T819::_m16438(Serializable* _f10842, T817* _j10843) {
int _k3668 = _j10843->_m16028();
_j10843->_m16029(2);
short _y3669 = 0;
bool _h3670 = false;
NuggetaQuery* _p11123 = (NuggetaQuery*)_f10842;
if (_p11123->isdomainSet() == true) {
_h3670 = T816::_m16602(_p11123->getDomain(), (short)0, _j10843);
if (_h3670) {
_y3669++;
}
}
if (_p11123->isstartSet() == true) {
_h3670 = T816::_m16607(_p11123->getStart(), (short)1, _j10843);
if (_h3670) {
_y3669++;
}
}
if (_p11123->islimitSet() == true) {
_h3670 = T816::_m16607(_p11123->getLimit(), (short)2, _j10843);
if (_h3670) {
_y3669++;
}
}
if (_p11123->isquerySet() == true) {
_h3670 = T816::_m16602(_p11123->getQuery(), (short)3, _j10843);
if (_h3670) {
_y3669++;
}
}
_j10843->_m16032(_k3668, _y3669);
}

void T819::_m16439(Serializable* _c10854, T817* _t10855) {
int _h3672 = _t10855->_m16028();
_t10855->_m16029(2);
short _u3673 = 0;
bool _z3674 = false;
FriendConnectedNotification* _u11129 = (FriendConnectedNotification*)_c10854;
if (_u11129->isMessageIdSet() == true) {
_z3674 = T816::_m16602(_u11129->getMessageId(), (short)0, _t10855);
if (_z3674) {
_u3673++;
}
}
if (_u11129->isRequestIdSet() == true) {
_z3674 = T816::_m16602(_u11129->getRequestId(), (short)1, _t10855);
if (_z3674) {
_u3673++;
}
}
if (_u11129->isfriendSet() == true) {
_z3674 = T816::_m16603(this, _u11129->getFriend(), (short)3, _t10855);
if (_z3674) {
_u3673++;
}
}
_t10855->_m16032(_h3672, _u3673);
}

void T819::_m16440(Serializable* _d10863, T817* _m10864) {
int _o3676 = _m10864->_m16028();
_m10864->_m16029(2);
short _x3677 = 0;
bool _u3678 = false;
FriendDisconnectedNotification* _p11135 = (FriendDisconnectedNotification*)_d10863;
if (_p11135->isMessageIdSet() == true) {
_u3678 = T816::_m16602(_p11135->getMessageId(), (short)0, _m10864);
if (_u3678) {
_x3677++;
}
}
if (_p11135->isRequestIdSet() == true) {
_u3678 = T816::_m16602(_p11135->getRequestId(), (short)1, _m10864);
if (_u3678) {
_x3677++;
}
}
if (_p11135->isfriendSet() == true) {
_u3678 = T816::_m16603(this, _p11135->getFriend(), (short)3, _m10864);
if (_u3678) {
_x3677++;
}
}
_m10864->_m16032(_o3676, _x3677);
}

void T819::_m16441(Serializable* _e10872, T817* _d10873) {
int _u3680 = _d10873->_m16028();
_d10873->_m16029(2);
short _f3681 = 0;
bool _s3682 = false;
NPlayerWallet* _s11141 = (NPlayerWallet*)_e10872;
if (_s11141->isstoreIdSet() == true) {
_s3682 = T816::_m16602(_s11141->getStoreId(), (short)0, _d10873);
if (_s3682) {
_f3681++;
}
}
if (_s11141->isNbCoinsSet() == true) {
_s3682 = T816::_m16607(_s11141->getNbCoins(), (short)3, _d10873);
if (_s3682) {
_f3681++;
}
}
_d10873->_m16032(_u3680, _f3681);
}

void T819::_m16442(Serializable* _a10890, T817* _i10891) {
int _d3684 = _i10891->_m16028();
_i10891->_m16029(2);
short _y3685 = 0;
bool _c3686 = false;
NItem* _q11147 = (NItem*)_a10890;
if (_q11147->isstoreIdSet() == true) {
_c3686 = T816::_m16602(_q11147->getStoreId(), (short)0, _i10891);
if (_c3686) {
_y3685++;
}
}
if (_q11147->isIdSet() == true) {
_c3686 = T816::_m16602(_q11147->getId(), (short)2, _i10891);
if (_c3686) {
_y3685++;
}
}
if (_q11147->isNameSet() == true) {
_c3686 = T816::_m16602(_q11147->getName(), (short)3, _i10891);
if (_c3686) {
_y3685++;
}
}
if (_q11147->isPriceSet() == true) {
_c3686 = T816::_m16607(_q11147->getPrice(), (short)4, _i10891);
if (_c3686) {
_y3685++;
}
}
if (_q11147->isBoughtSet() == true) {
_c3686 = T816::_m16604(_q11147->isBought(), (short)5, _i10891);
if (_c3686) {
_y3685++;
}
}
if (_q11147->isCountSet() == true) {
_c3686 = T816::_m16607(_q11147->getCount(), (short)6, _i10891);
if (_c3686) {
_y3685++;
}
}
_i10891->_m16032(_d3684, _y3685);
}

void T819::_m16443(Serializable* _y10923, T817* _o10924) {
int _j3688 = _o10924->_m16028();
_o10924->_m16029(2);
short _h3689 = 0;
bool _g3690 = false;
NAchievement* _c11153 = (NAchievement*)_y10923;
if (_c11153->isstoreIdSet() == true) {
_g3690 = T816::_m16602(_c11153->getStoreId(), (short)0, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isIdSet() == true) {
_g3690 = T816::_m16602(_c11153->getId(), (short)2, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isNameSet() == true) {
_g3690 = T816::_m16602(_c11153->getName(), (short)3, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isAchievedSet() == true) {
_g3690 = T816::_m16604(_c11153->isAchieved(), (short)4, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isDescriptionSet() == true) {
_g3690 = T816::_m16602(_c11153->getDescription(), (short)6, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isNXPSet() == true) {
_g3690 = T816::_m16607(_c11153->getNXP(), (short)7, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isNEnergySet() == true) {
_g3690 = T816::_m16607(_c11153->getNEnergy(), (short)8, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isTypeSet() == true) {
_g3690 = T816::_m16603(this, _c11153->getType(), (short)9, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isGoalSet() == true) {
_g3690 = T816::_m16607(_c11153->getGoal(), (short)10, _o10924);
if (_g3690) {
_h3689++;
}
}
if (_c11153->isProgressSet() == true) {
_g3690 = T816::_m16607(_c11153->getProgress(), (short)11, _o10924);
if (_g3690) {
_h3689++;
}
}
_o10924->_m16032(_j3688, _h3689);
}

void T819::_m16444(Serializable* _p10938, T817* _u10939) {
int _k3692 = _u10939->_m16028();
_u10939->_m16029(2);
short _t3693 = 0;
bool _r3694 = false;
NGameState* _k11159 = (NGameState*)_p10938;
if (_k11159->isstoreIdSet() == true) {
_r3694 = T816::_m16602(_k11159->getStoreId(), (short)0, _u10939);
if (_r3694) {
_t3693++;
}
}
if (_k11159->isUpdatesSet() == true) {
std::vector<NWorldUpdate*>* _i11160 = _k11159->getUpdates();
if (_i11160 == 0) {
_r3694 = false;
} else {
_u10939->_m16035((short)2);
_u10939->_m16036(T809::_y15502);
int _u11161 = _u10939->_m16028();
_u10939->_m16029(4);
int _l11162 = _i11160->size();
_u10939->_m16035((short)_l11162);
for (unsigned int _r3699 = 0; _r3699 < (unsigned int)_l11162; _r3699++) {
NWorldUpdate* _e3700 = (*_i11160)[_r3699];
if (_e3700 == 0) {
_u10939->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _e3700, _u10939);
}
}
_u10939->_m16038(_u11161, _u10939->_m16028() - _u11161);
_r3694 = true;
}
if (_r3694) {
_t3693++;
}
}
_u10939->_m16032(_k3692, _t3693);
}

void T819::_m16445(Serializable* _i10950, T817* _y10951) {
int _c3701 = _y10951->_m16028();
_y10951->_m16029(2);
short _w3702 = 0;
bool _y3703 = false;
NuggetaException* _j11170 = (NuggetaException*)_i10950;
if (_j11170->isMessageIdSet() == true) {
_y3703 = T816::_m16602(_j11170->getMessageId(), (short)0, _y10951);
if (_y3703) {
_w3702++;
}
}
if (_j11170->isRequestIdSet() == true) {
_y3703 = T816::_m16602(_j11170->getRequestId(), (short)1, _y10951);
if (_y3703) {
_w3702++;
}
}
if (_j11170->isErrorCodeSet() == true) {
_y3703 = T816::_m16603(this, _j11170->getErrorCode(), (short)3, _y10951);
if (_y3703) {
_w3702++;
}
}
if (_j11170->isReasonSet() == true) {
_y3703 = T816::_m16602(_j11170->getReason(), (short)4, _y10951);
if (_y3703) {
_w3702++;
}
}
_y10951->_m16032(_c3701, _w3702);
}

void T819::_m16446(Serializable* _s10965, T817* _q10966) {
int _i3705 = _q10966->_m16028();
_q10966->_m16029(2);
short _j3706 = 0;
bool _s3707 = false;
NCoinPackage* _p11176 = (NCoinPackage*)_s10965;
if (_p11176->isstoreIdSet() == true) {
_s3707 = T816::_m16602(_p11176->getStoreId(), (short)0, _q10966);
if (_s3707) {
_j3706++;
}
}
if (_p11176->isCoinPackageIdSet() == true) {
_s3707 = T816::_m16602(_p11176->getCoinPackageId(), (short)2, _q10966);
if (_s3707) {
_j3706++;
}
}
if (_p11176->isVirtualValueSet() == true) {
_s3707 = T816::_m16608(_p11176->getVirtualValue(), (short)3, _q10966);
if (_s3707) {
_j3706++;
}
}
if (_p11176->isProductIdSet() == true) {
_s3707 = T816::_m16602(_p11176->getProductId(), (short)4, _q10966);
if (_s3707) {
_j3706++;
}
}
_q10966->_m16032(_i3705, _j3706);
}

void T819::_m16447(Serializable* serializable, T817* buff) {
int _w10967 = buff->_m16028();
buff->_m16029(2);
short _m10968 = 0;
bool _v10969 = false;
BuyProductUrl* _b11182 = (BuyProductUrl*)serializable;
if (_b11182->isMessageIdSet() == true) {
_v10969 = T816::_m16602(_b11182->getMessageId(), (short)0, buff);
if (_v10969) {
_m10968++;
}
}
if (_b11182->isRequestIdSet() == true) {
_v10969 = T816::_m16602(_b11182->getRequestId(), (short)1, buff);
if (_v10969) {
_m10968++;
}
}
if (_b11182->isurlSet() == true) {
_v10969 = T816::_m16602(_b11182->getUrl(), (short)3, buff);
if (_v10969) {
_m10968++;
}
}
buff->_m16032(_w10967, _m10968);
}

void T819::_m16448(Serializable* serializable, T817* buff) {
int _t3713 = buff->_m16028();
buff->_m16029(2);
short _d3714 = 0;
bool _z3715 = false;
BuyProductNotification* _g11188 = (BuyProductNotification*)serializable;
if (_g11188->isMessageIdSet() == true) {
_z3715 = T816::_m16602(_g11188->getMessageId(), (short)0, buff);
if (_z3715) {
_d3714++;
}
}
if (_g11188->isRequestIdSet() == true) {
_z3715 = T816::_m16602(_g11188->getRequestId(), (short)1, buff);
if (_z3715) {
_d3714++;
}
}
buff->_m16032(_t3713, _d3714);
}

void T819::_m16449(Serializable* serializable, T817* buff) {
int _e3717 = buff->_m16028();
buff->_m16029(2);
short _w3718 = 0;
bool _q3719 = false;
NMatchMakingConditions* _q11194 = (NMatchMakingConditions*)serializable;
if (_q11194->isstoreIdSet() == true) {
_q3719 = T816::_m16602(_q11194->getStoreId(), (short)0, buff);
if (_q3719) {
_w3718++;
}
}
if (_q11194->isMatchMakingTypeSet() == true) {
_q3719 = T816::_m16603(this, _q11194->getMatchMakingType(), (short)2, buff);
if (_q3719) {
_w3718++;
}
}
buff->_m16032(_e3717, _w3718);
}

void T819::_m16450(Serializable* serializable, T817* buff) {
int _p3721 = buff->_m16028();
buff->_m16029(2);
short _e3722 = 0;
bool _l3723 = false;
OpenConnection* _u11200 = (OpenConnection*)serializable;
if (_u11200->isMessageIdSet() == true) {
_l3723 = T816::_m16602(_u11200->getMessageId(), (short)0, buff);
if (_l3723) {
_e3722++;
}
}
if (_u11200->isRequestIdSet() == true) {
_l3723 = T816::_m16602(_u11200->getRequestId(), (short)1, buff);
if (_l3723) {
_e3722++;
}
}
if (_u11200->isIpAddressSet() == true) {
_l3723 = T816::_m16602(_u11200->getIpAddress(), (short)3, buff);
if (_l3723) {
_e3722++;
}
}
if (_u11200->isTcpPortSet() == true) {
_l3723 = T816::_m16607(_u11200->getTcpPort(), (short)4, buff);
if (_l3723) {
_e3722++;
}
}
buff->_m16032(_p3721, _e3722);
}

void T819::_m16451(Serializable* serializable, T817* buff) {
int _n3725 = buff->_m16028();
buff->_m16029(2);
short _j3726 = 0;
bool _e3727 = false;
PlayerMessage* _h11206 = (PlayerMessage*)serializable;
if (_h11206->isMessageIdSet() == true) {
_e3727 = T816::_m16602(_h11206->getMessageId(), (short)0, buff);
if (_e3727) {
_j3726++;
}
}
if (_h11206->isstoreIdSet() == true) {
_e3727 = T816::_m16602(_h11206->getStoreId(), (short)1, buff);
if (_e3727) {
_j3726++;
}
}
if (_h11206->isRequestIdSet() == true) {
_e3727 = T816::_m16602(_h11206->getRequestId(), (short)6, buff);
if (_e3727) {
_j3726++;
}
}
if (_h11206->isplayerIdSet() == true) {
_e3727 = T816::_m16602(_h11206->getPlayerId(), (short)9, buff);
if (_e3727) {
_j3726++;
}
}
if (_h11206->ismessageSet() == true) {
_e3727 = T816::_m16603(this, _h11206->getMessage(), (short)10, buff);
if (_e3727) {
_j3726++;
}
}
buff->_m16032(_n3725, _j3726);
}

void T819::_m16452(Serializable* _m10971, T817* _e10972) {
int _w10973 = _e10972->_m16028();
_e10972->_m16029(2);
short _y10974 = 0;
bool _b10975 = false;
NRawMessage* _s11212 = (NRawMessage*)_m10971;
if (_s11212->isMessageIdSet() == true) {
_b10975 = T816::_m16602(_s11212->getMessageId(), (short)0, _e10972);
if (_b10975) {
_y10974++;
}
}
if (_s11212->isSenderIdSet() == true) {
_b10975 = T816::_m16602(_s11212->getSenderId(), (short)1, _e10972);
if (_b10975) {
_y10974++;
}
}
if (_s11212->isstoreIdSet() == true) {
_b10975 = T816::_m16602(_s11212->getStoreId(), (short)2, _e10972);
if (_b10975) {
_y10974++;
}
}
if (_s11212->isRequestIdSet() == true) {
_b10975 = T816::_m16602(_s11212->getRequestId(), (short)7, _e10972);
if (_b10975) {
_y10974++;
}
}
if (_s11212->isgameIdSet() == true) {
_b10975 = T816::_m16602(_s11212->getGameId(), (short)10, _e10972);
if (_b10975) {
_y10974++;
}
}
if (_s11212->iscontentSet() == true) {
_b10975 = T816::_m16602(_s11212->getContent(), (short)11, _e10972);
if (_b10975) {
_y10974++;
}
}
_e10972->_m16032(_w10973, _y10974);
}

void T819::_m16453(Serializable* serializable, T817* buff) {
int _z3733 = buff->_m16028();
buff->_m16029(2);
short _c3734 = 0;
bool _h3735 = false;
SessionExpired* _t11218 = (SessionExpired*)serializable;
if (_t11218->isMessageIdSet() == true) {
_h3735 = T816::_m16602(_t11218->getMessageId(), (short)0, buff);
if (_h3735) {
_c3734++;
}
}
if (_t11218->isRequestIdSet() == true) {
_h3735 = T816::_m16602(_t11218->getRequestId(), (short)1, buff);
if (_h3735) {
_c3734++;
}
}
if (_t11218->issessionIdSet() == true) {
_h3735 = T816::_m16602(_t11218->getSessionId(), (short)3, buff);
if (_h3735) {
_c3734++;
}
}
buff->_m16032(_z3733, _c3734);
}

void T819::_m16454(Serializable* serializable, T817* buff) {
int _z3737 = buff->_m16028();
buff->_m16029(2);
short _q3738 = 0;
bool _k3739 = false;
GameMessageError* _f11224 = (GameMessageError*)serializable;
if (_f11224->isMessageIdSet() == true) {
_k3739 = T816::_m16602(_f11224->getMessageId(), (short)0, buff);
if (_k3739) {
_q3738++;
}
}
if (_f11224->isRequestIdSet() == true) {
_k3739 = T816::_m16602(_f11224->getRequestId(), (short)1, buff);
if (_k3739) {
_q3738++;
}
}
if (_f11224->isReasonSet() == true) {
_k3739 = T816::_m16602(_f11224->getReason(), (short)3, buff);
if (_k3739) {
_q3738++;
}
}
buff->_m16032(_z3737, _q3738);
}

void T819::_m16455(Serializable* serializable, T817* buff) {
int _e3741 = buff->_m16028();
buff->_m16029(2);
short _s3742 = 0;
bool _l3743 = false;
AdDisplayedNotification* _e11230 = (AdDisplayedNotification*)serializable;
if (_e11230->isMessageIdSet() == true) {
_l3743 = T816::_m16602(_e11230->getMessageId(), (short)0, buff);
if (_l3743) {
_s3742++;
}
}
if (_e11230->isRequestIdSet() == true) {
_l3743 = T816::_m16602(_e11230->getRequestId(), (short)1, buff);
if (_l3743) {
_s3742++;
}
}
buff->_m16032(_e3741, _s3742);
}

void T819::_m16456(Serializable* _h10983, T817* _o10984) {
int _h10985 = _o10984->_m16028();
_o10984->_m16029(2);
short _n10986 = 0;
bool _r10987 = false;
NPlayerProfile* _p11236 = (NPlayerProfile*)_h10983;
if (_p11236->isstoreIdSet() == true) {
_r10987 = T816::_m16602(_p11236->getStoreId(), (short)0, _o10984);
if (_r10987) {
_n10986++;
}
}
if (_p11236->isAvatarSet() == true) {
_r10987 = T816::_m16602(_p11236->getAvatar(), (short)2, _o10984);
if (_r10987) {
_n10986++;
}
}
if (_p11236->isPlayerIdSet() == true) {
_r10987 = T816::_m16602(_p11236->getPlayerId(), (short)3, _o10984);
if (_r10987) {
_n10986++;
}
}
if (_p11236->isCountrySet() == true) {
_r10987 = T816::_m16602(_p11236->getCountry(), (short)5, _o10984);
if (_r10987) {
_n10986++;
}
}
if (_p11236->isNXPSet() == true) {
_r10987 = T816::_m16607(_p11236->getNXP(), (short)9, _o10984);
if (_r10987) {
_n10986++;
}
}
if (_p11236->isNEnergySet() == true) {
_r10987 = T816::_m16607(_p11236->getNEnergy(), (short)10, _o10984);
if (_r10987) {
_n10986++;
}
}
if (_p11236->isNLevelSet() == true) {
_r10987 = T816::_m16603(this, _p11236->getNLevel(), (short)13, _o10984);
if (_r10987) {
_n10986++;
}
}
_o10984->_m16032(_h10985, _n10986);
}

void T819::_m16457(Serializable* serializable, T817* buff) {
int _m3749 = buff->_m16028();
buff->_m16029(2);
short _c3750 = 0;
bool _w3751 = false;
FriendDemandNotification* _p11242 = (FriendDemandNotification*)serializable;
if (_p11242->isMessageIdSet() == true) {
_w3751 = T816::_m16602(_p11242->getMessageId(), (short)0, buff);
if (_w3751) {
_c3750++;
}
}
if (_p11242->isRequestIdSet() == true) {
_w3751 = T816::_m16602(_p11242->getRequestId(), (short)1, buff);
if (_w3751) {
_c3750++;
}
}
if (_p11242->isFriendDemandSet() == true) {
_w3751 = T816::_m16603(this, _p11242->getFriendDemand(), (short)3, buff);
if (_w3751) {
_c3750++;
}
}
buff->_m16032(_m3749, _c3750);
}

void T819::_m16458(Serializable* serializable, T817* buff) {
int _r3753 = buff->_m16028();
buff->_m16029(2);
short _x3754 = 0;
bool _f3755 = false;
GameChatNotification* _q11248 = (GameChatNotification*)serializable;
if (_q11248->isMessageIdSet() == true) {
_f3755 = T816::_m16602(_q11248->getMessageId(), (short)0, buff);
if (_f3755) {
_x3754++;
}
}
if (_q11248->isRequestIdSet() == true) {
_f3755 = T816::_m16602(_q11248->getRequestId(), (short)1, buff);
if (_f3755) {
_x3754++;
}
}
if (_q11248->isplayerSet() == true) {
_f3755 = T816::_m16603(this, _q11248->getPlayer(), (short)3, buff);
if (_f3755) {
_x3754++;
}
}
if (_q11248->ismessageSet() == true) {
_f3755 = T816::_m16602(_q11248->getMessage(), (short)4, buff);
if (_f3755) {
_x3754++;
}
}
buff->_m16032(_r3753, _x3754);
}

void T819::_m16459(Serializable* serializable, T817* buff) {
int _r3757 = buff->_m16028();
buff->_m16029(2);
short _h3758 = 0;
bool _e3759 = false;
PublicServer* _j11254 = (PublicServer*)serializable;
if (_j11254->isstoreIdSet() == true) {
_e3759 = T816::_m16602(_j11254->getStoreId(), (short)0, buff);
if (_e3759) {
_h3758++;
}
}
if (_j11254->isIdSet() == true) {
_e3759 = T816::_m16602(_j11254->getId(), (short)3, buff);
if (_e3759) {
_h3758++;
}
}
if (_j11254->isLocationSet() == true) {
_e3759 = T816::_m16602(_j11254->getLocation(), (short)4, buff);
if (_e3759) {
_h3758++;
}
}
if (_j11254->isPingSet() == true) {
_e3759 = T816::_m16608(_j11254->getPing(), (short)5, buff);
if (_e3759) {
_h3758++;
}
}
buff->_m16032(_r3757, _h3758);
}

void T819::_m16460(Serializable* _p10989, T817* _r10990) {
int _y3761 = _r10990->_m16028();
_r10990->_m16029(2);
short _z3762 = 0;
bool _x3763 = false;
SwitchToServerInformation* _o11260 = (SwitchToServerInformation*)_p10989;
if (_o11260->isMessageIdSet() == true) {
_x3763 = T816::_m16602(_o11260->getMessageId(), (short)0, _r10990);
if (_x3763) {
_z3762++;
}
}
if (_o11260->isRequestIdSet() == true) {
_x3763 = T816::_m16602(_o11260->getRequestId(), (short)1, _r10990);
if (_x3763) {
_z3762++;
}
}
if (_o11260->isAddressSet() == true) {
_x3763 = T816::_m16602(_o11260->getAddress(), (short)3, _r10990);
if (_x3763) {
_z3762++;
}
}
_r10990->_m16032(_y3761, _z3762);
}

void T819::_m16461(Serializable* serializable, T817* buff) {
int _u10991 = buff->_m16028();
buff->_m16029(2);
short _k10992 = 0;
bool _q10993 = false;
MyTurnNotification* _s11266 = (MyTurnNotification*)serializable;
if (_s11266->isMessageIdSet() == true) {
_q10993 = T816::_m16602(_s11266->getMessageId(), (short)0, buff);
if (_q10993) {
_k10992++;
}
}
if (_s11266->isRequestIdSet() == true) {
_q10993 = T816::_m16602(_s11266->getRequestId(), (short)1, buff);
if (_q10993) {
_k10992++;
}
}
if (_s11266->isGameIdSet() == true) {
_q10993 = T816::_m16602(_s11266->getGameId(), (short)3, buff);
if (_q10993) {
_k10992++;
}
}
buff->_m16032(_u10991, _k10992);
}

void T819::_m16462(Serializable* serializable, T817* buff) {
int _b3769 = buff->_m16028();
buff->_m16029(2);
short _o3770 = 0;
bool _x3771 = false;
PlayerTurnNotification* _y11272 = (PlayerTurnNotification*)serializable;
if (_y11272->isMessageIdSet() == true) {
_x3771 = T816::_m16602(_y11272->getMessageId(), (short)0, buff);
if (_x3771) {
_o3770++;
}
}
if (_y11272->isRequestIdSet() == true) {
_x3771 = T816::_m16602(_y11272->getRequestId(), (short)1, buff);
if (_x3771) {
_o3770++;
}
}
if (_y11272->isCurrentPlayerSet() == true) {
_x3771 = T816::_m16603(this, _y11272->getCurrentPlayer(), (short)3, buff);
if (_x3771) {
_o3770++;
}
}
if (_y11272->isGameIdSet() == true) {
_x3771 = T816::_m16602(_y11272->getGameId(), (short)4, buff);
if (_x3771) {
_o3770++;
}
}
buff->_m16032(_b3769, _o3770);
}

void T819::_m16463(Serializable* _u10995, T817* _m10996) {
int _c10997 = _m10996->_m16028();
_m10996->_m16029(2);
short _d10998 = 0;
bool _w10999 = false;
NStore* _h11278 = (NStore*)_u10995;
if (_h11278->isstoreIdSet() == true) {
_w10999 = T816::_m16602(_h11278->getStoreId(), (short)1, _m10996);
if (_w10999) {
_d10998++;
}
}
if (_h11278->isItemsSet() == true) {
std::vector<NItem*>* _q11279 = _h11278->getItems();
if (_q11279 == 0) {
_w10999 = false;
} else {
_m10996->_m16035((short)2);
_m10996->_m16036(T809::_y15502);
int _e11280 = _m10996->_m16028();
_m10996->_m16029(4);
int _x11281 = _q11279->size();
_m10996->_m16035((short)_x11281);
for (unsigned int _g3780 = 0; _g3780 < (unsigned int)_x11281; _g3780++) {
NItem* _r3781 = (*_q11279)[_g3780];
if (_r3781 == 0) {
_m10996->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _r3781, _m10996);
}
}
_m10996->_m16038(_e11280, _m10996->_m16028() - _e11280);
_w10999 = true;
}
if (_w10999) {
_d10998++;
}
}
_m10996->_m16032(_c10997, _d10998);
}

void T819::_m16464(Serializable* serializable, T817* buff) {
int _n3782 = buff->_m16028();
buff->_m16029(2);
short _x3783 = 0;
bool _n3784 = false;
NAchievementBoard* _l11289 = (NAchievementBoard*)serializable;
if (_l11289->isstoreIdSet() == true) {
_n3784 = T816::_m16602(_l11289->getStoreId(), (short)1, buff);
if (_n3784) {
_x3783++;
}
}
if (_l11289->isachievementsSet() == true) {
std::vector<NAchievement*>* _v11290 = _l11289->getAchievements();
if (_v11290 == 0) {
_n3784 = false;
} else {
buff->_m16035((short)2);
buff->_m16036(T809::_y15502);
int _c11291 = buff->_m16028();
buff->_m16029(4);
int _r11292 = _v11290->size();
buff->_m16035((short)_r11292);
for (unsigned int _p3789 = 0; _p3789 < (unsigned int)_r11292; _p3789++) {
NAchievement* _e3790 = (*_v11290)[_p3789];
if (_e3790 == 0) {
buff->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _e3790, buff);
}
}
buff->_m16038(_c11291, buff->_m16028() - _c11291);
_n3784 = true;
}
if (_n3784) {
_x3783++;
}
}
buff->_m16032(_n3782, _x3783);
}

void T819::_m16465(Serializable* _o11001, T817* _h11002) {
int _c11003 = _h11002->_m16028();
_h11002->_m16029(2);
short _r11004 = 0;
bool _x11005 = false;
NLeaderboard* _t11300 = (NLeaderboard*)_o11001;
if (_t11300->isIdSet() == true) {
_x11005 = T816::_m16602(_t11300->getId(), (short)2, _h11002);
if (_x11005) {
_r11004++;
}
}
if (_t11300->isNameSet() == true) {
_x11005 = T816::_m16602(_t11300->getName(), (short)3, _h11002);
if (_x11005) {
_r11004++;
}
}
if (_t11300->isleaderboardEntriesSet() == true) {
std::vector<NLeaderboardEntry*>* _t11301 = _t11300->getLeaderboardEntries();
if (_t11301 == 0) {
_x11005 = false;
} else {
_h11002->_m16035((short)4);
_h11002->_m16036(T809::_y15502);
int _w11302 = _h11002->_m16028();
_h11002->_m16029(4);
int _f11303 = _t11301->size();
_h11002->_m16035((short)_f11303);
for (unsigned int _s11016 = 0; _s11016 < (unsigned int)_f11303; _s11016++) {
NLeaderboardEntry* _x11017 = (*_t11301)[_s11016];
if (_x11017 == 0) {
_h11002->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _x11017, _h11002);
}
}
_h11002->_m16038(_w11302, _h11002->_m16028() - _w11302);
_x11005 = true;
}
if (_x11005) {
_r11004++;
}
}
_h11002->_m16032(_c11003, _r11004);
}

void T819::_m16466(Serializable* _g11007, T817* _v11008) {
int _o11009 = _v11008->_m16028();
_v11008->_m16029(2);
short _b11010 = 0;
bool _f11011 = false;
TestPrimitiveList* _s11311 = (TestPrimitiveList*)_g11007;
if (_s11311->isMessageIdSet() == true) {
_f11011 = T816::_m16602(_s11311->getMessageId(), (short)0, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isRequestIdSet() == true) {
_f11011 = T816::_m16602(_s11311->getRequestId(), (short)1, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isStringListSet() == true) {
_f11011 = T816::_m16609(this, _s11311->getStringList(), (short)3, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isIntegerListSet() == true) {
_f11011 = T816::_m16610(this, _s11311->getIntegerList(), (short)4, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isShortListSet() == true) {
_f11011 = T816::_m16611(this, _s11311->getShortList(), (short)5, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isLongListSet() == true) {
_f11011 = T816::_m16612(this, _s11311->getLongList(), (short)6, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isFloatListSet() == true) {
_f11011 = T816::_m16613(this, _s11311->getFloatList(), (short)7, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isDoubleListSet() == true) {
_f11011 = T816::_m16614(this, _s11311->getDoubleList(), (short)8, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isBooleanListSet() == true) {
_f11011 = T816::_m16615(this, _s11311->getBooleanList(), (short)9, _v11008);
if (_f11011) {
_b11010++;
}
}
if (_s11311->isPlayerMatrix2Set() == true) {
_f11011 = T816::_m16616(this, _s11311->getPlayerMatrix2(), (short)14, _v11008);
if (_f11011) {
_b11010++;
}
}
_v11008->_m16032(_o11009, _b11010);
}

void T819::_m16467(Serializable* serializable, T817* buff) {
int _r3804 = buff->_m16028();
buff->_m16029(2);
short _s3805 = 0;
bool _x3806 = false;
OpenUrl* _v11317 = (OpenUrl*)serializable;
if (_v11317->isMessageIdSet() == true) {
_x3806 = T816::_m16602(_v11317->getMessageId(), (short)0, buff);
if (_x3806) {
_s3805++;
}
}
if (_v11317->isRequestIdSet() == true) {
_x3806 = T816::_m16602(_v11317->getRequestId(), (short)1, buff);
if (_x3806) {
_s3805++;
}
}
if (_v11317->isurlSet() == true) {
_x3806 = T816::_m16602(_v11317->getUrl(), (short)3, buff);
if (_x3806) {
_s3805++;
}
}
buff->_m16032(_r3804, _s3805);
}

void T819::_m16468(Serializable* _i11018, T817* _v11019) {
int _r11020 = _v11019->_m16028();
_v11019->_m16029(2);
short _o11021 = 0;
bool _l11022 = false;
TurnBasedContext* _o11323 = (TurnBasedContext*)_i11018;
if (_o11323->isMessageIdSet() == true) {
_l11022 = T816::_m16602(_o11323->getMessageId(), (short)0, _v11019);
if (_l11022) {
_o11021++;
}
}
if (_o11323->isRequestIdSet() == true) {
_l11022 = T816::_m16602(_o11323->getRequestId(), (short)1, _v11019);
if (_l11022) {
_o11021++;
}
}
if (_o11323->isCurrentPlayerSet() == true) {
_l11022 = T816::_m16603(this, _o11323->getCurrentPlayer(), (short)3, _v11019);
if (_l11022) {
_o11021++;
}
}
_v11019->_m16032(_r11020, _o11021);
}

void T819::_m16469(Serializable* serializable, T817* buff) {
int _s3812 = buff->_m16028();
buff->_m16029(2);
short _z3813 = 0;
bool _o3814 = false;
DisconnectedContext* _i11329 = (DisconnectedContext*)serializable;
if (_i11329->isMessageIdSet() == true) {
_o3814 = T816::_m16602(_i11329->getMessageId(), (short)0, buff);
if (_o3814) {
_z3813++;
}
}
if (_i11329->isRequestIdSet() == true) {
_o3814 = T816::_m16602(_i11329->getRequestId(), (short)1, buff);
if (_o3814) {
_z3813++;
}
}
if (_i11329->isParticipantsSet() == true) {
std::vector<NPlayer*>* _g11330 = _i11329->getParticipants();
if (_g11330 == 0) {
_o3814 = false;
} else {
buff->_m16035((short)3);
buff->_m16036(T809::_y15502);
int _g11331 = buff->_m16028();
buff->_m16029(4);
int _e11332 = _g11330->size();
buff->_m16035((short)_e11332);
for (unsigned int _h11086 = 0; _h11086 < (unsigned int)_e11332; _h11086++) {
NPlayer* _z11087 = (*_g11330)[_h11086];
if (_z11087 == 0) {
buff->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _z11087, buff);
}
}
buff->_m16038(_g11331, buff->_m16028() - _g11331);
_o3814 = true;
}
if (_o3814) {
_z3813++;
}
}
buff->_m16032(_s3812, _z3813);
}

void T819::_m16470(Serializable* serializable, T817* buff) {
int _j3821 = buff->_m16028();
buff->_m16029(2);
short _x3822 = 0;
bool _f3823 = false;
OpenUrlData* _g11340 = (OpenUrlData*)serializable;
if (_g11340->isMessageIdSet() == true) {
_f3823 = T816::_m16602(_g11340->getMessageId(), (short)0, buff);
if (_f3823) {
_x3822++;
}
}
if (_g11340->isRequestIdSet() == true) {
_f3823 = T816::_m16602(_g11340->getRequestId(), (short)1, buff);
if (_f3823) {
_x3822++;
}
}
if (_g11340->isSessionIdSet() == true) {
_f3823 = T816::_m16602(_g11340->getSessionId(), (short)3, buff);
if (_f3823) {
_x3822++;
}
}
if (_g11340->isCallbackIdSet() == true) {
_f3823 = T816::_m16602(_g11340->getCallbackId(), (short)4, buff);
if (_f3823) {
_x3822++;
}
}
if (_g11340->isCallbackUrlSet() == true) {
_f3823 = T816::_m16602(_g11340->getCallbackUrl(), (short)5, buff);
if (_f3823) {
_x3822++;
}
}
if (_g11340->isThirdPartySourceSet() == true) {
_f3823 = T816::_m16603(this, _g11340->getThirdPartySource(), (short)6, buff);
if (_f3823) {
_x3822++;
}
}
if (_g11340->isThirdPartyIdSet() == true) {
_f3823 = T816::_m16602(_g11340->getThirdPartyId(), (short)7, buff);
if (_f3823) {
_x3822++;
}
}
buff->_m16032(_j3821, _x3822);
}

void T819::_m16471(Serializable* serializable, T817* buff) {
int _c3825 = buff->_m16028();
buff->_m16029(2);
short _l3826 = 0;
bool _m3827 = false;
InviteThirdPartyFriendNotification* _f11346 = (InviteThirdPartyFriendNotification*)serializable;
if (_f11346->isMessageIdSet() == true) {
_m3827 = T816::_m16602(_f11346->getMessageId(), (short)0, buff);
if (_m3827) {
_l3826++;
}
}
if (_f11346->isRequestIdSet() == true) {
_m3827 = T816::_m16602(_f11346->getRequestId(), (short)1, buff);
if (_m3827) {
_l3826++;
}
}
if (_f11346->isthirdPartyIdSet() == true) {
_m3827 = T816::_m16602(_f11346->getThirdPartyId(), (short)3, buff);
if (_m3827) {
_l3826++;
}
}
if (_f11346->isExecutionStatusSet() == true) {
_m3827 = T816::_m16603(this, _f11346->getExecutionStatus(), (short)4, buff);
if (_m3827) {
_l3826++;
}
}
buff->_m16032(_c3825, _l3826);
}

void T819::_m16472(Serializable* serializable, T817* buff) {
int _i3829 = buff->_m16028();
buff->_m16029(2);
short _b3830 = 0;
bool _s3831 = false;
HeartBeatRequest* _t11352 = (HeartBeatRequest*)serializable;
if (_t11352->isMessageIdSet() == true) {
_s3831 = T816::_m16602(_t11352->getMessageId(), (short)0, buff);
if (_s3831) {
_b3830++;
}
}
if (_t11352->isRequestIdSet() == true) {
_s3831 = T816::_m16602(_t11352->getRequestId(), (short)1, buff);
if (_s3831) {
_b3830++;
}
}
if (_t11352->isCounterSet() == true) {
_s3831 = T816::_m16607(_t11352->getCounter(), (short)3, buff);
if (_s3831) {
_b3830++;
}
}
buff->_m16032(_i3829, _b3830);
}

void T819::_m16473(Serializable* serializable, T817* buff) {
int _f3833 = buff->_m16028();
buff->_m16029(2);
short _q3834 = 0;
bool _n3835 = false;
HeartBeatResponse* _f11358 = (HeartBeatResponse*)serializable;
if (_f11358->isMessageIdSet() == true) {
_n3835 = T816::_m16602(_f11358->getMessageId(), (short)0, buff);
if (_n3835) {
_q3834++;
}
}
if (_f11358->isRequestIdSet() == true) {
_n3835 = T816::_m16602(_f11358->getRequestId(), (short)1, buff);
if (_n3835) {
_q3834++;
}
}
if (_f11358->isCounterSet() == true) {
_n3835 = T816::_m16607(_f11358->getCounter(), (short)3, buff);
if (_n3835) {
_q3834++;
}
}
buff->_m16032(_f3833, _q3834);
}

void T819::_m16474(Serializable* _m11029, T817* _n11030) {
int _g11031 = _n11030->_m16028();
_n11030->_m16029(2);
short _d11032 = 0;
bool _r11033 = false;
NLeaderboardEntry* _p11364 = (NLeaderboardEntry*)_m11029;
if (_p11364->isstoreIdSet() == true) {
_r11033 = T816::_m16602(_p11364->getStoreId(), (short)1, _n11030);
if (_r11033) {
_d11032++;
}
}
if (_p11364->isDataSet() == true) {
_r11033 = T816::_m16602(_p11364->getData(), (short)2, _n11030);
if (_r11033) {
_d11032++;
}
}
if (_p11364->isIdSet() == true) {
_r11033 = T816::_m16602(_p11364->getId(), (short)3, _n11030);
if (_r11033) {
_d11032++;
}
}
if (_p11364->isTimestampSet() == true) {
_r11033 = T816::_m16605(_p11364->getTimestamp(), (short)4, _n11030);
if (_r11033) {
_d11032++;
}
}
if (_p11364->isScoreSet() == true) {
_r11033 = T816::_m16603(this, _p11364->getScore(), (short)6, _n11030);
if (_r11033) {
_d11032++;
}
}
if (_p11364->isPlayerIdSet() == true) {
_r11033 = T816::_m16602(_p11364->getPlayerId(), (short)7, _n11030);
if (_r11033) {
_d11032++;
}
}
if (_p11364->isPlayerNameSet() == true) {
_r11033 = T816::_m16602(_p11364->getPlayerName(), (short)8, _n11030);
if (_r11033) {
_d11032++;
}
}
if (_p11364->isPlayerAvatarPathSet() == true) {
_r11033 = T816::_m16602(_p11364->getPlayerAvatarPath(), (short)9, _n11030);
if (_r11033) {
_d11032++;
}
}
_n11030->_m16032(_g11031, _d11032);
}

void T819::_m16475(Serializable* _q11035, T817* _v11036) {
int _w11037 = _v11036->_m16028();
_v11036->_m16029(2);
short _m11038 = 0;
bool _s11039 = false;
StartDetails* _m11370 = (StartDetails*)_q11035;
if (_m11370->isstoreIdSet() == true) {
_s11039 = T816::_m16602(_m11370->getStoreId(), (short)1, _v11036);
if (_s11039) {
_m11038++;
}
}
if (_m11370->isDataSet() == true) {
_s11039 = T816::_m16602(_m11370->getData(), (short)2, _v11036);
if (_s11039) {
_m11038++;
}
}
if (_m11370->isUseDefaultImplSet() == true) {
_s11039 = T816::_m16604(_m11370->isUseDefaultImpl(), (short)3, _v11036);
if (_s11039) {
_m11038++;
}
}
if (_m11370->isCurrentVersionSet() == true) {
_s11039 = T816::_m16607(_m11370->getCurrentVersion(), (short)4, _v11036);
if (_s11039) {
_m11038++;
}
}
if (_m11370->isNextVersionSet() == true) {
_s11039 = T816::_m16607(_m11370->getNextVersion(), (short)5, _v11036);
if (_s11039) {
_m11038++;
}
}
if (_m11370->isTitleSet() == true) {
_s11039 = T816::_m16602(_m11370->getTitle(), (short)6, _v11036);
if (_s11039) {
_m11038++;
}
}
if (_m11370->isTextSet() == true) {
_s11039 = T816::_m16602(_m11370->getText(), (short)7, _v11036);
if (_s11039) {
_m11038++;
}
}
if (_m11370->isUrlSet() == true) {
_s11039 = T816::_m16602(_m11370->getUrl(), (short)8, _v11036);
if (_s11039) {
_m11038++;
}
}
_v11036->_m16032(_w11037, _m11038);
}

void T819::_m16476(Serializable* serializable, T817* buff) {
int _b3845 = buff->_m16028();
buff->_m16029(2);
short _h3846 = 0;
bool _h3847 = false;
StartRequest* _x11376 = (StartRequest*)serializable;
if (_x11376->isMessageIdSet() == true) {
_h3847 = T816::_m16602(_x11376->getMessageId(), (short)0, buff);
if (_h3847) {
_h3846++;
}
}
if (_x11376->isRequestIdSet() == true) {
_h3847 = T816::_m16602(_x11376->getRequestId(), (short)1, buff);
if (_h3847) {
_h3846++;
}
}
buff->_m16032(_b3845, _h3846);
}

void T819::_m16477(Serializable* _s11041, T817* _w11042) {
int _f11043 = _w11042->_m16028();
_w11042->_m16029(2);
short _f11044 = 0;
bool _w11045 = false;
StartResponse* _d11382 = (StartResponse*)_s11041;
if (_d11382->isMessageIdSet() == true) {
_w11045 = T816::_m16602(_d11382->getMessageId(), (short)0, _w11042);
if (_w11045) {
_f11044++;
}
}
if (_d11382->isRequestIdSet() == true) {
_w11045 = T816::_m16602(_d11382->getRequestId(), (short)1, _w11042);
if (_w11045) {
_f11044++;
}
}
if (_d11382->isStartStatusSet() == true) {
_w11045 = T816::_m16603(this, _d11382->getStartStatus(), (short)3, _w11042);
if (_w11045) {
_f11044++;
}
}
if (_d11382->isStartDetailsSet() == true) {
_w11045 = T816::_m16603(this, _d11382->getStartDetails(), (short)4, _w11042);
if (_w11045) {
_f11044++;
}
}
if (_d11382->isPlayerSessionTypeSet() == true) {
_w11045 = T816::_m16603(this, _d11382->getPlayerSessionType(), (short)5, _w11042);
if (_w11045) {
_f11044++;
}
}
if (_d11382->isPlayerSet() == true) {
_w11045 = T816::_m16603(this, _d11382->getPlayer(), (short)6, _w11042);
if (_w11045) {
_f11044++;
}
}
_w11042->_m16032(_f11043, _f11044);
}

void T819::_m16478(Serializable* serializable, T817* buff) {
int _f3853 = buff->_m16028();
buff->_m16029(2);
short _w3854 = 0;
bool _b3855 = false;
NuggetaLevel* _k11388 = (NuggetaLevel*)serializable;
if (_k11388->isstoreIdSet() == true) {
_b3855 = T816::_m16602(_k11388->getStoreId(), (short)0, buff);
if (_b3855) {
_w3854++;
}
}
if (_k11388->isDataSet() == true) {
_b3855 = T816::_m16602(_k11388->getData(), (short)1, buff);
if (_b3855) {
_w3854++;
}
}
if (_k11388->isIndexSet() == true) {
_b3855 = T816::_m16607(_k11388->getIndex(), (short)2, buff);
if (_b3855) {
_w3854++;
}
}
if (_k11388->isXPSet() == true) {
_b3855 = T816::_m16607(_k11388->getXP(), (short)3, buff);
if (_b3855) {
_w3854++;
}
}
buff->_m16032(_f3853, _w3854);
}

void T819::_m16479(Serializable* _b11053, T817* _t11054) {
int _h11055 = _t11054->_m16028();
_t11054->_m16029(2);
short _p11056 = 0;
bool _p11057 = false;
StorableSample* _l11394 = (StorableSample*)(Message*)_b11053;
if (_l11394->isMessageIdSet() == true) {
_p11057 = T816::_m16602(_l11394->getMessageId(), (short)0, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isRequestIdSet() == true) {
_p11057 = T816::_m16602(_l11394->getRequestId(), (short)1, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isStoreIdSet() == true) {
_p11057 = T816::_m16602(_l11394->getStoreId(), (short)3, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isDataSet() == true) {
_p11057 = T816::_m16602(_l11394->getData(), (short)4, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isGameIdSet() == true) {
_p11057 = T816::_m16602(_l11394->getGameId(), (short)5, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isSenderIdSet() == true) {
_p11057 = T816::_m16602(_l11394->getSenderId(), (short)6, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isIdPropertySet() == true) {
_p11057 = T816::_m16602(_l11394->getIdProperty(), (short)7, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isNumberPropertySet() == true) {
_p11057 = T816::_m16607(_l11394->getNumberProperty(), (short)8, _t11054);
if (_p11057) {
_p11056++;
}
}
if (_l11394->isBooleanPropertySet() == true) {
_p11057 = T816::_m16604(_l11394->isBooleanProperty(), (short)9, _t11054);
if (_p11057) {
_p11056++;
}
}
_t11054->_m16032(_h11055, _p11056);
}

void T819::_m16480(Serializable* serializable, T817* buff) {
int _s3861 = buff->_m16028();
buff->_m16029(2);
short _a3862 = 0;
bool _m3863 = false;
NInvitation* _g11400 = (NInvitation*)serializable;
if (_g11400->isStoreIdSet() == true) {
_m3863 = T816::_m16602(_g11400->getStoreId(), (short)0, buff);
if (_m3863) {
_a3862++;
}
}
if (_g11400->isIdSet() == true) {
_m3863 = T816::_m16602(_g11400->getId(), (short)2, buff);
if (_m3863) {
_a3862++;
}
}
if (_g11400->isInviterSet() == true) {
_m3863 = T816::_m16603(this, _g11400->getInviter(), (short)3, buff);
if (_m3863) {
_a3862++;
}
}
if (_g11400->isInviteeSet() == true) {
_m3863 = T816::_m16603(this, _g11400->getInvitee(), (short)4, buff);
if (_m3863) {
_a3862++;
}
}
if (_g11400->isContentSet() == true) {
_m3863 = T816::_m16603(this, _g11400->getContent(), (short)5, buff);
if (_m3863) {
_a3862++;
}
}
if (_g11400->isStatusSet() == true) {
_m3863 = T816::_m16603(this, _g11400->getStatus(), (short)8, buff);
if (_m3863) {
_a3862++;
}
}
buff->_m16032(_s3861, _a3862);
}

void T819::_m16481(Serializable* _i11059, T817* _f11060) {
int _m11061 = _f11060->_m16028();
_f11060->_m16029(2);
short _s11062 = 0;
bool _g11063 = false;
NGameInvitation* _w11406 = (NGameInvitation*)_i11059;
if (_w11406->isMessageIdSet() == true) {
_g11063 = T816::_m16602(_w11406->getMessageId(), (short)0, _f11060);
if (_g11063) {
_s11062++;
}
}
if (_w11406->isRequestIdSet() == true) {
_g11063 = T816::_m16602(_w11406->getRequestId(), (short)1, _f11060);
if (_g11063) {
_s11062++;
}
}
if (_w11406->isGameIdSet() == true) {
_g11063 = T816::_m16602(_w11406->getGameId(), (short)3, _f11060);
if (_g11063) {
_s11062++;
}
}
_f11060->_m16032(_m11061, _s11062);
}

void T819::_m16482(Serializable* serializable, T817* buff) {
int _o3869 = buff->_m16028();
buff->_m16029(2);
short _n3870 = 0;
bool _j3871 = false;
InvitationRequestNotification* _g11412 = (InvitationRequestNotification*)serializable;
if (_g11412->isMessageIdSet() == true) {
_j3871 = T816::_m16602(_g11412->getMessageId(), (short)0, buff);
if (_j3871) {
_n3870++;
}
}
if (_g11412->isRequestIdSet() == true) {
_j3871 = T816::_m16602(_g11412->getRequestId(), (short)1, buff);
if (_j3871) {
_n3870++;
}
}
if (_g11412->isInvitationSet() == true) {
_j3871 = T816::_m16603(this, _g11412->getInvitation(), (short)3, buff);
if (_j3871) {
_n3870++;
}
}
buff->_m16032(_o3869, _n3870);
}

void T819::_m16483(Serializable* serializable, T817* buff) {
int _o3873 = buff->_m16028();
buff->_m16029(2);
short _t3874 = 0;
bool _h3875 = false;
InvitationAcceptedNotification* _u11418 = (InvitationAcceptedNotification*)serializable;
if (_u11418->isMessageIdSet() == true) {
_h3875 = T816::_m16602(_u11418->getMessageId(), (short)0, buff);
if (_h3875) {
_t3874++;
}
}
if (_u11418->isRequestIdSet() == true) {
_h3875 = T816::_m16602(_u11418->getRequestId(), (short)1, buff);
if (_h3875) {
_t3874++;
}
}
if (_u11418->isInvitationSet() == true) {
_h3875 = T816::_m16603(this, _u11418->getInvitation(), (short)3, buff);
if (_h3875) {
_t3874++;
}
}
buff->_m16032(_o3873, _t3874);
}

void T819::_m16484(Serializable* _l11065, T817* _s11066) {
int _r3877 = _s11066->_m16028();
_s11066->_m16029(2);
short _u3878 = 0;
bool _n3879 = false;
InvitationRefusedNotification* _k11424 = (InvitationRefusedNotification*)_l11065;
if (_k11424->isMessageIdSet() == true) {
_n3879 = T816::_m16602(_k11424->getMessageId(), (short)0, _s11066);
if (_n3879) {
_u3878++;
}
}
if (_k11424->isRequestIdSet() == true) {
_n3879 = T816::_m16602(_k11424->getRequestId(), (short)1, _s11066);
if (_n3879) {
_u3878++;
}
}
if (_k11424->isInvitationSet() == true) {
_n3879 = T816::_m16603(this, _k11424->getInvitation(), (short)3, _s11066);
if (_n3879) {
_u3878++;
}
}
_s11066->_m16032(_r3877, _u3878);
}

void T819::_m16485(Serializable* serializable, T817* buff) {
int _i11067 = buff->_m16028();
buff->_m16029(2);
short _v11068 = 0;
bool _r11069 = false;
InvitationExpiredNotification* _j11430 = (InvitationExpiredNotification*)serializable;
if (_j11430->isMessageIdSet() == true) {
_r11069 = T816::_m16602(_j11430->getMessageId(), (short)0, buff);
if (_r11069) {
_v11068++;
}
}
if (_j11430->isRequestIdSet() == true) {
_r11069 = T816::_m16602(_j11430->getRequestId(), (short)1, buff);
if (_r11069) {
_v11068++;
}
}
buff->_m16032(_i11067, _v11068);
}

void T819::_m16486(Serializable* serializable, T817* buff) {
int _j3885 = buff->_m16028();
buff->_m16029(2);
short _v3886 = 0;
bool _e3887 = false;
AskForFriendResponse* _e11436 = (AskForFriendResponse*)serializable;
if (_e11436->isMessageIdSet() == true) {
_e3887 = T816::_m16602(_e11436->getMessageId(), (short)0, buff);
if (_e3887) {
_v3886++;
}
}
if (_e11436->isRequestIdSet() == true) {
_e3887 = T816::_m16602(_e11436->getRequestId(), (short)1, buff);
if (_e3887) {
_v3886++;
}
}
if (_e11436->isAskForFriendStatusSet() == true) {
_e3887 = T816::_m16603(this, _e11436->getAskForFriendStatus(), (short)3, buff);
if (_e3887) {
_v3886++;
}
}
buff->_m16032(_j3885, _v3886);
}

void T819::_m16487(Serializable* serializable, T817* buff) {
int _x3889 = buff->_m16028();
buff->_m16029(2);
short _j3890 = 0;
bool _p3891 = false;
AskForFriendByIdRequest* _q11442 = (AskForFriendByIdRequest*)serializable;
if (_q11442->isMessageIdSet() == true) {
_p3891 = T816::_m16602(_q11442->getMessageId(), (short)0, buff);
if (_p3891) {
_j3890++;
}
}
if (_q11442->isRequestIdSet() == true) {
_p3891 = T816::_m16602(_q11442->getRequestId(), (short)1, buff);
if (_p3891) {
_j3890++;
}
}
if (_q11442->isIdSet() == true) {
_p3891 = T816::_m16602(_q11442->getId(), (short)3, buff);
if (_p3891) {
_j3890++;
}
}
buff->_m16032(_x3889, _j3890);
}

void T819::_m16488(Serializable* _l11071, T817* _x11072) {
int _q3893 = _x11072->_m16028();
_x11072->_m16029(2);
short _e3894 = 0;
bool _e3895 = false;
AskForFriendByLoginRequest* _u11448 = (AskForFriendByLoginRequest*)_l11071;
if (_u11448->isMessageIdSet() == true) {
_e3895 = T816::_m16602(_u11448->getMessageId(), (short)0, _x11072);
if (_e3895) {
_e3894++;
}
}
if (_u11448->isRequestIdSet() == true) {
_e3895 = T816::_m16602(_u11448->getRequestId(), (short)1, _x11072);
if (_e3895) {
_e3894++;
}
}
if (_u11448->isLoginSet() == true) {
_e3895 = T816::_m16602(_u11448->getLogin(), (short)3, _x11072);
if (_e3895) {
_e3894++;
}
}
_x11072->_m16032(_q3893, _e3894);
}

void T819::_m16489(Serializable* serializable, T817* buff) {
int _s11073 = buff->_m16028();
buff->_m16029(2);
short _i11074 = 0;
bool _g11075 = false;
SignUpResponse* _q11454 = (SignUpResponse*)serializable;
if (_q11454->isMessageIdSet() == true) {
_g11075 = T816::_m16602(_q11454->getMessageId(), (short)0, buff);
if (_g11075) {
_i11074++;
}
}
if (_q11454->isRequestIdSet() == true) {
_g11075 = T816::_m16602(_q11454->getRequestId(), (short)1, buff);
if (_g11075) {
_i11074++;
}
}
if (_q11454->isSignUpStatusSet() == true) {
_g11075 = T816::_m16603(this, _q11454->getSignUpStatus(), (short)3, buff);
if (_g11075) {
_i11074++;
}
}
if (_q11454->isPlayerSet() == true) {
_g11075 = T816::_m16603(this, _q11454->getPlayer(), (short)4, buff);
if (_g11075) {
_i11074++;
}
}
buff->_m16032(_s11073, _i11074);
}

void T819::_m16490(Serializable* _a11077, T817* _m11078) {
int _e11079 = _m11078->_m16028();
_m11078->_m16029(2);
short _h11080 = 0;
bool _p11081 = false;
SignUpRequest* _n11460 = (SignUpRequest*)_a11077;
if (_n11460->isMessageIdSet() == true) {
_p11081 = T816::_m16602(_n11460->getMessageId(), (short)0, _m11078);
if (_p11081) {
_h11080++;
}
}
if (_n11460->isRequestIdSet() == true) {
_p11081 = T816::_m16602(_n11460->getRequestId(), (short)1, _m11078);
if (_p11081) {
_h11080++;
}
}
_m11078->_m16032(_e11079, _h11080);
}

void T819::_m16491(Serializable* serializable, T817* buff) {
int _q3905 = buff->_m16028();
buff->_m16029(2);
short _u3906 = 0;
bool _z3907 = false;
LoginResponse* _n11466 = (LoginResponse*)serializable;
if (_n11466->isMessageIdSet() == true) {
_z3907 = T816::_m16602(_n11466->getMessageId(), (short)0, buff);
if (_z3907) {
_u3906++;
}
}
if (_n11466->isRequestIdSet() == true) {
_z3907 = T816::_m16602(_n11466->getRequestId(), (short)1, buff);
if (_z3907) {
_u3906++;
}
}
if (_n11466->isLoginStatusSet() == true) {
_z3907 = T816::_m16603(this, _n11466->getLoginStatus(), (short)3, buff);
if (_z3907) {
_u3906++;
}
}
if (_n11466->isPlayerSet() == true) {
_z3907 = T816::_m16603(this, _n11466->getPlayer(), (short)4, buff);
if (_z3907) {
_u3906++;
}
}
buff->_m16032(_q3905, _u3906);
}

void T819::_m16492(Serializable* serializable, T817* buff) {
int _d3909 = buff->_m16028();
buff->_m16029(2);
short _i3910 = 0;
bool _c3911 = false;
LoginRequest* _d11472 = (LoginRequest*)serializable;
if (_d11472->isMessageIdSet() == true) {
_c3911 = T816::_m16602(_d11472->getMessageId(), (short)0, buff);
if (_c3911) {
_i3910++;
}
}
if (_d11472->isRequestIdSet() == true) {
_c3911 = T816::_m16602(_d11472->getRequestId(), (short)1, buff);
if (_c3911) {
_i3910++;
}
}
buff->_m16032(_d3909, _i3910);
}

void T819::_m16493(Serializable* _x11088, T817* _k11089) {
int _h11090 = _k11089->_m16028();
_k11089->_m16029(2);
short _s11091 = 0;
bool _l11092 = false;
SavePlayerProfileResponse* _p11478 = (SavePlayerProfileResponse*)_x11088;
if (_p11478->isMessageIdSet() == true) {
_l11092 = T816::_m16602(_p11478->getMessageId(), (short)0, _k11089);
if (_l11092) {
_s11091++;
}
}
if (_p11478->isRequestIdSet() == true) {
_l11092 = T816::_m16602(_p11478->getRequestId(), (short)1, _k11089);
if (_l11092) {
_s11091++;
}
}
if (_p11478->isSavePlayerProfileStatusSet() == true) {
_l11092 = T816::_m16603(this, _p11478->getSavePlayerProfileStatus(), (short)3, _k11089);
if (_l11092) {
_s11091++;
}
}
_k11089->_m16032(_h11090, _s11091);
}

void T819::_m16494(Serializable* serializable, T817* buff) {
int _e3917 = buff->_m16028();
buff->_m16029(2);
short _y3918 = 0;
bool _k3919 = false;
SavePlayerProfileRequest* _i11484 = (SavePlayerProfileRequest*)serializable;
if (_i11484->isMessageIdSet() == true) {
_k3919 = T816::_m16602(_i11484->getMessageId(), (short)0, buff);
if (_k3919) {
_y3918++;
}
}
if (_i11484->isRequestIdSet() == true) {
_k3919 = T816::_m16602(_i11484->getRequestId(), (short)1, buff);
if (_k3919) {
_y3918++;
}
}
if (_i11484->isProfileSet() == true) {
_k3919 = T816::_m16603(this, _i11484->getProfile(), (short)3, buff);
if (_k3919) {
_y3918++;
}
}
buff->_m16032(_e3917, _y3918);
}

void T819::_m16495(Serializable* _q11094, T817* _b11095) {
int _e11096 = _b11095->_m16028();
_b11095->_m16029(2);
short _n11097 = 0;
bool _x11098 = false;
GetPlayerProfileResponse* _t11490 = (GetPlayerProfileResponse*)_q11094;
if (_t11490->isMessageIdSet() == true) {
_x11098 = T816::_m16602(_t11490->getMessageId(), (short)0, _b11095);
if (_x11098) {
_n11097++;
}
}
if (_t11490->isRequestIdSet() == true) {
_x11098 = T816::_m16602(_t11490->getRequestId(), (short)1, _b11095);
if (_x11098) {
_n11097++;
}
}
if (_t11490->isGetPlayerProfileStatusSet() == true) {
_x11098 = T816::_m16603(this, _t11490->getGetPlayerProfileStatus(), (short)3, _b11095);
if (_x11098) {
_n11097++;
}
}
if (_t11490->isProfileSet() == true) {
_x11098 = T816::_m16603(this, _t11490->getProfile(), (short)4, _b11095);
if (_x11098) {
_n11097++;
}
}
_b11095->_m16032(_e11096, _n11097);
}

void T819::_m16496(Serializable* _o11100, T817* _y11101) {
int _h11102 = _y11101->_m16028();
_y11101->_m16029(2);
short _m11103 = 0;
bool _r11104 = false;
GetPlayerProfileRequest* _f11496 = (GetPlayerProfileRequest*)_o11100;
if (_f11496->isMessageIdSet() == true) {
_r11104 = T816::_m16602(_f11496->getMessageId(), (short)0, _y11101);
if (_r11104) {
_m11103++;
}
}
if (_f11496->isRequestIdSet() == true) {
_r11104 = T816::_m16602(_f11496->getRequestId(), (short)1, _y11101);
if (_r11104) {
_m11103++;
}
}
_y11101->_m16032(_h11102, _m11103);
}

void T819::_m16497(Serializable* serializable, T817* buff) {
int _b3929 = buff->_m16028();
buff->_m16029(2);
short _c3930 = 0;
bool _j3931 = false;
GetPlayerProfileByPlayerIdRequest* _w11502 = (GetPlayerProfileByPlayerIdRequest*)serializable;
if (_w11502->isMessageIdSet() == true) {
_j3931 = T816::_m16602(_w11502->getMessageId(), (short)0, buff);
if (_j3931) {
_c3930++;
}
}
if (_w11502->isRequestIdSet() == true) {
_j3931 = T816::_m16602(_w11502->getRequestId(), (short)1, buff);
if (_j3931) {
_c3930++;
}
}
if (_w11502->isPlayerIdSet() == true) {
_j3931 = T816::_m16602(_w11502->getPlayerId(), (short)3, buff);
if (_j3931) {
_c3930++;
}
}
buff->_m16032(_b3929, _c3930);
}

void T819::_m16498(Serializable* _l11106, T817* _s11107) {
int _u11108 = _s11107->_m16028();
_s11107->_m16029(2);
short _t11109 = 0;
bool _h11110 = false;
LogoutResponse* _o11508 = (LogoutResponse*)_l11106;
if (_o11508->isMessageIdSet() == true) {
_h11110 = T816::_m16602(_o11508->getMessageId(), (short)0, _s11107);
if (_h11110) {
_t11109++;
}
}
if (_o11508->isRequestIdSet() == true) {
_h11110 = T816::_m16602(_o11508->getRequestId(), (short)1, _s11107);
if (_h11110) {
_t11109++;
}
}
if (_o11508->isLogoutStatusSet() == true) {
_h11110 = T816::_m16603(this, _o11508->getLogoutStatus(), (short)3, _s11107);
if (_h11110) {
_t11109++;
}
}
if (_o11508->isPlayerSet() == true) {
_h11110 = T816::_m16603(this, _o11508->getPlayer(), (short)4, _s11107);
if (_h11110) {
_t11109++;
}
}
_s11107->_m16032(_u11108, _t11109);
}

void T819::_m16499(Serializable* _f11112, T817* _j11113) {
int _j11114 = _j11113->_m16028();
_j11113->_m16029(2);
short _d11115 = 0;
bool _b11116 = false;
LogoutRequest* _w11514 = (LogoutRequest*)_f11112;
if (_w11514->isMessageIdSet() == true) {
_b11116 = T816::_m16602(_w11514->getMessageId(), (short)0, _j11113);
if (_b11116) {
_d11115++;
}
}
if (_w11514->isRequestIdSet() == true) {
_b11116 = T816::_m16602(_w11514->getRequestId(), (short)1, _j11113);
if (_b11116) {
_d11115++;
}
}
_j11113->_m16032(_j11114, _d11115);
}

void T819::_m16500(Serializable* _e11118, T817* _j11119) {
int _p11120 = _j11119->_m16028();
_j11119->_m16029(2);
short _j11121 = 0;
bool _u11122 = false;
GetFriendsResponse* _k11520 = (GetFriendsResponse*)_e11118;
if (_k11520->isMessageIdSet() == true) {
_u11122 = T816::_m16602(_k11520->getMessageId(), (short)0, _j11119);
if (_u11122) {
_j11121++;
}
}
if (_k11520->isRequestIdSet() == true) {
_u11122 = T816::_m16602(_k11520->getRequestId(), (short)1, _j11119);
if (_u11122) {
_j11121++;
}
}
if (_k11520->isGetFriendsStatusSet() == true) {
_u11122 = T816::_m16603(this, _k11520->getGetFriendsStatus(), (short)3, _j11119);
if (_u11122) {
_j11121++;
}
}
if (_k11520->isFriendsSet() == true) {
std::vector<NPlayer*>* _c11521 = _k11520->getFriends();
if (_c11521 == 0) {
_u11122 = false;
} else {
_j11119->_m16035((short)4);
_j11119->_m16036(T809::_y15502);
int _v11522 = _j11119->_m16028();
_j11119->_m16029(4);
int _y11523 = _c11521->size();
_j11119->_m16035((short)_y11523);
for (unsigned int _p3948 = 0; _p3948 < (unsigned int)_y11523; _p3948++) {
NPlayer* _y3949 = (*_c11521)[_p3948];
if (_y3949 == 0) {
_j11119->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _y3949, _j11119);
}
}
_j11119->_m16038(_v11522, _j11119->_m16028() - _v11522);
_u11122 = true;
}
if (_u11122) {
_j11121++;
}
}
_j11119->_m16032(_p11120, _j11121);
}

void T819::_m16501(Serializable* serializable, T817* buff) {
int _y3950 = buff->_m16028();
buff->_m16029(2);
short _o3951 = 0;
bool _p3952 = false;
GetFriendsRequest* _t11531 = (GetFriendsRequest*)serializable;
if (_t11531->isMessageIdSet() == true) {
_p3952 = T816::_m16602(_t11531->getMessageId(), (short)0, buff);
if (_p3952) {
_o3951++;
}
}
if (_t11531->isRequestIdSet() == true) {
_p3952 = T816::_m16602(_t11531->getRequestId(), (short)1, buff);
if (_p3952) {
_o3951++;
}
}
buff->_m16032(_y3950, _o3951);
}

void T819::_m16502(Serializable* _r11124, T817* _j11125) {
int _t11126 = _j11125->_m16028();
_j11125->_m16029(2);
short _s11127 = 0;
bool _e11128 = false;
GetFriendsByPlayerIdRequest* _q11537 = (GetFriendsByPlayerIdRequest*)_r11124;
if (_q11537->isMessageIdSet() == true) {
_e11128 = T816::_m16602(_q11537->getMessageId(), (short)0, _j11125);
if (_e11128) {
_s11127++;
}
}
if (_q11537->isRequestIdSet() == true) {
_e11128 = T816::_m16602(_q11537->getRequestId(), (short)1, _j11125);
if (_e11128) {
_s11127++;
}
}
if (_q11537->isPlayerIdSet() == true) {
_e11128 = T816::_m16602(_q11537->getPlayerId(), (short)3, _j11125);
if (_e11128) {
_s11127++;
}
}
_j11125->_m16032(_t11126, _s11127);
}

void T819::_m16503(Serializable* _e11130, T817* _m11131) {
int _o11132 = _m11131->_m16028();
_m11131->_m16029(2);
short _d11133 = 0;
bool _f11134 = false;
GetThirdPartyFriendsResponse* _q11543 = (GetThirdPartyFriendsResponse*)_e11130;
if (_q11543->isMessageIdSet() == true) {
_f11134 = T816::_m16602(_q11543->getMessageId(), (short)0, _m11131);
if (_f11134) {
_d11133++;
}
}
if (_q11543->isRequestIdSet() == true) {
_f11134 = T816::_m16602(_q11543->getRequestId(), (short)1, _m11131);
if (_f11134) {
_d11133++;
}
}
if (_q11543->isGetThirdPartyFriendsStatusSet() == true) {
_f11134 = T816::_m16603(this, _q11543->getGetThirdPartyFriendsStatus(), (short)3, _m11131);
if (_f11134) {
_d11133++;
}
}
if (_q11543->isThirdPartyFriendsSet() == true) {
std::vector<NPlayer*>* _k11544 = _q11543->getThirdPartyFriends();
if (_k11544 == 0) {
_f11134 = false;
} else {
_m11131->_m16035((short)4);
_m11131->_m16036(T809::_y15502);
int _s11545 = _m11131->_m16028();
_m11131->_m16029(4);
int _o11546 = _k11544->size();
_m11131->_m16035((short)_o11546);
for (unsigned int _y3965 = 0; _y3965 < (unsigned int)_o11546; _y3965++) {
NPlayer* _t3966 = (*_k11544)[_y3965];
if (_t3966 == 0) {
_m11131->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _t3966, _m11131);
}
}
_m11131->_m16038(_s11545, _m11131->_m16028() - _s11545);
_f11134 = true;
}
if (_f11134) {
_d11133++;
}
}
_m11131->_m16032(_o11132, _d11133);
}

void T819::_m16504(Serializable* serializable, T817* buff) {
int _t3967 = buff->_m16028();
buff->_m16029(2);
short _o3968 = 0;
bool _o3969 = false;
GetThirdPartyFriendsRequest* _e11554 = (GetThirdPartyFriendsRequest*)serializable;
if (_e11554->isMessageIdSet() == true) {
_o3969 = T816::_m16602(_e11554->getMessageId(), (short)0, buff);
if (_o3969) {
_o3968++;
}
}
if (_e11554->isRequestIdSet() == true) {
_o3969 = T816::_m16602(_e11554->getRequestId(), (short)1, buff);
if (_o3969) {
_o3968++;
}
}
if (_e11554->isThirdPartySourceSet() == true) {
_o3969 = T816::_m16603(this, _e11554->getThirdPartySource(), (short)3, buff);
if (_o3969) {
_o3968++;
}
}
buff->_m16032(_t3967, _o3968);
}

void T819::_m16505(Serializable* _q11136, T817* _j11137) {
int _n11138 = _j11137->_m16028();
_j11137->_m16029(2);
short _p11139 = 0;
bool _x11140 = false;
GetFriendDemandsResponse* _w11560 = (GetFriendDemandsResponse*)_q11136;
if (_w11560->isMessageIdSet() == true) {
_x11140 = T816::_m16602(_w11560->getMessageId(), (short)0, _j11137);
if (_x11140) {
_p11139++;
}
}
if (_w11560->isRequestIdSet() == true) {
_x11140 = T816::_m16602(_w11560->getRequestId(), (short)1, _j11137);
if (_x11140) {
_p11139++;
}
}
if (_w11560->isGetFriendDemandsStatusSet() == true) {
_x11140 = T816::_m16603(this, _w11560->getGetFriendDemandsStatus(), (short)3, _j11137);
if (_x11140) {
_p11139++;
}
}
if (_w11560->isFriendDemandsSet() == true) {
std::vector<NFriendDemand*>* _x11561 = _w11560->getFriendDemands();
if (_x11561 == 0) {
_x11140 = false;
} else {
_j11137->_m16035((short)4);
_j11137->_m16036(T809::_y15502);
int _l11562 = _j11137->_m16028();
_j11137->_m16029(4);
int _u11563 = _x11561->size();
_j11137->_m16035((short)_u11563);
for (unsigned int _h11163 = 0; _h11163 < (unsigned int)_u11563; _h11163++) {
NFriendDemand* _n11164 = (*_x11561)[_h11163];
if (_n11164 == 0) {
_j11137->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _n11164, _j11137);
}
}
_j11137->_m16038(_l11562, _j11137->_m16028() - _l11562);
_x11140 = true;
}
if (_x11140) {
_p11139++;
}
}
_j11137->_m16032(_n11138, _p11139);
}

void T819::_m16506(Serializable* _m11142, T817* _v11143) {
int _t11144 = _v11143->_m16028();
_v11143->_m16029(2);
short _k11145 = 0;
bool _f11146 = false;
GetFriendDemandsRequest* _i11571 = (GetFriendDemandsRequest*)_m11142;
if (_i11571->isMessageIdSet() == true) {
_f11146 = T816::_m16602(_i11571->getMessageId(), (short)0, _v11143);
if (_f11146) {
_k11145++;
}
}
if (_i11571->isRequestIdSet() == true) {
_f11146 = T816::_m16602(_i11571->getRequestId(), (short)1, _v11143);
if (_f11146) {
_k11145++;
}
}
_v11143->_m16032(_t11144, _k11145);
}

void T819::_m16507(Serializable* serializable, T817* buff) {
int _d3984 = buff->_m16028();
buff->_m16029(2);
short _x3985 = 0;
bool _n3986 = false;
AcceptFriendDemandResponse* _o11577 = (AcceptFriendDemandResponse*)serializable;
if (_o11577->isMessageIdSet() == true) {
_n3986 = T816::_m16602(_o11577->getMessageId(), (short)0, buff);
if (_n3986) {
_x3985++;
}
}
if (_o11577->isRequestIdSet() == true) {
_n3986 = T816::_m16602(_o11577->getRequestId(), (short)1, buff);
if (_n3986) {
_x3985++;
}
}
if (_o11577->isAcceptFriendDemandStatusSet() == true) {
_n3986 = T816::_m16603(this, _o11577->getAcceptFriendDemandStatus(), (short)3, buff);
if (_n3986) {
_x3985++;
}
}
if (_o11577->isFriendDemandIdSet() == true) {
_n3986 = T816::_m16602(_o11577->getFriendDemandId(), (short)4, buff);
if (_n3986) {
_x3985++;
}
}
buff->_m16032(_d3984, _x3985);
}

void T819::_m16508(Serializable* serializable, T817* buff) {
int _e3988 = buff->_m16028();
buff->_m16029(2);
short _c3989 = 0;
bool _r3990 = false;
AcceptFriendDemandRequest* _l11583 = (AcceptFriendDemandRequest*)serializable;
if (_l11583->isMessageIdSet() == true) {
_r3990 = T816::_m16602(_l11583->getMessageId(), (short)0, buff);
if (_r3990) {
_c3989++;
}
}
if (_l11583->isRequestIdSet() == true) {
_r3990 = T816::_m16602(_l11583->getRequestId(), (short)1, buff);
if (_r3990) {
_c3989++;
}
}
if (_l11583->isFriendDemandIdSet() == true) {
_r3990 = T816::_m16602(_l11583->getFriendDemandId(), (short)3, buff);
if (_r3990) {
_c3989++;
}
}
buff->_m16032(_e3988, _c3989);
}

void T819::_m16509(Serializable* _e11148, T817* _v11149) {
int _m11150 = _v11149->_m16028();
_v11149->_m16029(2);
short _a11151 = 0;
bool _s11152 = false;
RefuseFriendDemandResponse* _v11589 = (RefuseFriendDemandResponse*)_e11148;
if (_v11589->isMessageIdSet() == true) {
_s11152 = T816::_m16602(_v11589->getMessageId(), (short)0, _v11149);
if (_s11152) {
_a11151++;
}
}
if (_v11589->isRequestIdSet() == true) {
_s11152 = T816::_m16602(_v11589->getRequestId(), (short)1, _v11149);
if (_s11152) {
_a11151++;
}
}
if (_v11589->isRefuseFriendDemandStatusSet() == true) {
_s11152 = T816::_m16603(this, _v11589->getRefuseFriendDemandStatus(), (short)3, _v11149);
if (_s11152) {
_a11151++;
}
}
if (_v11589->isFriendDemandIdSet() == true) {
_s11152 = T816::_m16602(_v11589->getFriendDemandId(), (short)4, _v11149);
if (_s11152) {
_a11151++;
}
}
_v11149->_m16032(_m11150, _a11151);
}

void T819::_m16510(Serializable* serializable, T817* buff) {
int _k3996 = buff->_m16028();
buff->_m16029(2);
short _i3997 = 0;
bool _g3998 = false;
RefuseFriendDemandRequest* _u11595 = (RefuseFriendDemandRequest*)serializable;
if (_u11595->isMessageIdSet() == true) {
_g3998 = T816::_m16602(_u11595->getMessageId(), (short)0, buff);
if (_g3998) {
_i3997++;
}
}
if (_u11595->isRequestIdSet() == true) {
_g3998 = T816::_m16602(_u11595->getRequestId(), (short)1, buff);
if (_g3998) {
_i3997++;
}
}
if (_u11595->isFriendDemandIdSet() == true) {
_g3998 = T816::_m16602(_u11595->getFriendDemandId(), (short)3, buff);
if (_g3998) {
_i3997++;
}
}
buff->_m16032(_k3996, _i3997);
}

void T819::_m16511(Serializable* serializable, T817* buff) {
int _g4000 = buff->_m16028();
buff->_m16029(2);
short _w4001 = 0;
bool _m4002 = false;
SubmitScoreResponse* _o11601 = (SubmitScoreResponse*)serializable;
if (_o11601->isMessageIdSet() == true) {
_m4002 = T816::_m16602(_o11601->getMessageId(), (short)0, buff);
if (_m4002) {
_w4001++;
}
}
if (_o11601->isRequestIdSet() == true) {
_m4002 = T816::_m16602(_o11601->getRequestId(), (short)1, buff);
if (_m4002) {
_w4001++;
}
}
if (_o11601->isSubmitScoreStatusSet() == true) {
_m4002 = T816::_m16603(this, _o11601->getSubmitScoreStatus(), (short)3, buff);
if (_m4002) {
_w4001++;
}
}
buff->_m16032(_g4000, _w4001);
}

void T819::_m16512(Serializable* serializable, T817* buff) {
int _b4004 = buff->_m16028();
buff->_m16029(2);
short _c4005 = 0;
bool _j4006 = false;
SubmitScoreRequest* _f11607 = (SubmitScoreRequest*)serializable;
if (_f11607->isMessageIdSet() == true) {
_j4006 = T816::_m16602(_f11607->getMessageId(), (short)0, buff);
if (_j4006) {
_c4005++;
}
}
if (_f11607->isRequestIdSet() == true) {
_j4006 = T816::_m16602(_f11607->getRequestId(), (short)1, buff);
if (_j4006) {
_c4005++;
}
}
if (_f11607->isScoreSet() == true) {
_j4006 = T816::_m16603(this, _f11607->getScore(), (short)3, buff);
if (_j4006) {
_c4005++;
}
}
if (_f11607->isLeaderboardIdSet() == true) {
_j4006 = T816::_m16602(_f11607->getLeaderboardId(), (short)4, buff);
if (_j4006) {
_c4005++;
}
}
buff->_m16032(_b4004, _c4005);
}

void T819::_m16513(Serializable* serializable, T817* buff) {
int _n4008 = buff->_m16028();
buff->_m16029(2);
short _t4009 = 0;
bool _g4010 = false;
SubmitScoreWithPlayerNameRequest* _u11613 = (SubmitScoreWithPlayerNameRequest*)serializable;
if (_u11613->isMessageIdSet() == true) {
_g4010 = T816::_m16602(_u11613->getMessageId(), (short)0, buff);
if (_g4010) {
_t4009++;
}
}
if (_u11613->isRequestIdSet() == true) {
_g4010 = T816::_m16602(_u11613->getRequestId(), (short)1, buff);
if (_g4010) {
_t4009++;
}
}
if (_u11613->isNameSet() == true) {
_g4010 = T816::_m16602(_u11613->getName(), (short)3, buff);
if (_g4010) {
_t4009++;
}
}
if (_u11613->isScoreSet() == true) {
_g4010 = T816::_m16603(this, _u11613->getScore(), (short)4, buff);
if (_g4010) {
_t4009++;
}
}
if (_u11613->isLeaderboardIdSet() == true) {
_g4010 = T816::_m16602(_u11613->getLeaderboardId(), (short)5, buff);
if (_g4010) {
_t4009++;
}
}
buff->_m16032(_n4008, _t4009);
}

void T819::_m16514(Serializable* _f11154, T817* _q11155) {
int _u11156 = _q11155->_m16028();
_q11155->_m16029(2);
short _b11157 = 0;
bool _b11158 = false;
GetLeaderboardResponse* _u11619 = (GetLeaderboardResponse*)_f11154;
if (_u11619->isMessageIdSet() == true) {
_b11158 = T816::_m16602(_u11619->getMessageId(), (short)0, _q11155);
if (_b11158) {
_b11157++;
}
}
if (_u11619->isRequestIdSet() == true) {
_b11158 = T816::_m16602(_u11619->getRequestId(), (short)1, _q11155);
if (_b11158) {
_b11157++;
}
}
if (_u11619->isGetLeaderboardStatusSet() == true) {
_b11158 = T816::_m16603(this, _u11619->getGetLeaderboardStatus(), (short)3, _q11155);
if (_b11158) {
_b11157++;
}
}
if (_u11619->isLeaderboardSet() == true) {
_b11158 = T816::_m16603(this, _u11619->getLeaderboard(), (short)4, _q11155);
if (_b11158) {
_b11157++;
}
}
_q11155->_m16032(_u11156, _b11157);
}

void T819::_m16515(Serializable* serializable, T817* buff) {
int _q4016 = buff->_m16028();
buff->_m16029(2);
short _d4017 = 0;
bool _c4018 = false;
GetLeaderboardRequest* _g11625 = (GetLeaderboardRequest*)serializable;
if (_g11625->isMessageIdSet() == true) {
_c4018 = T816::_m16602(_g11625->getMessageId(), (short)0, buff);
if (_c4018) {
_d4017++;
}
}
if (_g11625->isRequestIdSet() == true) {
_c4018 = T816::_m16602(_g11625->getRequestId(), (short)1, buff);
if (_c4018) {
_d4017++;
}
}
if (_g11625->isLeaderboardIdSet() == true) {
_c4018 = T816::_m16602(_g11625->getLeaderboardId(), (short)3, buff);
if (_c4018) {
_d4017++;
}
}
if (_g11625->isPeriodSet() == true) {
_c4018 = T816::_m16603(this, _g11625->getPeriod(), (short)4, buff);
if (_c4018) {
_d4017++;
}
}
if (_g11625->isStartSet() == true) {
_c4018 = T816::_m16607(_g11625->getStart(), (short)5, buff);
if (_c4018) {
_d4017++;
}
}
if (_g11625->isLimitSet() == true) {
_c4018 = T816::_m16607(_g11625->getLimit(), (short)6, buff);
if (_c4018) {
_d4017++;
}
}
buff->_m16032(_q4016, _d4017);
}

void T819::_m16516(Serializable* _i11165, T817* _x11166) {
int _f11167 = _x11166->_m16028();
_x11166->_m16029(2);
short _r11168 = 0;
bool _d11169 = false;
BuyItemResponse* _b11631 = (BuyItemResponse*)_i11165;
if (_b11631->isMessageIdSet() == true) {
_d11169 = T816::_m16602(_b11631->getMessageId(), (short)0, _x11166);
if (_d11169) {
_r11168++;
}
}
if (_b11631->isRequestIdSet() == true) {
_d11169 = T816::_m16602(_b11631->getRequestId(), (short)1, _x11166);
if (_d11169) {
_r11168++;
}
}
if (_b11631->isBuyItemStatusSet() == true) {
_d11169 = T816::_m16603(this, _b11631->getBuyItemStatus(), (short)3, _x11166);
if (_d11169) {
_r11168++;
}
}
if (_b11631->isBoughtItemSet() == true) {
_d11169 = T816::_m16603(this, _b11631->getBoughtItem(), (short)4, _x11166);
if (_d11169) {
_r11168++;
}
}
if (_b11631->isQuantitySet() == true) {
_d11169 = T816::_m16607(_b11631->getQuantity(), (short)5, _x11166);
if (_d11169) {
_r11168++;
}
}
_x11166->_m16032(_f11167, _r11168);
}

void T819::_m16517(Serializable* serializable, T817* buff) {
int _k4024 = buff->_m16028();
buff->_m16029(2);
short _r4025 = 0;
bool _y4026 = false;
BuyItemRequest* _p11637 = (BuyItemRequest*)serializable;
if (_p11637->isMessageIdSet() == true) {
_y4026 = T816::_m16602(_p11637->getMessageId(), (short)0, buff);
if (_y4026) {
_r4025++;
}
}
if (_p11637->isRequestIdSet() == true) {
_y4026 = T816::_m16602(_p11637->getRequestId(), (short)1, buff);
if (_y4026) {
_r4025++;
}
}
if (_p11637->isItemIdSet() == true) {
_y4026 = T816::_m16602(_p11637->getItemId(), (short)3, buff);
if (_y4026) {
_r4025++;
}
}
if (_p11637->isQuantitySet() == true) {
_y4026 = T816::_m16607(_p11637->getQuantity(), (short)4, buff);
if (_y4026) {
_r4025++;
}
}
buff->_m16032(_k4024, _r4025);
}

void T819::_m16518(Serializable* _l11171, T817* _w11172) {
int _c11173 = _w11172->_m16028();
_w11172->_m16029(2);
short _r11174 = 0;
bool _v11175 = false;
GetStoreResponse* _k11643 = (GetStoreResponse*)_l11171;
if (_k11643->isMessageIdSet() == true) {
_v11175 = T816::_m16602(_k11643->getMessageId(), (short)0, _w11172);
if (_v11175) {
_r11174++;
}
}
if (_k11643->isRequestIdSet() == true) {
_v11175 = T816::_m16602(_k11643->getRequestId(), (short)1, _w11172);
if (_v11175) {
_r11174++;
}
}
if (_k11643->isGetStoreStatusSet() == true) {
_v11175 = T816::_m16603(this, _k11643->getGetStoreStatus(), (short)3, _w11172);
if (_v11175) {
_r11174++;
}
}
if (_k11643->isStoreSet() == true) {
_v11175 = T816::_m16603(this, _k11643->getStore(), (short)4, _w11172);
if (_v11175) {
_r11174++;
}
}
_w11172->_m16032(_c11173, _r11174);
}

void T819::_m16519(Serializable* serializable, T817* buff) {
int _v4032 = buff->_m16028();
buff->_m16029(2);
short _y4033 = 0;
bool _p4034 = false;
GetStoreRequest* _k11649 = (GetStoreRequest*)serializable;
if (_k11649->isMessageIdSet() == true) {
_p4034 = T816::_m16602(_k11649->getMessageId(), (short)0, buff);
if (_p4034) {
_y4033++;
}
}
if (_k11649->isRequestIdSet() == true) {
_p4034 = T816::_m16602(_k11649->getRequestId(), (short)1, buff);
if (_p4034) {
_y4033++;
}
}
buff->_m16032(_v4032, _y4033);
}

void T819::_m16520(Serializable* _l11177, T817* _c11178) {
int _e11179 = _c11178->_m16028();
_c11178->_m16029(2);
short _g11180 = 0;
bool _n11181 = false;
ConsumeItemResponse* _i11655 = (ConsumeItemResponse*)_l11177;
if (_i11655->isMessageIdSet() == true) {
_n11181 = T816::_m16602(_i11655->getMessageId(), (short)0, _c11178);
if (_n11181) {
_g11180++;
}
}
if (_i11655->isRequestIdSet() == true) {
_n11181 = T816::_m16602(_i11655->getRequestId(), (short)1, _c11178);
if (_n11181) {
_g11180++;
}
}
if (_i11655->isConsumeItemStatusSet() == true) {
_n11181 = T816::_m16603(this, _i11655->getConsumeItemStatus(), (short)3, _c11178);
if (_n11181) {
_g11180++;
}
}
if (_i11655->isConsumedItemSet() == true) {
_n11181 = T816::_m16603(this, _i11655->getConsumedItem(), (short)4, _c11178);
if (_n11181) {
_g11180++;
}
}
if (_i11655->isQuantitySet() == true) {
_n11181 = T816::_m16607(_i11655->getQuantity(), (short)5, _c11178);
if (_n11181) {
_g11180++;
}
}
_c11178->_m16032(_e11179, _g11180);
}

void T819::_m16521(Serializable* _z11183, T817* _m11184) {
int _r4040 = _m11184->_m16028();
_m11184->_m16029(2);
short _f4041 = 0;
bool _n4042 = false;
ConsumeItemRequest* _v11661 = (ConsumeItemRequest*)_z11183;
if (_v11661->isMessageIdSet() == true) {
_n4042 = T816::_m16602(_v11661->getMessageId(), (short)0, _m11184);
if (_n4042) {
_f4041++;
}
}
if (_v11661->isRequestIdSet() == true) {
_n4042 = T816::_m16602(_v11661->getRequestId(), (short)1, _m11184);
if (_n4042) {
_f4041++;
}
}
if (_v11661->isItemIdSet() == true) {
_n4042 = T816::_m16602(_v11661->getItemId(), (short)3, _m11184);
if (_n4042) {
_f4041++;
}
}
if (_v11661->isQuantitySet() == true) {
_n4042 = T816::_m16607(_v11661->getQuantity(), (short)4, _m11184);
if (_n4042) {
_f4041++;
}
}
_m11184->_m16032(_r4040, _f4041);
}

void T819::_m16522(Serializable* serializable, T817* buff) {
int _a11185 = buff->_m16028();
buff->_m16029(2);
short _b11186 = 0;
bool _p11187 = false;
IncreasePlayerWalletResponse* _w11667 = (IncreasePlayerWalletResponse*)serializable;
if (_w11667->isMessageIdSet() == true) {
_p11187 = T816::_m16602(_w11667->getMessageId(), (short)0, buff);
if (_p11187) {
_b11186++;
}
}
if (_w11667->isRequestIdSet() == true) {
_p11187 = T816::_m16602(_w11667->getRequestId(), (short)1, buff);
if (_p11187) {
_b11186++;
}
}
if (_w11667->isIncreasePlayerWalletStatusSet() == true) {
_p11187 = T816::_m16603(this, _w11667->getIncreasePlayerWalletStatus(), (short)3, buff);
if (_p11187) {
_b11186++;
}
}
if (_w11667->isValueSet() == true) {
_p11187 = T816::_m16607(_w11667->getValue(), (short)4, buff);
if (_p11187) {
_b11186++;
}
}
buff->_m16032(_a11185, _b11186);
}

void T819::_m16523(Serializable* _o11189, T817* _z11190) {
int _q11191 = _z11190->_m16028();
_z11190->_m16029(2);
short _z11192 = 0;
bool _b11193 = false;
IncreasePlayerWalletRequest* _v11673 = (IncreasePlayerWalletRequest*)_o11189;
if (_v11673->isMessageIdSet() == true) {
_b11193 = T816::_m16602(_v11673->getMessageId(), (short)0, _z11190);
if (_b11193) {
_z11192++;
}
}
if (_v11673->isRequestIdSet() == true) {
_b11193 = T816::_m16602(_v11673->getRequestId(), (short)1, _z11190);
if (_b11193) {
_z11192++;
}
}
if (_v11673->isValueSet() == true) {
_b11193 = T816::_m16607(_v11673->getValue(), (short)3, _z11190);
if (_b11193) {
_z11192++;
}
}
_z11190->_m16032(_q11191, _z11192);
}

void T819::_m16524(Serializable* _i11195, T817* _c11196) {
int _y11197 = _c11196->_m16028();
_c11196->_m16029(2);
short _g11198 = 0;
bool _r11199 = false;
GetPlayerWalletResponse* _p11679 = (GetPlayerWalletResponse*)_i11195;
if (_p11679->isMessageIdSet() == true) {
_r11199 = T816::_m16602(_p11679->getMessageId(), (short)0, _c11196);
if (_r11199) {
_g11198++;
}
}
if (_p11679->isRequestIdSet() == true) {
_r11199 = T816::_m16602(_p11679->getRequestId(), (short)1, _c11196);
if (_r11199) {
_g11198++;
}
}
if (_p11679->isGetPlayerWalletStatusSet() == true) {
_r11199 = T816::_m16603(this, _p11679->getGetPlayerWalletStatus(), (short)3, _c11196);
if (_r11199) {
_g11198++;
}
}
if (_p11679->isWalletSet() == true) {
_r11199 = T816::_m16603(this, _p11679->getWallet(), (short)4, _c11196);
if (_r11199) {
_g11198++;
}
}
_c11196->_m16032(_y11197, _g11198);
}

void T819::_m16525(Serializable* serializable, T817* buff) {
int _g4056 = buff->_m16028();
buff->_m16029(2);
short _m4057 = 0;
bool _f4058 = false;
GetPlayerWalletRequest* _t11685 = (GetPlayerWalletRequest*)serializable;
if (_t11685->isMessageIdSet() == true) {
_f4058 = T816::_m16602(_t11685->getMessageId(), (short)0, buff);
if (_f4058) {
_m4057++;
}
}
if (_t11685->isRequestIdSet() == true) {
_f4058 = T816::_m16602(_t11685->getRequestId(), (short)1, buff);
if (_f4058) {
_m4057++;
}
}
buff->_m16032(_g4056, _m4057);
}

void T819::_m16526(Serializable* _f11201, T817* _v11202) {
int _g11203 = _v11202->_m16028();
_v11202->_m16029(2);
short _j11204 = 0;
bool _x11205 = false;
GetAchievementBoardResponse* _r11691 = (GetAchievementBoardResponse*)_f11201;
if (_r11691->isMessageIdSet() == true) {
_x11205 = T816::_m16602(_r11691->getMessageId(), (short)0, _v11202);
if (_x11205) {
_j11204++;
}
}
if (_r11691->isRequestIdSet() == true) {
_x11205 = T816::_m16602(_r11691->getRequestId(), (short)1, _v11202);
if (_x11205) {
_j11204++;
}
}
if (_r11691->isGetAchievementBoardStatusSet() == true) {
_x11205 = T816::_m16603(this, _r11691->getGetAchievementBoardStatus(), (short)3, _v11202);
if (_x11205) {
_j11204++;
}
}
if (_r11691->isAchievementBoardSet() == true) {
_x11205 = T816::_m16603(this, _r11691->getAchievementBoard(), (short)4, _v11202);
if (_x11205) {
_j11204++;
}
}
_v11202->_m16032(_g11203, _j11204);
}

void T819::_m16527(Serializable* serializable, T817* buff) {
int _p4064 = buff->_m16028();
buff->_m16029(2);
short _k4065 = 0;
bool _b4066 = false;
GetAchievementBoardRequest* _q11697 = (GetAchievementBoardRequest*)serializable;
if (_q11697->isMessageIdSet() == true) {
_b4066 = T816::_m16602(_q11697->getMessageId(), (short)0, buff);
if (_b4066) {
_k4065++;
}
}
if (_q11697->isRequestIdSet() == true) {
_b4066 = T816::_m16602(_q11697->getRequestId(), (short)1, buff);
if (_b4066) {
_k4065++;
}
}
buff->_m16032(_p4064, _k4065);
}

void T819::_m16528(Serializable* serializable, T817* buff) {
int _b4068 = buff->_m16028();
buff->_m16029(2);
short _h4069 = 0;
bool _i4070 = false;
AchieveResponse* _a11703 = (AchieveResponse*)serializable;
if (_a11703->isMessageIdSet() == true) {
_i4070 = T816::_m16602(_a11703->getMessageId(), (short)0, buff);
if (_i4070) {
_h4069++;
}
}
if (_a11703->isRequestIdSet() == true) {
_i4070 = T816::_m16602(_a11703->getRequestId(), (short)1, buff);
if (_i4070) {
_h4069++;
}
}
if (_a11703->isAchieveStatusSet() == true) {
_i4070 = T816::_m16603(this, _a11703->getAchieveStatus(), (short)3, buff);
if (_i4070) {
_h4069++;
}
}
if (_a11703->isAchivementIdSet() == true) {
_i4070 = T816::_m16602(_a11703->getAchivementId(), (short)4, buff);
if (_i4070) {
_h4069++;
}
}
if (_a11703->isProgressSet() == true) {
_i4070 = T816::_m16607(_a11703->getProgress(), (short)5, buff);
if (_i4070) {
_h4069++;
}
}
buff->_m16032(_b4068, _h4069);
}

void T819::_m16529(Serializable* _s11207, T817* _n11208) {
int _r11209 = _n11208->_m16028();
_n11208->_m16029(2);
short _w11210 = 0;
bool _v11211 = false;
AchieveRequest* _b11709 = (AchieveRequest*)_s11207;
if (_b11709->isMessageIdSet() == true) {
_v11211 = T816::_m16602(_b11709->getMessageId(), (short)0, _n11208);
if (_v11211) {
_w11210++;
}
}
if (_b11709->isRequestIdSet() == true) {
_v11211 = T816::_m16602(_b11709->getRequestId(), (short)1, _n11208);
if (_v11211) {
_w11210++;
}
}
if (_b11709->isAchivementIdSet() == true) {
_v11211 = T816::_m16602(_b11709->getAchivementId(), (short)3, _n11208);
if (_v11211) {
_w11210++;
}
}
_n11208->_m16032(_r11209, _w11210);
}

void T819::_m16530(Serializable* serializable, T817* buff) {
int _n4076 = buff->_m16028();
buff->_m16029(2);
short _i4077 = 0;
bool _u4078 = false;
AchieveWithProgressRequest* _f11715 = (AchieveWithProgressRequest*)serializable;
if (_f11715->isMessageIdSet() == true) {
_u4078 = T816::_m16602(_f11715->getMessageId(), (short)0, buff);
if (_u4078) {
_i4077++;
}
}
if (_f11715->isRequestIdSet() == true) {
_u4078 = T816::_m16602(_f11715->getRequestId(), (short)1, buff);
if (_u4078) {
_i4077++;
}
}
if (_f11715->isAchivementIdSet() == true) {
_u4078 = T816::_m16602(_f11715->getAchivementId(), (short)3, buff);
if (_u4078) {
_i4077++;
}
}
if (_f11715->isValueSet() == true) {
_u4078 = T816::_m16607(_f11715->getValue(), (short)4, buff);
if (_u4078) {
_i4077++;
}
}
buff->_m16032(_n4076, _i4077);
}

void T819::_m16531(Serializable* serializable, T817* buff) {
int _o4080 = buff->_m16028();
buff->_m16029(2);
short _r4081 = 0;
bool _s4082 = false;
SearchImmediateGameResponse* _b11721 = (SearchImmediateGameResponse*)serializable;
if (_b11721->isMessageIdSet() == true) {
_s4082 = T816::_m16602(_b11721->getMessageId(), (short)0, buff);
if (_s4082) {
_r4081++;
}
}
if (_b11721->isRequestIdSet() == true) {
_s4082 = T816::_m16602(_b11721->getRequestId(), (short)1, buff);
if (_s4082) {
_r4081++;
}
}
if (_b11721->isSearchImmediateGameStatusSet() == true) {
_s4082 = T816::_m16603(this, _b11721->getSearchImmediateGameStatus(), (short)3, buff);
if (_s4082) {
_r4081++;
}
}
if (_b11721->isGameSet() == true) {
_s4082 = T816::_m16603(this, _b11721->getGame(), (short)4, buff);
if (_s4082) {
_r4081++;
}
}
buff->_m16032(_o4080, _r4081);
}

void T819::_m16532(Serializable* serializable, T817* buff) {
int _j4084 = buff->_m16028();
buff->_m16029(2);
short _a4085 = 0;
bool _u4086 = false;
SearchImmediateGameRequest* _r11727 = (SearchImmediateGameRequest*)serializable;
if (_r11727->isMessageIdSet() == true) {
_u4086 = T816::_m16602(_r11727->getMessageId(), (short)0, buff);
if (_u4086) {
_a4085++;
}
}
if (_r11727->isRequestIdSet() == true) {
_u4086 = T816::_m16602(_r11727->getRequestId(), (short)1, buff);
if (_u4086) {
_a4085++;
}
}
buff->_m16032(_j4084, _a4085);
}

void T819::_m16533(Serializable* _x11213, T817* _n11214) {
int _p11215 = _n11214->_m16028();
_n11214->_m16029(2);
short _f11216 = 0;
bool _i11217 = false;
SearchImmediateGameByConditionsRequest* _e11733 = (SearchImmediateGameByConditionsRequest*)_x11213;
if (_e11733->isMessageIdSet() == true) {
_i11217 = T816::_m16602(_e11733->getMessageId(), (short)0, _n11214);
if (_i11217) {
_f11216++;
}
}
if (_e11733->isRequestIdSet() == true) {
_i11217 = T816::_m16602(_e11733->getRequestId(), (short)1, _n11214);
if (_i11217) {
_f11216++;
}
}
if (_e11733->isQuerySet() == true) {
_i11217 = T816::_m16603(this, _e11733->getQuery(), (short)3, _n11214);
if (_i11217) {
_f11216++;
}
}
if (_e11733->isMatchMakingConditionsSet() == true) {
_i11217 = T816::_m16603(this, _e11733->getMatchMakingConditions(), (short)4, _n11214);
if (_i11217) {
_f11216++;
}
}
_n11214->_m16032(_p11215, _f11216);
}

void T819::_m16534(Serializable* _p11219, T817* _o11220) {
int _v11221 = _o11220->_m16028();
_o11220->_m16029(2);
short _v11222 = 0;
bool _y11223 = false;
JoinGameResponse* _k11739 = (JoinGameResponse*)_p11219;
if (_k11739->isMessageIdSet() == true) {
_y11223 = T816::_m16602(_k11739->getMessageId(), (short)0, _o11220);
if (_y11223) {
_v11222++;
}
}
if (_k11739->isRequestIdSet() == true) {
_y11223 = T816::_m16602(_k11739->getRequestId(), (short)1, _o11220);
if (_y11223) {
_v11222++;
}
}
if (_k11739->isJoinGameStatusSet() == true) {
_y11223 = T816::_m16603(this, _k11739->getJoinGameStatus(), (short)3, _o11220);
if (_y11223) {
_v11222++;
}
}
if (_k11739->isGameSet() == true) {
_y11223 = T816::_m16603(this, _k11739->getGame(), (short)4, _o11220);
if (_y11223) {
_v11222++;
}
}
_o11220->_m16032(_v11221, _v11222);
}

void T819::_m16535(Serializable* serializable, T817* buff) {
int _t4096 = buff->_m16028();
buff->_m16029(2);
short _b4097 = 0;
bool _j4098 = false;
JoinGameRequest* _c11745 = (JoinGameRequest*)serializable;
if (_c11745->isMessageIdSet() == true) {
_j4098 = T816::_m16602(_c11745->getMessageId(), (short)0, buff);
if (_j4098) {
_b4097++;
}
}
if (_c11745->isRequestIdSet() == true) {
_j4098 = T816::_m16602(_c11745->getRequestId(), (short)1, buff);
if (_j4098) {
_b4097++;
}
}
if (_c11745->isGameIdSet() == true) {
_j4098 = T816::_m16602(_c11745->getGameId(), (short)3, buff);
if (_j4098) {
_b4097++;
}
}
buff->_m16032(_t4096, _b4097);
}

void T819::_m16536(Serializable* _s11225, T817* _c11226) {
int _w11227 = _c11226->_m16028();
_c11226->_m16029(2);
short _q11228 = 0;
bool _d11229 = false;
UnjoinGameResponse* _g11751 = (UnjoinGameResponse*)_s11225;
if (_g11751->isMessageIdSet() == true) {
_d11229 = T816::_m16602(_g11751->getMessageId(), (short)0, _c11226);
if (_d11229) {
_q11228++;
}
}
if (_g11751->isRequestIdSet() == true) {
_d11229 = T816::_m16602(_g11751->getRequestId(), (short)1, _c11226);
if (_d11229) {
_q11228++;
}
}
if (_g11751->isUnjoinGameStatusSet() == true) {
_d11229 = T816::_m16603(this, _g11751->getUnjoinGameStatus(), (short)3, _c11226);
if (_d11229) {
_q11228++;
}
}
if (_g11751->isGameIdSet() == true) {
_d11229 = T816::_m16602(_g11751->getGameId(), (short)4, _c11226);
if (_d11229) {
_q11228++;
}
}
_c11226->_m16032(_w11227, _q11228);
}

void T819::_m16537(Serializable* _s11231, T817* _n11232) {
int _u11233 = _n11232->_m16028();
_n11232->_m16029(2);
short _s11234 = 0;
bool _f11235 = false;
UnjoinGameRequest* _j11757 = (UnjoinGameRequest*)_s11231;
if (_j11757->isMessageIdSet() == true) {
_f11235 = T816::_m16602(_j11757->getMessageId(), (short)0, _n11232);
if (_f11235) {
_s11234++;
}
}
if (_j11757->isRequestIdSet() == true) {
_f11235 = T816::_m16602(_j11757->getRequestId(), (short)1, _n11232);
if (_f11235) {
_s11234++;
}
}
if (_j11757->isGameIdSet() == true) {
_f11235 = T816::_m16602(_j11757->getGameId(), (short)3, _n11232);
if (_f11235) {
_s11234++;
}
}
_n11232->_m16032(_u11233, _s11234);
}

void T819::_m16538(Serializable* serializable, T817* buff) {
int _j4108 = buff->_m16028();
buff->_m16029(2);
short _u4109 = 0;
bool _m4110 = false;
StartGameResponse* _l11763 = (StartGameResponse*)serializable;
if (_l11763->isMessageIdSet() == true) {
_m4110 = T816::_m16602(_l11763->getMessageId(), (short)0, buff);
if (_m4110) {
_u4109++;
}
}
if (_l11763->isRequestIdSet() == true) {
_m4110 = T816::_m16602(_l11763->getRequestId(), (short)1, buff);
if (_m4110) {
_u4109++;
}
}
if (_l11763->isStartGameStatusSet() == true) {
_m4110 = T816::_m16603(this, _l11763->getStartGameStatus(), (short)3, buff);
if (_m4110) {
_u4109++;
}
}
if (_l11763->isGameIdSet() == true) {
_m4110 = T816::_m16602(_l11763->getGameId(), (short)4, buff);
if (_m4110) {
_u4109++;
}
}
buff->_m16032(_j4108, _u4109);
}

void T819::_m16539(Serializable* serializable, T817* buff) {
int _u4112 = buff->_m16028();
buff->_m16029(2);
short _j4113 = 0;
bool _o4114 = false;
StartGameRequest* _o11769 = (StartGameRequest*)serializable;
if (_o11769->isMessageIdSet() == true) {
_o4114 = T816::_m16602(_o11769->getMessageId(), (short)0, buff);
if (_o4114) {
_j4113++;
}
}
if (_o11769->isRequestIdSet() == true) {
_o4114 = T816::_m16602(_o11769->getRequestId(), (short)1, buff);
if (_o4114) {
_j4113++;
}
}
if (_o11769->isGameIdSet() == true) {
_o4114 = T816::_m16602(_o11769->getGameId(), (short)3, buff);
if (_o4114) {
_j4113++;
}
}
buff->_m16032(_u4112, _j4113);
}

void T819::_m16540(Serializable* serializable, T817* buff) {
int _o4116 = buff->_m16028();
buff->_m16029(2);
short _w4117 = 0;
bool _v4118 = false;
StopGameResponse* _j11775 = (StopGameResponse*)serializable;
if (_j11775->isMessageIdSet() == true) {
_v4118 = T816::_m16602(_j11775->getMessageId(), (short)0, buff);
if (_v4118) {
_w4117++;
}
}
if (_j11775->isRequestIdSet() == true) {
_v4118 = T816::_m16602(_j11775->getRequestId(), (short)1, buff);
if (_v4118) {
_w4117++;
}
}
if (_j11775->isStopGameStatusSet() == true) {
_v4118 = T816::_m16603(this, _j11775->getStopGameStatus(), (short)3, buff);
if (_v4118) {
_w4117++;
}
}
if (_j11775->isGameIdSet() == true) {
_v4118 = T816::_m16602(_j11775->getGameId(), (short)4, buff);
if (_v4118) {
_w4117++;
}
}
buff->_m16032(_o4116, _w4117);
}

void T819::_m16541(Serializable* _k11237, T817* _v11238) {
int _i11239 = _v11238->_m16028();
_v11238->_m16029(2);
short _n11240 = 0;
bool _f11241 = false;
StopGameRequest* _k11781 = (StopGameRequest*)_k11237;
if (_k11781->isMessageIdSet() == true) {
_f11241 = T816::_m16602(_k11781->getMessageId(), (short)0, _v11238);
if (_f11241) {
_n11240++;
}
}
if (_k11781->isRequestIdSet() == true) {
_f11241 = T816::_m16602(_k11781->getRequestId(), (short)1, _v11238);
if (_f11241) {
_n11240++;
}
}
if (_k11781->isGameIdSet() == true) {
_f11241 = T816::_m16602(_k11781->getGameId(), (short)3, _v11238);
if (_f11241) {
_n11240++;
}
}
_v11238->_m16032(_i11239, _n11240);
}

void T819::_m16542(Serializable* serializable, T817* buff) {
int _g4124 = buff->_m16028();
buff->_m16029(2);
short _b4125 = 0;
bool _w4126 = false;
CreateGameResponse* _b11787 = (CreateGameResponse*)serializable;
if (_b11787->isMessageIdSet() == true) {
_w4126 = T816::_m16602(_b11787->getMessageId(), (short)0, buff);
if (_w4126) {
_b4125++;
}
}
if (_b11787->isRequestIdSet() == true) {
_w4126 = T816::_m16602(_b11787->getRequestId(), (short)1, buff);
if (_w4126) {
_b4125++;
}
}
if (_b11787->isCreateGameStatusSet() == true) {
_w4126 = T816::_m16603(this, _b11787->getCreateGameStatus(), (short)3, buff);
if (_w4126) {
_b4125++;
}
}
if (_b11787->isGameIdSet() == true) {
_w4126 = T816::_m16602(_b11787->getGameId(), (short)4, buff);
if (_w4126) {
_b4125++;
}
}
buff->_m16032(_g4124, _b4125);
}

void T819::_m16543(Serializable* _l11243, T817* _h11244) {
int _q11245 = _h11244->_m16028();
_h11244->_m16029(2);
short _o11246 = 0;
bool _k11247 = false;
CreateGameRequest* _b11793 = (CreateGameRequest*)_l11243;
if (_b11793->isMessageIdSet() == true) {
_k11247 = T816::_m16602(_b11793->getMessageId(), (short)0, _h11244);
if (_k11247) {
_o11246++;
}
}
if (_b11793->isRequestIdSet() == true) {
_k11247 = T816::_m16602(_b11793->getRequestId(), (short)1, _h11244);
if (_k11247) {
_o11246++;
}
}
if (_b11793->isGameSet() == true) {
_k11247 = T816::_m16603(this, _b11793->getGame(), (short)3, _h11244);
if (_k11247) {
_o11246++;
}
}
_h11244->_m16032(_q11245, _o11246);
}

void T819::_m16544(Serializable* _d11249, T817* _z11250) {
int _t11251 = _z11250->_m16028();
_z11250->_m16029(2);
short _l11252 = 0;
bool _k11253 = false;
GetGamesResponse* _t11799 = (GetGamesResponse*)_d11249;
if (_t11799->isMessageIdSet() == true) {
_k11253 = T816::_m16602(_t11799->getMessageId(), (short)0, _z11250);
if (_k11253) {
_l11252++;
}
}
if (_t11799->isRequestIdSet() == true) {
_k11253 = T816::_m16602(_t11799->getRequestId(), (short)1, _z11250);
if (_k11253) {
_l11252++;
}
}
if (_t11799->isGetGamesStatusSet() == true) {
_k11253 = T816::_m16603(this, _t11799->getGetGamesStatus(), (short)3, _z11250);
if (_k11253) {
_l11252++;
}
}
if (_t11799->isGamesSet() == true) {
std::vector<NGame*>* _l11800 = _t11799->getGames();
if (_l11800 == 0) {
_k11253 = false;
} else {
_z11250->_m16035((short)4);
_z11250->_m16036(T809::_y15502);
int _n11801 = _z11250->_m16028();
_z11250->_m16029(4);
int _c11802 = _l11800->size();
_z11250->_m16035((short)_c11802);
for (unsigned int _i4139 = 0; _i4139 < (unsigned int)_c11802; _i4139++) {
NGame* _b4140 = (*_l11800)[_i4139];
if (_b4140 == 0) {
_z11250->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _b4140, _z11250);
}
}
_z11250->_m16038(_n11801, _z11250->_m16028() - _n11801);
_k11253 = true;
}
if (_k11253) {
_l11252++;
}
}
_z11250->_m16032(_t11251, _l11252);
}

void T819::_m16545(Serializable* serializable, T817* buff) {
int _u4141 = buff->_m16028();
buff->_m16029(2);
short _a4142 = 0;
bool _y4143 = false;
GetGamesRequest* _r11810 = (GetGamesRequest*)serializable;
if (_r11810->isMessageIdSet() == true) {
_y4143 = T816::_m16602(_r11810->getMessageId(), (short)0, buff);
if (_y4143) {
_a4142++;
}
}
if (_r11810->isRequestIdSet() == true) {
_y4143 = T816::_m16602(_r11810->getRequestId(), (short)1, buff);
if (_y4143) {
_a4142++;
}
}
if (_r11810->isDbQuerySet() == true) {
_y4143 = T816::_m16603(this, _r11810->getDbQuery(), (short)3, buff);
if (_y4143) {
_a4142++;
}
}
buff->_m16032(_u4141, _a4142);
}

void T819::_m16546(Serializable* serializable, T817* buff) {
int _o4145 = buff->_m16028();
buff->_m16029(2);
short _h4146 = 0;
bool _d4147 = false;
SaveAsGhostResponse* _e11816 = (SaveAsGhostResponse*)serializable;
if (_e11816->isMessageIdSet() == true) {
_d4147 = T816::_m16602(_e11816->getMessageId(), (short)0, buff);
if (_d4147) {
_h4146++;
}
}
if (_e11816->isRequestIdSet() == true) {
_d4147 = T816::_m16602(_e11816->getRequestId(), (short)1, buff);
if (_d4147) {
_h4146++;
}
}
if (_e11816->isSaveAsGhostStatusSet() == true) {
_d4147 = T816::_m16603(this, _e11816->getSaveAsGhostStatus(), (short)3, buff);
if (_d4147) {
_h4146++;
}
}
buff->_m16032(_o4145, _h4146);
}

void T819::_m16547(Serializable* _z11255, T817* _b11256) {
int _x11257 = _b11256->_m16028();
_b11256->_m16029(2);
short _h11258 = 0;
bool _k11259 = false;
SaveAsGhostRequest* _w11822 = (SaveAsGhostRequest*)_z11255;
if (_w11822->isMessageIdSet() == true) {
_k11259 = T816::_m16602(_w11822->getMessageId(), (short)0, _b11256);
if (_k11259) {
_h11258++;
}
}
if (_w11822->isRequestIdSet() == true) {
_k11259 = T816::_m16602(_w11822->getRequestId(), (short)1, _b11256);
if (_k11259) {
_h11258++;
}
}
if (_w11822->isGameSet() == true) {
_k11259 = T816::_m16603(this, _w11822->getGame(), (short)3, _b11256);
if (_k11259) {
_h11258++;
}
}
_b11256->_m16032(_x11257, _h11258);
}

void T819::_m16548(Serializable* _t11261, T817* _w11262) {
int _e11263 = _w11262->_m16028();
_w11262->_m16029(2);
short _u11264 = 0;
bool _i11265 = false;
GetGhostsResponse* _f11828 = (GetGhostsResponse*)_t11261;
if (_f11828->isMessageIdSet() == true) {
_i11265 = T816::_m16602(_f11828->getMessageId(), (short)0, _w11262);
if (_i11265) {
_u11264++;
}
}
if (_f11828->isRequestIdSet() == true) {
_i11265 = T816::_m16602(_f11828->getRequestId(), (short)1, _w11262);
if (_i11265) {
_u11264++;
}
}
if (_f11828->isGetGhostsStatusSet() == true) {
_i11265 = T816::_m16603(this, _f11828->getGetGhostsStatus(), (short)3, _w11262);
if (_i11265) {
_u11264++;
}
}
if (_f11828->isGhostsSet() == true) {
std::vector<NGame*>* _v11829 = _f11828->getGhosts();
if (_v11829 == 0) {
_i11265 = false;
} else {
_w11262->_m16035((short)4);
_w11262->_m16036(T809::_y15502);
int _x11830 = _w11262->_m16028();
_w11262->_m16029(4);
int _v11831 = _v11829->size();
_w11262->_m16035((short)_v11831);
for (unsigned int _n11293 = 0; _n11293 < (unsigned int)_v11831; _n11293++) {
NGame* _r11294 = (*_v11829)[_n11293];
if (_r11294 == 0) {
_w11262->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _r11294, _w11262);
}
}
_w11262->_m16038(_x11830, _w11262->_m16028() - _x11830);
_i11265 = true;
}
if (_i11265) {
_u11264++;
}
}
_w11262->_m16032(_e11263, _u11264);
}

void T819::_m16549(Serializable* serializable, T817* buff) {
int _t4162 = buff->_m16028();
buff->_m16029(2);
short _f4163 = 0;
bool _l4164 = false;
GetGhostsRequest* _l11839 = (GetGhostsRequest*)serializable;
if (_l11839->isMessageIdSet() == true) {
_l4164 = T816::_m16602(_l11839->getMessageId(), (short)0, buff);
if (_l4164) {
_f4163++;
}
}
if (_l11839->isRequestIdSet() == true) {
_l4164 = T816::_m16602(_l11839->getRequestId(), (short)1, buff);
if (_l4164) {
_f4163++;
}
}
if (_l11839->isDbQuerySet() == true) {
_l4164 = T816::_m16603(this, _l11839->getDbQuery(), (short)3, buff);
if (_l4164) {
_f4163++;
}
}
buff->_m16032(_t4162, _f4163);
}

void T819::_m16550(Serializable* _y11267, T817* _t11268) {
int _r11269 = _t11268->_m16028();
_t11268->_m16029(2);
short _y11270 = 0;
bool _f11271 = false;
LoadGhostResponse* _d11845 = (LoadGhostResponse*)_y11267;
if (_d11845->isMessageIdSet() == true) {
_f11271 = T816::_m16602(_d11845->getMessageId(), (short)0, _t11268);
if (_f11271) {
_y11270++;
}
}
if (_d11845->isRequestIdSet() == true) {
_f11271 = T816::_m16602(_d11845->getRequestId(), (short)1, _t11268);
if (_f11271) {
_y11270++;
}
}
if (_d11845->isLoadGhostStatusSet() == true) {
_f11271 = T816::_m16603(this, _d11845->getLoadGhostStatus(), (short)3, _t11268);
if (_f11271) {
_y11270++;
}
}
if (_d11845->isGameSet() == true) {
_f11271 = T816::_m16603(this, _d11845->getGame(), (short)4, _t11268);
if (_f11271) {
_y11270++;
}
}
_t11268->_m16032(_r11269, _y11270);
}

void T819::_m16551(Serializable* serializable, T817* buff) {
int _g4170 = buff->_m16028();
buff->_m16029(2);
short _q4171 = 0;
bool _e4172 = false;
LoadGhostRequest* _x11851 = (LoadGhostRequest*)serializable;
if (_x11851->isMessageIdSet() == true) {
_e4172 = T816::_m16602(_x11851->getMessageId(), (short)0, buff);
if (_e4172) {
_q4171++;
}
}
if (_x11851->isRequestIdSet() == true) {
_e4172 = T816::_m16602(_x11851->getRequestId(), (short)1, buff);
if (_e4172) {
_q4171++;
}
}
if (_x11851->isGameIdSet() == true) {
_e4172 = T816::_m16602(_x11851->getGameId(), (short)3, buff);
if (_e4172) {
_q4171++;
}
}
buff->_m16032(_g4170, _q4171);
}

void T819::_m16552(Serializable* _l11273, T817* _t11274) {
int _h11275 = _t11274->_m16028();
_t11274->_m16029(2);
short _p11276 = 0;
bool _t11277 = false;
SendGameChatResponse* _d11857 = (SendGameChatResponse*)_l11273;
if (_d11857->isMessageIdSet() == true) {
_t11277 = T816::_m16602(_d11857->getMessageId(), (short)0, _t11274);
if (_t11277) {
_p11276++;
}
}
if (_d11857->isRequestIdSet() == true) {
_t11277 = T816::_m16602(_d11857->getRequestId(), (short)1, _t11274);
if (_t11277) {
_p11276++;
}
}
if (_d11857->isSendGameChatStatusSet() == true) {
_t11277 = T816::_m16603(this, _d11857->getSendGameChatStatus(), (short)3, _t11274);
if (_t11277) {
_p11276++;
}
}
_t11274->_m16032(_h11275, _p11276);
}

void T819::_m16553(Serializable* serializable, T817* buff) {
int _l4178 = buff->_m16028();
buff->_m16029(2);
short _n4179 = 0;
bool _m4180 = false;
SendGameChatRequest* _z4181 = (SendGameChatRequest*)serializable;
if (_z4181->isMessageIdSet() == true) {
_m4180 = T816::_m16602(_z4181->getMessageId(), (short)0, buff);
if (_m4180) {
_n4179++;
}
}
if (_z4181->isRequestIdSet() == true) {
_m4180 = T816::_m16602(_z4181->getRequestId(), (short)1, buff);
if (_m4180) {
_n4179++;
}
}
if (_z4181->isGameIdSet() == true) {
_m4180 = T816::_m16602(_z4181->getGameId(), (short)3, buff);
if (_m4180) {
_n4179++;
}
}
if (_z4181->isMessageSet() == true) {
_m4180 = T816::_m16602(_z4181->getMessage(), (short)4, buff);
if (_m4180) {
_n4179++;
}
}
buff->_m16032(_l4178, _n4179);
}

void T819::_m16554(Serializable* _t11284, T817* _r11285) {
int _k11286 = _r11285->_m16028();
_r11285->_m16029(2);
short _i11287 = 0;
bool _i11288 = false;
SendGameChatToPlayerRequest* _t4185 = (SendGameChatToPlayerRequest*)_t11284;
if (_t4185->isMessageIdSet() == true) {
_i11288 = T816::_m16602(_t4185->getMessageId(), (short)0, _r11285);
if (_i11288) {
_i11287++;
}
}
if (_t4185->isRequestIdSet() == true) {
_i11288 = T816::_m16602(_t4185->getRequestId(), (short)1, _r11285);
if (_i11288) {
_i11287++;
}
}
if (_t4185->isGameIdSet() == true) {
_i11288 = T816::_m16602(_t4185->getGameId(), (short)3, _r11285);
if (_i11288) {
_i11287++;
}
}
if (_t4185->isPlayerIdSet() == true) {
_i11288 = T816::_m16602(_t4185->getPlayerId(), (short)4, _r11285);
if (_i11288) {
_i11287++;
}
}
if (_t4185->isMessageSet() == true) {
_i11288 = T816::_m16602(_t4185->getMessage(), (short)5, _r11285);
if (_i11288) {
_i11287++;
}
}
_r11285->_m16032(_k11286, _i11287);
}

void T819::_m16555(Serializable* serializable, T817* buff) {
int _b4186 = buff->_m16028();
buff->_m16029(2);
short _v4187 = 0;
bool _h4188 = false;
SendGameChatToPlayerListRequest* _x4189 = (SendGameChatToPlayerListRequest*)serializable;
if (_x4189->isMessageIdSet() == true) {
_h4188 = T816::_m16602(_x4189->getMessageId(), (short)0, buff);
if (_h4188) {
_v4187++;
}
}
if (_x4189->isRequestIdSet() == true) {
_h4188 = T816::_m16602(_x4189->getRequestId(), (short)1, buff);
if (_h4188) {
_v4187++;
}
}
if (_x4189->isGameIdSet() == true) {
_h4188 = T816::_m16602(_x4189->getGameId(), (short)3, buff);
if (_h4188) {
_v4187++;
}
}
if (_x4189->isMessageSet() == true) {
_h4188 = T816::_m16602(_x4189->getMessage(), (short)4, buff);
if (_h4188) {
_v4187++;
}
}
buff->_m16032(_b4186, _v4187);
}

void T819::_m16556(Serializable* _s11295, T817* _a11296) {
int _l11297 = _a11296->_m16028();
_a11296->_m16029(2);
short _r11298 = 0;
bool _t11299 = false;
GetStorablesResponse* _b4193 = (GetStorablesResponse*)_s11295;
if (_b4193->isMessageIdSet() == true) {
_t11299 = T816::_m16602(_b4193->getMessageId(), (short)0, _a11296);
if (_t11299) {
_r11298++;
}
}
if (_b4193->isRequestIdSet() == true) {
_t11299 = T816::_m16602(_b4193->getRequestId(), (short)1, _a11296);
if (_t11299) {
_r11298++;
}
}
if (_b4193->isGetStorablesStatusSet() == true) {
_t11299 = T816::_m16603(this, _b4193->getGetStorablesStatus(), (short)3, _a11296);
if (_t11299) {
_r11298++;
}
}
if (_b4193->isStorablesSet() == true) {
std::vector<Storable*>* _i11882 = _b4193->getStorables();
if (_i11882 == 0) {
_t11299 = false;
} else {
_a11296->_m16035((short)4);
_a11296->_m16036(T809::_y15502);
int _o11883 = _a11296->_m16028();
_a11296->_m16029(4);
int _t11884 = _i11882->size();
_a11296->_m16035((short)_t11884);
for (unsigned int _s11333 = 0; _s11333 < (unsigned int)_t11884; _s11333++) {
Storable* _e11334 = (*_i11882)[_s11333];
if (_e11334 == 0) {
_a11296->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _e11334, _a11296);
}
}
_a11296->_m16038(_o11883, _a11296->_m16028() - _o11883);
_t11299 = true;
}
if (_t11299) {
_r11298++;
}
}
_a11296->_m16032(_l11297, _r11298);
}

void T819::_m16557(Serializable* serializable, T817* buff) {
int _r4199 = buff->_m16028();
buff->_m16029(2);
short _k4200 = 0;
bool _l4201 = false;
GetStorablesRequest* _t4202 = (GetStorablesRequest*)serializable;
if (_t4202->isMessageIdSet() == true) {
_l4201 = T816::_m16602(_t4202->getMessageId(), (short)0, buff);
if (_l4201) {
_k4200++;
}
}
if (_t4202->isRequestIdSet() == true) {
_l4201 = T816::_m16602(_t4202->getRequestId(), (short)1, buff);
if (_l4201) {
_k4200++;
}
}
if (_t4202->isDbQuerySet() == true) {
_l4201 = T816::_m16603(this, _t4202->getDbQuery(), (short)3, buff);
if (_l4201) {
_k4200++;
}
}
buff->_m16032(_r4199, _k4200);
}

void T819::_m16558(Serializable* serializable, T817* buff) {
int _w4203 = buff->_m16028();
buff->_m16029(2);
short _x4204 = 0;
bool _m4205 = false;
SaveStorableResponse* _h4206 = (SaveStorableResponse*)serializable;
if (_h4206->isMessageIdSet() == true) {
_m4205 = T816::_m16602(_h4206->getMessageId(), (short)0, buff);
if (_m4205) {
_x4204++;
}
}
if (_h4206->isRequestIdSet() == true) {
_m4205 = T816::_m16602(_h4206->getRequestId(), (short)1, buff);
if (_m4205) {
_x4204++;
}
}
if (_h4206->isSaveStorableStatusSet() == true) {
_m4205 = T816::_m16603(this, _h4206->getSaveStorableStatus(), (short)3, buff);
if (_m4205) {
_x4204++;
}
}
if (_h4206->isStoreIdSet() == true) {
_m4205 = T816::_m16602(_h4206->getStoreId(), (short)4, buff);
if (_m4205) {
_x4204++;
}
}
buff->_m16032(_w4203, _x4204);
}

void T819::_m16559(Serializable* _w11306, T817* _h11307) {
int _n11308 = _h11307->_m16028();
_h11307->_m16029(2);
short _m11309 = 0;
bool _e11310 = false;
SaveStorableRequest* _c4210 = (SaveStorableRequest*)_w11306;
if (_c4210->isMessageIdSet() == true) {
_e11310 = T816::_m16602(_c4210->getMessageId(), (short)0, _h11307);
if (_e11310) {
_m11309++;
}
}
if (_c4210->isRequestIdSet() == true) {
_e11310 = T816::_m16602(_c4210->getRequestId(), (short)1, _h11307);
if (_e11310) {
_m11309++;
}
}
if (_c4210->isStorableSet() == true) {
_e11310 = T816::_m16603(this, _c4210->getStorable(), (short)3, _h11307);
if (_e11310) {
_m11309++;
}
}
_h11307->_m16032(_n11308, _m11309);
}

void T819::_m16560(Serializable* serializable, T817* buff) {
int _t4211 = buff->_m16028();
buff->_m16029(2);
short _r4212 = 0;
bool _i4213 = false;
NextPlayerTurnResponse* _j4214 = (NextPlayerTurnResponse*)serializable;
if (_j4214->isMessageIdSet() == true) {
_i4213 = T816::_m16602(_j4214->getMessageId(), (short)0, buff);
if (_i4213) {
_r4212++;
}
}
if (_j4214->isRequestIdSet() == true) {
_i4213 = T816::_m16602(_j4214->getRequestId(), (short)1, buff);
if (_i4213) {
_r4212++;
}
}
if (_j4214->isNextPlayerTurnStatusSet() == true) {
_i4213 = T816::_m16603(this, _j4214->getNextPlayerTurnStatus(), (short)3, buff);
if (_i4213) {
_r4212++;
}
}
buff->_m16032(_t4211, _r4212);
}

void T819::_m16561(Serializable* serializable, T817* buff) {
int _w4215 = buff->_m16028();
buff->_m16029(2);
short _r4216 = 0;
bool _i4217 = false;
NextPlayerTurnRequest* _q4218 = (NextPlayerTurnRequest*)serializable;
if (_q4218->isMessageIdSet() == true) {
_i4217 = T816::_m16602(_q4218->getMessageId(), (short)0, buff);
if (_i4217) {
_r4216++;
}
}
if (_q4218->isRequestIdSet() == true) {
_i4217 = T816::_m16602(_q4218->getRequestId(), (short)1, buff);
if (_i4217) {
_r4216++;
}
}
if (_q4218->isGameIdSet() == true) {
_i4217 = T816::_m16602(_q4218->getGameId(), (short)3, buff);
if (_i4217) {
_r4216++;
}
}
buff->_m16032(_w4215, _r4216);
}

void T819::_m16562(Serializable* serializable, T817* buff) {
int _d4219 = buff->_m16028();
buff->_m16029(2);
short _u4220 = 0;
bool _r4221 = false;
SetPlayerNameResponse* _r4222 = (SetPlayerNameResponse*)serializable;
if (_r4222->isMessageIdSet() == true) {
_r4221 = T816::_m16602(_r4222->getMessageId(), (short)0, buff);
if (_r4221) {
_u4220++;
}
}
if (_r4222->isRequestIdSet() == true) {
_r4221 = T816::_m16602(_r4222->getRequestId(), (short)1, buff);
if (_r4221) {
_u4220++;
}
}
if (_r4222->isSetPlayerNameStatusSet() == true) {
_r4221 = T816::_m16603(this, _r4222->getSetPlayerNameStatus(), (short)3, buff);
if (_r4221) {
_u4220++;
}
}
buff->_m16032(_d4219, _u4220);
}

void T819::_m16563(Serializable* serializable, T817* buff) {
int _i4223 = buff->_m16028();
buff->_m16029(2);
short _a4224 = 0;
bool _d4225 = false;
SetPlayerNameRequest* _j4226 = (SetPlayerNameRequest*)serializable;
if (_j4226->isMessageIdSet() == true) {
_d4225 = T816::_m16602(_j4226->getMessageId(), (short)0, buff);
if (_d4225) {
_a4224++;
}
}
if (_j4226->isRequestIdSet() == true) {
_d4225 = T816::_m16602(_j4226->getRequestId(), (short)1, buff);
if (_d4225) {
_a4224++;
}
}
if (_j4226->isNameSet() == true) {
_d4225 = T816::_m16602(_j4226->getName(), (short)3, buff);
if (_d4225) {
_a4224++;
}
}
buff->_m16032(_i4223, _a4224);
}

void T819::_m16564(Serializable* _u11312, T817* _d11313) {
int _k4227 = _d11313->_m16028();
_d11313->_m16029(2);
short _q4228 = 0;
bool _i4229 = false;
UpdateStorableResponse* _b4230 = (UpdateStorableResponse*)_u11312;
if (_b4230->isMessageIdSet() == true) {
_i4229 = T816::_m16602(_b4230->getMessageId(), (short)0, _d11313);
if (_i4229) {
_q4228++;
}
}
if (_b4230->isRequestIdSet() == true) {
_i4229 = T816::_m16602(_b4230->getRequestId(), (short)1, _d11313);
if (_i4229) {
_q4228++;
}
}
if (_b4230->isUpdateStorableStatusSet() == true) {
_i4229 = T816::_m16603(this, _b4230->getUpdateStorableStatus(), (short)3, _d11313);
if (_i4229) {
_q4228++;
}
}
if (_b4230->isStoreIdSet() == true) {
_i4229 = T816::_m16602(_b4230->getStoreId(), (short)4, _d11313);
if (_i4229) {
_q4228++;
}
}
_d11313->_m16032(_k4227, _q4228);
}

void T819::_m16565(Serializable* serializable, T817* buff) {
int _v11314 = buff->_m16028();
buff->_m16029(2);
short _w11315 = 0;
bool _x11316 = false;
UpdateStorableRequest* _d4234 = (UpdateStorableRequest*)serializable;
if (_d4234->isMessageIdSet() == true) {
_x11316 = T816::_m16602(_d4234->getMessageId(), (short)0, buff);
if (_x11316) {
_w11315++;
}
}
if (_d4234->isRequestIdSet() == true) {
_x11316 = T816::_m16602(_d4234->getRequestId(), (short)1, buff);
if (_x11316) {
_w11315++;
}
}
if (_d4234->isStorableSet() == true) {
_x11316 = T816::_m16603(this, _d4234->getStorable(), (short)3, buff);
if (_x11316) {
_w11315++;
}
}
buff->_m16032(_v11314, _w11315);
}

void T819::_m16566(Serializable* _h11318, T817* _d11319) {
int _x11320 = _d11319->_m16028();
_d11319->_m16029(2);
short _r11321 = 0;
bool _v11322 = false;
RemoveStorableResponse* _s4238 = (RemoveStorableResponse*)_h11318;
if (_s4238->isMessageIdSet() == true) {
_v11322 = T816::_m16602(_s4238->getMessageId(), (short)0, _d11319);
if (_v11322) {
_r11321++;
}
}
if (_s4238->isRequestIdSet() == true) {
_v11322 = T816::_m16602(_s4238->getRequestId(), (short)1, _d11319);
if (_v11322) {
_r11321++;
}
}
if (_s4238->isRemoveStorableStatusSet() == true) {
_v11322 = T816::_m16603(this, _s4238->getRemoveStorableStatus(), (short)3, _d11319);
if (_v11322) {
_r11321++;
}
}
if (_s4238->isStoreIdSet() == true) {
_v11322 = T816::_m16602(_s4238->getStoreId(), (short)4, _d11319);
if (_v11322) {
_r11321++;
}
}
_d11319->_m16032(_x11320, _r11321);
}

void T819::_m16567(Serializable* serializable, T817* buff) {
int _f4239 = buff->_m16028();
buff->_m16029(2);
short _t4240 = 0;
bool _n4241 = false;
RemoveStorableRequest* _q4242 = (RemoveStorableRequest*)serializable;
if (_q4242->isMessageIdSet() == true) {
_n4241 = T816::_m16602(_q4242->getMessageId(), (short)0, buff);
if (_n4241) {
_t4240++;
}
}
if (_q4242->isRequestIdSet() == true) {
_n4241 = T816::_m16602(_q4242->getRequestId(), (short)1, buff);
if (_n4241) {
_t4240++;
}
}
if (_q4242->isStorableSet() == true) {
_n4241 = T816::_m16603(this, _q4242->getStorable(), (short)3, buff);
if (_n4241) {
_t4240++;
}
}
buff->_m16032(_f4239, _t4240);
}

void T819::_m16568(Serializable* _v11324, T817* _g11325) {
int _s11326 = _g11325->_m16028();
_g11325->_m16029(2);
short _n11327 = 0;
bool _l11328 = false;
InviteThirdPartyFriendResponse* _m4246 = (InviteThirdPartyFriendResponse*)_v11324;
if (_m4246->isMessageIdSet() == true) {
_l11328 = T816::_m16602(_m4246->getMessageId(), (short)0, _g11325);
if (_l11328) {
_n11327++;
}
}
if (_m4246->isRequestIdSet() == true) {
_l11328 = T816::_m16602(_m4246->getRequestId(), (short)1, _g11325);
if (_l11328) {
_n11327++;
}
}
if (_m4246->isInviteThirdPartyFriendStatusSet() == true) {
_l11328 = T816::_m16603(this, _m4246->getInviteThirdPartyFriendStatus(), (short)3, _g11325);
if (_l11328) {
_n11327++;
}
}
if (_m4246->isThirdPartyIdSet() == true) {
_l11328 = T816::_m16602(_m4246->getThirdPartyId(), (short)4, _g11325);
if (_l11328) {
_n11327++;
}
}
_g11325->_m16032(_s11326, _n11327);
}

void T819::_m16569(Serializable* serializable, T817* buff) {
int _r4247 = buff->_m16028();
buff->_m16029(2);
short _o4248 = 0;
bool _t4249 = false;
InviteThirdPartyFriendRequest* _t4250 = (InviteThirdPartyFriendRequest*)serializable;
if (_t4250->isMessageIdSet() == true) {
_t4249 = T816::_m16602(_t4250->getMessageId(), (short)0, buff);
if (_t4249) {
_o4248++;
}
}
if (_t4250->isRequestIdSet() == true) {
_t4249 = T816::_m16602(_t4250->getRequestId(), (short)1, buff);
if (_t4249) {
_o4248++;
}
}
if (_t4250->isThirdPartyIdSet() == true) {
_t4249 = T816::_m16602(_t4250->getThirdPartyId(), (short)3, buff);
if (_t4249) {
_o4248++;
}
}
if (_t4250->isTitleSet() == true) {
_t4249 = T816::_m16602(_t4250->getTitle(), (short)4, buff);
if (_t4249) {
_o4248++;
}
}
if (_t4250->isInviteMessageSet() == true) {
_t4249 = T816::_m16602(_t4250->getInviteMessage(), (short)5, buff);
if (_t4249) {
_o4248++;
}
}
if (_t4250->isPictureUrlSet() == true) {
_t4249 = T816::_m16602(_t4250->getPictureUrl(), (short)6, buff);
if (_t4249) {
_o4248++;
}
}
if (_t4250->isLinkSet() == true) {
_t4249 = T816::_m16602(_t4250->getLink(), (short)7, buff);
if (_t4249) {
_o4248++;
}
}
if (_t4250->isThirdPartySourceSet() == true) {
_t4249 = T816::_m16603(this, _t4250->getThirdPartySource(), (short)8, buff);
if (_t4249) {
_o4248++;
}
}
buff->_m16032(_r4247, _o4248);
}

void T819::_m16570(Serializable* _s11335, T817* _l11336) {
int _i11337 = _l11336->_m16028();
_l11336->_m16029(2);
short _p11338 = 0;
bool _p11339 = false;
PublishThirdPartyMessageResponse* _j4254 = (PublishThirdPartyMessageResponse*)_s11335;
if (_j4254->isMessageIdSet() == true) {
_p11339 = T816::_m16602(_j4254->getMessageId(), (short)0, _l11336);
if (_p11339) {
_p11338++;
}
}
if (_j4254->isRequestIdSet() == true) {
_p11339 = T816::_m16602(_j4254->getRequestId(), (short)1, _l11336);
if (_p11339) {
_p11338++;
}
}
if (_j4254->isPublishThirdPartyMessageStatusSet() == true) {
_p11339 = T816::_m16603(this, _j4254->getPublishThirdPartyMessageStatus(), (short)3, _l11336);
if (_p11339) {
_p11338++;
}
}
_l11336->_m16032(_i11337, _p11338);
}

void T819::_m16571(Serializable* serializable, T817* buff) {
int _p4255 = buff->_m16028();
buff->_m16029(2);
short _j4256 = 0;
bool _e4257 = false;
PublishThirdPartyMessageRequest* _y4258 = (PublishThirdPartyMessageRequest*)serializable;
if (_y4258->isMessageIdSet() == true) {
_e4257 = T816::_m16602(_y4258->getMessageId(), (short)0, buff);
if (_e4257) {
_j4256++;
}
}
if (_y4258->isRequestIdSet() == true) {
_e4257 = T816::_m16602(_y4258->getRequestId(), (short)1, buff);
if (_e4257) {
_j4256++;
}
}
if (_y4258->isTitleSet() == true) {
_e4257 = T816::_m16602(_y4258->getTitle(), (short)3, buff);
if (_e4257) {
_j4256++;
}
}
if (_y4258->isMessageSet() == true) {
_e4257 = T816::_m16602(_y4258->getMessage(), (short)4, buff);
if (_e4257) {
_j4256++;
}
}
if (_y4258->isPictureUrlSet() == true) {
_e4257 = T816::_m16602(_y4258->getPictureUrl(), (short)5, buff);
if (_e4257) {
_j4256++;
}
}
if (_y4258->isLinkSet() == true) {
_e4257 = T816::_m16602(_y4258->getLink(), (short)6, buff);
if (_e4257) {
_j4256++;
}
}
if (_y4258->isThirdPartySourceSet() == true) {
_e4257 = T816::_m16603(this, _y4258->getThirdPartySource(), (short)7, buff);
if (_e4257) {
_j4256++;
}
}
buff->_m16032(_p4255, _j4256);
}

void T819::_m16572(Serializable* serializable, T817* buff) {
int _n4259 = buff->_m16028();
buff->_m16029(2);
short _x4260 = 0;
bool _z4261 = false;
ThirdPartyLoginResponse* _r4262 = (ThirdPartyLoginResponse*)serializable;
if (_r4262->isMessageIdSet() == true) {
_z4261 = T816::_m16602(_r4262->getMessageId(), (short)0, buff);
if (_z4261) {
_x4260++;
}
}
if (_r4262->isRequestIdSet() == true) {
_z4261 = T816::_m16602(_r4262->getRequestId(), (short)1, buff);
if (_z4261) {
_x4260++;
}
}
if (_r4262->isThirdPartyLoginStatusSet() == true) {
_z4261 = T816::_m16603(this, _r4262->getThirdPartyLoginStatus(), (short)3, buff);
if (_z4261) {
_x4260++;
}
}
if (_r4262->isPlayerSet() == true) {
_z4261 = T816::_m16603(this, _r4262->getPlayer(), (short)4, buff);
if (_z4261) {
_x4260++;
}
}
buff->_m16032(_n4259, _x4260);
}

void T819::_m16573(Serializable* _b11341, T817* _y11342) {
int _e11343 = _y11342->_m16028();
_y11342->_m16029(2);
short _a11344 = 0;
bool _b11345 = false;
ThirdPartyLoginRequest* _t4266 = (ThirdPartyLoginRequest*)_b11341;
if (_t4266->isMessageIdSet() == true) {
_b11345 = T816::_m16602(_t4266->getMessageId(), (short)0, _y11342);
if (_b11345) {
_a11344++;
}
}
if (_t4266->isRequestIdSet() == true) {
_b11345 = T816::_m16602(_t4266->getRequestId(), (short)1, _y11342);
if (_b11345) {
_a11344++;
}
}
if (_t4266->isThirdPartySourceSet() == true) {
_b11345 = T816::_m16603(this, _t4266->getThirdPartySource(), (short)3, _y11342);
if (_b11345) {
_a11344++;
}
}
_y11342->_m16032(_e11343, _a11344);
}

void T819::_m16574(Serializable* serializable, T817* buff) {
int _q4267 = buff->_m16028();
buff->_m16029(2);
short _l4268 = 0;
bool _v4269 = false;
ThirdPartyLoginWithTokenRequest* _q4270 = (ThirdPartyLoginWithTokenRequest*)serializable;
if (_q4270->isMessageIdSet() == true) {
_v4269 = T816::_m16602(_q4270->getMessageId(), (short)0, buff);
if (_v4269) {
_l4268++;
}
}
if (_q4270->isRequestIdSet() == true) {
_v4269 = T816::_m16602(_q4270->getRequestId(), (short)1, buff);
if (_v4269) {
_l4268++;
}
}
if (_q4270->isThirdPartySourceSet() == true) {
_v4269 = T816::_m16603(this, _q4270->getThirdPartySource(), (short)3, buff);
if (_v4269) {
_l4268++;
}
}
if (_q4270->isAccessTokenSet() == true) {
_v4269 = T816::_m16602(_q4270->getAccessToken(), (short)4, buff);
if (_v4269) {
_l4268++;
}
}
buff->_m16032(_q4267, _l4268);
}

void T819::_m16575(Serializable* _i11347, T817* _p11348) {
int _f11349 = _p11348->_m16028();
_p11348->_m16029(2);
short _u11350 = 0;
bool _s11351 = false;
SaveGameResponse* _p4274 = (SaveGameResponse*)_i11347;
if (_p4274->isMessageIdSet() == true) {
_s11351 = T816::_m16602(_p4274->getMessageId(), (short)0, _p11348);
if (_s11351) {
_u11350++;
}
}
if (_p4274->isRequestIdSet() == true) {
_s11351 = T816::_m16602(_p4274->getRequestId(), (short)1, _p11348);
if (_s11351) {
_u11350++;
}
}
if (_p4274->isSaveGameStatusSet() == true) {
_s11351 = T816::_m16603(this, _p4274->getSaveGameStatus(), (short)3, _p11348);
if (_s11351) {
_u11350++;
}
}
if (_p4274->isGameIdSet() == true) {
_s11351 = T816::_m16602(_p4274->getGameId(), (short)4, _p11348);
if (_s11351) {
_u11350++;
}
}
_p11348->_m16032(_f11349, _u11350);
}

void T819::_m16576(Serializable* serializable, T817* buff) {
int _x4275 = buff->_m16028();
buff->_m16029(2);
short _e4276 = 0;
bool _x4277 = false;
SaveGameRequest* _q4278 = (SaveGameRequest*)serializable;
if (_q4278->isMessageIdSet() == true) {
_x4277 = T816::_m16602(_q4278->getMessageId(), (short)0, buff);
if (_x4277) {
_e4276++;
}
}
if (_q4278->isRequestIdSet() == true) {
_x4277 = T816::_m16602(_q4278->getRequestId(), (short)1, buff);
if (_x4277) {
_e4276++;
}
}
if (_q4278->isGameSet() == true) {
_x4277 = T816::_m16603(this, _q4278->getGame(), (short)3, buff);
if (_x4277) {
_e4276++;
}
}
buff->_m16032(_x4275, _e4276);
}

void T819::_m16577(Serializable* _c11353, T817* _c11354) {
int _b11355 = _c11354->_m16028();
_c11354->_m16029(2);
short _b11356 = 0;
bool _s11357 = false;
LoadGameResponse* _s4282 = (LoadGameResponse*)_c11353;
if (_s4282->isMessageIdSet() == true) {
_s11357 = T816::_m16602(_s4282->getMessageId(), (short)0, _c11354);
if (_s11357) {
_b11356++;
}
}
if (_s4282->isRequestIdSet() == true) {
_s11357 = T816::_m16602(_s4282->getRequestId(), (short)1, _c11354);
if (_s11357) {
_b11356++;
}
}
if (_s4282->isLoadGameStatusSet() == true) {
_s11357 = T816::_m16603(this, _s4282->getLoadGameStatus(), (short)3, _c11354);
if (_s11357) {
_b11356++;
}
}
if (_s4282->isGameSet() == true) {
_s11357 = T816::_m16603(this, _s4282->getGame(), (short)4, _c11354);
if (_s11357) {
_b11356++;
}
}
_c11354->_m16032(_b11355, _b11356);
}

void T819::_m16578(Serializable* _g11359, T817* _u11360) {
int _p4283 = _u11360->_m16028();
_u11360->_m16029(2);
short _m4284 = 0;
bool _p4285 = false;
LoadGameRequest* _k4286 = (LoadGameRequest*)_g11359;
if (_k4286->isMessageIdSet() == true) {
_p4285 = T816::_m16602(_k4286->getMessageId(), (short)0, _u11360);
if (_p4285) {
_m4284++;
}
}
if (_k4286->isRequestIdSet() == true) {
_p4285 = T816::_m16602(_k4286->getRequestId(), (short)1, _u11360);
if (_p4285) {
_m4284++;
}
}
if (_k4286->isGameIdSet() == true) {
_p4285 = T816::_m16602(_k4286->getGameId(), (short)3, _u11360);
if (_p4285) {
_m4284++;
}
}
_u11360->_m16032(_p4283, _m4284);
}

void T819::_m16579(Serializable* serializable, T817* buff) {
int _g11361 = buff->_m16028();
buff->_m16029(2);
short _o11362 = 0;
bool _g11363 = false;
SavePlayerStorableResponse* _q4290 = (SavePlayerStorableResponse*)serializable;
if (_q4290->isMessageIdSet() == true) {
_g11363 = T816::_m16602(_q4290->getMessageId(), (short)0, buff);
if (_g11363) {
_o11362++;
}
}
if (_q4290->isRequestIdSet() == true) {
_g11363 = T816::_m16602(_q4290->getRequestId(), (short)1, buff);
if (_g11363) {
_o11362++;
}
}
if (_q4290->isSavePlayerStorableStatusSet() == true) {
_g11363 = T816::_m16603(this, _q4290->getSavePlayerStorableStatus(), (short)3, buff);
if (_g11363) {
_o11362++;
}
}
if (_q4290->isStoreIdSet() == true) {
_g11363 = T816::_m16602(_q4290->getStoreId(), (short)4, buff);
if (_g11363) {
_o11362++;
}
}
buff->_m16032(_g11361, _o11362);
}

void T819::_m16580(Serializable* serializable, T817* buff) {
int _d4291 = buff->_m16028();
buff->_m16029(2);
short _a4292 = 0;
bool _r4293 = false;
SavePlayerStorableRequest* _i4294 = (SavePlayerStorableRequest*)serializable;
if (_i4294->isMessageIdSet() == true) {
_r4293 = T816::_m16602(_i4294->getMessageId(), (short)0, buff);
if (_r4293) {
_a4292++;
}
}
if (_i4294->isRequestIdSet() == true) {
_r4293 = T816::_m16602(_i4294->getRequestId(), (short)1, buff);
if (_r4293) {
_a4292++;
}
}
if (_i4294->isStorableSet() == true) {
_r4293 = T816::_m16603(this, _i4294->getStorable(), (short)3, buff);
if (_r4293) {
_a4292++;
}
}
buff->_m16032(_d4291, _a4292);
}

void T819::_m16581(Serializable* serializable, T817* buff) {
int _o4295 = buff->_m16028();
buff->_m16029(2);
short _l4296 = 0;
bool _q4297 = false;
UpdatePlayerStorableResponse* _e4298 = (UpdatePlayerStorableResponse*)serializable;
if (_e4298->isMessageIdSet() == true) {
_q4297 = T816::_m16602(_e4298->getMessageId(), (short)0, buff);
if (_q4297) {
_l4296++;
}
}
if (_e4298->isRequestIdSet() == true) {
_q4297 = T816::_m16602(_e4298->getRequestId(), (short)1, buff);
if (_q4297) {
_l4296++;
}
}
if (_e4298->isUpdatePlayerStorableStatusSet() == true) {
_q4297 = T816::_m16603(this, _e4298->getUpdatePlayerStorableStatus(), (short)3, buff);
if (_q4297) {
_l4296++;
}
}
if (_e4298->isStoreIdSet() == true) {
_q4297 = T816::_m16602(_e4298->getStoreId(), (short)4, buff);
if (_q4297) {
_l4296++;
}
}
buff->_m16032(_o4295, _l4296);
}

void T819::_m16582(Serializable* serializable, T817* buff) {
int _a4299 = buff->_m16028();
buff->_m16029(2);
short _j4300 = 0;
bool _k4301 = false;
UpdatePlayerStorableRequest* _p4302 = (UpdatePlayerStorableRequest*)serializable;
if (_p4302->isMessageIdSet() == true) {
_k4301 = T816::_m16602(_p4302->getMessageId(), (short)0, buff);
if (_k4301) {
_j4300++;
}
}
if (_p4302->isRequestIdSet() == true) {
_k4301 = T816::_m16602(_p4302->getRequestId(), (short)1, buff);
if (_k4301) {
_j4300++;
}
}
if (_p4302->isStorableSet() == true) {
_k4301 = T816::_m16603(this, _p4302->getStorable(), (short)3, buff);
if (_k4301) {
_j4300++;
}
}
buff->_m16032(_a4299, _j4300);
}

void T819::_m16583(Serializable* _e11365, T817* _r11366) {
int _s11367 = _r11366->_m16028();
_r11366->_m16029(2);
short _o11368 = 0;
bool _y11369 = false;
RemovePlayerStorableResponse* _s4306 = (RemovePlayerStorableResponse*)_e11365;
if (_s4306->isMessageIdSet() == true) {
_y11369 = T816::_m16602(_s4306->getMessageId(), (short)0, _r11366);
if (_y11369) {
_o11368++;
}
}
if (_s4306->isRequestIdSet() == true) {
_y11369 = T816::_m16602(_s4306->getRequestId(), (short)1, _r11366);
if (_y11369) {
_o11368++;
}
}
if (_s4306->isRemovePlayerStorableStatusSet() == true) {
_y11369 = T816::_m16603(this, _s4306->getRemovePlayerStorableStatus(), (short)3, _r11366);
if (_y11369) {
_o11368++;
}
}
if (_s4306->isStoreIdSet() == true) {
_y11369 = T816::_m16602(_s4306->getStoreId(), (short)4, _r11366);
if (_y11369) {
_o11368++;
}
}
_r11366->_m16032(_s11367, _o11368);
}

void T819::_m16584(Serializable* serializable, T817* buff) {
int _s4307 = buff->_m16028();
buff->_m16029(2);
short _n4308 = 0;
bool _m4309 = false;
RemovePlayerStorableRequest* _k4310 = (RemovePlayerStorableRequest*)serializable;
if (_k4310->isMessageIdSet() == true) {
_m4309 = T816::_m16602(_k4310->getMessageId(), (short)0, buff);
if (_m4309) {
_n4308++;
}
}
if (_k4310->isRequestIdSet() == true) {
_m4309 = T816::_m16602(_k4310->getRequestId(), (short)1, buff);
if (_m4309) {
_n4308++;
}
}
if (_k4310->isStorableSet() == true) {
_m4309 = T816::_m16603(this, _k4310->getStorable(), (short)3, buff);
if (_m4309) {
_n4308++;
}
}
buff->_m16032(_s4307, _n4308);
}

void T819::_m16585(Serializable* serializable, T817* buff) {
int _b4311 = buff->_m16028();
buff->_m16029(2);
short _y4312 = 0;
bool _w4313 = false;
GetPlayerStorablesResponse* _f4314 = (GetPlayerStorablesResponse*)serializable;
if (_f4314->isMessageIdSet() == true) {
_w4313 = T816::_m16602(_f4314->getMessageId(), (short)0, buff);
if (_w4313) {
_y4312++;
}
}
if (_f4314->isRequestIdSet() == true) {
_w4313 = T816::_m16602(_f4314->getRequestId(), (short)1, buff);
if (_w4313) {
_y4312++;
}
}
if (_f4314->isGetPlayerStorablesStatusSet() == true) {
_w4313 = T816::_m16603(this, _f4314->getGetPlayerStorablesStatus(), (short)3, buff);
if (_w4313) {
_y4312++;
}
}
if (_f4314->isStorablesSet() == true) {
std::vector<Storable*>* _i12061 = _f4314->getStorables();
if (_i12061 == 0) {
_w4313 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _q12062 = buff->_m16028();
buff->_m16029(4);
int _g12063 = _i12061->size();
buff->_m16035((short)_g12063);
for (unsigned int _o4318 = 0; _o4318 < (unsigned int)_g12063; _o4318++) {
Storable* _r4319 = (*_i12061)[_o4318];
if (_r4319 == 0) {
buff->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _r4319, buff);
}
}
buff->_m16038(_q12062, buff->_m16028() - _q12062);
_w4313 = true;
}
if (_w4313) {
_y4312++;
}
}
buff->_m16032(_b4311, _y4312);
}

void T819::_m16586(Serializable* _c11371, T817* _y11372) {
int _c11373 = _y11372->_m16028();
_y11372->_m16029(2);
short _c11374 = 0;
bool _p11375 = false;
GetPlayerStorablesRequest* _y4323 = (GetPlayerStorablesRequest*)_c11371;
if (_y4323->isMessageIdSet() == true) {
_p11375 = T816::_m16602(_y4323->getMessageId(), (short)0, _y11372);
if (_p11375) {
_c11374++;
}
}
if (_y4323->isRequestIdSet() == true) {
_p11375 = T816::_m16602(_y4323->getRequestId(), (short)1, _y11372);
if (_p11375) {
_c11374++;
}
}
if (_y4323->isDbQuerySet() == true) {
_p11375 = T816::_m16603(this, _y4323->getDbQuery(), (short)3, _y11372);
if (_p11375) {
_c11374++;
}
}
_y11372->_m16032(_c11373, _c11374);
}

void T819::_m16587(Serializable* serializable, T817* buff) {
int _d4324 = buff->_m16028();
buff->_m16029(2);
short _j4325 = 0;
bool _v4326 = false;
PauseSessionMonitoringResponse* _v4327 = (PauseSessionMonitoringResponse*)serializable;
if (_v4327->isMessageIdSet() == true) {
_v4326 = T816::_m16602(_v4327->getMessageId(), (short)0, buff);
if (_v4326) {
_j4325++;
}
}
if (_v4327->isRequestIdSet() == true) {
_v4326 = T816::_m16602(_v4327->getRequestId(), (short)1, buff);
if (_v4326) {
_j4325++;
}
}
if (_v4327->isPauseSessionMonitoringStatusSet() == true) {
_v4326 = T816::_m16603(this, _v4327->getPauseSessionMonitoringStatus(), (short)3, buff);
if (_v4326) {
_j4325++;
}
}
buff->_m16032(_d4324, _j4325);
}

void T819::_m16588(Serializable* _e11377, T817* _b11378) {
int _o11379 = _b11378->_m16028();
_b11378->_m16029(2);
short _k11380 = 0;
bool _s11381 = false;
PauseSessionMonitoringRequest* _g4331 = (PauseSessionMonitoringRequest*)_e11377;
if (_g4331->isMessageIdSet() == true) {
_s11381 = T816::_m16602(_g4331->getMessageId(), (short)0, _b11378);
if (_s11381) {
_k11380++;
}
}
if (_g4331->isRequestIdSet() == true) {
_s11381 = T816::_m16602(_g4331->getRequestId(), (short)1, _b11378);
if (_s11381) {
_k11380++;
}
}
_b11378->_m16032(_o11379, _k11380);
}

void T819::_m16589(Serializable* serializable, T817* buff) {
int _y4332 = buff->_m16028();
buff->_m16029(2);
short _u4333 = 0;
bool _i4334 = false;
ResumeSessionMonitoringResponse* _g4335 = (ResumeSessionMonitoringResponse*)serializable;
if (_g4335->isMessageIdSet() == true) {
_i4334 = T816::_m16602(_g4335->getMessageId(), (short)0, buff);
if (_i4334) {
_u4333++;
}
}
if (_g4335->isRequestIdSet() == true) {
_i4334 = T816::_m16602(_g4335->getRequestId(), (short)1, buff);
if (_i4334) {
_u4333++;
}
}
if (_g4335->isResumeSessionMonitoringStatusSet() == true) {
_i4334 = T816::_m16603(this, _g4335->getResumeSessionMonitoringStatus(), (short)3, buff);
if (_i4334) {
_u4333++;
}
}
buff->_m16032(_y4332, _u4333);
}

void T819::_m16590(Serializable* serializable, T817* buff) {
int _h4336 = buff->_m16028();
buff->_m16029(2);
short _e4337 = 0;
bool _q4338 = false;
ResumeSessionMonitoringRequest* _z4339 = (ResumeSessionMonitoringRequest*)serializable;
if (_z4339->isMessageIdSet() == true) {
_q4338 = T816::_m16602(_z4339->getMessageId(), (short)0, buff);
if (_q4338) {
_e4337++;
}
}
if (_z4339->isRequestIdSet() == true) {
_q4338 = T816::_m16602(_z4339->getRequestId(), (short)1, buff);
if (_q4338) {
_e4337++;
}
}
buff->_m16032(_h4336, _e4337);
}

void T819::_m16591(Serializable* serializable, T817* buff) {
int _r4340 = buff->_m16028();
buff->_m16029(2);
short _e4341 = 0;
bool _m4342 = false;
PublishFriendThirdPartyMessageResponse* _r4343 = (PublishFriendThirdPartyMessageResponse*)serializable;
if (_r4343->isMessageIdSet() == true) {
_m4342 = T816::_m16602(_r4343->getMessageId(), (short)0, buff);
if (_m4342) {
_e4341++;
}
}
if (_r4343->isRequestIdSet() == true) {
_m4342 = T816::_m16602(_r4343->getRequestId(), (short)1, buff);
if (_m4342) {
_e4341++;
}
}
if (_r4343->isPublishFriendThirdPartyMessageStatusSet() == true) {
_m4342 = T816::_m16603(this, _r4343->getPublishFriendThirdPartyMessageStatus(), (short)3, buff);
if (_m4342) {
_e4341++;
}
}
if (_r4343->isThirdPartyIdSet() == true) {
_m4342 = T816::_m16602(_r4343->getThirdPartyId(), (short)4, buff);
if (_m4342) {
_e4341++;
}
}
buff->_m16032(_r4340, _e4341);
}

void T819::_m16592(Serializable* _m11383, T817* _n11384) {
int _h11385 = _n11384->_m16028();
_n11384->_m16029(2);
short _c11386 = 0;
bool _o11387 = false;
PublishFriendThirdPartyMessageRequest* _y4347 = (PublishFriendThirdPartyMessageRequest*)_m11383;
if (_y4347->isMessageIdSet() == true) {
_o11387 = T816::_m16602(_y4347->getMessageId(), (short)0, _n11384);
if (_o11387) {
_c11386++;
}
}
if (_y4347->isRequestIdSet() == true) {
_o11387 = T816::_m16602(_y4347->getRequestId(), (short)1, _n11384);
if (_o11387) {
_c11386++;
}
}
if (_y4347->isTitleSet() == true) {
_o11387 = T816::_m16602(_y4347->getTitle(), (short)3, _n11384);
if (_o11387) {
_c11386++;
}
}
if (_y4347->isMessageSet() == true) {
_o11387 = T816::_m16602(_y4347->getMessage(), (short)4, _n11384);
if (_o11387) {
_c11386++;
}
}
if (_y4347->isPictureUrlSet() == true) {
_o11387 = T816::_m16602(_y4347->getPictureUrl(), (short)5, _n11384);
if (_o11387) {
_c11386++;
}
}
if (_y4347->isLinkSet() == true) {
_o11387 = T816::_m16602(_y4347->getLink(), (short)6, _n11384);
if (_o11387) {
_c11386++;
}
}
if (_y4347->isThirdPartyIdSet() == true) {
_o11387 = T816::_m16602(_y4347->getThirdPartyId(), (short)7, _n11384);
if (_o11387) {
_c11386++;
}
}
if (_y4347->isThirdPartySourceSet() == true) {
_o11387 = T816::_m16603(this, _y4347->getThirdPartySource(), (short)8, _n11384);
if (_o11387) {
_c11386++;
}
}
_n11384->_m16032(_h11385, _c11386);
}

void T819::_m16593(Serializable* _j11389, T817* _s11390) {
int _b11391 = _s11390->_m16028();
_s11390->_m16029(2);
short _a11392 = 0;
bool _k11393 = false;
InvitePlayerResponse* _w4351 = (InvitePlayerResponse*)_j11389;
if (_w4351->isMessageIdSet() == true) {
_k11393 = T816::_m16602(_w4351->getMessageId(), (short)0, _s11390);
if (_k11393) {
_a11392++;
}
}
if (_w4351->isRequestIdSet() == true) {
_k11393 = T816::_m16602(_w4351->getRequestId(), (short)1, _s11390);
if (_k11393) {
_a11392++;
}
}
if (_w4351->isInvitePlayerStatusSet() == true) {
_k11393 = T816::_m16603(this, _w4351->getInvitePlayerStatus(), (short)3, _s11390);
if (_k11393) {
_a11392++;
}
}
if (_w4351->isInvitationIdSet() == true) {
_k11393 = T816::_m16602(_w4351->getInvitationId(), (short)4, _s11390);
if (_k11393) {
_a11392++;
}
}
_s11390->_m16032(_b11391, _a11392);
}

void T819::_m16594(Serializable* serializable, T817* buff) {
int _u4352 = buff->_m16028();
buff->_m16029(2);
short _h4353 = 0;
bool _n4354 = false;
InvitePlayerRequest* _m4355 = (InvitePlayerRequest*)serializable;
if (_m4355->isMessageIdSet() == true) {
_n4354 = T816::_m16602(_m4355->getMessageId(), (short)0, buff);
if (_n4354) {
_h4353++;
}
}
if (_m4355->isRequestIdSet() == true) {
_n4354 = T816::_m16602(_m4355->getRequestId(), (short)1, buff);
if (_n4354) {
_h4353++;
}
}
if (_m4355->isPlayerIdSet() == true) {
_n4354 = T816::_m16602(_m4355->getPlayerId(), (short)3, buff);
if (_n4354) {
_h4353++;
}
}
if (_m4355->isInvitationContentSet() == true) {
_n4354 = T816::_m16603(this, _m4355->getInvitationContent(), (short)4, buff);
if (_n4354) {
_h4353++;
}
}
if (_m4355->isInvitationSet() == true) {
_n4354 = T816::_m16603(this, _m4355->getInvitation(), (short)5, buff);
if (_n4354) {
_h4353++;
}
}
buff->_m16032(_u4352, _h4353);
}

void T819::_m16595(Serializable* serializable, T817* buff) {
int _y4356 = buff->_m16028();
buff->_m16029(2);
short _k4357 = 0;
bool _b4358 = false;
GetInvitationsResponse* _h4359 = (GetInvitationsResponse*)serializable;
if (_h4359->isMessageIdSet() == true) {
_b4358 = T816::_m16602(_h4359->getMessageId(), (short)0, buff);
if (_b4358) {
_k4357++;
}
}
if (_h4359->isRequestIdSet() == true) {
_b4358 = T816::_m16602(_h4359->getRequestId(), (short)1, buff);
if (_b4358) {
_k4357++;
}
}
if (_h4359->isGetInvitationsStatusSet() == true) {
_b4358 = T816::_m16603(this, _h4359->getGetInvitationsStatus(), (short)3, buff);
if (_b4358) {
_k4357++;
}
}
if (_h4359->isInvitationsSet() == true) {
std::vector<NInvitation*>* _w12126 = _h4359->getInvitations();
if (_w12126 == 0) {
_b4358 = false;
} else {
buff->_m16035((short)4);
buff->_m16036(T809::_y15502);
int _j12127 = buff->_m16028();
buff->_m16029(4);
int _t12128 = _w12126->size();
buff->_m16035((short)_t12128);
for (unsigned int _c11547 = 0; _c11547 < (unsigned int)_t12128; _c11547++) {
NInvitation* _m12130 = (*_w12126)[_c11547];
if (_m12130 == 0) {
buff->_m16036(T809::_g15500);
} else {
T816::_m16606(this, _m12130, buff);
}
}
buff->_m16038(_j12127, buff->_m16028() - _j12127);
_b4358 = true;
}
if (_b4358) {
_k4357++;
}
}
buff->_m16032(_y4356, _k4357);
}

void T819::_m16596(Serializable* _w11395, T817* _c11396) {
int _m4365 = _c11396->_m16028();
_c11396->_m16029(2);
short _k4366 = 0;
bool _d4367 = false;
GetInvitationsRequest* _t4368 = (GetInvitationsRequest*)_w11395;
if (_t4368->isMessageIdSet() == true) {
_d4367 = T816::_m16602(_t4368->getMessageId(), (short)0, _c11396);
if (_d4367) {
_k4366++;
}
}
if (_t4368->isRequestIdSet() == true) {
_d4367 = T816::_m16602(_t4368->getRequestId(), (short)1, _c11396);
if (_d4367) {
_k4366++;
}
}
if (_t4368->isNuggetaQuerySet() == true) {
_d4367 = T816::_m16603(this, _t4368->getNuggetaQuery(), (short)3, _c11396);
if (_d4367) {
_k4366++;
}
}
_c11396->_m16032(_m4365, _k4366);
}

void T819::_m16597(Serializable* serializable, T817* buff) {
int _t11397 = buff->_m16028();
buff->_m16029(2);
short _q11398 = 0;
bool _l11399 = false;
AcceptInvitationResponse* _p4372 = (AcceptInvitationResponse*)serializable;
if (_p4372->isMessageIdSet() == true) {
_l11399 = T816::_m16602(_p4372->getMessageId(), (short)0, buff);
if (_l11399) {
_q11398++;
}
}
if (_p4372->isRequestIdSet() == true) {
_l11399 = T816::_m16602(_p4372->getRequestId(), (short)1, buff);
if (_l11399) {
_q11398++;
}
}
if (_p4372->isAcceptInvitationStatusSet() == true) {
_l11399 = T816::_m16603(this, _p4372->getAcceptInvitationStatus(), (short)3, buff);
if (_l11399) {
_q11398++;
}
}
if (_p4372->isInvitationIdSet() == true) {
_l11399 = T816::_m16602(_p4372->getInvitationId(), (short)4, buff);
if (_l11399) {
_q11398++;
}
}
buff->_m16032(_t11397, _q11398);
}

void T819::_m16598(Serializable* serializable, T817* buff) {
int _f4373 = buff->_m16028();
buff->_m16029(2);
short _o4374 = 0;
bool _t4375 = false;
AcceptInvitationRequest* _s4376 = (AcceptInvitationRequest*)serializable;
if (_s4376->isMessageIdSet() == true) {
_t4375 = T816::_m16602(_s4376->getMessageId(), (short)0, buff);
if (_t4375) {
_o4374++;
}
}
if (_s4376->isRequestIdSet() == true) {
_t4375 = T816::_m16602(_s4376->getRequestId(), (short)1, buff);
if (_t4375) {
_o4374++;
}
}
if (_s4376->isInvitationIdSet() == true) {
_t4375 = T816::_m16602(_s4376->getInvitationId(), (short)3, buff);
if (_t4375) {
_o4374++;
}
}
buff->_m16032(_f4373, _o4374);
}

void T819::_m16599(Serializable* serializable, T817* buff) {
int _w4377 = buff->_m16028();
buff->_m16029(2);
short _j4378 = 0;
bool _y4379 = false;
RefuseInvitationResponse* _h4380 = (RefuseInvitationResponse*)serializable;
if (_h4380->isMessageIdSet() == true) {
_y4379 = T816::_m16602(_h4380->getMessageId(), (short)0, buff);
if (_y4379) {
_j4378++;
}
}
if (_h4380->isRequestIdSet() == true) {
_y4379 = T816::_m16602(_h4380->getRequestId(), (short)1, buff);
if (_y4379) {
_j4378++;
}
}
if (_h4380->isRefuseInvitationStatusSet() == true) {
_y4379 = T816::_m16603(this, _h4380->getRefuseInvitationStatus(), (short)3, buff);
if (_y4379) {
_j4378++;
}
}
if (_h4380->isInvitationIdSet() == true) {
_y4379 = T816::_m16602(_h4380->getInvitationId(), (short)4, buff);
if (_y4379) {
_j4378++;
}
}
buff->_m16032(_w4377, _j4378);
}

void T819::_m16600(Serializable* _z12155, T817* _o11402) {
int _o12157 = _o11402->_m16028();
_o11402->_m16029(2);
short _h11541 = 0;
bool _c12159 = false;
RefuseInvitationRequest* _k4384 = (RefuseInvitationRequest*)_z12155;
if (_k4384->isMessageIdSet() == true) {
_c12159 = T816::_m16602(_k4384->getMessageId(), (short)0, _o11402);
if (_c12159) {
_h11541++;
}
}
if (_k4384->isRequestIdSet() == true) {
_c12159 = T816::_m16602(_k4384->getRequestId(), (short)1, _o11402);
if (_c12159) {
_h11541++;
}
}
if (_k4384->isInvitationIdSet() == true) {
_c12159 = T816::_m16602(_k4384->getInvitationId(), (short)3, _o11402);
if (_c12159) {
_h11541++;
}
}
_o11402->_m16032(_o12157, _h11541);
}

Serializable* T819::_m16049(T808* buffer) {
T817* _y4385 = (T817*)buffer;
return (Serializable*)T815::_m16617(this, _y4385);
}

Serializable* T819::_m16050(T808* _r12163, short _t12164) {
T817* _u11516 = (T817*)_r12163;
if (_t12164 == -1) {
return _m16618(_u11516);
}
if (_t12164 == -2) {
return _m16619(_u11516);
}
if (_t12164 == -3) {
return _m16620(_u11516);
}
if (_t12164 == -4) {
return _m16621(_u11516);
}
if (_t12164 == -8) {
return _m16622(_u11516);
}
if (_t12164 == -9) {
return _m16623(_u11516);
}
if (_t12164 == -12) {
return _m16624(_u11516);
}
if (_t12164 == -18) {
return _m16625(_u11516);
}
if (_t12164 == -19) {
return _m16626(_u11516);
}
if (_t12164 == -20) {
return _m16627(_u11516);
}
if (_t12164 == -21) {
return _m16628(_u11516);
}
if (_t12164 == -22) {
return _m16629(_u11516);
}
if (_t12164 == -23) {
return _m16630(_u11516);
}
if (_t12164 == -24) {
return _m16631(_u11516);
}
if (_t12164 == -34) {
return _m16632(_u11516);
}
if (_t12164 == -38) {
return _m16633(_u11516);
}
if (_t12164 == -39) {
return _m16634(_u11516);
}
if (_t12164 == -42) {
return _m16635(_u11516);
}
if (_t12164 == -10018) {
return _m16636(_u11516);
}
if (_t12164 == -10038) {
return _m16637(_u11516);
}
if (_t12164 == -10078) {
return _m16638(_u11516);
}
if (_t12164 == -10098) {
return _m16639(_u11516);
}
if (_t12164 == -10118) {
return _m16640(_u11516);
}
if (_t12164 == -10138) {
return _m16641(_u11516);
}
if (_t12164 == -10198) {
return _m16642(_u11516);
}
if (_t12164 == -10218) {
return _m16643(_u11516);
}
if (_t12164 == -10238) {
return _m16644(_u11516);
}
if (_t12164 == -10258) {
return _m16645(_u11516);
}
if (_t12164 == -10278) {
return _m16646(_u11516);
}
if (_t12164 == -10298) {
return _m16647(_u11516);
}
if (_t12164 == -10318) {
return _m16648(_u11516);
}
if (_t12164 == -10338) {
return _m16649(_u11516);
}
if (_t12164 == -10358) {
return _m16650(_u11516);
}
if (_t12164 == -10378) {
return _m16651(_u11516);
}
if (_t12164 == -10398) {
return _m16652(_u11516);
}
if (_t12164 == -10418) {
return _m16653(_u11516);
}
if (_t12164 == -10438) {
return _m16654(_u11516);
}
if (_t12164 == -10458) {
return _m16655(_u11516);
}
if (_t12164 == -10478) {
return _m16656(_u11516);
}
if (_t12164 == -10498) {
return _m16657(_u11516);
}
if (_t12164 == -10518) {
return _m16658(_u11516);
}
if (_t12164 == -10618) {
return _m16659(_u11516);
}
if (_t12164 == -10638) {
return _m16660(_u11516);
}
if (_t12164 == -10658) {
return _m16661(_u11516);
}
if (_t12164 == -10678) {
return _m16662(_u11516);
}
if (_t12164 == -10698) {
return _m16663(_u11516);
}
if (_t12164 == -10718) {
return _m16664(_u11516);
}
if (_t12164 == -10738) {
return _m16665(_u11516);
}
if (_t12164 == -10758) {
return _m16666(_u11516);
}
if (_t12164 == -10778) {
return _m16667(_u11516);
}
if (_t12164 == -10798) {
return _m16668(_u11516);
}
if (_t12164 == -10818) {
return _m16669(_u11516);
}
if (_t12164 == -10838) {
return _m16670(_u11516);
}
if (_t12164 == -10858) {
return _m16671(_u11516);
}
if (_t12164 == -10878) {
return _m16672(_u11516);
}
if (_t12164 == -10898) {
return _m16673(_u11516);
}
if (_t12164 == -10918) {
return _m16674(_u11516);
}
if (_t12164 == -10938) {
return _m16675(_u11516);
}
if (_t12164 == -10958) {
return _m16676(_u11516);
}
if (_t12164 == -10978) {
return _m16677(_u11516);
}
if (_t12164 == -10998) {
return _m16678(_u11516);
}
if (_t12164 == -11018) {
return _m16679(_u11516);
}
if (_t12164 == -11038) {
return _m16680(_u11516);
}
if (_t12164 == -11058) {
return _m16681(_u11516);
}
if (_t12164 == -11078) {
return _m16682(_u11516);
}
if (_t12164 == -11098) {
return _m16683(_u11516);
}
if (_t12164 == -11118) {
return _m16684(_u11516);
}
if (_t12164 == -11138) {
return _m16685(_u11516);
}
if (_t12164 == -11158) {
return _m16686(_u11516);
}
if (_t12164 == -11178) {
return _m16687(_u11516);
}
if (_t12164 == -11198) {
return _m16688(_u11516);
}
if (_t12164 == -3000) {
return _m16689(_u11516);
}
if (_t12164 == -3001) {
return _m16690(_u11516);
}
if (_t12164 == -3002) {
return _m16691(_u11516);
}
if (_t12164 == -3003) {
return _m16692(_u11516);
}
if (_t12164 == -3004) {
return _m16693(_u11516);
}
if (_t12164 == -3005) {
return _m16694(_u11516);
}
if (_t12164 == -3006) {
return _m16695(_u11516);
}
if (_t12164 == -3008) {
return _m16696(_u11516);
}
if (_t12164 == -3009) {
return _m16697(_u11516);
}
if (_t12164 == -3010) {
return _m16698(_u11516);
}
if (_t12164 == -3011) {
return _m16699(_u11516);
}
if (_t12164 == -3012) {
return _m16700(_u11516);
}
if (_t12164 == -3013) {
return _m16701(_u11516);
}
if (_t12164 == -3017) {
return _m16702(_u11516);
}
if (_t12164 == -3019) {
return _m16703(_u11516);
}
if (_t12164 == -3020) {
return _m16704(_u11516);
}
if (_t12164 == -3021) {
return _m16705(_u11516);
}
if (_t12164 == -3042) {
return _m16706(_u11516);
}
if (_t12164 == -3077) {
return _m16707(_u11516);
}
if (_t12164 == -3078) {
return _m16708(_u11516);
}
if (_t12164 == -3088) {
return _m16709(_u11516);
}
if (_t12164 == -3089) {
return _m16710(_u11516);
}
if (_t12164 == -3090) {
return _m16711(_u11516);
}
if (_t12164 == -3093) {
return _m16712(_u11516);
}
if (_t12164 == -3098) {
return _m16713(_u11516);
}
if (_t12164 == -3099) {
return _m16714(_u11516);
}
if (_t12164 == -3100) {
return _m16715(_u11516);
}
if (_t12164 == -3101) {
return _m16716(_u11516);
}
if (_t12164 == -3103) {
return _m16717(_u11516);
}
if (_t12164 == -3105) {
return _m16718(_u11516);
}
if (_t12164 == -3106) {
return _m16719(_u11516);
}
if (_t12164 == -3107) {
return _m16720(_u11516);
}
if (_t12164 == -3109) {
return _m16721(_u11516);
}
if (_t12164 == -3111) {
return _m16722(_u11516);
}
if (_t12164 == -3112) {
return _m16723(_u11516);
}
if (_t12164 == -3113) {
return _m16724(_u11516);
}
if (_t12164 == -3118) {
return _m16725(_u11516);
}
if (_t12164 == -3119) {
return _m16726(_u11516);
}
if (_t12164 == -3121) {
return _m16727(_u11516);
}
if (_t12164 == -3122) {
return _m16728(_u11516);
}
if (_t12164 == -3124) {
return _m16729(_u11516);
}
if (_t12164 == -3127) {
return _m16730(_u11516);
}
if (_t12164 == -3129) {
return _m16731(_u11516);
}
if (_t12164 == -3135) {
return _m16732(_u11516);
}
if (_t12164 == -3136) {
return _m16733(_u11516);
}
if (_t12164 == -3137) {
return _m16734(_u11516);
}
if (_t12164 == -3139) {
return _m16735(_u11516);
}
if (_t12164 == -3140) {
return _m16736(_u11516);
}
if (_t12164 == -3142) {
return _m16737(_u11516);
}
if (_t12164 == -3143) {
return _m16738(_u11516);
}
if (_t12164 == -3145) {
return _m16739(_u11516);
}
if (_t12164 == -3156) {
return _m16740(_u11516);
}
if (_t12164 == -3157) {
return _m16741(_u11516);
}
if (_t12164 == -3158) {
return _m16742(_u11516);
}
if (_t12164 == -3159) {
return _m16743(_u11516);
}
if (_t12164 == -3164) {
return _m16744(_u11516);
}
if (_t12164 == -3165) {
return _m16745(_u11516);
}
if (_t12164 == -3174) {
return _m16746(_u11516);
}
if (_t12164 == -3175) {
return _m16747(_u11516);
}
if (_t12164 == -3178) {
return _m16748(_u11516);
}
if (_t12164 == -3179) {
return _m16749(_u11516);
}
if (_t12164 == -3180) {
return _m16750(_u11516);
}
if (_t12164 == -3181) {
return _m16751(_u11516);
}
if (_t12164 == -3204) {
return _m16752(_u11516);
}
if (_t12164 == -3230) {
return _m16753(_u11516);
}
if (_t12164 == -3232) {
return _m16754(_u11516);
}
if (_t12164 == -3233) {
return _m16755(_u11516);
}
if (_t12164 == -3234) {
return _m16756(_u11516);
}
if (_t12164 == -3235) {
return _m16757(_u11516);
}
if (_t12164 == -3236) {
return _m16758(_u11516);
}
if (_t12164 == -3237) {
return _m16759(_u11516);
}
if (_t12164 == -10019) {
return _m16760(_u11516);
}
if (_t12164 == -10017) {
return _m16761(_u11516);
}
if (_t12164 == -10016) {
return _m16762(_u11516);
}
if (_t12164 == -10039) {
return _m16763(_u11516);
}
if (_t12164 == -10037) {
return _m16764(_u11516);
}
if (_t12164 == -10079) {
return _m16765(_u11516);
}
if (_t12164 == -10077) {
return _m16766(_u11516);
}
if (_t12164 == -10099) {
return _m16767(_u11516);
}
if (_t12164 == -10097) {
return _m16768(_u11516);
}
if (_t12164 == -10119) {
return _m16769(_u11516);
}
if (_t12164 == -10117) {
return _m16770(_u11516);
}
if (_t12164 == -10116) {
return _m16771(_u11516);
}
if (_t12164 == -10139) {
return _m16772(_u11516);
}
if (_t12164 == -10137) {
return _m16773(_u11516);
}
if (_t12164 == -10199) {
return _m16774(_u11516);
}
if (_t12164 == -10197) {
return _m16775(_u11516);
}
if (_t12164 == -10196) {
return _m16776(_u11516);
}
if (_t12164 == -10219) {
return _m16777(_u11516);
}
if (_t12164 == -10217) {
return _m16778(_u11516);
}
if (_t12164 == -10239) {
return _m16779(_u11516);
}
if (_t12164 == -10237) {
return _m16780(_u11516);
}
if (_t12164 == -10259) {
return _m16781(_u11516);
}
if (_t12164 == -10257) {
return _m16782(_u11516);
}
if (_t12164 == -10279) {
return _m16783(_u11516);
}
if (_t12164 == -10277) {
return _m16784(_u11516);
}
if (_t12164 == -10299) {
return _m16785(_u11516);
}
if (_t12164 == -10297) {
return _m16786(_u11516);
}
if (_t12164 == -10296) {
return _m16787(_u11516);
}
if (_t12164 == -10319) {
return _m16788(_u11516);
}
if (_t12164 == -10317) {
return _m16789(_u11516);
}
if (_t12164 == -10339) {
return _m16790(_u11516);
}
if (_t12164 == -10337) {
return _m16791(_u11516);
}
if (_t12164 == -10359) {
return _m16792(_u11516);
}
if (_t12164 == -10357) {
return _m16793(_u11516);
}
if (_t12164 == -10379) {
return _m16794(_u11516);
}
if (_t12164 == -10377) {
return _m16795(_u11516);
}
if (_t12164 == -10399) {
return _m16796(_u11516);
}
if (_t12164 == -10397) {
return _m16797(_u11516);
}
if (_t12164 == -10419) {
return _m16798(_u11516);
}
if (_t12164 == -10417) {
return _m16799(_u11516);
}
if (_t12164 == -10439) {
return _m16800(_u11516);
}
if (_t12164 == -10437) {
return _m16801(_u11516);
}
if (_t12164 == -10459) {
return _m16802(_u11516);
}
if (_t12164 == -10457) {
return _m16803(_u11516);
}
if (_t12164 == -10456) {
return _m16804(_u11516);
}
if (_t12164 == -10479) {
return _m16805(_u11516);
}
if (_t12164 == -10477) {
return _m16806(_u11516);
}
if (_t12164 == -10476) {
return _m16807(_u11516);
}
if (_t12164 == -10499) {
return _m16808(_u11516);
}
if (_t12164 == -10497) {
return _m16809(_u11516);
}
if (_t12164 == -10519) {
return _m16810(_u11516);
}
if (_t12164 == -10517) {
return _m16811(_u11516);
}
if (_t12164 == -10619) {
return _m16812(_u11516);
}
if (_t12164 == -10617) {
return _m16813(_u11516);
}
if (_t12164 == -10639) {
return _m16814(_u11516);
}
if (_t12164 == -10637) {
return _m16815(_u11516);
}
if (_t12164 == -10659) {
return _m16816(_u11516);
}
if (_t12164 == -10657) {
return _m16817(_u11516);
}
if (_t12164 == -10679) {
return _m16818(_u11516);
}
if (_t12164 == -10677) {
return _m16819(_u11516);
}
if (_t12164 == -10699) {
return _m16820(_u11516);
}
if (_t12164 == -10697) {
return _m16821(_u11516);
}
if (_t12164 == -10719) {
return _m16822(_u11516);
}
if (_t12164 == -10717) {
return _m16823(_u11516);
}
if (_t12164 == -10739) {
return _m16824(_u11516);
}
if (_t12164 == -10737) {
return _m16825(_u11516);
}
if (_t12164 == -10759) {
return _m16826(_u11516);
}
if (_t12164 == -10757) {
return _m16827(_u11516);
}
if (_t12164 == -10756) {
return _m16828(_u11516);
}
if (_t12164 == -10755) {
return _m16829(_u11516);
}
if (_t12164 == -10779) {
return _m16830(_u11516);
}
if (_t12164 == -10777) {
return _m16831(_u11516);
}
if (_t12164 == -10799) {
return _m16832(_u11516);
}
if (_t12164 == -10797) {
return _m16833(_u11516);
}
if (_t12164 == -10819) {
return _m16834(_u11516);
}
if (_t12164 == -10817) {
return _m16835(_u11516);
}
if (_t12164 == -10839) {
return _m16836(_u11516);
}
if (_t12164 == -10837) {
return _m16837(_u11516);
}
if (_t12164 == -10859) {
return _m16838(_u11516);
}
if (_t12164 == -10857) {
return _m16839(_u11516);
}
if (_t12164 == -10879) {
return _m16840(_u11516);
}
if (_t12164 == -10877) {
return _m16841(_u11516);
}
if (_t12164 == -10899) {
return _m16842(_u11516);
}
if (_t12164 == -10897) {
return _m16843(_u11516);
}
if (_t12164 == -10919) {
return _m16844(_u11516);
}
if (_t12164 == -10917) {
return _m16845(_u11516);
}
if (_t12164 == -10939) {
return _m16846(_u11516);
}
if (_t12164 == -10937) {
return _m16847(_u11516);
}
if (_t12164 == -10936) {
return _m16848(_u11516);
}
if (_t12164 == -10959) {
return _m16849(_u11516);
}
if (_t12164 == -10957) {
return _m16850(_u11516);
}
if (_t12164 == -10979) {
return _m16851(_u11516);
}
if (_t12164 == -10977) {
return _m16852(_u11516);
}
if (_t12164 == -10999) {
return _m16853(_u11516);
}
if (_t12164 == -10997) {
return _m16854(_u11516);
}
if (_t12164 == -11019) {
return _m16855(_u11516);
}
if (_t12164 == -11017) {
return _m16856(_u11516);
}
if (_t12164 == -11039) {
return _m16857(_u11516);
}
if (_t12164 == -11037) {
return _m16858(_u11516);
}
if (_t12164 == -11059) {
return _m16859(_u11516);
}
if (_t12164 == -11057) {
return _m16860(_u11516);
}
if (_t12164 == -11079) {
return _m16861(_u11516);
}
if (_t12164 == -11077) {
return _m16862(_u11516);
}
if (_t12164 == -11099) {
return _m16863(_u11516);
}
if (_t12164 == -11097) {
return _m16864(_u11516);
}
if (_t12164 == -11119) {
return _m16865(_u11516);
}
if (_t12164 == -11117) {
return _m16866(_u11516);
}
if (_t12164 == -11139) {
return _m16867(_u11516);
}
if (_t12164 == -11137) {
return _m16868(_u11516);
}
if (_t12164 == -11159) {
return _m16869(_u11516);
}
if (_t12164 == -11157) {
return _m16870(_u11516);
}
if (_t12164 == -11179) {
return _m16871(_u11516);
}
if (_t12164 == -11177) {
return _m16872(_u11516);
}
if (_t12164 == -11199) {
return _m16873(_u11516);
}
if (_t12164 == -11197) {
return _m16874(_u11516);
}
throw new std::exception();
}

Serializable* T819::_m16618(T817* buff) {
int _f4387 = T815::_m16875(buff);
return DnsStatus::fromValue(_f4387);
}

Serializable* T819::_m16619(T817* buff) {
int _q4388 = T815::_m16875(buff);
return MatchMakingType::fromValue(_q4388);
}

Serializable* T819::_m16620(T817* buff) {
int _m4389 = T815::_m16875(buff);
return LeaderboardOrder::fromValue(_m4389);
}

Serializable* T819::_m16621(T817* buff) {
int _b4390 = T815::_m16875(buff);
return LeaderboardPeriod::fromValue(_b4390);
}

Serializable* T819::_m16622(T817* buff) {
int _c4391 = T815::_m16875(buff);
return ErrorCode::fromValue(_c4391);
}

Serializable* T819::_m16623(T817* buff) {
int _t4392 = T815::_m16875(buff);
return ThirdPartySource::fromValue(_t4392);
}

Serializable* T819::_m16624(T817* buff) {
int _j4393 = T815::_m16875(buff);
return LogLevel::fromValue(_j4393);
}

Serializable* T819::_m16625(T817* buff) {
int _f4394 = T815::_m16875(buff);
return HandshakeState::fromValue(_f4394);
}

Serializable* T819::_m16626(T817* buff) {
int _y4395 = T815::_m16875(buff);
return PlayerState::fromValue(_y4395);
}

Serializable* T819::_m16627(T817* buff) {
int _q4396 = T815::_m16875(buff);
return ClientApplication::fromValue(_q4396);
}

Serializable* T819::_m16628(T817* buff) {
int _y4397 = T815::_m16875(buff);
return GameRunningState::fromValue(_y4397);
}

Serializable* T819::_m16629(T817* buff) {
int _x4398 = T815::_m16875(buff);
return Period::fromValue(_x4398);
}

Serializable* T819::_m16630(T817* buff) {
int _c4399 = T815::_m16875(buff);
return NFriendDemandStatus::fromValue(_c4399);
}

Serializable* T819::_m16631(T817* buff) {
int _f4400 = T815::_m16875(buff);
return ExecutionStatus::fromValue(_f4400);
}

Serializable* T819::_m16632(T817* buff) {
int _n4401 = T815::_m16875(buff);
return StartStatus::fromValue(_n4401);
}

Serializable* T819::_m16633(T817* buff) {
int _a4402 = T815::_m16875(buff);
return PlayerSessionType::fromValue(_a4402);
}

Serializable* T819::_m16634(T817* buff) {
int _u4403 = T815::_m16875(buff);
return NAchievementType::fromValue(_u4403);
}

Serializable* T819::_m16635(T817* buff) {
int _n4404 = T815::_m16875(buff);
return NInvitationStatus::fromValue(_n4404);
}

Serializable* T819::_m16636(T817* buff) {
int _u4405 = T815::_m16875(buff);
return AskForFriendStatus::fromValue(_u4405);
}

Serializable* T819::_m16637(T817* buff) {
int _k4406 = T815::_m16875(buff);
return SignUpStatus::fromValue(_k4406);
}

Serializable* T819::_m16638(T817* buff) {
int _w4407 = T815::_m16875(buff);
return LoginStatus::fromValue(_w4407);
}

Serializable* T819::_m16639(T817* buff) {
int _v4408 = T815::_m16875(buff);
return SavePlayerProfileStatus::fromValue(_v4408);
}

Serializable* T819::_m16640(T817* buff) {
int _q4409 = T815::_m16875(buff);
return GetPlayerProfileStatus::fromValue(_q4409);
}

Serializable* T819::_m16641(T817* buff) {
int _m4410 = T815::_m16875(buff);
return LogoutStatus::fromValue(_m4410);
}

Serializable* T819::_m16642(T817* _h11527) {
int _g4411 = T815::_m16875(_h11527);
return GetFriendsStatus::fromValue(_g4411);
}

Serializable* T819::_m16643(T817* buff) {
int _p4412 = T815::_m16875(buff);
return GetThirdPartyFriendsStatus::fromValue(_p4412);
}

Serializable* T819::_m16644(T817* buff) {
int _x4413 = T815::_m16875(buff);
return GetFriendDemandsStatus::fromValue(_x4413);
}

Serializable* T819::_m16645(T817* buff) {
int _i4414 = T815::_m16875(buff);
return AcceptFriendDemandStatus::fromValue(_i4414);
}

Serializable* T819::_m16646(T817* buff) {
int _p4415 = T815::_m16875(buff);
return RefuseFriendDemandStatus::fromValue(_p4415);
}

Serializable* T819::_m16647(T817* buff) {
int _o4416 = T815::_m16875(buff);
return SubmitScoreStatus::fromValue(_o4416);
}

Serializable* T819::_m16648(T817* buff) {
int _f4417 = T815::_m16875(buff);
return GetLeaderboardStatus::fromValue(_f4417);
}

Serializable* T819::_m16649(T817* buff) {
int _p4418 = T815::_m16875(buff);
return BuyItemStatus::fromValue(_p4418);
}

Serializable* T819::_m16650(T817* buff) {
int _h4419 = T815::_m16875(buff);
return GetStoreStatus::fromValue(_h4419);
}

Serializable* T819::_m16651(T817* buff) {
int _q4420 = T815::_m16875(buff);
return ConsumeItemStatus::fromValue(_q4420);
}

Serializable* T819::_m16652(T817* _f11533) {
int _t4421 = T815::_m16875(_f11533);
return IncreasePlayerWalletStatus::fromValue(_t4421);
}

Serializable* T819::_m16653(T817* buff) {
int _b4422 = T815::_m16875(buff);
return GetPlayerWalletStatus::fromValue(_b4422);
}

Serializable* T819::_m16654(T817* buff) {
int _p4423 = T815::_m16875(buff);
return GetAchievementBoardStatus::fromValue(_p4423);
}

Serializable* T819::_m16655(T817* buff) {
int _p4424 = T815::_m16875(buff);
return AchieveStatus::fromValue(_p4424);
}

Serializable* T819::_m16656(T817* buff) {
int _o4425 = T815::_m16875(buff);
return SearchImmediateGameStatus::fromValue(_o4425);
}

Serializable* T819::_m16657(T817* buff) {
int _d4426 = T815::_m16875(buff);
return JoinGameStatus::fromValue(_d4426);
}

Serializable* T819::_m16658(T817* buff) {
int _o4427 = T815::_m16875(buff);
return UnjoinGameStatus::fromValue(_o4427);
}

Serializable* T819::_m16659(T817* buff) {
int _s4428 = T815::_m16875(buff);
return StartGameStatus::fromValue(_s4428);
}

Serializable* T819::_m16660(T817* buff) {
int _u4429 = T815::_m16875(buff);
return StopGameStatus::fromValue(_u4429);
}

Serializable* T819::_m16661(T817* buff) {
int _p4430 = T815::_m16875(buff);
return CreateGameStatus::fromValue(_p4430);
}

Serializable* T819::_m16662(T817* buff) {
int _c4431 = T815::_m16875(buff);
return GetGamesStatus::fromValue(_c4431);
}

Serializable* T819::_m16663(T817* buff) {
int _i4432 = T815::_m16875(buff);
return SaveAsGhostStatus::fromValue(_i4432);
}

Serializable* T819::_m16664(T817* buff) {
int _d4433 = T815::_m16875(buff);
return GetGhostsStatus::fromValue(_d4433);
}

Serializable* T819::_m16665(T817* buff) {
int _q4434 = T815::_m16875(buff);
return LoadGhostStatus::fromValue(_q4434);
}

Serializable* T819::_m16666(T817* _j11539) {
int _j4435 = T815::_m16875(_j11539);
return SendGameChatStatus::fromValue(_j4435);
}

Serializable* T819::_m16667(T817* buff) {
int _l4436 = T815::_m16875(buff);
return GetStorablesStatus::fromValue(_l4436);
}

Serializable* T819::_m16668(T817* buff) {
int _x4437 = T815::_m16875(buff);
return SaveStorableStatus::fromValue(_x4437);
}

Serializable* T819::_m16669(T817* buff) {
int _g4438 = T815::_m16875(buff);
return NextPlayerTurnStatus::fromValue(_g4438);
}

Serializable* T819::_m16670(T817* buff) {
int _h4439 = T815::_m16875(buff);
return SetPlayerNameStatus::fromValue(_h4439);
}

Serializable* T819::_m16671(T817* buff) {
int _j4440 = T815::_m16875(buff);
return UpdateStorableStatus::fromValue(_j4440);
}

Serializable* T819::_m16672(T817* buff) {
int _w4441 = T815::_m16875(buff);
return RemoveStorableStatus::fromValue(_w4441);
}

Serializable* T819::_m16673(T817* buff) {
int _r4442 = T815::_m16875(buff);
return InviteThirdPartyFriendStatus::fromValue(_r4442);
}

Serializable* T819::_m16674(T817* buff) {
int _d4443 = T815::_m16875(buff);
return PublishThirdPartyMessageStatus::fromValue(_d4443);
}

Serializable* T819::_m16675(T817* buff) {
int _v4444 = T815::_m16875(buff);
return ThirdPartyLoginStatus::fromValue(_v4444);
}

Serializable* T819::_m16676(T817* buff) {
int _f4445 = T815::_m16875(buff);
return SaveGameStatus::fromValue(_f4445);
}

Serializable* T819::_m16677(T817* buff) {
int _w4446 = T815::_m16875(buff);
return LoadGameStatus::fromValue(_w4446);
}

Serializable* T819::_m16678(T817* buff) {
int _f4447 = T815::_m16875(buff);
return SavePlayerStorableStatus::fromValue(_f4447);
}

Serializable* T819::_m16679(T817* buff) {
int _f4448 = T815::_m16875(buff);
return UpdatePlayerStorableStatus::fromValue(_f4448);
}

Serializable* T819::_m16680(T817* buff) {
int _m4449 = T815::_m16875(buff);
return RemovePlayerStorableStatus::fromValue(_m4449);
}

Serializable* T819::_m16681(T817* buff) {
int _z4450 = T815::_m16875(buff);
return GetPlayerStorablesStatus::fromValue(_z4450);
}

Serializable* T819::_m16682(T817* buff) {
int _i4451 = T815::_m16875(buff);
return PauseSessionMonitoringStatus::fromValue(_i4451);
}

Serializable* T819::_m16683(T817* buff) {
int _z4452 = T815::_m16875(buff);
return ResumeSessionMonitoringStatus::fromValue(_z4452);
}

Serializable* T819::_m16684(T817* buff) {
int _j4453 = T815::_m16875(buff);
return PublishFriendThirdPartyMessageStatus::fromValue(_j4453);
}

Serializable* T819::_m16685(T817* buff) {
int _j4454 = T815::_m16875(buff);
return InvitePlayerStatus::fromValue(_j4454);
}

Serializable* T819::_m16686(T817* buff) {
int _i4455 = T815::_m16875(buff);
return GetInvitationsStatus::fromValue(_i4455);
}

Serializable* T819::_m16687(T817* buff) {
int _e4456 = T815::_m16875(buff);
return AcceptInvitationStatus::fromValue(_e4456);
}

Serializable* T819::_m16688(T817* buff) {
int _n12307 = T815::_m16875(buff);
return RefuseInvitationStatus::fromValue(_n12307);
}

Serializable* T819::_m16689(T817* _y11550) {
Handshake* _y12309 = new Handshake();
short _f11552 = T815::_m16876(_y11550);
for (unsigned int _k4460 = 0; _k4460 < (unsigned int)_f11552; _k4460++) {
short _w4461 = T815::_m16876(_y11550);
if (_w4461 == 0) {
const char* _x4462 = T815::_m16877(_y11550);
_y12309->setMessageId(_x4462);
delete _x4462;
continue;
}
if (_w4461 == 1) {
const char* _e4463 = T815::_m16877(_y11550);
_y12309->setRequestId(_e4463);
delete _e4463;
continue;
}
if (_w4461 == 3) {
const char* _b4464 = T815::_m16877(_y11550);
_y12309->setVersion(_b4464);
delete _b4464;
continue;
}
if (_w4461 == 4) {
_y12309->setReason((HandshakeState*)T815::_m16617(this, _y11550));
continue;
}
if (_w4461 == 5) {
const char* _q4465 = T815::_m16877(_y11550);
_y12309->setPlayerIdsStored(_q4465);
delete _q4465;
continue;
}
if (_w4461 == 6) {
const char* _w4466 = T815::_m16877(_y11550);
_y12309->setSessionId(_w4466);
delete _w4466;
continue;
}
if (_w4461 == 7) {
const char* _d4467 = T815::_m16877(_y11550);
_y12309->setPlatform(_d4467);
delete _d4467;
continue;
}
if (_w4461 == 8) {
const char* _c4468 = T815::_m16877(_y11550);
_y12309->setSpId(_c4468);
delete _c4468;
continue;
}
if (_w4461 == 9) {
const char* _n4469 = T815::_m16877(_y11550);
_y12309->setDebugSpId(_n4469);
delete _n4469;
continue;
}
T815::_m16878(_y11550);
}
return _y12309;
}

Serializable* T819::_m16690(T817* _q11556) {
HandshakeResponse* _c12322 = new HandshakeResponse();
short _m11558 = T815::_m16876(_q11556);
for (unsigned int _d4472 = 0; _d4472 < (unsigned int)_m11558; _d4472++) {
short _s4473 = T815::_m16876(_q11556);
if (_s4473 == 0) {
const char* _v4474 = T815::_m16877(_q11556);
_c12322->setMessageId(_v4474);
delete _v4474;
continue;
}
if (_s4473 == 1) {
const char* _n4475 = T815::_m16877(_q11556);
_c12322->setRequestId(_n4475);
delete _n4475;
continue;
}
if (_s4473 == 3) {
_c12322->setExecutionStatus((ExecutionStatus*)T815::_m16617(this, _q11556));
continue;
}
if (_s4473 == 4) {
_c12322->setReason((HandshakeState*)T815::_m16617(this, _q11556));
continue;
}
if (_s4473 == 5) {
const char* _e4476 = T815::_m16877(_q11556);
_c12322->setPlayerIdsStored(_e4476);
delete _e4476;
continue;
}
if (_s4473 == 6) {
const char* _i4477 = T815::_m16877(_q11556);
_c12322->setSessionId(_i4477);
delete _i4477;
continue;
}
if (_s4473 == 7) {
_c12322->setPlayerSessionType((PlayerSessionType*)T815::_m16617(this, _q11556));
continue;
}
if (_s4473 == 8) {
_c12322->setPlayer((NPlayer*)T815::_m16617(this, _q11556));
continue;
}
T815::_m16878(_q11556);
}
return _c12322;
}

Serializable* T819::_m16691(T817* buff) {
InvalidVersion* _n12331 = new InvalidVersion();
short _a4479 = T815::_m16876(buff);
for (unsigned int _b4480 = 0; _b4480 < (unsigned int)_a4479; _b4480++) {
short _m4481 = T815::_m16876(buff);
if (_m4481 == 0) {
const char* _q4482 = T815::_m16877(buff);
_n12331->setMessageId(_q4482);
delete _q4482;
continue;
}
if (_m4481 == 1) {
const char* _s4483 = T815::_m16877(buff);
_n12331->setRequestId(_s4483);
delete _s4483;
continue;
}
T815::_m16878(buff);
}
return _n12331;
}

Serializable* T819::_m16692(T817* buff) {
NPlayer* _t12338 = new NPlayer();
short _b4485 = T815::_m16876(buff);
for (unsigned int _k4486 = 0; _k4486 < (unsigned int)_b4485; _k4486++) {
short _o4487 = T815::_m16876(buff);
if (_o4487 == 0) {
const char* _w4488 = T815::_m16877(buff);
_t12338->setStoreId(_w4488);
delete _w4488;
continue;
}
if (_o4487 == 2) {
const char* _f4489 = T815::_m16877(buff);
_t12338->setID(_f4489);
delete _f4489;
continue;
}
if (_o4487 == 5) {
const char* _h4490 = T815::_m16877(buff);
_t12338->setAccessToken(_h4490);
delete _h4490;
continue;
}
if (_o4487 == 6) {
const char* _g4491 = T815::_m16877(buff);
_t12338->setName(_g4491);
delete _g4491;
continue;
}
if (_o4487 == 7) {
_t12338->setConnected(T815::_m16879(buff));
continue;
}
if (_o4487 == 8) {
_t12338->setLoginSource((ThirdPartySource*)T815::_m16617(this, buff));
continue;
}
if (_o4487 == 9) {
const char* _b4492 = T815::_m16877(buff);
_t12338->setThirdPartyId(_b4492);
delete _b4492;
continue;
}
if (_o4487 == 12) {
const char* _h12347 = T815::_m16877(buff);
_t12338->setLang(_h12347);
delete _h12347;
continue;
}
T815::_m16878(buff);
}
return _t12338;
}

Serializable* T819::_m16693(T817* buff) {
GameStateChange* _h12349 = new GameStateChange();
short _z4495 = T815::_m16876(buff);
for (unsigned int _k11564 = 0; _k11564 < (unsigned int)_z4495; _k11564++) {
short _s4497 = T815::_m16876(buff);
if (_s4497 == 0) {
const char* _b4498 = T815::_m16877(buff);
_h12349->setMessageId(_b4498);
delete _b4498;
continue;
}
if (_s4497 == 1) {
const char* _u4499 = T815::_m16877(buff);
_h12349->setRequestId(_u4499);
delete _u4499;
continue;
}
if (_s4497 == 3) {
const char* _y4500 = T815::_m16877(buff);
_h12349->setGameId(_y4500);
delete _y4500;
continue;
}
if (_s4497 == 4) {
_h12349->setGameRunningState((GameRunningState*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _h12349;
}

Serializable* T819::_m16694(T817* _t11567) {
NFriendDemand* _k12357 = new NFriendDemand();
short _e11569 = T815::_m16876(_t11567);
for (unsigned int _j4503 = 0; _j4503 < (unsigned int)_e11569; _j4503++) {
short _f4504 = T815::_m16876(_t11567);
if (_f4504 == 0) {
const char* _g4505 = T815::_m16877(_t11567);
_k12357->setStoreId(_g4505);
delete _g4505;
continue;
}
if (_f4504 == 2) {
_k12357->setEmitter((NPlayer*)T815::_m16617(this, _t11567));
continue;
}
if (_f4504 == 3) {
const char* _l4506 = T815::_m16877(_t11567);
_k12357->setReceiverId(_l4506);
delete _l4506;
continue;
}
if (_f4504 == 4) {
const char* _p4507 = T815::_m16877(_t11567);
_k12357->setCustomMessage(_p4507);
delete _p4507;
continue;
}
if (_f4504 == 5) {
_k12357->setFriendDemandStatus((NFriendDemandStatus*)T815::_m16617(this, _t11567));
continue;
}
if (_f4504 == 6) {
const char* _n4508 = T815::_m16877(_t11567);
_k12357->setId(_n4508);
delete _n4508;
continue;
}
T815::_m16878(_t11567);
}
return _k12357;
}

Serializable* T819::_m16695(T817* buff) {
NScore* _p12366 = new NScore();
short _s4510 = T815::_m16876(buff);
for (unsigned int _i4511 = 0; _i4511 < (unsigned int)_s4510; _i4511++) {
short _i4512 = T815::_m16876(buff);
if (_i4512 == 0) {
const char* _v4513 = T815::_m16877(buff);
_p12366->setStoreId(_v4513);
delete _v4513;
continue;
}
if (_i4512 == 2) {
_p12366->setValue(T815::_m16880(buff));
continue;
}
T815::_m16878(buff);
}
return _p12366;
}

Serializable* T819::_m16696(T817* _u11573) {
NRoom* _v12372 = new NRoom();
short _r11575 = T815::_m16876(_u11573);
for (unsigned int _e4516 = 0; _e4516 < (unsigned int)_r11575; _e4516++) {
short _d4517 = T815::_m16876(_u11573);
if (_d4517 == 0) {
const char* _j4518 = T815::_m16877(_u11573);
_v12372->setStoreId(_j4518);
delete _j4518;
continue;
}
if (_d4517 == 2) {
const char* _f4519 = T815::_m16877(_u11573);
_v12372->setId(_f4519);
delete _f4519;
continue;
}
if (_d4517 == 3) {
const char* _v4520 = T815::_m16877(_u11573);
_v12372->setName(_v4520);
delete _v4520;
continue;
}
if (_d4517 == 4) {
std::vector<NPlayer*>* _g12379 = 0;
unsigned char _x12380 = _u11573->_m16314();
if (_x12380 != T809::_g15500) {
_u11573->_m16315();
int _e12381 = _u11573->_m16316();
_g12379 = new std::vector<NPlayer*>();
for (unsigned int _w4524 = 0; _w4524 < (unsigned int)_e12381; _w4524++) {
_g12379->push_back((NPlayer*)T815::_m16617(this, _u11573));
}
}
_v12372->setPlayers(_g12379);
continue;
}
T815::_m16878(_u11573);
}
return _v12372;
}

Serializable* T819::_m16697(T817* _u11579) {
NGame* _f12384 = new NGame();
short _d4526 = T815::_m16876(_u11579);
for (unsigned int _k4527 = 0; _k4527 < (unsigned int)_d4526; _k4527++) {
short _d4528 = T815::_m16876(_u11579);
if (_d4528 == 0) {
const char* _j4529 = T815::_m16877(_u11579);
_f12384->setStoreId(_j4529);
delete _j4529;
continue;
}
if (_d4528 == 2) {
const char* _z4530 = T815::_m16877(_u11579);
_f12384->setId(_z4530);
delete _z4530;
continue;
}
if (_d4528 == 3) {
const char* _k4531 = T815::_m16877(_u11579);
_f12384->setName(_k4531);
delete _k4531;
continue;
}
if (_d4528 == 4) {
std::vector<NPlayer*>* _f12391 = 0;
unsigned char _w12392 = _u11579->_m16314();
if (_w12392 != T809::_g15500) {
_u11579->_m16315();
int _z12393 = _u11579->_m16316();
_f12391 = new std::vector<NPlayer*>();
for (unsigned int _o4535 = 0; _o4535 < (unsigned int)_z12393; _o4535++) {
_f12391->push_back((NPlayer*)T815::_m16617(this, _u11579));
}
}
_f12384->setPlayers(_f12391);
continue;
}
if (_d4528 == 2502) {
_f12384->setGameRunningState((GameRunningState*)T815::_m16617(this, _u11579));
continue;
}
if (_d4528 == 2503) {
_f12384->setGameCharacteristics((NGameCharacteristics*)T815::_m16617(this, _u11579));
continue;
}
if (_d4528 == 2504) {
_f12384->setGameState((NGameState*)T815::_m16617(this, _u11579));
continue;
}
if (_d4528 == 2505) {
_f12384->setMatchMakingConditions((NMatchMakingConditions*)T815::_m16617(this, _u11579));
continue;
}
if (_d4528 == 2506) {
_f12384->setTurnBasedContext((TurnBasedContext*)T815::_m16617(this, _u11579));
continue;
}
if (_d4528 == 2507) {
_f12384->setDisconnectedContext((DisconnectedContext*)T815::_m16617(this, _u11579));
continue;
}
if (_d4528 == 2508) {
_f12384->setOwner((NPlayer*)T815::_m16617(this, _u11579));
continue;
}
T815::_m16878(_u11579);
}
return _f12384;
}

Serializable* T819::_m16698(T817* buff) {
NGameCharacteristics* _d12396 = new NGameCharacteristics();
short _u11581 = T815::_m16876(buff);
for (unsigned int _q4538 = 0; _q4538 < (unsigned int)_u11581; _q4538++) {
short _p4539 = T815::_m16876(buff);
if (_p4539 == 0) {
const char* _h4540 = T815::_m16877(buff);
_d12396->setStoreId(_h4540);
delete _h4540;
continue;
}
if (_p4539 == 2) {
_d12396->setMinPlayer(T815::_m16875(buff));
continue;
}
if (_p4539 == 3) {
_d12396->setMaxPlayer(T815::_m16875(buff));
continue;
}
if (_p4539 == 4) {
_d12396->setAutoStop(T815::_m16879(buff));
continue;
}
if (_p4539 == 5) {
_d12396->setAutoStart(T815::_m16879(buff));
continue;
}
T815::_m16878(buff);
}
return _d12396;
}

Serializable* T819::_m16699(T817* buff) {
PlayerEnterGame* _d12402 = new PlayerEnterGame();
short _e4542 = T815::_m16876(buff);
for (unsigned int _c4543 = 0; _c4543 < (unsigned int)_e4542; _c4543++) {
short _p4544 = T815::_m16876(buff);
if (_p4544 == 0) {
const char* _q4545 = T815::_m16877(buff);
_d12402->setMessageId(_q4545);
delete _q4545;
continue;
}
if (_p4544 == 1) {
const char* _y4546 = T815::_m16877(buff);
_d12402->setRequestId(_y4546);
delete _y4546;
continue;
}
if (_p4544 == 3) {
const char* _e4547 = T815::_m16877(buff);
_d12402->setGameId(_e4547);
delete _e4547;
continue;
}
if (_p4544 == 4) {
_d12402->setPlayer((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _d12402;
}

Serializable* T819::_m16700(T817* _v11585) {
AdminPublicMessage* _n12410 = new AdminPublicMessage();
short _i11587 = T815::_m16876(_v11585);
for (unsigned int _t4550 = 0; _t4550 < (unsigned int)_i11587; _t4550++) {
short _q4551 = T815::_m16876(_v11585);
if (_q4551 == 0) {
const char* _n4552 = T815::_m16877(_v11585);
_n12410->setMessageId(_n4552);
delete _n4552;
continue;
}
if (_q4551 == 1) {
const char* _a4553 = T815::_m16877(_v11585);
_n12410->setRequestId(_a4553);
delete _a4553;
continue;
}
if (_q4551 == 4) {
const char* _x4554 = T815::_m16877(_v11585);
_n12410->setPlayerId(_x4554);
delete _x4554;
continue;
}
if (_q4551 == 5) {
const char* _r4555 = T815::_m16877(_v11585);
_n12410->setMessage(_r4555);
delete _r4555;
continue;
}
T815::_m16878(_v11585);
}
return _n12410;
}

Serializable* T819::_m16701(T817* buff) {
FriendshipNotification* _h12419 = new FriendshipNotification();
short _z4557 = T815::_m16876(buff);
for (unsigned int _b4558 = 0; _b4558 < (unsigned int)_z4557; _b4558++) {
short _c4559 = T815::_m16876(buff);
if (_c4559 == 0) {
const char* _b4560 = T815::_m16877(buff);
_h12419->setMessageId(_b4560);
delete _b4560;
continue;
}
if (_c4559 == 1) {
const char* _w4561 = T815::_m16877(buff);
_h12419->setRequestId(_w4561);
delete _w4561;
continue;
}
if (_c4559 == 4) {
_h12419->setFriend((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _h12419;
}

Serializable* T819::_m16702(T817* buff) {
PlayerUnjoinGame* _y12426 = new PlayerUnjoinGame();
short _s4563 = T815::_m16876(buff);
for (unsigned int _a4564 = 0; _a4564 < (unsigned int)_s4563; _a4564++) {
short _q4565 = T815::_m16876(buff);
if (_q4565 == 0) {
const char* _g4566 = T815::_m16877(buff);
_y12426->setMessageId(_g4566);
delete _g4566;
continue;
}
if (_q4565 == 1) {
const char* _a4567 = T815::_m16877(buff);
_y12426->setRequestId(_a4567);
delete _a4567;
continue;
}
if (_q4565 == 3) {
const char* _f4568 = T815::_m16877(buff);
_y12426->setGameId(_f4568);
delete _f4568;
continue;
}
if (_q4565 == 4) {
_y12426->setPlayer((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _y12426;
}

Serializable* T819::_m16703(T817* _y11591) {
DnsRequest* _z12434 = new DnsRequest();
short _m11593 = T815::_m16876(_y11591);
for (unsigned int _u4571 = 0; _u4571 < (unsigned int)_m11593; _u4571++) {
short _j4572 = T815::_m16876(_y11591);
if (_j4572 == 0) {
const char* _z4573 = T815::_m16877(_y11591);
_z12434->setMessageId(_z4573);
delete _z4573;
continue;
}
if (_j4572 == 1) {
const char* _p4574 = T815::_m16877(_y11591);
_z12434->setRequestId(_p4574);
delete _p4574;
continue;
}
if (_j4572 == 3) {
const char* _j4575 = T815::_m16877(_y11591);
_z12434->setGameId(_j4575);
delete _j4575;
continue;
}
if (_j4572 == 4) {
_z12434->setGameVersion(T815::_m16875(_y11591));
continue;
}
if (_j4572 == 5) {
_z12434->setGameDeployedVersion(T815::_m16875(_y11591));
continue;
}
if (_j4572 == 6) {
const char* _z4576 = T815::_m16877(_y11591);
_z12434->setPlatform(_z4576);
delete _z4576;
continue;
}
T815::_m16878(_y11591);
}
return _z12434;
}

Serializable* T819::_m16704(T817* _i11597) {
DnsResponse* _g12443 = new DnsResponse();
short _o4578 = T815::_m16876(_i11597);
for (unsigned int _m4579 = 0; _m4579 < (unsigned int)_o4578; _m4579++) {
short _s4580 = T815::_m16876(_i11597);
if (_s4580 == 0) {
const char* _d4581 = T815::_m16877(_i11597);
_g12443->setMessageId(_d4581);
delete _d4581;
continue;
}
if (_s4580 == 1) {
const char* _j4582 = T815::_m16877(_i11597);
_g12443->setRequestId(_j4582);
delete _j4582;
continue;
}
if (_s4580 == 3) {
const char* _f4583 = T815::_m16877(_i11597);
_g12443->setIpAddress(_f4583);
delete _f4583;
continue;
}
if (_s4580 == 4) {
_g12443->setTcpPort(T815::_m16875(_i11597));
continue;
}
if (_s4580 == 5) {
_g12443->setDnsStatus((DnsStatus*)T815::_m16617(this, _i11597));
continue;
}
if (_s4580 == 6) {
_g12443->setStartDetails((StartDetails*)T815::_m16617(this, _i11597));
continue;
}
T815::_m16878(_i11597);
}
return _g12443;
}

Serializable* T819::_m16705(T817* buff) {
ConnectionLost* _n12451 = new ConnectionLost();
short _q11599 = T815::_m16876(buff);
for (unsigned int _t4586 = 0; _t4586 < (unsigned int)_q11599; _t4586++) {
short _a4587 = T815::_m16876(buff);
if (_a4587 == 0) {
const char* _h4588 = T815::_m16877(buff);
_n12451->setMessageId(_h4588);
delete _h4588;
continue;
}
if (_a4587 == 1) {
const char* _s4589 = T815::_m16877(buff);
_n12451->setRequestId(_s4589);
delete _s4589;
continue;
}
T815::_m16878(buff);
}
return _n12451;
}

Serializable* T819::_m16706(T817* buff) {
NWorldUpdate* _m12458 = new NWorldUpdate();
short _v4591 = T815::_m16876(buff);
for (unsigned int _v4592 = 0; _v4592 < (unsigned int)_v4591; _v4592++) {
short _y4593 = T815::_m16876(buff);
if (_y4593 == 0) {
const char* _j4594 = T815::_m16877(buff);
_m12458->setStoreId(_j4594);
delete _j4594;
continue;
}
if (_y4593 == 2) {
_m12458->setUpdate(T815::_m16875(buff));
continue;
}
if (_y4593 == 3) {
std::vector<Message*>* _m12463 = 0;
unsigned char _r12464 = buff->_m16314();
if (_r12464 != T809::_g15500) {
buff->_m16315();
int _h12465 = buff->_m16316();
_m12463 = new std::vector<Message*>();
for (unsigned int _g4598 = 0; _g4598 < (unsigned int)_h12465; _g4598++) {
_m12463->push_back((Message*)T815::_m16617(this, buff));
}
}
_m12458->setValues(_m12463);
continue;
}
T815::_m16878(buff);
}
return _m12458;
}

Serializable* T819::_m16707(T817* _y11603) {
StopPlugConnectionRequest* _q12468 = new StopPlugConnectionRequest();
short _z11605 = T815::_m16876(_y11603);
for (unsigned int _u4601 = 0; _u4601 < (unsigned int)_z11605; _u4601++) {
short _f4602 = T815::_m16876(_y11603);
if (_f4602 == 0) {
const char* _v4603 = T815::_m16877(_y11603);
_q12468->setMessageId(_v4603);
delete _v4603;
continue;
}
if (_f4602 == 1) {
const char* _d4604 = T815::_m16877(_y11603);
_q12468->setRequestId(_d4604);
delete _d4604;
continue;
}
T815::_m16878(_y11603);
}
return _q12468;
}

Serializable* T819::_m16708(T817* buff) {
StopPlugConnectionResponse* _n12475 = new StopPlugConnectionResponse();
short _g4606 = T815::_m16876(buff);
for (unsigned int _a4607 = 0; _a4607 < (unsigned int)_g4606; _a4607++) {
short _c4608 = T815::_m16876(buff);
if (_c4608 == 0) {
const char* _i4609 = T815::_m16877(buff);
_n12475->setMessageId(_i4609);
delete _i4609;
continue;
}
if (_c4608 == 1) {
const char* _y4610 = T815::_m16877(buff);
_n12475->setRequestId(_y4610);
delete _y4610;
continue;
}
T815::_m16878(buff);
}
return _n12475;
}

Serializable* T819::_m16709(T817* buff) {
ConnectionInterrupted* _f12482 = new ConnectionInterrupted();
short _j4612 = T815::_m16876(buff);
for (unsigned int _p4613 = 0; _p4613 < (unsigned int)_j4612; _p4613++) {
short _p4614 = T815::_m16876(buff);
if (_p4614 == 0) {
const char* _m4615 = T815::_m16877(buff);
_f12482->setMessageId(_m4615);
delete _m4615;
continue;
}
if (_p4614 == 1) {
const char* _p4616 = T815::_m16877(buff);
_f12482->setRequestId(_p4616);
delete _p4616;
continue;
}
T815::_m16878(buff);
}
return _f12482;
}

Serializable* T819::_m16710(T817* buff) {
ConnectionResumed* _b12489 = new ConnectionResumed();
short _m4618 = T815::_m16876(buff);
for (unsigned int _y4619 = 0; _y4619 < (unsigned int)_m4618; _y4619++) {
short _h4620 = T815::_m16876(buff);
if (_h4620 == 0) {
const char* _b4621 = T815::_m16877(buff);
_b12489->setMessageId(_b4621);
delete _b4621;
continue;
}
if (_h4620 == 1) {
const char* _i4622 = T815::_m16877(buff);
_b12489->setRequestId(_i4622);
delete _i4622;
continue;
}
T815::_m16878(buff);
}
return _b12489;
}

Serializable* T819::_m16711(T817* buff) {
ConnectionStop* _d12496 = new ConnectionStop();
short _s4624 = T815::_m16876(buff);
for (unsigned int _b4625 = 0; _b4625 < (unsigned int)_s4624; _b4625++) {
short _s4626 = T815::_m16876(buff);
if (_s4626 == 0) {
const char* _l4627 = T815::_m16877(buff);
_d12496->setMessageId(_l4627);
delete _l4627;
continue;
}
if (_s4626 == 1) {
const char* _l4628 = T815::_m16877(buff);
_d12496->setRequestId(_l4628);
delete _l4628;
continue;
}
T815::_m16878(buff);
}
return _d12496;
}

Serializable* T819::_m16712(T817* _q11609) {
NuggetaQuery* _o12503 = new NuggetaQuery();
short _r11611 = T815::_m16876(_q11609);
for (unsigned int _y4631 = 0; _y4631 < (unsigned int)_r11611; _y4631++) {
short _t4632 = T815::_m16876(_q11609);
if (_t4632 == 0) {
const char* _h4633 = T815::_m16877(_q11609);
_o12503->setDomain(_h4633);
delete _h4633;
continue;
}
if (_t4632 == 1) {
_o12503->setStart(T815::_m16875(_q11609));
continue;
}
if (_t4632 == 2) {
_o12503->setLimit(T815::_m16875(_q11609));
continue;
}
if (_t4632 == 3) {
const char* _q4634 = T815::_m16877(_q11609);
_o12503->setQuery(_q4634);
delete _q4634;
continue;
}
T815::_m16878(_q11609);
}
return _o12503;
}

Serializable* T819::_m16713(T817* buff) {
FriendConnectedNotification* _n12510 = new FriendConnectedNotification();
short _c4636 = T815::_m16876(buff);
for (unsigned int _p4637 = 0; _p4637 < (unsigned int)_c4636; _p4637++) {
short _u4638 = T815::_m16876(buff);
if (_u4638 == 0) {
const char* _p4639 = T815::_m16877(buff);
_n12510->setMessageId(_p4639);
delete _p4639;
continue;
}
if (_u4638 == 1) {
const char* _f4640 = T815::_m16877(buff);
_n12510->setRequestId(_f4640);
delete _f4640;
continue;
}
if (_u4638 == 3) {
_n12510->setFriend((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _n12510;
}

Serializable* T819::_m16714(T817* buff) {
FriendDisconnectedNotification* _g12517 = new FriendDisconnectedNotification();
short _t4642 = T815::_m16876(buff);
for (unsigned int _o4643 = 0; _o4643 < (unsigned int)_t4642; _o4643++) {
short _o4644 = T815::_m16876(buff);
if (_o4644 == 0) {
const char* _e4645 = T815::_m16877(buff);
_g12517->setMessageId(_e4645);
delete _e4645;
continue;
}
if (_o4644 == 1) {
const char* _t4646 = T815::_m16877(buff);
_g12517->setRequestId(_t4646);
delete _t4646;
continue;
}
if (_o4644 == 3) {
_g12517->setFriend((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _g12517;
}

Serializable* T819::_m16715(T817* buff) {
NPlayerWallet* _k12524 = new NPlayerWallet();
short _e4648 = T815::_m16876(buff);
for (unsigned int _d4649 = 0; _d4649 < (unsigned int)_e4648; _d4649++) {
short _b4650 = T815::_m16876(buff);
if (_b4650 == 0) {
const char* _d4651 = T815::_m16877(buff);
_k12524->setStoreId(_d4651);
delete _d4651;
continue;
}
if (_b4650 == 3) {
_k12524->setNbCoins(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _k12524;
}

Serializable* T819::_m16716(T817* _z11615) {
NItem* _f12530 = new NItem();
short _m11617 = T815::_m16876(_z11615);
for (unsigned int _c4654 = 0; _c4654 < (unsigned int)_m11617; _c4654++) {
short _e4655 = T815::_m16876(_z11615);
if (_e4655 == 0) {
const char* _o4656 = T815::_m16877(_z11615);
_f12530->setStoreId(_o4656);
delete _o4656;
continue;
}
if (_e4655 == 2) {
const char* _d4657 = T815::_m16877(_z11615);
_f12530->setId(_d4657);
delete _d4657;
continue;
}
if (_e4655 == 3) {
const char* _j4658 = T815::_m16877(_z11615);
_f12530->setName(_j4658);
delete _j4658;
continue;
}
if (_e4655 == 4) {
_f12530->setPrice(T815::_m16875(_z11615));
continue;
}
if (_e4655 == 5) {
_f12530->setBought(T815::_m16879(_z11615));
continue;
}
if (_e4655 == 6) {
_f12530->setCount(T815::_m16875(_z11615));
continue;
}
T815::_m16878(_z11615);
}
return _f12530;
}

Serializable* T819::_m16717(T817* buff) {
NAchievement* _h12538 = new NAchievement();
short _u4660 = T815::_m16876(buff);
for (unsigned int _l4661 = 0; _l4661 < (unsigned int)_u4660; _l4661++) {
short _v4662 = T815::_m16876(buff);
if (_v4662 == 0) {
const char* _y4663 = T815::_m16877(buff);
_h12538->setStoreId(_y4663);
delete _y4663;
continue;
}
if (_v4662 == 2) {
const char* _b4664 = T815::_m16877(buff);
_h12538->setId(_b4664);
delete _b4664;
continue;
}
if (_v4662 == 3) {
const char* _q4665 = T815::_m16877(buff);
_h12538->setName(_q4665);
delete _q4665;
continue;
}
if (_v4662 == 4) {
_h12538->setAchieved(T815::_m16879(buff));
continue;
}
if (_v4662 == 6) {
const char* _f4666 = T815::_m16877(buff);
_h12538->setDescription(_f4666);
delete _f4666;
continue;
}
if (_v4662 == 7) {
_h12538->setNXP(T815::_m16875(buff));
continue;
}
if (_v4662 == 8) {
_h12538->setNEnergy(T815::_m16875(buff));
continue;
}
if (_v4662 == 9) {
_h12538->setType((NAchievementType*)T815::_m16617(this, buff));
continue;
}
if (_v4662 == 10) {
_h12538->setGoal(T815::_m16875(buff));
continue;
}
if (_v4662 == 11) {
_h12538->setProgress(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _h12538;
}

Serializable* T819::_m16718(T817* _v11621) {
NGameState* _i12547 = new NGameState();
short _e11623 = T815::_m16876(_v11621);
for (unsigned int _p4669 = 0; _p4669 < (unsigned int)_e11623; _p4669++) {
short _d4670 = T815::_m16876(_v11621);
if (_d4670 == 0) {
const char* _t4671 = T815::_m16877(_v11621);
_i12547->setStoreId(_t4671);
delete _t4671;
continue;
}
if (_d4670 == 2) {
std::vector<NWorldUpdate*>* _n12552 = 0;
unsigned char _s12553 = _v11621->_m16314();
if (_s12553 != T809::_g15500) {
_v11621->_m16315();
int _v12554 = _v11621->_m16316();
_n12552 = new std::vector<NWorldUpdate*>();
for (unsigned int _r4675 = 0; _r4675 < (unsigned int)_v12554; _r4675++) {
_n12552->push_back((NWorldUpdate*)T815::_m16617(this, _v11621));
}
}
_i12547->setUpdates(_n12552);
continue;
}
T815::_m16878(_v11621);
}
return _i12547;
}

Serializable* T819::_m16719(T817* buff) {
NuggetaException* _l12557 = new NuggetaException();
short _x4677 = T815::_m16876(buff);
for (unsigned int _w4678 = 0; _w4678 < (unsigned int)_x4677; _w4678++) {
short _l4679 = T815::_m16876(buff);
if (_l4679 == 0) {
const char* _w4680 = T815::_m16877(buff);
_l12557->setMessageId(_w4680);
delete _w4680;
continue;
}
if (_l4679 == 1) {
const char* _p4681 = T815::_m16877(buff);
_l12557->setRequestId(_p4681);
delete _p4681;
continue;
}
if (_l4679 == 3) {
_l12557->setErrorCode((ErrorCode*)T815::_m16617(this, buff));
continue;
}
if (_l4679 == 4) {
const char* _e4682 = T815::_m16877(buff);
_l12557->setReason(_e4682);
delete _e4682;
continue;
}
T815::_m16878(buff);
}
return _l12557;
}

Serializable* T819::_m16720(T817* buff) {
NCoinPackage* _o12565 = new NCoinPackage();
short _c4684 = T815::_m16876(buff);
for (unsigned int _d4685 = 0; _d4685 < (unsigned int)_c4684; _d4685++) {
short _x4686 = T815::_m16876(buff);
if (_x4686 == 0) {
const char* _s4687 = T815::_m16877(buff);
_o12565->setStoreId(_s4687);
delete _s4687;
continue;
}
if (_x4686 == 2) {
const char* _v4688 = T815::_m16877(buff);
_o12565->setCoinPackageId(_v4688);
delete _v4688;
continue;
}
if (_x4686 == 3) {
_o12565->setVirtualValue(T815::_m16881(buff));
continue;
}
if (_x4686 == 4) {
const char* _n4689 = T815::_m16877(buff);
_o12565->setProductId(_n4689);
delete _n4689;
continue;
}
T815::_m16878(buff);
}
return _o12565;
}

Serializable* T819::_m16721(T817* buff) {
BuyProductUrl* _n12573 = new BuyProductUrl();
short _c4691 = T815::_m16876(buff);
for (unsigned int _x4692 = 0; _x4692 < (unsigned int)_c4691; _x4692++) {
short _d4693 = T815::_m16876(buff);
if (_d4693 == 0) {
const char* _l4694 = T815::_m16877(buff);
_n12573->setMessageId(_l4694);
delete _l4694;
continue;
}
if (_d4693 == 1) {
const char* _j4695 = T815::_m16877(buff);
_n12573->setRequestId(_j4695);
delete _j4695;
continue;
}
if (_d4693 == 3) {
const char* _y4696 = T815::_m16877(buff);
_n12573->setUrl(_y4696);
delete _y4696;
continue;
}
T815::_m16878(buff);
}
return _n12573;
}

Serializable* T819::_m16722(T817* _k11627) {
BuyProductNotification* _t12581 = new BuyProductNotification();
short _i4698 = T815::_m16876(_k11627);
for (unsigned int _m4699 = 0; _m4699 < (unsigned int)_i4698; _m4699++) {
short _s4700 = T815::_m16876(_k11627);
if (_s4700 == 0) {
const char* _y4701 = T815::_m16877(_k11627);
_t12581->setMessageId(_y4701);
delete _y4701;
continue;
}
if (_s4700 == 1) {
const char* _n4702 = T815::_m16877(_k11627);
_t12581->setRequestId(_n4702);
delete _n4702;
continue;
}
T815::_m16878(_k11627);
}
return _t12581;
}

Serializable* T819::_m16723(T817* buff) {
NMatchMakingConditions* _o12588 = new NMatchMakingConditions();
short _i11629 = T815::_m16876(buff);
for (unsigned int _m4705 = 0; _m4705 < (unsigned int)_i11629; _m4705++) {
short _b4706 = T815::_m16876(buff);
if (_b4706 == 0) {
const char* _x4707 = T815::_m16877(buff);
_o12588->setStoreId(_x4707);
delete _x4707;
continue;
}
if (_b4706 == 2) {
_o12588->setMatchMakingType((MatchMakingType*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _o12588;
}

Serializable* T819::_m16724(T817* buff) {
OpenConnection* _e12594 = new OpenConnection();
short _n4709 = T815::_m16876(buff);
for (unsigned int _p4710 = 0; _p4710 < (unsigned int)_n4709; _p4710++) {
short _j4711 = T815::_m16876(buff);
if (_j4711 == 0) {
const char* _p4712 = T815::_m16877(buff);
_e12594->setMessageId(_p4712);
delete _p4712;
continue;
}
if (_j4711 == 1) {
const char* _l4713 = T815::_m16877(buff);
_e12594->setRequestId(_l4713);
delete _l4713;
continue;
}
if (_j4711 == 3) {
const char* _o4714 = T815::_m16877(buff);
_e12594->setIpAddress(_o4714);
delete _o4714;
continue;
}
if (_j4711 == 4) {
_e12594->setTcpPort(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _e12594;
}

Serializable* T819::_m16725(T817* buff) {
PlayerMessage* _w12602 = new PlayerMessage();
short _c4716 = T815::_m16876(buff);
for (unsigned int _o4717 = 0; _o4717 < (unsigned int)_c4716; _o4717++) {
short _m4718 = T815::_m16876(buff);
if (_m4718 == 0) {
const char* _h4719 = T815::_m16877(buff);
_w12602->setMessageId(_h4719);
delete _h4719;
continue;
}
if (_m4718 == 1) {
const char* _s4720 = T815::_m16877(buff);
_w12602->setStoreId(_s4720);
delete _s4720;
continue;
}
if (_m4718 == 6) {
const char* _d4721 = T815::_m16877(buff);
_w12602->setRequestId(_d4721);
delete _d4721;
continue;
}
if (_m4718 == 9) {
const char* _l4722 = T815::_m16877(buff);
_w12602->setPlayerId(_l4722);
delete _l4722;
continue;
}
if (_m4718 == 10) {
_w12602->setMessage((Message*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _w12602;
}

Serializable* T819::_m16726(T817* _o11633) {
NRawMessage* _n12611 = new NRawMessage();
short _e11635 = T815::_m16876(_o11633);
for (unsigned int _t4725 = 0; _t4725 < (unsigned int)_e11635; _t4725++) {
short _m4726 = T815::_m16876(_o11633);
if (_m4726 == 0) {
const char* _g4727 = T815::_m16877(_o11633);
_n12611->setMessageId(_g4727);
delete _g4727;
continue;
}
if (_m4726 == 1) {
const char* _y4728 = T815::_m16877(_o11633);
_n12611->setSenderId(_y4728);
delete _y4728;
continue;
}
if (_m4726 == 2) {
const char* _n4729 = T815::_m16877(_o11633);
_n12611->setStoreId(_n4729);
delete _n4729;
continue;
}
if (_m4726 == 7) {
const char* _b4730 = T815::_m16877(_o11633);
_n12611->setRequestId(_b4730);
delete _b4730;
continue;
}
if (_m4726 == 10) {
const char* _r12619 = T815::_m16877(_o11633);
_n12611->setGameId(_r12619);
delete _r12619;
continue;
}
if (_m4726 == 11) {
const char* _h12620 = T815::_m16877(_o11633);
_n12611->setContent(_h12620);
delete _h12620;
continue;
}
T815::_m16878(_o11633);
}
return _n12611;
}

Serializable* T819::_m16727(T817* buff) {
SessionExpired* _j12622 = new SessionExpired();
short _z4734 = T815::_m16876(buff);
for (unsigned int _v4735 = 0; _v4735 < (unsigned int)_z4734; _v4735++) {
short _w4736 = T815::_m16876(buff);
if (_w4736 == 0) {
const char* _b4737 = T815::_m16877(buff);
_j12622->setMessageId(_b4737);
delete _b4737;
continue;
}
if (_w4736 == 1) {
const char* _i4738 = T815::_m16877(buff);
_j12622->setRequestId(_i4738);
delete _i4738;
continue;
}
if (_w4736 == 3) {
const char* _s4739 = T815::_m16877(buff);
_j12622->setSessionId(_s4739);
delete _s4739;
continue;
}
T815::_m16878(buff);
}
return _j12622;
}

Serializable* T819::_m16728(T817* buff) {
GameMessageError* _h12630 = new GameMessageError();
short _r4741 = T815::_m16876(buff);
for (unsigned int _j4742 = 0; _j4742 < (unsigned int)_r4741; _j4742++) {
short _i4743 = T815::_m16876(buff);
if (_i4743 == 0) {
const char* _r4744 = T815::_m16877(buff);
_h12630->setMessageId(_r4744);
delete _r4744;
continue;
}
if (_i4743 == 1) {
const char* _b4745 = T815::_m16877(buff);
_h12630->setRequestId(_b4745);
delete _b4745;
continue;
}
if (_i4743 == 3) {
const char* _f4746 = T815::_m16877(buff);
_h12630->setReason(_f4746);
delete _f4746;
continue;
}
T815::_m16878(buff);
}
return _h12630;
}

Serializable* T819::_m16729(T817* buff) {
AdDisplayedNotification* _h12638 = new AdDisplayedNotification();
short _y4748 = T815::_m16876(buff);
for (unsigned int _v4749 = 0; _v4749 < (unsigned int)_y4748; _v4749++) {
short _t4750 = T815::_m16876(buff);
if (_t4750 == 0) {
const char* _w4751 = T815::_m16877(buff);
_h12638->setMessageId(_w4751);
delete _w4751;
continue;
}
if (_t4750 == 1) {
const char* _s4752 = T815::_m16877(buff);
_h12638->setRequestId(_s4752);
delete _s4752;
continue;
}
T815::_m16878(buff);
}
return _h12638;
}

Serializable* T819::_m16730(T817* _d11639) {
NPlayerProfile* _h12645 = new NPlayerProfile();
short _n11641 = T815::_m16876(_d11639);
for (unsigned int _g4755 = 0; _g4755 < (unsigned int)_n11641; _g4755++) {
short _s4756 = T815::_m16876(_d11639);
if (_s4756 == 0) {
const char* _o4757 = T815::_m16877(_d11639);
_h12645->setStoreId(_o4757);
delete _o4757;
continue;
}
if (_s4756 == 2) {
const char* _x4758 = T815::_m16877(_d11639);
_h12645->setAvatar(_x4758);
delete _x4758;
continue;
}
if (_s4756 == 3) {
const char* _o4759 = T815::_m16877(_d11639);
_h12645->setPlayerId(_o4759);
delete _o4759;
continue;
}
if (_s4756 == 5) {
const char* _a4760 = T815::_m16877(_d11639);
_h12645->setCountry(_a4760);
delete _a4760;
continue;
}
if (_s4756 == 9) {
_h12645->setNXP(T815::_m16875(_d11639));
continue;
}
if (_s4756 == 10) {
_h12645->setNEnergy(T815::_m16875(_d11639));
continue;
}
if (_s4756 == 13) {
_h12645->setNLevel((NuggetaLevel*)T815::_m16617(this, _d11639));
continue;
}
T815::_m16878(_d11639);
}
return _h12645;
}

Serializable* T819::_m16731(T817* buff) {
FriendDemandNotification* _s12654 = new FriendDemandNotification();
short _q4762 = T815::_m16876(buff);
for (unsigned int _l4763 = 0; _l4763 < (unsigned int)_q4762; _l4763++) {
short _t4764 = T815::_m16876(buff);
if (_t4764 == 0) {
const char* _x4765 = T815::_m16877(buff);
_s12654->setMessageId(_x4765);
delete _x4765;
continue;
}
if (_t4764 == 1) {
const char* _e4766 = T815::_m16877(buff);
_s12654->setRequestId(_e4766);
delete _e4766;
continue;
}
if (_t4764 == 3) {
_s12654->setFriendDemand((NFriendDemand*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _s12654;
}

Serializable* T819::_m16732(T817* _f11645) {
GameChatNotification* _p12661 = new GameChatNotification();
short _l11647 = T815::_m16876(_f11645);
for (unsigned int _u4769 = 0; _u4769 < (unsigned int)_l11647; _u4769++) {
short _v4770 = T815::_m16876(_f11645);
if (_v4770 == 0) {
const char* _m4771 = T815::_m16877(_f11645);
_p12661->setMessageId(_m4771);
delete _m4771;
continue;
}
if (_v4770 == 1) {
const char* _b4772 = T815::_m16877(_f11645);
_p12661->setRequestId(_b4772);
delete _b4772;
continue;
}
if (_v4770 == 3) {
_p12661->setPlayer((NPlayer*)T815::_m16617(this, _f11645));
continue;
}
if (_v4770 == 4) {
const char* _i4773 = T815::_m16877(_f11645);
_p12661->setMessage(_i4773);
delete _i4773;
continue;
}
T815::_m16878(_f11645);
}
return _p12661;
}

Serializable* T819::_m16733(T817* buff) {
PublicServer* _v12669 = new PublicServer();
short _j4775 = T815::_m16876(buff);
for (unsigned int _o4776 = 0; _o4776 < (unsigned int)_j4775; _o4776++) {
short _k4777 = T815::_m16876(buff);
if (_k4777 == 0) {
const char* _x4778 = T815::_m16877(buff);
_v12669->setStoreId(_x4778);
delete _x4778;
continue;
}
if (_k4777 == 3) {
const char* _x4779 = T815::_m16877(buff);
_v12669->setId(_x4779);
delete _x4779;
continue;
}
if (_k4777 == 4) {
const char* _a4780 = T815::_m16877(buff);
_v12669->setLocation(_a4780);
delete _a4780;
continue;
}
if (_k4777 == 5) {
_v12669->setPing(T815::_m16881(buff));
continue;
}
T815::_m16878(buff);
}
return _v12669;
}

Serializable* T819::_m16734(T817* _j11651) {
SwitchToServerInformation* _j12677 = new SwitchToServerInformation();
short _n11653 = T815::_m16876(_j11651);
for (unsigned int _f4783 = 0; _f4783 < (unsigned int)_n11653; _f4783++) {
short _k4784 = T815::_m16876(_j11651);
if (_k4784 == 0) {
const char* _c4785 = T815::_m16877(_j11651);
_j12677->setMessageId(_c4785);
delete _c4785;
continue;
}
if (_k4784 == 1) {
const char* _j4786 = T815::_m16877(_j11651);
_j12677->setRequestId(_j4786);
delete _j4786;
continue;
}
if (_k4784 == 3) {
const char* _u4787 = T815::_m16877(_j11651);
_j12677->setAddress(_u4787);
delete _u4787;
continue;
}
T815::_m16878(_j11651);
}
return _j12677;
}

Serializable* T819::_m16735(T817* buff) {
MyTurnNotification* _f12685 = new MyTurnNotification();
short _w4789 = T815::_m16876(buff);
for (unsigned int _e4790 = 0; _e4790 < (unsigned int)_w4789; _e4790++) {
short _o4791 = T815::_m16876(buff);
if (_o4791 == 0) {
const char* _s4792 = T815::_m16877(buff);
_f12685->setMessageId(_s4792);
delete _s4792;
continue;
}
if (_o4791 == 1) {
const char* _y4793 = T815::_m16877(buff);
_f12685->setRequestId(_y4793);
delete _y4793;
continue;
}
if (_o4791 == 3) {
const char* _g4794 = T815::_m16877(buff);
_f12685->setGameId(_g4794);
delete _g4794;
continue;
}
T815::_m16878(buff);
}
return _f12685;
}

Serializable* T819::_m16736(T817* buff) {
PlayerTurnNotification* _a12693 = new PlayerTurnNotification();
short _d4796 = T815::_m16876(buff);
for (unsigned int _z4797 = 0; _z4797 < (unsigned int)_d4796; _z4797++) {
short _q4798 = T815::_m16876(buff);
if (_q4798 == 0) {
const char* _u4799 = T815::_m16877(buff);
_a12693->setMessageId(_u4799);
delete _u4799;
continue;
}
if (_q4798 == 1) {
const char* _n4800 = T815::_m16877(buff);
_a12693->setRequestId(_n4800);
delete _n4800;
continue;
}
if (_q4798 == 3) {
_a12693->setCurrentPlayer((NPlayer*)T815::_m16617(this, buff));
continue;
}
if (_q4798 == 4) {
const char* _f4801 = T815::_m16877(buff);
_a12693->setGameId(_f4801);
delete _f4801;
continue;
}
T815::_m16878(buff);
}
return _a12693;
}

Serializable* T819::_m16737(T817* buff) {
NStore* _b12701 = new NStore();
short _a4803 = T815::_m16876(buff);
for (unsigned int _v4804 = 0; _v4804 < (unsigned int)_a4803; _v4804++) {
short _p4805 = T815::_m16876(buff);
if (_p4805 == 1) {
const char* _x4806 = T815::_m16877(buff);
_b12701->setStoreId(_x4806);
delete _x4806;
continue;
}
if (_p4805 == 2) {
std::vector<NItem*>* _v12706 = 0;
unsigned char _e12707 = buff->_m16314();
if (_e12707 != T809::_g15500) {
buff->_m16315();
int _z12708 = buff->_m16316();
_v12706 = new std::vector<NItem*>();
for (unsigned int _i4810 = 0; _i4810 < (unsigned int)_z12708; _i4810++) {
_v12706->push_back((NItem*)T815::_m16617(this, buff));
}
}
_b12701->setItems(_v12706);
continue;
}
T815::_m16878(buff);
}
return _b12701;
}

Serializable* T819::_m16738(T817* _l11657) {
NAchievementBoard* _h12711 = new NAchievementBoard();
short _i11659 = T815::_m16876(_l11657);
for (unsigned int _n4813 = 0; _n4813 < (unsigned int)_i11659; _n4813++) {
short _y4814 = T815::_m16876(_l11657);
if (_y4814 == 1) {
const char* _s4815 = T815::_m16877(_l11657);
_h12711->setStoreId(_s4815);
delete _s4815;
continue;
}
if (_y4814 == 2) {
std::vector<NAchievement*>* _o12716 = 0;
unsigned char _a12717 = _l11657->_m16314();
if (_a12717 != T809::_g15500) {
_l11657->_m16315();
int _q12718 = _l11657->_m16316();
_o12716 = new std::vector<NAchievement*>();
for (unsigned int _q4819 = 0; _q4819 < (unsigned int)_q12718; _q4819++) {
_o12716->push_back((NAchievement*)T815::_m16617(this, _l11657));
}
}
_h12711->setAchievements(_o12716);
continue;
}
T815::_m16878(_l11657);
}
return _h12711;
}

Serializable* T819::_m16739(T817* buff) {
NLeaderboard* _s12721 = new NLeaderboard();
short _j4821 = T815::_m16876(buff);
for (unsigned int _l4822 = 0; _l4822 < (unsigned int)_j4821; _l4822++) {
short _n4823 = T815::_m16876(buff);
if (_n4823 == 2) {
const char* _o4824 = T815::_m16877(buff);
_s12721->setId(_o4824);
delete _o4824;
continue;
}
if (_n4823 == 3) {
const char* _c4825 = T815::_m16877(buff);
_s12721->setName(_c4825);
delete _c4825;
continue;
}
if (_n4823 == 4) {
std::vector<NLeaderboardEntry*>* _m12727 = 0;
unsigned char _y12728 = buff->_m16314();
if (_y12728 != T809::_g15500) {
buff->_m16315();
int _c12729 = buff->_m16316();
_m12727 = new std::vector<NLeaderboardEntry*>();
for (unsigned int _m4829 = 0; _m4829 < (unsigned int)_c12729; _m4829++) {
_m12727->push_back((NLeaderboardEntry*)T815::_m16617(this, buff));
}
}
_s12721->setLeaderboardEntries(_m12727);
continue;
}
T815::_m16878(buff);
}
return _s12721;
}

Serializable* T819::_m16740(T817* _v11663) {
TestPrimitiveList* _s12732 = new TestPrimitiveList();
short _p11665 = T815::_m16876(_v11663);
for (unsigned int _e4832 = 0; _e4832 < (unsigned int)_p11665; _e4832++) {
short _v4833 = T815::_m16876(_v11663);
if (_v4833 == 0) {
const char* _l4834 = T815::_m16877(_v11663);
_s12732->setMessageId(_l4834);
delete _l4834;
continue;
}
if (_v4833 == 1) {
const char* _q4835 = T815::_m16877(_v11663);
_s12732->setRequestId(_q4835);
delete _q4835;
continue;
}
if (_v4833 == 3) {
std::vector<const char*>* _o12738 = T815::_m16882(this, _v11663);
_s12732->setStringList(_o12738);
continue;
}
if (_v4833 == 4) {
std::vector<int>* _v12739 = T815::_m16883(this, _v11663);
_s12732->setIntegerList(_v12739);
continue;
}
if (_v4833 == 5) {
std::vector<short>* _s12740 = T815::_m16884(this, _v11663);
_s12732->setShortList(_s12740);
continue;
}
if (_v4833 == 6) {
std::vector<long long>* _a12741 = T815::_m16885(this, _v11663);
_s12732->setLongList(_a12741);
continue;
}
if (_v4833 == 7) {
std::vector<float>* _p12742 = T815::_m16886(this, _v11663);
_s12732->setFloatList(_p12742);
continue;
}
if (_v4833 == 8) {
std::vector<double>* _d12743 = T815::_m16887(this, _v11663);
_s12732->setDoubleList(_d12743);
continue;
}
if (_v4833 == 9) {
std::vector<bool>* _u12744 = T815::_m16888(this, _v11663);
_s12732->setBooleanList(_u12744);
continue;
}
if (_v4833 == 14) {
_s12732->setPlayerMatrix2(T815::_m16889(this, _v11663));
continue;
}
T815::_m16878(_v11663);
}
return _s12732;
}

Serializable* T819::_m16741(T817* buff) {
OpenUrl* _z12746 = new OpenUrl();
short _s4844 = T815::_m16876(buff);
for (unsigned int _b4845 = 0; _b4845 < (unsigned int)_s4844; _b4845++) {
short _h4846 = T815::_m16876(buff);
if (_h4846 == 0) {
const char* _m4847 = T815::_m16877(buff);
_z12746->setMessageId(_m4847);
delete _m4847;
continue;
}
if (_h4846 == 1) {
const char* _o4848 = T815::_m16877(buff);
_z12746->setRequestId(_o4848);
delete _o4848;
continue;
}
if (_h4846 == 3) {
const char* _b4849 = T815::_m16877(buff);
_z12746->setUrl(_b4849);
delete _b4849;
continue;
}
T815::_m16878(buff);
}
return _z12746;
}

Serializable* T819::_m16742(T817* buff) {
TurnBasedContext* _w12754 = new TurnBasedContext();
short _f4851 = T815::_m16876(buff);
for (unsigned int _c4852 = 0; _c4852 < (unsigned int)_f4851; _c4852++) {
short _r4853 = T815::_m16876(buff);
if (_r4853 == 0) {
const char* _j4854 = T815::_m16877(buff);
_w12754->setMessageId(_j4854);
delete _j4854;
continue;
}
if (_r4853 == 1) {
const char* _o4855 = T815::_m16877(buff);
_w12754->setRequestId(_o4855);
delete _o4855;
continue;
}
if (_r4853 == 3) {
_w12754->setCurrentPlayer((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _w12754;
}

Serializable* T819::_m16743(T817* _t11669) {
DisconnectedContext* _k12761 = new DisconnectedContext();
short _s11671 = T815::_m16876(_t11669);
for (unsigned int _x4858 = 0; _x4858 < (unsigned int)_s11671; _x4858++) {
short _r4859 = T815::_m16876(_t11669);
if (_r4859 == 0) {
const char* _m4860 = T815::_m16877(_t11669);
_k12761->setMessageId(_m4860);
delete _m4860;
continue;
}
if (_r4859 == 1) {
const char* _g4861 = T815::_m16877(_t11669);
_k12761->setRequestId(_g4861);
delete _g4861;
continue;
}
if (_r4859 == 3) {
std::vector<NPlayer*>* _c12767 = 0;
unsigned char _r12768 = _t11669->_m16314();
if (_r12768 != T809::_g15500) {
_t11669->_m16315();
int _h12769 = _t11669->_m16316();
_c12767 = new std::vector<NPlayer*>();
for (unsigned int _k4865 = 0; _k4865 < (unsigned int)_h12769; _k4865++) {
_c12767->push_back((NPlayer*)T815::_m16617(this, _t11669));
}
}
_k12761->setParticipants(_c12767);
continue;
}
T815::_m16878(_t11669);
}
return _k12761;
}

Serializable* T819::_m16744(T817* buff) {
OpenUrlData* _n12772 = new OpenUrlData();
short _c4867 = T815::_m16876(buff);
for (unsigned int _b4868 = 0; _b4868 < (unsigned int)_c4867; _b4868++) {
short _h4869 = T815::_m16876(buff);
if (_h4869 == 0) {
const char* _b4870 = T815::_m16877(buff);
_n12772->setMessageId(_b4870);
delete _b4870;
continue;
}
if (_h4869 == 1) {
const char* _k4871 = T815::_m16877(buff);
_n12772->setRequestId(_k4871);
delete _k4871;
continue;
}
if (_h4869 == 3) {
const char* _h4872 = T815::_m16877(buff);
_n12772->setSessionId(_h4872);
delete _h4872;
continue;
}
if (_h4869 == 4) {
const char* _w4873 = T815::_m16877(buff);
_n12772->setCallbackId(_w4873);
delete _w4873;
continue;
}
if (_h4869 == 5) {
const char* _e4874 = T815::_m16877(buff);
_n12772->setCallbackUrl(_e4874);
delete _e4874;
continue;
}
if (_h4869 == 6) {
_n12772->setThirdPartySource((ThirdPartySource*)T815::_m16617(this, buff));
continue;
}
if (_h4869 == 7) {
const char* _i4875 = T815::_m16877(buff);
_n12772->setThirdPartyId(_i4875);
delete _i4875;
continue;
}
T815::_m16878(buff);
}
return _n12772;
}

Serializable* T819::_m16745(T817* _o11675) {
InviteThirdPartyFriendNotification* _i12783 = new InviteThirdPartyFriendNotification();
short _p11677 = T815::_m16876(_o11675);
for (unsigned int _c4878 = 0; _c4878 < (unsigned int)_p11677; _c4878++) {
short _q4879 = T815::_m16876(_o11675);
if (_q4879 == 0) {
const char* _x4880 = T815::_m16877(_o11675);
_i12783->setMessageId(_x4880);
delete _x4880;
continue;
}
if (_q4879 == 1) {
const char* _g4881 = T815::_m16877(_o11675);
_i12783->setRequestId(_g4881);
delete _g4881;
continue;
}
if (_q4879 == 3) {
const char* _o4882 = T815::_m16877(_o11675);
_i12783->setThirdPartyId(_o4882);
delete _o4882;
continue;
}
if (_q4879 == 4) {
_i12783->setExecutionStatus((ExecutionStatus*)T815::_m16617(this, _o11675));
continue;
}
T815::_m16878(_o11675);
}
return _i12783;
}

Serializable* T819::_m16746(T817* buff) {
HeartBeatRequest* _g12791 = new HeartBeatRequest();
short _v4884 = T815::_m16876(buff);
for (unsigned int _d4885 = 0; _d4885 < (unsigned int)_v4884; _d4885++) {
short _r4886 = T815::_m16876(buff);
if (_r4886 == 0) {
const char* _t4887 = T815::_m16877(buff);
_g12791->setMessageId(_t4887);
delete _t4887;
continue;
}
if (_r4886 == 1) {
const char* _k4888 = T815::_m16877(buff);
_g12791->setRequestId(_k4888);
delete _k4888;
continue;
}
if (_r4886 == 3) {
_g12791->setCounter(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _g12791;
}

Serializable* T819::_m16747(T817* buff) {
HeartBeatResponse* _k12798 = new HeartBeatResponse();
short _z4890 = T815::_m16876(buff);
for (unsigned int _j4891 = 0; _j4891 < (unsigned int)_z4890; _j4891++) {
short _p4892 = T815::_m16876(buff);
if (_p4892 == 0) {
const char* _b4893 = T815::_m16877(buff);
_k12798->setMessageId(_b4893);
delete _b4893;
continue;
}
if (_p4892 == 1) {
const char* _z4894 = T815::_m16877(buff);
_k12798->setRequestId(_z4894);
delete _z4894;
continue;
}
if (_p4892 == 3) {
_k12798->setCounter(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _k12798;
}

Serializable* T819::_m16748(T817* _e11681) {
NLeaderboardEntry* _o12805 = new NLeaderboardEntry();
short _i11683 = T815::_m16876(_e11681);
for (unsigned int _m4897 = 0; _m4897 < (unsigned int)_i11683; _m4897++) {
short _l4898 = T815::_m16876(_e11681);
if (_l4898 == 1) {
const char* _b4899 = T815::_m16877(_e11681);
_o12805->setStoreId(_b4899);
delete _b4899;
continue;
}
if (_l4898 == 2) {
const char* _v4900 = T815::_m16877(_e11681);
_o12805->setData(_v4900);
delete _v4900;
continue;
}
if (_l4898 == 3) {
const char* _v4901 = T815::_m16877(_e11681);
_o12805->setId(_v4901);
delete _v4901;
continue;
}
if (_l4898 == 4) {
_o12805->setTimestamp(T815::_m16880(_e11681));
continue;
}
if (_l4898 == 6) {
_o12805->setScore((NScore*)T815::_m16617(this, _e11681));
continue;
}
if (_l4898 == 7) {
const char* _f4902 = T815::_m16877(_e11681);
_o12805->setPlayerId(_f4902);
delete _f4902;
continue;
}
if (_l4898 == 8) {
const char* _t4903 = T815::_m16877(_e11681);
_o12805->setPlayerName(_t4903);
delete _t4903;
continue;
}
if (_l4898 == 9) {
const char* _o12814 = T815::_m16877(_e11681);
_o12805->setPlayerAvatarPath(_o12814);
delete _o12814;
continue;
}
T815::_m16878(_e11681);
}
return _o12805;
}

Serializable* T819::_m16749(T817* _f11687) {
StartDetails* _n12816 = new StartDetails();
short _h11689 = T815::_m16876(_f11687);
for (unsigned int _w4907 = 0; _w4907 < (unsigned int)_h11689; _w4907++) {
short _b4908 = T815::_m16876(_f11687);
if (_b4908 == 1) {
const char* _l4909 = T815::_m16877(_f11687);
_n12816->setStoreId(_l4909);
delete _l4909;
continue;
}
if (_b4908 == 2) {
const char* _a4910 = T815::_m16877(_f11687);
_n12816->setData(_a4910);
delete _a4910;
continue;
}
if (_b4908 == 3) {
_n12816->setUseDefaultImpl(T815::_m16879(_f11687));
continue;
}
if (_b4908 == 4) {
_n12816->setCurrentVersion(T815::_m16875(_f11687));
continue;
}
if (_b4908 == 5) {
_n12816->setNextVersion(T815::_m16875(_f11687));
continue;
}
if (_b4908 == 6) {
const char* _y4911 = T815::_m16877(_f11687);
_n12816->setTitle(_y4911);
delete _y4911;
continue;
}
if (_b4908 == 7) {
const char* _t4912 = T815::_m16877(_f11687);
_n12816->setText(_t4912);
delete _t4912;
continue;
}
if (_b4908 == 8) {
const char* _r12824 = T815::_m16877(_f11687);
_n12816->setUrl(_r12824);
delete _r12824;
continue;
}
T815::_m16878(_f11687);
}
return _n12816;
}

Serializable* T819::_m16750(T817* buff) {
StartRequest* _e12826 = new StartRequest();
short _e4915 = T815::_m16876(buff);
for (unsigned int _d4916 = 0; _d4916 < (unsigned int)_e4915; _d4916++) {
short _b4917 = T815::_m16876(buff);
if (_b4917 == 0) {
const char* _l4918 = T815::_m16877(buff);
_e12826->setMessageId(_l4918);
delete _l4918;
continue;
}
if (_b4917 == 1) {
const char* _q4919 = T815::_m16877(buff);
_e12826->setRequestId(_q4919);
delete _q4919;
continue;
}
T815::_m16878(buff);
}
return _e12826;
}

Serializable* T819::_m16751(T817* _f11693) {
StartResponse* _k12833 = new StartResponse();
short _c4921 = T815::_m16876(_f11693);
for (unsigned int _e4922 = 0; _e4922 < (unsigned int)_c4921; _e4922++) {
short _j4923 = T815::_m16876(_f11693);
if (_j4923 == 0) {
const char* _o4924 = T815::_m16877(_f11693);
_k12833->setMessageId(_o4924);
delete _o4924;
continue;
}
if (_j4923 == 1) {
const char* _x4925 = T815::_m16877(_f11693);
_k12833->setRequestId(_x4925);
delete _x4925;
continue;
}
if (_j4923 == 3) {
_k12833->setStartStatus((StartStatus*)T815::_m16617(this, _f11693));
continue;
}
if (_j4923 == 4) {
_k12833->setStartDetails((StartDetails*)T815::_m16617(this, _f11693));
continue;
}
if (_j4923 == 5) {
_k12833->setPlayerSessionType((PlayerSessionType*)T815::_m16617(this, _f11693));
continue;
}
if (_j4923 == 6) {
_k12833->setPlayer((NPlayer*)T815::_m16617(this, _f11693));
continue;
}
T815::_m16878(_f11693);
}
return _k12833;
}

Serializable* T819::_m16752(T817* buff) {
NuggetaLevel* _k12840 = new NuggetaLevel();
short _r11695 = T815::_m16876(buff);
for (unsigned int _g4928 = 0; _g4928 < (unsigned int)_r11695; _g4928++) {
short _c4929 = T815::_m16876(buff);
if (_c4929 == 0) {
const char* _h4930 = T815::_m16877(buff);
_k12840->setStoreId(_h4930);
delete _h4930;
continue;
}
if (_c4929 == 1) {
const char* _p4931 = T815::_m16877(buff);
_k12840->setData(_p4931);
delete _p4931;
continue;
}
if (_c4929 == 2) {
_k12840->setIndex(T815::_m16875(buff));
continue;
}
if (_c4929 == 3) {
_k12840->setXP(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _k12840;
}

Serializable* T819::_m16753(T817* _y11699) {
StorableSample* _j12847 = new StorableSample();
short _k11701 = T815::_m16876(_y11699);
for (unsigned int _e4934 = 0; _e4934 < (unsigned int)_k11701; _e4934++) {
short _i4935 = T815::_m16876(_y11699);
if (_i4935 == 0) {
const char* _f4936 = T815::_m16877(_y11699);
_j12847->setMessageId(_f4936);
delete _f4936;
continue;
}
if (_i4935 == 1) {
const char* _l4937 = T815::_m16877(_y11699);
_j12847->setRequestId(_l4937);
delete _l4937;
continue;
}
if (_i4935 == 3) {
const char* _r4938 = T815::_m16877(_y11699);
_j12847->setStoreId(_r4938);
delete _r4938;
continue;
}
if (_i4935 == 4) {
const char* _w4939 = T815::_m16877(_y11699);
_j12847->setData(_w4939);
delete _w4939;
continue;
}
if (_i4935 == 5) {
const char* _m4940 = T815::_m16877(_y11699);
_j12847->setGameId(_m4940);
delete _m4940;
continue;
}
if (_i4935 == 6) {
const char* _m4941 = T815::_m16877(_y11699);
_j12847->setSenderId(_m4941);
delete _m4941;
continue;
}
if (_i4935 == 7) {
const char* _p4942 = T815::_m16877(_y11699);
_j12847->setIdProperty(_p4942);
delete _p4942;
continue;
}
if (_i4935 == 8) {
_j12847->setNumberProperty(T815::_m16875(_y11699));
continue;
}
if (_i4935 == 9) {
_j12847->setBooleanProperty(T815::_m16879(_y11699));
continue;
}
T815::_m16878(_y11699);
}
return (Message*)  _j12847;
}

Serializable* T819::_m16754(T817* buff) {
NInvitation* _h12859 = new NInvitation();
short _b4944 = T815::_m16876(buff);
for (unsigned int _v4945 = 0; _v4945 < (unsigned int)_b4944; _v4945++) {
short _p4946 = T815::_m16876(buff);
if (_p4946 == 0) {
const char* _l4947 = T815::_m16877(buff);
_h12859->setStoreId(_l4947);
delete _l4947;
continue;
}
if (_p4946 == 2) {
const char* _u12864 = T815::_m16877(buff);
_h12859->setId(_u12864);
delete _u12864;
continue;
}
if (_p4946 == 3) {
_h12859->setInviter((NPlayer*)T815::_m16617(this, buff));
continue;
}
if (_p4946 == 4) {
_h12859->setInvitee((NPlayer*)T815::_m16617(this, buff));
continue;
}
if (_p4946 == 5) {
_h12859->setContent((Message*)T815::_m16617(this, buff));
continue;
}
if (_p4946 == 8) {
_h12859->setStatus((NInvitationStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _h12859;
}

Serializable* T819::_m16755(T817* buff) {
NGameInvitation* _j12866 = new NGameInvitation();
short _i4950 = T815::_m16876(buff);
for (unsigned int _t4951 = 0; _t4951 < (unsigned int)_i4950; _t4951++) {
short _k4952 = T815::_m16876(buff);
if (_k4952 == 0) {
const char* _q4953 = T815::_m16877(buff);
_j12866->setMessageId(_q4953);
delete _q4953;
continue;
}
if (_k4952 == 1) {
const char* _y4954 = T815::_m16877(buff);
_j12866->setRequestId(_y4954);
delete _y4954;
continue;
}
if (_k4952 == 3) {
const char* _y4955 = T815::_m16877(buff);
_j12866->setGameId(_y4955);
delete _y4955;
continue;
}
T815::_m16878(buff);
}
return _j12866;
}

Serializable* T819::_m16756(T817* _v11705) {
InvitationRequestNotification* _v12874 = new InvitationRequestNotification();
short _h11707 = T815::_m16876(_v11705);
for (unsigned int _h4958 = 0; _h4958 < (unsigned int)_h11707; _h4958++) {
short _s4959 = T815::_m16876(_v11705);
if (_s4959 == 0) {
const char* _s4960 = T815::_m16877(_v11705);
_v12874->setMessageId(_s4960);
delete _s4960;
continue;
}
if (_s4959 == 1) {
const char* _b4961 = T815::_m16877(_v11705);
_v12874->setRequestId(_b4961);
delete _b4961;
continue;
}
if (_s4959 == 3) {
_v12874->setInvitation((NInvitation*)T815::_m16617(this, _v11705));
continue;
}
T815::_m16878(_v11705);
}
return _v12874;
}

Serializable* T819::_m16757(T817* buff) {
InvitationAcceptedNotification* _l12881 = new InvitationAcceptedNotification();
short _f4963 = T815::_m16876(buff);
for (unsigned int _k4964 = 0; _k4964 < (unsigned int)_f4963; _k4964++) {
short _r4965 = T815::_m16876(buff);
if (_r4965 == 0) {
const char* _u4966 = T815::_m16877(buff);
_l12881->setMessageId(_u4966);
delete _u4966;
continue;
}
if (_r4965 == 1) {
const char* _n4967 = T815::_m16877(buff);
_l12881->setRequestId(_n4967);
delete _n4967;
continue;
}
if (_r4965 == 3) {
_l12881->setInvitation((NInvitation*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _l12881;
}

Serializable* T819::_m16758(T817* buff) {
InvitationRefusedNotification* _b12888 = new InvitationRefusedNotification();
short _g4969 = T815::_m16876(buff);
for (unsigned int _y4970 = 0; _y4970 < (unsigned int)_g4969; _y4970++) {
short _u4971 = T815::_m16876(buff);
if (_u4971 == 0) {
const char* _q4972 = T815::_m16877(buff);
_b12888->setMessageId(_q4972);
delete _q4972;
continue;
}
if (_u4971 == 1) {
const char* _z4973 = T815::_m16877(buff);
_b12888->setRequestId(_z4973);
delete _z4973;
continue;
}
if (_u4971 == 3) {
_b12888->setInvitation((NInvitation*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _b12888;
}

Serializable* T819::_m16759(T817* _p11711) {
InvitationExpiredNotification* _e12895 = new InvitationExpiredNotification();
short _r11713 = T815::_m16876(_p11711);
for (unsigned int _e4976 = 0; _e4976 < (unsigned int)_r11713; _e4976++) {
short _p4977 = T815::_m16876(_p11711);
if (_p4977 == 0) {
const char* _v4978 = T815::_m16877(_p11711);
_e12895->setMessageId(_v4978);
delete _v4978;
continue;
}
if (_p4977 == 1) {
const char* _d4979 = T815::_m16877(_p11711);
_e12895->setRequestId(_d4979);
delete _d4979;
continue;
}
T815::_m16878(_p11711);
}
return _e12895;
}

Serializable* T819::_m16760(T817* buff) {
AskForFriendResponse* _q12902 = new AskForFriendResponse();
short _e4981 = T815::_m16876(buff);
for (unsigned int _e4982 = 0; _e4982 < (unsigned int)_e4981; _e4982++) {
short _q4983 = T815::_m16876(buff);
if (_q4983 == 0) {
const char* _b4984 = T815::_m16877(buff);
_q12902->setMessageId(_b4984);
delete _b4984;
continue;
}
if (_q4983 == 1) {
const char* _y4985 = T815::_m16877(buff);
_q12902->setRequestId(_y4985);
delete _y4985;
continue;
}
if (_q4983 == 3) {
_q12902->setAskForFriendStatus((AskForFriendStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _q12902;
}

Serializable* T819::_m16761(T817* buff) {
AskForFriendByIdRequest* _s12909 = new AskForFriendByIdRequest();
short _x4987 = T815::_m16876(buff);
for (unsigned int _y4988 = 0; _y4988 < (unsigned int)_x4987; _y4988++) {
short _t4989 = T815::_m16876(buff);
if (_t4989 == 0) {
const char* _b4990 = T815::_m16877(buff);
_s12909->setMessageId(_b4990);
delete _b4990;
continue;
}
if (_t4989 == 1) {
const char* _z4991 = T815::_m16877(buff);
_s12909->setRequestId(_z4991);
delete _z4991;
continue;
}
if (_t4989 == 3) {
const char* _f4992 = T815::_m16877(buff);
_s12909->setId(_f4992);
delete _f4992;
continue;
}
T815::_m16878(buff);
}
return _s12909;
}

Serializable* T819::_m16762(T817* _i11717) {
AskForFriendByLoginRequest* _m12917 = new AskForFriendByLoginRequest();
short _d4994 = T815::_m16876(_i11717);
for (unsigned int _t4995 = 0; _t4995 < (unsigned int)_d4994; _t4995++) {
short _q4996 = T815::_m16876(_i11717);
if (_q4996 == 0) {
const char* _k4997 = T815::_m16877(_i11717);
_m12917->setMessageId(_k4997);
delete _k4997;
continue;
}
if (_q4996 == 1) {
const char* _h4998 = T815::_m16877(_i11717);
_m12917->setRequestId(_h4998);
delete _h4998;
continue;
}
if (_q4996 == 3) {
const char* _x4999 = T815::_m16877(_i11717);
_m12917->setLogin(_x4999);
delete _x4999;
continue;
}
T815::_m16878(_i11717);
}
return _m12917;
}

Serializable* T819::_m16763(T817* buff) {
SignUpResponse* _d12925 = new SignUpResponse();
short _s11719 = T815::_m16876(buff);
for (unsigned int _n5002 = 0; _n5002 < (unsigned int)_s11719; _n5002++) {
short _m5003 = T815::_m16876(buff);
if (_m5003 == 0) {
const char* _p5004 = T815::_m16877(buff);
_d12925->setMessageId(_p5004);
delete _p5004;
continue;
}
if (_m5003 == 1) {
const char* _i5005 = T815::_m16877(buff);
_d12925->setRequestId(_i5005);
delete _i5005;
continue;
}
if (_m5003 == 3) {
_d12925->setSignUpStatus((SignUpStatus*)T815::_m16617(this, buff));
continue;
}
if (_m5003 == 4) {
_d12925->setPlayer((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _d12925;
}

Serializable* T819::_m16764(T817* buff) {
SignUpRequest* _o12932 = new SignUpRequest();
short _y5007 = T815::_m16876(buff);
for (unsigned int _n5008 = 0; _n5008 < (unsigned int)_y5007; _n5008++) {
short _s5009 = T815::_m16876(buff);
if (_s5009 == 0) {
const char* _d5010 = T815::_m16877(buff);
_o12932->setMessageId(_d5010);
delete _d5010;
continue;
}
if (_s5009 == 1) {
const char* _v5011 = T815::_m16877(buff);
_o12932->setRequestId(_v5011);
delete _v5011;
continue;
}
T815::_m16878(buff);
}
return _o12932;
}

Serializable* T819::_m16765(T817* buff) {
LoginResponse* _o12939 = new LoginResponse();
short _b5013 = T815::_m16876(buff);
for (unsigned int _r5014 = 0; _r5014 < (unsigned int)_b5013; _r5014++) {
short _u5015 = T815::_m16876(buff);
if (_u5015 == 0) {
const char* _j5016 = T815::_m16877(buff);
_o12939->setMessageId(_j5016);
delete _j5016;
continue;
}
if (_u5015 == 1) {
const char* _c5017 = T815::_m16877(buff);
_o12939->setRequestId(_c5017);
delete _c5017;
continue;
}
if (_u5015 == 3) {
_o12939->setLoginStatus((LoginStatus*)T815::_m16617(this, buff));
continue;
}
if (_u5015 == 4) {
_o12939->setPlayer((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _o12939;
}

Serializable* T819::_m16766(T817* _g11723) {
LoginRequest* _d12946 = new LoginRequest();
short _k11725 = T815::_m16876(_g11723);
for (unsigned int _z5020 = 0; _z5020 < (unsigned int)_k11725; _z5020++) {
short _u5021 = T815::_m16876(_g11723);
if (_u5021 == 0) {
const char* _n5022 = T815::_m16877(_g11723);
_d12946->setMessageId(_n5022);
delete _n5022;
continue;
}
if (_u5021 == 1) {
const char* _r5023 = T815::_m16877(_g11723);
_d12946->setRequestId(_r5023);
delete _r5023;
continue;
}
T815::_m16878(_g11723);
}
return _d12946;
}

Serializable* T819::_m16767(T817* buff) {
SavePlayerProfileResponse* _q12953 = new SavePlayerProfileResponse();
short _k5025 = T815::_m16876(buff);
for (unsigned int _u5026 = 0; _u5026 < (unsigned int)_k5025; _u5026++) {
short _a5027 = T815::_m16876(buff);
if (_a5027 == 0) {
const char* _k5028 = T815::_m16877(buff);
_q12953->setMessageId(_k5028);
delete _k5028;
continue;
}
if (_a5027 == 1) {
const char* _l5029 = T815::_m16877(buff);
_q12953->setRequestId(_l5029);
delete _l5029;
continue;
}
if (_a5027 == 3) {
_q12953->setSavePlayerProfileStatus((SavePlayerProfileStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _q12953;
}

Serializable* T819::_m16768(T817* _w11729) {
SavePlayerProfileRequest* _v12960 = new SavePlayerProfileRequest();
short _n11731 = T815::_m16876(_w11729);
for (unsigned int _z5032 = 0; _z5032 < (unsigned int)_n11731; _z5032++) {
short _k5033 = T815::_m16876(_w11729);
if (_k5033 == 0) {
const char* _g5034 = T815::_m16877(_w11729);
_v12960->setMessageId(_g5034);
delete _g5034;
continue;
}
if (_k5033 == 1) {
const char* _k5035 = T815::_m16877(_w11729);
_v12960->setRequestId(_k5035);
delete _k5035;
continue;
}
if (_k5033 == 3) {
_v12960->setProfile((NPlayerProfile*)T815::_m16617(this, _w11729));
continue;
}
T815::_m16878(_w11729);
}
return _v12960;
}

Serializable* T819::_m16769(T817* buff) {
GetPlayerProfileResponse* _s12967 = new GetPlayerProfileResponse();
short _p5037 = T815::_m16876(buff);
for (unsigned int _d5038 = 0; _d5038 < (unsigned int)_p5037; _d5038++) {
short _h5039 = T815::_m16876(buff);
if (_h5039 == 0) {
const char* _h5040 = T815::_m16877(buff);
_s12967->setMessageId(_h5040);
delete _h5040;
continue;
}
if (_h5039 == 1) {
const char* _j5041 = T815::_m16877(buff);
_s12967->setRequestId(_j5041);
delete _j5041;
continue;
}
if (_h5039 == 3) {
_s12967->setGetPlayerProfileStatus((GetPlayerProfileStatus*)T815::_m16617(this, buff));
continue;
}
if (_h5039 == 4) {
_s12967->setProfile((NPlayerProfile*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _s12967;
}

Serializable* T819::_m16770(T817* buff) {
GetPlayerProfileRequest* _m12974 = new GetPlayerProfileRequest();
short _n5043 = T815::_m16876(buff);
for (unsigned int _b5044 = 0; _b5044 < (unsigned int)_n5043; _b5044++) {
short _o5045 = T815::_m16876(buff);
if (_o5045 == 0) {
const char* _v5046 = T815::_m16877(buff);
_m12974->setMessageId(_v5046);
delete _v5046;
continue;
}
if (_o5045 == 1) {
const char* _j5047 = T815::_m16877(buff);
_m12974->setRequestId(_j5047);
delete _j5047;
continue;
}
T815::_m16878(buff);
}
return _m12974;
}

Serializable* T819::_m16771(T817* buff) {
GetPlayerProfileByPlayerIdRequest* _f12981 = new GetPlayerProfileByPlayerIdRequest();
short _a5049 = T815::_m16876(buff);
for (unsigned int _n5050 = 0; _n5050 < (unsigned int)_a5049; _n5050++) {
short _v5051 = T815::_m16876(buff);
if (_v5051 == 0) {
const char* _f5052 = T815::_m16877(buff);
_f12981->setMessageId(_f5052);
delete _f5052;
continue;
}
if (_v5051 == 1) {
const char* _l5053 = T815::_m16877(buff);
_f12981->setRequestId(_l5053);
delete _l5053;
continue;
}
if (_v5051 == 3) {
const char* _u5054 = T815::_m16877(buff);
_f12981->setPlayerId(_u5054);
delete _u5054;
continue;
}
T815::_m16878(buff);
}
return _f12981;
}

Serializable* T819::_m16772(T817* _k11735) {
LogoutResponse* _v12989 = new LogoutResponse();
short _d11737 = T815::_m16876(_k11735);
for (unsigned int _c5057 = 0; _c5057 < (unsigned int)_d11737; _c5057++) {
short _c5058 = T815::_m16876(_k11735);
if (_c5058 == 0) {
const char* _e5059 = T815::_m16877(_k11735);
_v12989->setMessageId(_e5059);
delete _e5059;
continue;
}
if (_c5058 == 1) {
const char* _m5060 = T815::_m16877(_k11735);
_v12989->setRequestId(_m5060);
delete _m5060;
continue;
}
if (_c5058 == 3) {
_v12989->setLogoutStatus((LogoutStatus*)T815::_m16617(this, _k11735));
continue;
}
if (_c5058 == 4) {
_v12989->setPlayer((NPlayer*)T815::_m16617(this, _k11735));
continue;
}
T815::_m16878(_k11735);
}
return _v12989;
}

Serializable* T819::_m16773(T817* buff) {
LogoutRequest* _r12996 = new LogoutRequest();
short _z5062 = T815::_m16876(buff);
for (unsigned int _d5063 = 0; _d5063 < (unsigned int)_z5062; _d5063++) {
short _j5064 = T815::_m16876(buff);
if (_j5064 == 0) {
const char* _v5065 = T815::_m16877(buff);
_r12996->setMessageId(_v5065);
delete _v5065;
continue;
}
if (_j5064 == 1) {
const char* _l5066 = T815::_m16877(buff);
_r12996->setRequestId(_l5066);
delete _l5066;
continue;
}
T815::_m16878(buff);
}
return _r12996;
}

Serializable* T819::_m16774(T817* buff) {
GetFriendsResponse* _j13003 = new GetFriendsResponse();
short _y5068 = T815::_m16876(buff);
for (unsigned int _m5069 = 0; _m5069 < (unsigned int)_y5068; _m5069++) {
short _e5070 = T815::_m16876(buff);
if (_e5070 == 0) {
const char* _t5071 = T815::_m16877(buff);
_j13003->setMessageId(_t5071);
delete _t5071;
continue;
}
if (_e5070 == 1) {
const char* _g5072 = T815::_m16877(buff);
_j13003->setRequestId(_g5072);
delete _g5072;
continue;
}
if (_e5070 == 3) {
_j13003->setGetFriendsStatus((GetFriendsStatus*)T815::_m16617(this, buff));
continue;
}
if (_e5070 == 4) {
std::vector<NPlayer*>* _u13009 = 0;
unsigned char _r13010 = buff->_m16314();
if (_r13010 != T809::_g15500) {
buff->_m16315();
int _v13011 = buff->_m16316();
_u13009 = new std::vector<NPlayer*>();
for (unsigned int _s5076 = 0; _s5076 < (unsigned int)_v13011; _s5076++) {
_u13009->push_back((NPlayer*)T815::_m16617(this, buff));
}
}
_j13003->setFriends(_u13009);
continue;
}
T815::_m16878(buff);
}
return _j13003;
}

Serializable* T819::_m16775(T817* _i11741) {
GetFriendsRequest* _d13014 = new GetFriendsRequest();
short _d11743 = T815::_m16876(_i11741);
for (unsigned int _m5079 = 0; _m5079 < (unsigned int)_d11743; _m5079++) {
short _d5080 = T815::_m16876(_i11741);
if (_d5080 == 0) {
const char* _s5081 = T815::_m16877(_i11741);
_d13014->setMessageId(_s5081);
delete _s5081;
continue;
}
if (_d5080 == 1) {
const char* _r5082 = T815::_m16877(_i11741);
_d13014->setRequestId(_r5082);
delete _r5082;
continue;
}
T815::_m16878(_i11741);
}
return _d13014;
}

Serializable* T819::_m16776(T817* buff) {
GetFriendsByPlayerIdRequest* _v13021 = new GetFriendsByPlayerIdRequest();
short _b5084 = T815::_m16876(buff);
for (unsigned int _e5085 = 0; _e5085 < (unsigned int)_b5084; _e5085++) {
short _t5086 = T815::_m16876(buff);
if (_t5086 == 0) {
const char* _n5087 = T815::_m16877(buff);
_v13021->setMessageId(_n5087);
delete _n5087;
continue;
}
if (_t5086 == 1) {
const char* _t5088 = T815::_m16877(buff);
_v13021->setRequestId(_t5088);
delete _t5088;
continue;
}
if (_t5086 == 3) {
const char* _j5089 = T815::_m16877(buff);
_v13021->setPlayerId(_j5089);
delete _j5089;
continue;
}
T815::_m16878(buff);
}
return _v13021;
}

Serializable* T819::_m16777(T817* _o11747) {
GetThirdPartyFriendsResponse* _e13029 = new GetThirdPartyFriendsResponse();
short _e11749 = T815::_m16876(_o11747);
for (unsigned int _v5092 = 0; _v5092 < (unsigned int)_e11749; _v5092++) {
short _d5093 = T815::_m16876(_o11747);
if (_d5093 == 0) {
const char* _e5094 = T815::_m16877(_o11747);
_e13029->setMessageId(_e5094);
delete _e5094;
continue;
}
if (_d5093 == 1) {
const char* _s5095 = T815::_m16877(_o11747);
_e13029->setRequestId(_s5095);
delete _s5095;
continue;
}
if (_d5093 == 3) {
_e13029->setGetThirdPartyFriendsStatus((GetThirdPartyFriendsStatus*)T815::_m16617(this, _o11747));
continue;
}
if (_d5093 == 4) {
std::vector<NPlayer*>* _o13035 = 0;
unsigned char _n13036 = _o11747->_m16314();
if (_n13036 != T809::_g15500) {
_o11747->_m16315();
int _n13037 = _o11747->_m16316();
_o13035 = new std::vector<NPlayer*>();
for (unsigned int _y5099 = 0; _y5099 < (unsigned int)_n13037; _y5099++) {
_o13035->push_back((NPlayer*)T815::_m16617(this, _o11747));
}
}
_e13029->setThirdPartyFriends(_o13035);
continue;
}
T815::_m16878(_o11747);
}
return _e13029;
}

Serializable* T819::_m16778(T817* buff) {
GetThirdPartyFriendsRequest* _q13040 = new GetThirdPartyFriendsRequest();
short _q5101 = T815::_m16876(buff);
for (unsigned int _u5102 = 0; _u5102 < (unsigned int)_q5101; _u5102++) {
short _e5103 = T815::_m16876(buff);
if (_e5103 == 0) {
const char* _c5104 = T815::_m16877(buff);
_q13040->setMessageId(_c5104);
delete _c5104;
continue;
}
if (_e5103 == 1) {
const char* _s5105 = T815::_m16877(buff);
_q13040->setRequestId(_s5105);
delete _s5105;
continue;
}
if (_e5103 == 3) {
_q13040->setThirdPartySource((ThirdPartySource*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _q13040;
}

Serializable* T819::_m16779(T817* buff) {
GetFriendDemandsResponse* _w13047 = new GetFriendDemandsResponse();
short _j5107 = T815::_m16876(buff);
for (unsigned int _b5108 = 0; _b5108 < (unsigned int)_j5107; _b5108++) {
short _i5109 = T815::_m16876(buff);
if (_i5109 == 0) {
const char* _b5110 = T815::_m16877(buff);
_w13047->setMessageId(_b5110);
delete _b5110;
continue;
}
if (_i5109 == 1) {
const char* _j5111 = T815::_m16877(buff);
_w13047->setRequestId(_j5111);
delete _j5111;
continue;
}
if (_i5109 == 3) {
_w13047->setGetFriendDemandsStatus((GetFriendDemandsStatus*)T815::_m16617(this, buff));
continue;
}
if (_i5109 == 4) {
std::vector<NFriendDemand*>* _w13053 = 0;
unsigned char _b13054 = buff->_m16314();
if (_b13054 != T809::_g15500) {
buff->_m16315();
int _d13055 = buff->_m16316();
_w13053 = new std::vector<NFriendDemand*>();
for (unsigned int _g5115 = 0; _g5115 < (unsigned int)_d13055; _g5115++) {
_w13053->push_back((NFriendDemand*)T815::_m16617(this, buff));
}
}
_w13047->setFriendDemands(_w13053);
continue;
}
T815::_m16878(buff);
}
return _w13047;
}

Serializable* T819::_m16780(T817* _j11753) {
GetFriendDemandsRequest* _h13058 = new GetFriendDemandsRequest();
short _e11755 = T815::_m16876(_j11753);
for (unsigned int _y5118 = 0; _y5118 < (unsigned int)_e11755; _y5118++) {
short _l5119 = T815::_m16876(_j11753);
if (_l5119 == 0) {
const char* _s5120 = T815::_m16877(_j11753);
_h13058->setMessageId(_s5120);
delete _s5120;
continue;
}
if (_l5119 == 1) {
const char* _c5121 = T815::_m16877(_j11753);
_h13058->setRequestId(_c5121);
delete _c5121;
continue;
}
T815::_m16878(_j11753);
}
return _h13058;
}

Serializable* T819::_m16781(T817* buff) {
AcceptFriendDemandResponse* _i13065 = new AcceptFriendDemandResponse();
short _l5123 = T815::_m16876(buff);
for (unsigned int _w5124 = 0; _w5124 < (unsigned int)_l5123; _w5124++) {
short _m5125 = T815::_m16876(buff);
if (_m5125 == 0) {
const char* _h5126 = T815::_m16877(buff);
_i13065->setMessageId(_h5126);
delete _h5126;
continue;
}
if (_m5125 == 1) {
const char* _b5127 = T815::_m16877(buff);
_i13065->setRequestId(_b5127);
delete _b5127;
continue;
}
if (_m5125 == 3) {
_i13065->setAcceptFriendDemandStatus((AcceptFriendDemandStatus*)T815::_m16617(this, buff));
continue;
}
if (_m5125 == 4) {
const char* _b5128 = T815::_m16877(buff);
_i13065->setFriendDemandId(_b5128);
delete _b5128;
continue;
}
T815::_m16878(buff);
}
return _i13065;
}

Serializable* T819::_m16782(T817* buff) {
AcceptFriendDemandRequest* _f13073 = new AcceptFriendDemandRequest();
short _s5130 = T815::_m16876(buff);
for (unsigned int _h5131 = 0; _h5131 < (unsigned int)_s5130; _h5131++) {
short _s5132 = T815::_m16876(buff);
if (_s5132 == 0) {
const char* _c5133 = T815::_m16877(buff);
_f13073->setMessageId(_c5133);
delete _c5133;
continue;
}
if (_s5132 == 1) {
const char* _l5134 = T815::_m16877(buff);
_f13073->setRequestId(_l5134);
delete _l5134;
continue;
}
if (_s5132 == 3) {
const char* _v5135 = T815::_m16877(buff);
_f13073->setFriendDemandId(_v5135);
delete _v5135;
continue;
}
T815::_m16878(buff);
}
return _f13073;
}

Serializable* T819::_m16783(T817* _p11759) {
RefuseFriendDemandResponse* _j13081 = new RefuseFriendDemandResponse();
short _d11761 = T815::_m16876(_p11759);
for (unsigned int _f5138 = 0; _f5138 < (unsigned int)_d11761; _f5138++) {
short _w5139 = T815::_m16876(_p11759);
if (_w5139 == 0) {
const char* _j5140 = T815::_m16877(_p11759);
_j13081->setMessageId(_j5140);
delete _j5140;
continue;
}
if (_w5139 == 1) {
const char* _b5141 = T815::_m16877(_p11759);
_j13081->setRequestId(_b5141);
delete _b5141;
continue;
}
if (_w5139 == 3) {
_j13081->setRefuseFriendDemandStatus((RefuseFriendDemandStatus*)T815::_m16617(this, _p11759));
continue;
}
if (_w5139 == 4) {
const char* _j5142 = T815::_m16877(_p11759);
_j13081->setFriendDemandId(_j5142);
delete _j5142;
continue;
}
T815::_m16878(_p11759);
}
return _j13081;
}

Serializable* T819::_m16784(T817* buff) {
RefuseFriendDemandRequest* _o13089 = new RefuseFriendDemandRequest();
short _e5144 = T815::_m16876(buff);
for (unsigned int _a5145 = 0; _a5145 < (unsigned int)_e5144; _a5145++) {
short _y5146 = T815::_m16876(buff);
if (_y5146 == 0) {
const char* _b5147 = T815::_m16877(buff);
_o13089->setMessageId(_b5147);
delete _b5147;
continue;
}
if (_y5146 == 1) {
const char* _p5148 = T815::_m16877(buff);
_o13089->setRequestId(_p5148);
delete _p5148;
continue;
}
if (_y5146 == 3) {
const char* _e5149 = T815::_m16877(buff);
_o13089->setFriendDemandId(_e5149);
delete _e5149;
continue;
}
T815::_m16878(buff);
}
return _o13089;
}

Serializable* T819::_m16785(T817* buff) {
SubmitScoreResponse* _p13097 = new SubmitScoreResponse();
short _b5151 = T815::_m16876(buff);
for (unsigned int _h5152 = 0; _h5152 < (unsigned int)_b5151; _h5152++) {
short _m5153 = T815::_m16876(buff);
if (_m5153 == 0) {
const char* _a5154 = T815::_m16877(buff);
_p13097->setMessageId(_a5154);
delete _a5154;
continue;
}
if (_m5153 == 1) {
const char* _e5155 = T815::_m16877(buff);
_p13097->setRequestId(_e5155);
delete _e5155;
continue;
}
if (_m5153 == 3) {
_p13097->setSubmitScoreStatus((SubmitScoreStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _p13097;
}

Serializable* T819::_m16786(T817* _k11765) {
SubmitScoreRequest* _p13104 = new SubmitScoreRequest();
short _p11767 = T815::_m16876(_k11765);
for (unsigned int _k5158 = 0; _k5158 < (unsigned int)_p11767; _k5158++) {
short _t5159 = T815::_m16876(_k11765);
if (_t5159 == 0) {
const char* _f5160 = T815::_m16877(_k11765);
_p13104->setMessageId(_f5160);
delete _f5160;
continue;
}
if (_t5159 == 1) {
const char* _s5161 = T815::_m16877(_k11765);
_p13104->setRequestId(_s5161);
delete _s5161;
continue;
}
if (_t5159 == 3) {
_p13104->setScore((NScore*)T815::_m16617(this, _k11765));
continue;
}
if (_t5159 == 4) {
const char* _s5162 = T815::_m16877(_k11765);
_p13104->setLeaderboardId(_s5162);
delete _s5162;
continue;
}
T815::_m16878(_k11765);
}
return _p13104;
}

Serializable* T819::_m16787(T817* buff) {
SubmitScoreWithPlayerNameRequest* _q13112 = new SubmitScoreWithPlayerNameRequest();
short _s5164 = T815::_m16876(buff);
for (unsigned int _c5165 = 0; _c5165 < (unsigned int)_s5164; _c5165++) {
short _i5166 = T815::_m16876(buff);
if (_i5166 == 0) {
const char* _o5167 = T815::_m16877(buff);
_q13112->setMessageId(_o5167);
delete _o5167;
continue;
}
if (_i5166 == 1) {
const char* _u5168 = T815::_m16877(buff);
_q13112->setRequestId(_u5168);
delete _u5168;
continue;
}
if (_i5166 == 3) {
const char* _r5169 = T815::_m16877(buff);
_q13112->setName(_r5169);
delete _r5169;
continue;
}
if (_i5166 == 4) {
_q13112->setScore((NScore*)T815::_m16617(this, buff));
continue;
}
if (_i5166 == 5) {
const char* _t5170 = T815::_m16877(buff);
_q13112->setLeaderboardId(_t5170);
delete _t5170;
continue;
}
T815::_m16878(buff);
}
return _q13112;
}

Serializable* T819::_m16788(T817* _u11771) {
GetLeaderboardResponse* _w13121 = new GetLeaderboardResponse();
short _c11773 = T815::_m16876(_u11771);
for (unsigned int _g5173 = 0; _g5173 < (unsigned int)_c11773; _g5173++) {
short _t5174 = T815::_m16876(_u11771);
if (_t5174 == 0) {
const char* _p5175 = T815::_m16877(_u11771);
_w13121->setMessageId(_p5175);
delete _p5175;
continue;
}
if (_t5174 == 1) {
const char* _s5176 = T815::_m16877(_u11771);
_w13121->setRequestId(_s5176);
delete _s5176;
continue;
}
if (_t5174 == 3) {
_w13121->setGetLeaderboardStatus((GetLeaderboardStatus*)T815::_m16617(this, _u11771));
continue;
}
if (_t5174 == 4) {
_w13121->setLeaderboard((NLeaderboard*)T815::_m16617(this, _u11771));
continue;
}
T815::_m16878(_u11771);
}
return _w13121;
}

Serializable* T819::_m16789(T817* buff) {
GetLeaderboardRequest* _q13128 = new GetLeaderboardRequest();
short _d5178 = T815::_m16876(buff);
for (unsigned int _n5179 = 0; _n5179 < (unsigned int)_d5178; _n5179++) {
short _y5180 = T815::_m16876(buff);
if (_y5180 == 0) {
const char* _d5181 = T815::_m16877(buff);
_q13128->setMessageId(_d5181);
delete _d5181;
continue;
}
if (_y5180 == 1) {
const char* _x5182 = T815::_m16877(buff);
_q13128->setRequestId(_x5182);
delete _x5182;
continue;
}
if (_y5180 == 3) {
const char* _r5183 = T815::_m16877(buff);
_q13128->setLeaderboardId(_r5183);
delete _r5183;
continue;
}
if (_y5180 == 4) {
_q13128->setPeriod((LeaderboardPeriod*)T815::_m16617(this, buff));
continue;
}
if (_y5180 == 5) {
_q13128->setStart(T815::_m16875(buff));
continue;
}
if (_y5180 == 6) {
_q13128->setLimit(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _q13128;
}

Serializable* T819::_m16790(T817* buff) {
BuyItemResponse* _a13136 = new BuyItemResponse();
short _i5185 = T815::_m16876(buff);
for (unsigned int _v5186 = 0; _v5186 < (unsigned int)_i5185; _v5186++) {
short _v5187 = T815::_m16876(buff);
if (_v5187 == 0) {
const char* _d5188 = T815::_m16877(buff);
_a13136->setMessageId(_d5188);
delete _d5188;
continue;
}
if (_v5187 == 1) {
const char* _n5189 = T815::_m16877(buff);
_a13136->setRequestId(_n5189);
delete _n5189;
continue;
}
if (_v5187 == 3) {
_a13136->setBuyItemStatus((BuyItemStatus*)T815::_m16617(this, buff));
continue;
}
if (_v5187 == 4) {
_a13136->setBoughtItem((NItem*)T815::_m16617(this, buff));
continue;
}
if (_v5187 == 5) {
_a13136->setQuantity(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _a13136;
}

Serializable* T819::_m16791(T817* _e11777) {
BuyItemRequest* _o13143 = new BuyItemRequest();
short _f11779 = T815::_m16876(_e11777);
for (unsigned int _f5192 = 0; _f5192 < (unsigned int)_f11779; _f5192++) {
short _r5193 = T815::_m16876(_e11777);
if (_r5193 == 0) {
const char* _o5194 = T815::_m16877(_e11777);
_o13143->setMessageId(_o5194);
delete _o5194;
continue;
}
if (_r5193 == 1) {
const char* _g5195 = T815::_m16877(_e11777);
_o13143->setRequestId(_g5195);
delete _g5195;
continue;
}
if (_r5193 == 3) {
const char* _u5196 = T815::_m16877(_e11777);
_o13143->setItemId(_u5196);
delete _u5196;
continue;
}
if (_r5193 == 4) {
_o13143->setQuantity(T815::_m16875(_e11777));
continue;
}
T815::_m16878(_e11777);
}
return _o13143;
}

Serializable* T819::_m16792(T817* buff) {
GetStoreResponse* _a13151 = new GetStoreResponse();
short _o5198 = T815::_m16876(buff);
for (unsigned int _e5199 = 0; _e5199 < (unsigned int)_o5198; _e5199++) {
short _x5200 = T815::_m16876(buff);
if (_x5200 == 0) {
const char* _p5201 = T815::_m16877(buff);
_a13151->setMessageId(_p5201);
delete _p5201;
continue;
}
if (_x5200 == 1) {
const char* _t5202 = T815::_m16877(buff);
_a13151->setRequestId(_t5202);
delete _t5202;
continue;
}
if (_x5200 == 3) {
_a13151->setGetStoreStatus((GetStoreStatus*)T815::_m16617(this, buff));
continue;
}
if (_x5200 == 4) {
_a13151->setStore((NStore*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _a13151;
}

Serializable* T819::_m16793(T817* _e11783) {
GetStoreRequest* _u13158 = new GetStoreRequest();
short _z5204 = T815::_m16876(_e11783);
for (unsigned int _s5205 = 0; _s5205 < (unsigned int)_z5204; _s5205++) {
short _j5206 = T815::_m16876(_e11783);
if (_j5206 == 0) {
const char* _b5207 = T815::_m16877(_e11783);
_u13158->setMessageId(_b5207);
delete _b5207;
continue;
}
if (_j5206 == 1) {
const char* _v5208 = T815::_m16877(_e11783);
_u13158->setRequestId(_v5208);
delete _v5208;
continue;
}
T815::_m16878(_e11783);
}
return _u13158;
}

Serializable* T819::_m16794(T817* buff) {
ConsumeItemResponse* _s13165 = new ConsumeItemResponse();
short _v11785 = T815::_m16876(buff);
for (unsigned int _j5211 = 0; _j5211 < (unsigned int)_v11785; _j5211++) {
short _v5212 = T815::_m16876(buff);
if (_v5212 == 0) {
const char* _o5213 = T815::_m16877(buff);
_s13165->setMessageId(_o5213);
delete _o5213;
continue;
}
if (_v5212 == 1) {
const char* _r5214 = T815::_m16877(buff);
_s13165->setRequestId(_r5214);
delete _r5214;
continue;
}
if (_v5212 == 3) {
_s13165->setConsumeItemStatus((ConsumeItemStatus*)T815::_m16617(this, buff));
continue;
}
if (_v5212 == 4) {
_s13165->setConsumedItem((NItem*)T815::_m16617(this, buff));
continue;
}
if (_v5212 == 5) {
_s13165->setQuantity(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _s13165;
}

Serializable* T819::_m16795(T817* buff) {
ConsumeItemRequest* _w13172 = new ConsumeItemRequest();
short _t5216 = T815::_m16876(buff);
for (unsigned int _o5217 = 0; _o5217 < (unsigned int)_t5216; _o5217++) {
short _n5218 = T815::_m16876(buff);
if (_n5218 == 0) {
const char* _u5219 = T815::_m16877(buff);
_w13172->setMessageId(_u5219);
delete _u5219;
continue;
}
if (_n5218 == 1) {
const char* _v5220 = T815::_m16877(buff);
_w13172->setRequestId(_v5220);
delete _v5220;
continue;
}
if (_n5218 == 3) {
const char* _o5221 = T815::_m16877(buff);
_w13172->setItemId(_o5221);
delete _o5221;
continue;
}
if (_n5218 == 4) {
_w13172->setQuantity(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _w13172;
}

Serializable* T819::_m16796(T817* _l11789) {
IncreasePlayerWalletResponse* _y13180 = new IncreasePlayerWalletResponse();
short _f11791 = T815::_m16876(_l11789);
for (unsigned int _v5224 = 0; _v5224 < (unsigned int)_f11791; _v5224++) {
short _i5225 = T815::_m16876(_l11789);
if (_i5225 == 0) {
const char* _e5226 = T815::_m16877(_l11789);
_y13180->setMessageId(_e5226);
delete _e5226;
continue;
}
if (_i5225 == 1) {
const char* _v5227 = T815::_m16877(_l11789);
_y13180->setRequestId(_v5227);
delete _v5227;
continue;
}
if (_i5225 == 3) {
_y13180->setIncreasePlayerWalletStatus((IncreasePlayerWalletStatus*)T815::_m16617(this, _l11789));
continue;
}
if (_i5225 == 4) {
_y13180->setValue(T815::_m16875(_l11789));
continue;
}
T815::_m16878(_l11789);
}
return _y13180;
}

Serializable* T819::_m16797(T817* buff) {
IncreasePlayerWalletRequest* _v13187 = new IncreasePlayerWalletRequest();
short _m5229 = T815::_m16876(buff);
for (unsigned int _k5230 = 0; _k5230 < (unsigned int)_m5229; _k5230++) {
short _q5231 = T815::_m16876(buff);
if (_q5231 == 0) {
const char* _t5232 = T815::_m16877(buff);
_v13187->setMessageId(_t5232);
delete _t5232;
continue;
}
if (_q5231 == 1) {
const char* _f5233 = T815::_m16877(buff);
_v13187->setRequestId(_f5233);
delete _f5233;
continue;
}
if (_q5231 == 3) {
_v13187->setValue(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _v13187;
}

Serializable* T819::_m16798(T817* buff) {
GetPlayerWalletResponse* _g13194 = new GetPlayerWalletResponse();
short _e5235 = T815::_m16876(buff);
for (unsigned int _m5236 = 0; _m5236 < (unsigned int)_e5235; _m5236++) {
short _v5237 = T815::_m16876(buff);
if (_v5237 == 0) {
const char* _z5238 = T815::_m16877(buff);
_g13194->setMessageId(_z5238);
delete _z5238;
continue;
}
if (_v5237 == 1) {
const char* _y5239 = T815::_m16877(buff);
_g13194->setRequestId(_y5239);
delete _y5239;
continue;
}
if (_v5237 == 3) {
_g13194->setGetPlayerWalletStatus((GetPlayerWalletStatus*)T815::_m16617(this, buff));
continue;
}
if (_v5237 == 4) {
_g13194->setWallet((NPlayerWallet*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _g13194;
}

Serializable* T819::_m16799(T817* _x11795) {
GetPlayerWalletRequest* _r13201 = new GetPlayerWalletRequest();
short _p11797 = T815::_m16876(_x11795);
for (unsigned int _i5242 = 0; _i5242 < (unsigned int)_p11797; _i5242++) {
short _e5243 = T815::_m16876(_x11795);
if (_e5243 == 0) {
const char* _g5244 = T815::_m16877(_x11795);
_r13201->setMessageId(_g5244);
delete _g5244;
continue;
}
if (_e5243 == 1) {
const char* _p5245 = T815::_m16877(_x11795);
_r13201->setRequestId(_p5245);
delete _p5245;
continue;
}
T815::_m16878(_x11795);
}
return _r13201;
}

Serializable* T819::_m16800(T817* buff) {
GetAchievementBoardResponse* _p13208 = new GetAchievementBoardResponse();
short _w5247 = T815::_m16876(buff);
for (unsigned int _y5248 = 0; _y5248 < (unsigned int)_w5247; _y5248++) {
short _z5249 = T815::_m16876(buff);
if (_z5249 == 0) {
const char* _i5250 = T815::_m16877(buff);
_p13208->setMessageId(_i5250);
delete _i5250;
continue;
}
if (_z5249 == 1) {
const char* _u5251 = T815::_m16877(buff);
_p13208->setRequestId(_u5251);
delete _u5251;
continue;
}
if (_z5249 == 3) {
_p13208->setGetAchievementBoardStatus((GetAchievementBoardStatus*)T815::_m16617(this, buff));
continue;
}
if (_z5249 == 4) {
_p13208->setAchievementBoard((NAchievementBoard*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _p13208;
}

Serializable* T819::_m16801(T817* buff) {
GetAchievementBoardRequest* _h13215 = new GetAchievementBoardRequest();
short _e5253 = T815::_m16876(buff);
for (unsigned int _p5254 = 0; _p5254 < (unsigned int)_e5253; _p5254++) {
short _x5255 = T815::_m16876(buff);
if (_x5255 == 0) {
const char* _x5256 = T815::_m16877(buff);
_h13215->setMessageId(_x5256);
delete _x5256;
continue;
}
if (_x5255 == 1) {
const char* _f5257 = T815::_m16877(buff);
_h13215->setRequestId(_f5257);
delete _f5257;
continue;
}
T815::_m16878(buff);
}
return _h13215;
}

Serializable* T819::_m16802(T817* buff) {
AchieveResponse* _o13222 = new AchieveResponse();
short _f5259 = T815::_m16876(buff);
for (unsigned int _s11803 = 0; _s11803 < (unsigned int)_f5259; _s11803++) {
short _n5261 = T815::_m16876(buff);
if (_n5261 == 0) {
const char* _t5262 = T815::_m16877(buff);
_o13222->setMessageId(_t5262);
delete _t5262;
continue;
}
if (_n5261 == 1) {
const char* _p5263 = T815::_m16877(buff);
_o13222->setRequestId(_p5263);
delete _p5263;
continue;
}
if (_n5261 == 3) {
_o13222->setAchieveStatus((AchieveStatus*)T815::_m16617(this, buff));
continue;
}
if (_n5261 == 4) {
const char* _l5264 = T815::_m16877(buff);
_o13222->setAchivementId(_l5264);
delete _l5264;
continue;
}
if (_n5261 == 5) {
_o13222->setProgress(T815::_m16875(buff));
continue;
}
T815::_m16878(buff);
}
return _o13222;
}

Serializable* T819::_m16803(T817* buff) {
AchieveRequest* _z13230 = new AchieveRequest();
short _l5266 = T815::_m16876(buff);
for (unsigned int _r5267 = 0; _r5267 < (unsigned int)_l5266; _r5267++) {
short _j5268 = T815::_m16876(buff);
if (_j5268 == 0) {
const char* _s5269 = T815::_m16877(buff);
_z13230->setMessageId(_s5269);
delete _s5269;
continue;
}
if (_j5268 == 1) {
const char* _e5270 = T815::_m16877(buff);
_z13230->setRequestId(_e5270);
delete _e5270;
continue;
}
if (_j5268 == 3) {
const char* _y5271 = T815::_m16877(buff);
_z13230->setAchivementId(_y5271);
delete _y5271;
continue;
}
T815::_m16878(buff);
}
return _z13230;
}

Serializable* T819::_m16804(T817* _h11806) {
AchieveWithProgressRequest* _r13238 = new AchieveWithProgressRequest();
short _m11808 = T815::_m16876(_h11806);
for (unsigned int _q5274 = 0; _q5274 < (unsigned int)_m11808; _q5274++) {
short _y5275 = T815::_m16876(_h11806);
if (_y5275 == 0) {
const char* _l5276 = T815::_m16877(_h11806);
_r13238->setMessageId(_l5276);
delete _l5276;
continue;
}
if (_y5275 == 1) {
const char* _i5277 = T815::_m16877(_h11806);
_r13238->setRequestId(_i5277);
delete _i5277;
continue;
}
if (_y5275 == 3) {
const char* _v5278 = T815::_m16877(_h11806);
_r13238->setAchivementId(_v5278);
delete _v5278;
continue;
}
if (_y5275 == 4) {
_r13238->setValue(T815::_m16875(_h11806));
continue;
}
T815::_m16878(_h11806);
}
return _r13238;
}

Serializable* T819::_m16805(T817* buff) {
SearchImmediateGameResponse* _s13246 = new SearchImmediateGameResponse();
short _b5280 = T815::_m16876(buff);
for (unsigned int _m5281 = 0; _m5281 < (unsigned int)_b5280; _m5281++) {
short _y5282 = T815::_m16876(buff);
if (_y5282 == 0) {
const char* _g5283 = T815::_m16877(buff);
_s13246->setMessageId(_g5283);
delete _g5283;
continue;
}
if (_y5282 == 1) {
const char* _d5284 = T815::_m16877(buff);
_s13246->setRequestId(_d5284);
delete _d5284;
continue;
}
if (_y5282 == 3) {
_s13246->setSearchImmediateGameStatus((SearchImmediateGameStatus*)T815::_m16617(this, buff));
continue;
}
if (_y5282 == 4) {
_s13246->setGame((NGame*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _s13246;
}

Serializable* T819::_m16806(T817* buff) {
SearchImmediateGameRequest* _i13253 = new SearchImmediateGameRequest();
short _p5286 = T815::_m16876(buff);
for (unsigned int _x5287 = 0; _x5287 < (unsigned int)_p5286; _x5287++) {
short _q5288 = T815::_m16876(buff);
if (_q5288 == 0) {
const char* _g5289 = T815::_m16877(buff);
_i13253->setMessageId(_g5289);
delete _g5289;
continue;
}
if (_q5288 == 1) {
const char* _d5290 = T815::_m16877(buff);
_i13253->setRequestId(_d5290);
delete _d5290;
continue;
}
T815::_m16878(buff);
}
return _i13253;
}

Serializable* T819::_m16807(T817* _i11812) {
SearchImmediateGameByConditionsRequest* _p13260 = new SearchImmediateGameByConditionsRequest();
short _y11814 = T815::_m16876(_i11812);
for (unsigned int _l5293 = 0; _l5293 < (unsigned int)_y11814; _l5293++) {
short _w5294 = T815::_m16876(_i11812);
if (_w5294 == 0) {
const char* _s5295 = T815::_m16877(_i11812);
_p13260->setMessageId(_s5295);
delete _s5295;
continue;
}
if (_w5294 == 1) {
const char* _m5296 = T815::_m16877(_i11812);
_p13260->setRequestId(_m5296);
delete _m5296;
continue;
}
if (_w5294 == 3) {
_p13260->setQuery((NuggetaQuery*)T815::_m16617(this, _i11812));
continue;
}
if (_w5294 == 4) {
_p13260->setMatchMakingConditions((NMatchMakingConditions*)T815::_m16617(this, _i11812));
continue;
}
T815::_m16878(_i11812);
}
return _p13260;
}

Serializable* T819::_m16808(T817* buff) {
JoinGameResponse* _f13267 = new JoinGameResponse();
short _z5298 = T815::_m16876(buff);
for (unsigned int _v5299 = 0; _v5299 < (unsigned int)_z5298; _v5299++) {
short _k5300 = T815::_m16876(buff);
if (_k5300 == 0) {
const char* _w5301 = T815::_m16877(buff);
_f13267->setMessageId(_w5301);
delete _w5301;
continue;
}
if (_k5300 == 1) {
const char* _y5302 = T815::_m16877(buff);
_f13267->setRequestId(_y5302);
delete _y5302;
continue;
}
if (_k5300 == 3) {
_f13267->setJoinGameStatus((JoinGameStatus*)T815::_m16617(this, buff));
continue;
}
if (_k5300 == 4) {
_f13267->setGame((NGame*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _f13267;
}

Serializable* T819::_m16809(T817* _x11818) {
JoinGameRequest* _d13274 = new JoinGameRequest();
short _c11820 = T815::_m16876(_x11818);
for (unsigned int _y5305 = 0; _y5305 < (unsigned int)_c11820; _y5305++) {
short _b5306 = T815::_m16876(_x11818);
if (_b5306 == 0) {
const char* _c5307 = T815::_m16877(_x11818);
_d13274->setMessageId(_c5307);
delete _c5307;
continue;
}
if (_b5306 == 1) {
const char* _n5308 = T815::_m16877(_x11818);
_d13274->setRequestId(_n5308);
delete _n5308;
continue;
}
if (_b5306 == 3) {
const char* _z5309 = T815::_m16877(_x11818);
_d13274->setGameId(_z5309);
delete _z5309;
continue;
}
T815::_m16878(_x11818);
}
return _d13274;
}

Serializable* T819::_m16810(T817* buff) {
UnjoinGameResponse* _k13282 = new UnjoinGameResponse();
short _k5311 = T815::_m16876(buff);
for (unsigned int _t5312 = 0; _t5312 < (unsigned int)_k5311; _t5312++) {
short _c5313 = T815::_m16876(buff);
if (_c5313 == 0) {
const char* _e5314 = T815::_m16877(buff);
_k13282->setMessageId(_e5314);
delete _e5314;
continue;
}
if (_c5313 == 1) {
const char* _w5315 = T815::_m16877(buff);
_k13282->setRequestId(_w5315);
delete _w5315;
continue;
}
if (_c5313 == 3) {
_k13282->setUnjoinGameStatus((UnjoinGameStatus*)T815::_m16617(this, buff));
continue;
}
if (_c5313 == 4) {
const char* _b5316 = T815::_m16877(buff);
_k13282->setGameId(_b5316);
delete _b5316;
continue;
}
T815::_m16878(buff);
}
return _k13282;
}

Serializable* T819::_m16811(T817* buff) {
UnjoinGameRequest* _v13290 = new UnjoinGameRequest();
short _g5318 = T815::_m16876(buff);
for (unsigned int _z5319 = 0; _z5319 < (unsigned int)_g5318; _z5319++) {
short _f5320 = T815::_m16876(buff);
if (_f5320 == 0) {
const char* _o5321 = T815::_m16877(buff);
_v13290->setMessageId(_o5321);
delete _o5321;
continue;
}
if (_f5320 == 1) {
const char* _x5322 = T815::_m16877(buff);
_v13290->setRequestId(_x5322);
delete _x5322;
continue;
}
if (_f5320 == 3) {
const char* _b5323 = T815::_m16877(buff);
_v13290->setGameId(_b5323);
delete _b5323;
continue;
}
T815::_m16878(buff);
}
return _v13290;
}

Serializable* T819::_m16812(T817* _a11824) {
StartGameResponse* _a13298 = new StartGameResponse();
short _v11826 = T815::_m16876(_a11824);
for (unsigned int _o5326 = 0; _o5326 < (unsigned int)_v11826; _o5326++) {
short _q5327 = T815::_m16876(_a11824);
if (_q5327 == 0) {
const char* _y5328 = T815::_m16877(_a11824);
_a13298->setMessageId(_y5328);
delete _y5328;
continue;
}
if (_q5327 == 1) {
const char* _j5329 = T815::_m16877(_a11824);
_a13298->setRequestId(_j5329);
delete _j5329;
continue;
}
if (_q5327 == 3) {
_a13298->setStartGameStatus((StartGameStatus*)T815::_m16617(this, _a11824));
continue;
}
if (_q5327 == 4) {
const char* _r5330 = T815::_m16877(_a11824);
_a13298->setGameId(_r5330);
delete _r5330;
continue;
}
T815::_m16878(_a11824);
}
return _a13298;
}

Serializable* T819::_m16813(T817* buff) {
StartGameRequest* _s13306 = new StartGameRequest();
short _b5332 = T815::_m16876(buff);
for (unsigned int _y5333 = 0; _y5333 < (unsigned int)_b5332; _y5333++) {
short _p5334 = T815::_m16876(buff);
if (_p5334 == 0) {
const char* _y5335 = T815::_m16877(buff);
_s13306->setMessageId(_y5335);
delete _y5335;
continue;
}
if (_p5334 == 1) {
const char* _c5336 = T815::_m16877(buff);
_s13306->setRequestId(_c5336);
delete _c5336;
continue;
}
if (_p5334 == 3) {
const char* _h5337 = T815::_m16877(buff);
_s13306->setGameId(_h5337);
delete _h5337;
continue;
}
T815::_m16878(buff);
}
return _s13306;
}

Serializable* T819::_m16814(T817* buff) {
StopGameResponse* _l13314 = new StopGameResponse();
short _g5339 = T815::_m16876(buff);
for (unsigned int _n5340 = 0; _n5340 < (unsigned int)_g5339; _n5340++) {
short _x5341 = T815::_m16876(buff);
if (_x5341 == 0) {
const char* _t5342 = T815::_m16877(buff);
_l13314->setMessageId(_t5342);
delete _t5342;
continue;
}
if (_x5341 == 1) {
const char* _t5343 = T815::_m16877(buff);
_l13314->setRequestId(_t5343);
delete _t5343;
continue;
}
if (_x5341 == 3) {
_l13314->setStopGameStatus((StopGameStatus*)T815::_m16617(this, buff));
continue;
}
if (_x5341 == 4) {
const char* _q5344 = T815::_m16877(buff);
_l13314->setGameId(_q5344);
delete _q5344;
continue;
}
T815::_m16878(buff);
}
return _l13314;
}

Serializable* T819::_m16815(T817* buff) {
StopGameRequest* _p13322 = new StopGameRequest();
short _k5346 = T815::_m16876(buff);
for (unsigned int _n11832 = 0; _n11832 < (unsigned int)_k5346; _n11832++) {
short _z5348 = T815::_m16876(buff);
if (_z5348 == 0) {
const char* _x5349 = T815::_m16877(buff);
_p13322->setMessageId(_x5349);
delete _x5349;
continue;
}
if (_z5348 == 1) {
const char* _e5350 = T815::_m16877(buff);
_p13322->setRequestId(_e5350);
delete _e5350;
continue;
}
if (_z5348 == 3) {
const char* _s5351 = T815::_m16877(buff);
_p13322->setGameId(_s5351);
delete _s5351;
continue;
}
T815::_m16878(buff);
}
return _p13322;
}

Serializable* T819::_m16816(T817* buff) {
CreateGameResponse* _n13330 = new CreateGameResponse();
short _b5353 = T815::_m16876(buff);
for (unsigned int _l5354 = 0; _l5354 < (unsigned int)_b5353; _l5354++) {
short _r5355 = T815::_m16876(buff);
if (_r5355 == 0) {
const char* _u5356 = T815::_m16877(buff);
_n13330->setMessageId(_u5356);
delete _u5356;
continue;
}
if (_r5355 == 1) {
const char* _k5357 = T815::_m16877(buff);
_n13330->setRequestId(_k5357);
delete _k5357;
continue;
}
if (_r5355 == 3) {
_n13330->setCreateGameStatus((CreateGameStatus*)T815::_m16617(this, buff));
continue;
}
if (_r5355 == 4) {
const char* _f5358 = T815::_m16877(buff);
_n13330->setGameId(_f5358);
delete _f5358;
continue;
}
T815::_m16878(buff);
}
return _n13330;
}

Serializable* T819::_m16817(T817* _w11835) {
CreateGameRequest* _w13338 = new CreateGameRequest();
short _i11837 = T815::_m16876(_w11835);
for (unsigned int _v5361 = 0; _v5361 < (unsigned int)_i11837; _v5361++) {
short _c5362 = T815::_m16876(_w11835);
if (_c5362 == 0) {
const char* _v5363 = T815::_m16877(_w11835);
_w13338->setMessageId(_v5363);
delete _v5363;
continue;
}
if (_c5362 == 1) {
const char* _l5364 = T815::_m16877(_w11835);
_w13338->setRequestId(_l5364);
delete _l5364;
continue;
}
if (_c5362 == 3) {
_w13338->setGame((NGame*)T815::_m16617(this, _w11835));
continue;
}
T815::_m16878(_w11835);
}
return _w13338;
}

Serializable* T819::_m16818(T817* buff) {
GetGamesResponse* _e13345 = new GetGamesResponse();
short _t5366 = T815::_m16876(buff);
for (unsigned int _b5367 = 0; _b5367 < (unsigned int)_t5366; _b5367++) {
short _p5368 = T815::_m16876(buff);
if (_p5368 == 0) {
const char* _u5369 = T815::_m16877(buff);
_e13345->setMessageId(_u5369);
delete _u5369;
continue;
}
if (_p5368 == 1) {
const char* _j5370 = T815::_m16877(buff);
_e13345->setRequestId(_j5370);
delete _j5370;
continue;
}
if (_p5368 == 3) {
_e13345->setGetGamesStatus((GetGamesStatus*)T815::_m16617(this, buff));
continue;
}
if (_p5368 == 4) {
std::vector<NGame*>* _u13351 = 0;
unsigned char _n13352 = buff->_m16314();
if (_n13352 != T809::_g15500) {
buff->_m16315();
int _t13353 = buff->_m16316();
_u13351 = new std::vector<NGame*>();
for (unsigned int _j5374 = 0; _j5374 < (unsigned int)_t13353; _j5374++) {
_u13351->push_back((NGame*)T815::_m16617(this, buff));
}
}
_e13345->setGames(_u13351);
continue;
}
T815::_m16878(buff);
}
return _e13345;
}

Serializable* T819::_m16819(T817* _b11841) {
GetGamesRequest* _y13356 = new GetGamesRequest();
short _p11843 = T815::_m16876(_b11841);
for (unsigned int _o5377 = 0; _o5377 < (unsigned int)_p11843; _o5377++) {
short _y5378 = T815::_m16876(_b11841);
if (_y5378 == 0) {
const char* _d5379 = T815::_m16877(_b11841);
_y13356->setMessageId(_d5379);
delete _d5379;
continue;
}
if (_y5378 == 1) {
const char* _o5380 = T815::_m16877(_b11841);
_y13356->setRequestId(_o5380);
delete _o5380;
continue;
}
if (_y5378 == 3) {
_y13356->setDbQuery((NuggetaQuery*)T815::_m16617(this, _b11841));
continue;
}
T815::_m16878(_b11841);
}
return _y13356;
}

Serializable* T819::_m16820(T817* buff) {
SaveAsGhostResponse* _c13363 = new SaveAsGhostResponse();
short _i5382 = T815::_m16876(buff);
for (unsigned int _o5383 = 0; _o5383 < (unsigned int)_i5382; _o5383++) {
short _s5384 = T815::_m16876(buff);
if (_s5384 == 0) {
const char* _u5385 = T815::_m16877(buff);
_c13363->setMessageId(_u5385);
delete _u5385;
continue;
}
if (_s5384 == 1) {
const char* _d5386 = T815::_m16877(buff);
_c13363->setRequestId(_d5386);
delete _d5386;
continue;
}
if (_s5384 == 3) {
_c13363->setSaveAsGhostStatus((SaveAsGhostStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _c13363;
}

Serializable* T819::_m16821(T817* buff) {
SaveAsGhostRequest* _y13370 = new SaveAsGhostRequest();
short _e5388 = T815::_m16876(buff);
for (unsigned int _b5389 = 0; _b5389 < (unsigned int)_e5388; _b5389++) {
short _k5390 = T815::_m16876(buff);
if (_k5390 == 0) {
const char* _w5391 = T815::_m16877(buff);
_y13370->setMessageId(_w5391);
delete _w5391;
continue;
}
if (_k5390 == 1) {
const char* _p5392 = T815::_m16877(buff);
_y13370->setRequestId(_p5392);
delete _p5392;
continue;
}
if (_k5390 == 3) {
_y13370->setGame((NGame*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _y13370;
}

Serializable* T819::_m16822(T817* _x11847) {
GetGhostsResponse* _f13377 = new GetGhostsResponse();
short _k11849 = T815::_m16876(_x11847);
for (unsigned int _k5395 = 0; _k5395 < (unsigned int)_k11849; _k5395++) {
short _k5396 = T815::_m16876(_x11847);
if (_k5396 == 0) {
const char* _q5397 = T815::_m16877(_x11847);
_f13377->setMessageId(_q5397);
delete _q5397;
continue;
}
if (_k5396 == 1) {
const char* _n5398 = T815::_m16877(_x11847);
_f13377->setRequestId(_n5398);
delete _n5398;
continue;
}
if (_k5396 == 3) {
_f13377->setGetGhostsStatus((GetGhostsStatus*)T815::_m16617(this, _x11847));
continue;
}
if (_k5396 == 4) {
std::vector<NGame*>* _m13383 = 0;
unsigned char _p13384 = _x11847->_m16314();
if (_p13384 != T809::_g15500) {
_x11847->_m16315();
int _n13385 = _x11847->_m16316();
_m13383 = new std::vector<NGame*>();
for (unsigned int _u5402 = 0; _u5402 < (unsigned int)_n13385; _u5402++) {
_m13383->push_back((NGame*)T815::_m16617(this, _x11847));
}
}
_f13377->setGhosts(_m13383);
continue;
}
T815::_m16878(_x11847);
}
return _f13377;
}

Serializable* T819::_m16823(T817* buff) {
GetGhostsRequest* _n13388 = new GetGhostsRequest();
short _s5404 = T815::_m16876(buff);
for (unsigned int _o5405 = 0; _o5405 < (unsigned int)_s5404; _o5405++) {
short _i5406 = T815::_m16876(buff);
if (_i5406 == 0) {
const char* _a5407 = T815::_m16877(buff);
_n13388->setMessageId(_a5407);
delete _a5407;
continue;
}
if (_i5406 == 1) {
const char* _v5408 = T815::_m16877(buff);
_n13388->setRequestId(_v5408);
delete _v5408;
continue;
}
if (_i5406 == 3) {
_n13388->setDbQuery((NuggetaQuery*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _n13388;
}

Serializable* T819::_m16824(T817* buff) {
LoadGhostResponse* _t13395 = new LoadGhostResponse();
short _j5410 = T815::_m16876(buff);
for (unsigned int _c5411 = 0; _c5411 < (unsigned int)_j5410; _c5411++) {
short _q5412 = T815::_m16876(buff);
if (_q5412 == 0) {
const char* _k5413 = T815::_m16877(buff);
_t13395->setMessageId(_k5413);
delete _k5413;
continue;
}
if (_q5412 == 1) {
const char* _n5414 = T815::_m16877(buff);
_t13395->setRequestId(_n5414);
delete _n5414;
continue;
}
if (_q5412 == 3) {
_t13395->setLoadGhostStatus((LoadGhostStatus*)T815::_m16617(this, buff));
continue;
}
if (_q5412 == 4) {
_t13395->setGame((NGame*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _t13395;
}

Serializable* T819::_m16825(T817* _e11853) {
LoadGhostRequest* _y13402 = new LoadGhostRequest();
short _y11855 = T815::_m16876(_e11853);
for (unsigned int _d5417 = 0; _d5417 < (unsigned int)_y11855; _d5417++) {
short _x5418 = T815::_m16876(_e11853);
if (_x5418 == 0) {
const char* _o5419 = T815::_m16877(_e11853);
_y13402->setMessageId(_o5419);
delete _o5419;
continue;
}
if (_x5418 == 1) {
const char* _e5420 = T815::_m16877(_e11853);
_y13402->setRequestId(_e5420);
delete _e5420;
continue;
}
if (_x5418 == 3) {
const char* _b5421 = T815::_m16877(_e11853);
_y13402->setGameId(_b5421);
delete _b5421;
continue;
}
T815::_m16878(_e11853);
}
return _y13402;
}

Serializable* T819::_m16826(T817* buff) {
SendGameChatResponse* _w13410 = new SendGameChatResponse();
short _f5423 = T815::_m16876(buff);
for (unsigned int _x5424 = 0; _x5424 < (unsigned int)_f5423; _x5424++) {
short _o5425 = T815::_m16876(buff);
if (_o5425 == 0) {
const char* _g5426 = T815::_m16877(buff);
_w13410->setMessageId(_g5426);
delete _g5426;
continue;
}
if (_o5425 == 1) {
const char* _u5427 = T815::_m16877(buff);
_w13410->setRequestId(_u5427);
delete _u5427;
continue;
}
if (_o5425 == 3) {
_w13410->setSendGameChatStatus((SendGameChatStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _w13410;
}

Serializable* T819::_m16827(T817* _i11859) {
SendGameChatRequest* _f13417 = new SendGameChatRequest();
short _p11861 = T815::_m16876(_i11859);
for (unsigned int _m5430 = 0; _m5430 < (unsigned int)_p11861; _m5430++) {
short _p5431 = T815::_m16876(_i11859);
if (_p5431 == 0) {
const char* _u5432 = T815::_m16877(_i11859);
_f13417->setMessageId(_u5432);
delete _u5432;
continue;
}
if (_p5431 == 1) {
const char* _t5433 = T815::_m16877(_i11859);
_f13417->setRequestId(_t5433);
delete _t5433;
continue;
}
if (_p5431 == 3) {
const char* _o5434 = T815::_m16877(_i11859);
_f13417->setGameId(_o5434);
delete _o5434;
continue;
}
if (_p5431 == 4) {
const char* _e5435 = T815::_m16877(_i11859);
_f13417->setMessage(_e5435);
delete _e5435;
continue;
}
T815::_m16878(_i11859);
}
return _f13417;
}

Serializable* T819::_m16828(T817* buff) {
SendGameChatToPlayerRequest* _t13426 = new SendGameChatToPlayerRequest();
short _m5437 = T815::_m16876(buff);
for (unsigned int _w5438 = 0; _w5438 < (unsigned int)_m5437; _w5438++) {
short _i5439 = T815::_m16876(buff);
if (_i5439 == 0) {
const char* _i5440 = T815::_m16877(buff);
_t13426->setMessageId(_i5440);
delete _i5440;
continue;
}
if (_i5439 == 1) {
const char* _p5441 = T815::_m16877(buff);
_t13426->setRequestId(_p5441);
delete _p5441;
continue;
}
if (_i5439 == 3) {
const char* _r5442 = T815::_m16877(buff);
_t13426->setGameId(_r5442);
delete _r5442;
continue;
}
if (_i5439 == 4) {
const char* _y5443 = T815::_m16877(buff);
_t13426->setPlayerId(_y5443);
delete _y5443;
continue;
}
if (_i5439 == 5) {
const char* _k5444 = T815::_m16877(buff);
_t13426->setMessage(_k5444);
delete _k5444;
continue;
}
T815::_m16878(buff);
}
return _t13426;
}

Serializable* T819::_m16829(T817* buff) {
SendGameChatToPlayerListRequest* _m13436 = new SendGameChatToPlayerListRequest();
short _z5446 = T815::_m16876(buff);
for (unsigned int _m5447 = 0; _m5447 < (unsigned int)_z5446; _m5447++) {
short _r5448 = T815::_m16876(buff);
if (_r5448 == 0) {
const char* _l5449 = T815::_m16877(buff);
_m13436->setMessageId(_l5449);
delete _l5449;
continue;
}
if (_r5448 == 1) {
const char* _f5450 = T815::_m16877(buff);
_m13436->setRequestId(_f5450);
delete _f5450;
continue;
}
if (_r5448 == 3) {
const char* _w5451 = T815::_m16877(buff);
_m13436->setGameId(_w5451);
delete _w5451;
continue;
}
if (_r5448 == 4) {
const char* _y5452 = T815::_m16877(buff);
_m13436->setMessage(_y5452);
delete _y5452;
continue;
}
T815::_m16878(buff);
}
return _m13436;
}

Serializable* T819::_m16830(T817* _i11865) {
GetStorablesResponse* _m13445 = new GetStorablesResponse();
short _i11867 = T815::_m16876(_i11865);
for (unsigned int _u5455 = 0; _u5455 < (unsigned int)_i11867; _u5455++) {
short _s5456 = T815::_m16876(_i11865);
if (_s5456 == 0) {
const char* _p5457 = T815::_m16877(_i11865);
_m13445->setMessageId(_p5457);
delete _p5457;
continue;
}
if (_s5456 == 1) {
const char* _g5458 = T815::_m16877(_i11865);
_m13445->setRequestId(_g5458);
delete _g5458;
continue;
}
if (_s5456 == 3) {
_m13445->setGetStorablesStatus((GetStorablesStatus*)T815::_m16617(this, _i11865));
continue;
}
if (_s5456 == 4) {
std::vector<Storable*>* _h13451 = 0;
unsigned char _r13452 = _i11865->_m16314();
if (_r13452 != T809::_g15500) {
_i11865->_m16315();
int _g13453 = _i11865->_m16316();
_h13451 = new std::vector<Storable*>();
for (unsigned int _b5462 = 0; _b5462 < (unsigned int)_g13453; _b5462++) {
_h13451->push_back((Storable*)T815::_m16617(this, _i11865));
}
}
_m13445->setStorables(_h13451);
continue;
}
T815::_m16878(_i11865);
}
return _m13445;
}

Serializable* T819::_m16831(T817* buff) {
GetStorablesRequest* _i13456 = new GetStorablesRequest();
short _t5464 = T815::_m16876(buff);
for (unsigned int _h5465 = 0; _h5465 < (unsigned int)_t5464; _h5465++) {
short _t5466 = T815::_m16876(buff);
if (_t5466 == 0) {
const char* _c5467 = T815::_m16877(buff);
_i13456->setMessageId(_c5467);
delete _c5467;
continue;
}
if (_t5466 == 1) {
const char* _w5468 = T815::_m16877(buff);
_i13456->setRequestId(_w5468);
delete _w5468;
continue;
}
if (_t5466 == 3) {
_i13456->setDbQuery((NuggetaQuery*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _i13456;
}

Serializable* T819::_m16832(T817* buff) {
SaveStorableResponse* _x13463 = new SaveStorableResponse();
short _e5470 = T815::_m16876(buff);
for (unsigned int _d5471 = 0; _d5471 < (unsigned int)_e5470; _d5471++) {
short _k5472 = T815::_m16876(buff);
if (_k5472 == 0) {
const char* _y5473 = T815::_m16877(buff);
_x13463->setMessageId(_y5473);
delete _y5473;
continue;
}
if (_k5472 == 1) {
const char* _l5474 = T815::_m16877(buff);
_x13463->setRequestId(_l5474);
delete _l5474;
continue;
}
if (_k5472 == 3) {
_x13463->setSaveStorableStatus((SaveStorableStatus*)T815::_m16617(this, buff));
continue;
}
if (_k5472 == 4) {
const char* _f5475 = T815::_m16877(buff);
_x13463->setStoreId(_f5475);
delete _f5475;
continue;
}
T815::_m16878(buff);
}
return _x13463;
}

Serializable* T819::_m16833(T817* buff) {
SaveStorableRequest* _o13471 = new SaveStorableRequest();
short _y5477 = T815::_m16876(buff);
for (unsigned int _j5478 = 0; _j5478 < (unsigned int)_y5477; _j5478++) {
short _x5479 = T815::_m16876(buff);
if (_x5479 == 0) {
const char* _r5480 = T815::_m16877(buff);
_o13471->setMessageId(_r5480);
delete _r5480;
continue;
}
if (_x5479 == 1) {
const char* _u5481 = T815::_m16877(buff);
_o13471->setRequestId(_u5481);
delete _u5481;
continue;
}
if (_x5479 == 3) {
_o13471->setStorable((Storable*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _o13471;
}

Serializable* T819::_m16834(T817* _k11871) {
NextPlayerTurnResponse* _q13478 = new NextPlayerTurnResponse();
short _d11873 = T815::_m16876(_k11871);
for (unsigned int _u5484 = 0; _u5484 < (unsigned int)_d11873; _u5484++) {
short _l5485 = T815::_m16876(_k11871);
if (_l5485 == 0) {
const char* _e5486 = T815::_m16877(_k11871);
_q13478->setMessageId(_e5486);
delete _e5486;
continue;
}
if (_l5485 == 1) {
const char* _g5487 = T815::_m16877(_k11871);
_q13478->setRequestId(_g5487);
delete _g5487;
continue;
}
if (_l5485 == 3) {
_q13478->setNextPlayerTurnStatus((NextPlayerTurnStatus*)T815::_m16617(this, _k11871));
continue;
}
T815::_m16878(_k11871);
}
return _q13478;
}

Serializable* T819::_m16835(T817* buff) {
NextPlayerTurnRequest* _m13485 = new NextPlayerTurnRequest();
short _k5489 = T815::_m16876(buff);
for (unsigned int _v5490 = 0; _v5490 < (unsigned int)_k5489; _v5490++) {
short _y5491 = T815::_m16876(buff);
if (_y5491 == 0) {
const char* _p5492 = T815::_m16877(buff);
_m13485->setMessageId(_p5492);
delete _p5492;
continue;
}
if (_y5491 == 1) {
const char* _v5493 = T815::_m16877(buff);
_m13485->setRequestId(_v5493);
delete _v5493;
continue;
}
if (_y5491 == 3) {
const char* _x5494 = T815::_m16877(buff);
_m13485->setGameId(_x5494);
delete _x5494;
continue;
}
T815::_m16878(buff);
}
return _m13485;
}

Serializable* T819::_m16836(T817* buff) {
SetPlayerNameResponse* _b13493 = new SetPlayerNameResponse();
short _b5496 = T815::_m16876(buff);
for (unsigned int _s5497 = 0; _s5497 < (unsigned int)_b5496; _s5497++) {
short _m5498 = T815::_m16876(buff);
if (_m5498 == 0) {
const char* _j5499 = T815::_m16877(buff);
_b13493->setMessageId(_j5499);
delete _j5499;
continue;
}
if (_m5498 == 1) {
const char* _j5500 = T815::_m16877(buff);
_b13493->setRequestId(_j5500);
delete _j5500;
continue;
}
if (_m5498 == 3) {
_b13493->setSetPlayerNameStatus((SetPlayerNameStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _b13493;
}

Serializable* T819::_m16837(T817* _k11877) {
SetPlayerNameRequest* _r13500 = new SetPlayerNameRequest();
short _g5502 = T815::_m16876(_k11877);
for (unsigned int _e5503 = 0; _e5503 < (unsigned int)_g5502; _e5503++) {
short _l5504 = T815::_m16876(_k11877);
if (_l5504 == 0) {
const char* _o5505 = T815::_m16877(_k11877);
_r13500->setMessageId(_o5505);
delete _o5505;
continue;
}
if (_l5504 == 1) {
const char* _u5506 = T815::_m16877(_k11877);
_r13500->setRequestId(_u5506);
delete _u5506;
continue;
}
if (_l5504 == 3) {
const char* _p5507 = T815::_m16877(_k11877);
_r13500->setName(_p5507);
delete _p5507;
continue;
}
T815::_m16878(_k11877);
}
return _r13500;
}

Serializable* T819::_m16838(T817* buff) {
UpdateStorableResponse* _r13508 = new UpdateStorableResponse();
short _l11879 = T815::_m16876(buff);
for (unsigned int _x5510 = 0; _x5510 < (unsigned int)_l11879; _x5510++) {
short _a5511 = T815::_m16876(buff);
if (_a5511 == 0) {
const char* _x5512 = T815::_m16877(buff);
_r13508->setMessageId(_x5512);
delete _x5512;
continue;
}
if (_a5511 == 1) {
const char* _m5513 = T815::_m16877(buff);
_r13508->setRequestId(_m5513);
delete _m5513;
continue;
}
if (_a5511 == 3) {
_r13508->setUpdateStorableStatus((UpdateStorableStatus*)T815::_m16617(this, buff));
continue;
}
if (_a5511 == 4) {
const char* _a5514 = T815::_m16877(buff);
_r13508->setStoreId(_a5514);
delete _a5514;
continue;
}
T815::_m16878(buff);
}
return _r13508;
}

Serializable* T819::_m16839(T817* buff) {
UpdateStorableRequest* _a13516 = new UpdateStorableRequest();
short _r5516 = T815::_m16876(buff);
for (unsigned int _p5517 = 0; _p5517 < (unsigned int)_r5516; _p5517++) {
short _p5518 = T815::_m16876(buff);
if (_p5518 == 0) {
const char* _k5519 = T815::_m16877(buff);
_a13516->setMessageId(_k5519);
delete _k5519;
continue;
}
if (_p5518 == 1) {
const char* _y5520 = T815::_m16877(buff);
_a13516->setRequestId(_y5520);
delete _y5520;
continue;
}
if (_p5518 == 3) {
_a13516->setStorable((Storable*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _a13516;
}

Serializable* T819::_m16840(T817* buff) {
RemoveStorableResponse* _m13523 = new RemoveStorableResponse();
short _k5522 = T815::_m16876(buff);
for (unsigned int _p5523 = 0; _p5523 < (unsigned int)_k5522; _p5523++) {
short _b5524 = T815::_m16876(buff);
if (_b5524 == 0) {
const char* _e5525 = T815::_m16877(buff);
_m13523->setMessageId(_e5525);
delete _e5525;
continue;
}
if (_b5524 == 1) {
const char* _c5526 = T815::_m16877(buff);
_m13523->setRequestId(_c5526);
delete _c5526;
continue;
}
if (_b5524 == 3) {
_m13523->setRemoveStorableStatus((RemoveStorableStatus*)T815::_m16617(this, buff));
continue;
}
if (_b5524 == 4) {
const char* _b5527 = T815::_m16877(buff);
_m13523->setStoreId(_b5527);
delete _b5527;
continue;
}
T815::_m16878(buff);
}
return _m13523;
}

Serializable* T819::_m16841(T817* buff) {
RemoveStorableRequest* _g13531 = new RemoveStorableRequest();
short _j5529 = T815::_m16876(buff);
for (unsigned int _s11885 = 0; _s11885 < (unsigned int)_j5529; _s11885++) {
short _r5531 = T815::_m16876(buff);
if (_r5531 == 0) {
const char* _c5532 = T815::_m16877(buff);
_g13531->setMessageId(_c5532);
delete _c5532;
continue;
}
if (_r5531 == 1) {
const char* _l5533 = T815::_m16877(buff);
_g13531->setRequestId(_l5533);
delete _l5533;
continue;
}
if (_r5531 == 3) {
_g13531->setStorable((Storable*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _g13531;
}

Serializable* T819::_m16842(T817* _n11888) {
InviteThirdPartyFriendResponse* _t13538 = new InviteThirdPartyFriendResponse();
short _f5535 = T815::_m16876(_n11888);
for (unsigned int _q5536 = 0; _q5536 < (unsigned int)_f5535; _q5536++) {
short _f5537 = T815::_m16876(_n11888);
if (_f5537 == 0) {
const char* _p5538 = T815::_m16877(_n11888);
_t13538->setMessageId(_p5538);
delete _p5538;
continue;
}
if (_f5537 == 1) {
const char* _q5539 = T815::_m16877(_n11888);
_t13538->setRequestId(_q5539);
delete _q5539;
continue;
}
if (_f5537 == 3) {
_t13538->setInviteThirdPartyFriendStatus((InviteThirdPartyFriendStatus*)T815::_m16617(this, _n11888));
continue;
}
if (_f5537 == 4) {
const char* _t5540 = T815::_m16877(_n11888);
_t13538->setThirdPartyId(_t5540);
delete _t5540;
continue;
}
T815::_m16878(_n11888);
}
return _t13538;
}

Serializable* T819::_m16843(T817* buff) {
InviteThirdPartyFriendRequest* _q13546 = new InviteThirdPartyFriendRequest();
short _u11890 = T815::_m16876(buff);
for (unsigned int _y5543 = 0; _y5543 < (unsigned int)_u11890; _y5543++) {
short _f5544 = T815::_m16876(buff);
if (_f5544 == 0) {
const char* _r5545 = T815::_m16877(buff);
_q13546->setMessageId(_r5545);
delete _r5545;
continue;
}
if (_f5544 == 1) {
const char* _i5546 = T815::_m16877(buff);
_q13546->setRequestId(_i5546);
delete _i5546;
continue;
}
if (_f5544 == 3) {
const char* _l5547 = T815::_m16877(buff);
_q13546->setThirdPartyId(_l5547);
delete _l5547;
continue;
}
if (_f5544 == 4) {
const char* _n5548 = T815::_m16877(buff);
_q13546->setTitle(_n5548);
delete _n5548;
continue;
}
if (_f5544 == 5) {
const char* _b5549 = T815::_m16877(buff);
_q13546->setInviteMessage(_b5549);
delete _b5549;
continue;
}
if (_f5544 == 6) {
const char* _c5550 = T815::_m16877(buff);
_q13546->setPictureUrl(_c5550);
delete _c5550;
continue;
}
if (_f5544 == 7) {
const char* _x5551 = T815::_m16877(buff);
_q13546->setLink(_x5551);
delete _x5551;
continue;
}
if (_f5544 == 8) {
_q13546->setThirdPartySource((ThirdPartySource*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _q13546;
}

Serializable* T819::_m16844(T817* _f11894) {
PublishThirdPartyMessageResponse* _s13558 = new PublishThirdPartyMessageResponse();
short _h11896 = T815::_m16876(_f11894);
for (unsigned int _h5554 = 0; _h5554 < (unsigned int)_h11896; _h5554++) {
short _r5555 = T815::_m16876(_f11894);
if (_r5555 == 0) {
const char* _y5556 = T815::_m16877(_f11894);
_s13558->setMessageId(_y5556);
delete _y5556;
continue;
}
if (_r5555 == 1) {
const char* _h5557 = T815::_m16877(_f11894);
_s13558->setRequestId(_h5557);
delete _h5557;
continue;
}
if (_r5555 == 3) {
_s13558->setPublishThirdPartyMessageStatus((PublishThirdPartyMessageStatus*)T815::_m16617(this, _f11894));
continue;
}
T815::_m16878(_f11894);
}
return _s13558;
}

Serializable* T819::_m16845(T817* buff) {
PublishThirdPartyMessageRequest* _f13565 = new PublishThirdPartyMessageRequest();
short _j5559 = T815::_m16876(buff);
for (unsigned int _h5560 = 0; _h5560 < (unsigned int)_j5559; _h5560++) {
short _z5561 = T815::_m16876(buff);
if (_z5561 == 0) {
const char* _c5562 = T815::_m16877(buff);
_f13565->setMessageId(_c5562);
delete _c5562;
continue;
}
if (_z5561 == 1) {
const char* _j5563 = T815::_m16877(buff);
_f13565->setRequestId(_j5563);
delete _j5563;
continue;
}
if (_z5561 == 3) {
const char* _z5564 = T815::_m16877(buff);
_f13565->setTitle(_z5564);
delete _z5564;
continue;
}
if (_z5561 == 4) {
const char* _k5565 = T815::_m16877(buff);
_f13565->setMessage(_k5565);
delete _k5565;
continue;
}
if (_z5561 == 5) {
const char* _a5566 = T815::_m16877(buff);
_f13565->setPictureUrl(_a5566);
delete _a5566;
continue;
}
if (_z5561 == 6) {
const char* _k5567 = T815::_m16877(buff);
_f13565->setLink(_k5567);
delete _k5567;
continue;
}
if (_z5561 == 7) {
_f13565->setThirdPartySource((ThirdPartySource*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _f13565;
}

Serializable* T819::_m16846(T817* buff) {
ThirdPartyLoginResponse* _f13576 = new ThirdPartyLoginResponse();
short _i5569 = T815::_m16876(buff);
for (unsigned int _b5570 = 0; _b5570 < (unsigned int)_i5569; _b5570++) {
short _y5571 = T815::_m16876(buff);
if (_y5571 == 0) {
const char* _p5572 = T815::_m16877(buff);
_f13576->setMessageId(_p5572);
delete _p5572;
continue;
}
if (_y5571 == 1) {
const char* _u5573 = T815::_m16877(buff);
_f13576->setRequestId(_u5573);
delete _u5573;
continue;
}
if (_y5571 == 3) {
_f13576->setThirdPartyLoginStatus((ThirdPartyLoginStatus*)T815::_m16617(this, buff));
continue;
}
if (_y5571 == 4) {
_f13576->setPlayer((NPlayer*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _f13576;
}

Serializable* T819::_m16847(T817* _h11900) {
ThirdPartyLoginRequest* _x13583 = new ThirdPartyLoginRequest();
short _s11902 = T815::_m16876(_h11900);
for (unsigned int _q5576 = 0; _q5576 < (unsigned int)_s11902; _q5576++) {
short _s5577 = T815::_m16876(_h11900);
if (_s5577 == 0) {
const char* _y5578 = T815::_m16877(_h11900);
_x13583->setMessageId(_y5578);
delete _y5578;
continue;
}
if (_s5577 == 1) {
const char* _x5579 = T815::_m16877(_h11900);
_x13583->setRequestId(_x5579);
delete _x5579;
continue;
}
if (_s5577 == 3) {
_x13583->setThirdPartySource((ThirdPartySource*)T815::_m16617(this, _h11900));
continue;
}
T815::_m16878(_h11900);
}
return _x13583;
}

Serializable* T819::_m16848(T817* buff) {
ThirdPartyLoginWithTokenRequest* _y13590 = new ThirdPartyLoginWithTokenRequest();
short _p5581 = T815::_m16876(buff);
for (unsigned int _f5582 = 0; _f5582 < (unsigned int)_p5581; _f5582++) {
short _y5583 = T815::_m16876(buff);
if (_y5583 == 0) {
const char* _e5584 = T815::_m16877(buff);
_y13590->setMessageId(_e5584);
delete _e5584;
continue;
}
if (_y5583 == 1) {
const char* _n5585 = T815::_m16877(buff);
_y13590->setRequestId(_n5585);
delete _n5585;
continue;
}
if (_y5583 == 3) {
_y13590->setThirdPartySource((ThirdPartySource*)T815::_m16617(this, buff));
continue;
}
if (_y5583 == 4) {
const char* _s5586 = T815::_m16877(buff);
_y13590->setAccessToken(_s5586);
delete _s5586;
continue;
}
T815::_m16878(buff);
}
return _y13590;
}

Serializable* T819::_m16849(T817* _r11906) {
SaveGameResponse* _l13598 = new SaveGameResponse();
short _h11908 = T815::_m16876(_r11906);
for (unsigned int _z5589 = 0; _z5589 < (unsigned int)_h11908; _z5589++) {
short _q5590 = T815::_m16876(_r11906);
if (_q5590 == 0) {
const char* _i5591 = T815::_m16877(_r11906);
_l13598->setMessageId(_i5591);
delete _i5591;
continue;
}
if (_q5590 == 1) {
const char* _e5592 = T815::_m16877(_r11906);
_l13598->setRequestId(_e5592);
delete _e5592;
continue;
}
if (_q5590 == 3) {
_l13598->setSaveGameStatus((SaveGameStatus*)T815::_m16617(this, _r11906));
continue;
}
if (_q5590 == 4) {
const char* _u5593 = T815::_m16877(_r11906);
_l13598->setGameId(_u5593);
delete _u5593;
continue;
}
T815::_m16878(_r11906);
}
return _l13598;
}

Serializable* T819::_m16850(T817* buff) {
SaveGameRequest* _f13606 = new SaveGameRequest();
short _m5595 = T815::_m16876(buff);
for (unsigned int _m5596 = 0; _m5596 < (unsigned int)_m5595; _m5596++) {
short _o5597 = T815::_m16876(buff);
if (_o5597 == 0) {
const char* _k5598 = T815::_m16877(buff);
_f13606->setMessageId(_k5598);
delete _k5598;
continue;
}
if (_o5597 == 1) {
const char* _q5599 = T815::_m16877(buff);
_f13606->setRequestId(_q5599);
delete _q5599;
continue;
}
if (_o5597 == 3) {
_f13606->setGame((NGame*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _f13606;
}

Serializable* T819::_m16851(T817* buff) {
LoadGameResponse* _q13613 = new LoadGameResponse();
short _g5601 = T815::_m16876(buff);
for (unsigned int _m5602 = 0; _m5602 < (unsigned int)_g5601; _m5602++) {
short _m5603 = T815::_m16876(buff);
if (_m5603 == 0) {
const char* _b5604 = T815::_m16877(buff);
_q13613->setMessageId(_b5604);
delete _b5604;
continue;
}
if (_m5603 == 1) {
const char* _p5605 = T815::_m16877(buff);
_q13613->setRequestId(_p5605);
delete _p5605;
continue;
}
if (_m5603 == 3) {
_q13613->setLoadGameStatus((LoadGameStatus*)T815::_m16617(this, buff));
continue;
}
if (_m5603 == 4) {
_q13613->setGame((NGame*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _q13613;
}

Serializable* T819::_m16852(T817* _p11912) {
LoadGameRequest* _e13620 = new LoadGameRequest();
short _j11914 = T815::_m16876(_p11912);
for (unsigned int _n5608 = 0; _n5608 < (unsigned int)_j11914; _n5608++) {
short _l5609 = T815::_m16876(_p11912);
if (_l5609 == 0) {
const char* _r5610 = T815::_m16877(_p11912);
_e13620->setMessageId(_r5610);
delete _r5610;
continue;
}
if (_l5609 == 1) {
const char* _f5611 = T815::_m16877(_p11912);
_e13620->setRequestId(_f5611);
delete _f5611;
continue;
}
if (_l5609 == 3) {
const char* _g5612 = T815::_m16877(_p11912);
_e13620->setGameId(_g5612);
delete _g5612;
continue;
}
T815::_m16878(_p11912);
}
return _e13620;
}

Serializable* T819::_m16853(T817* buff) {
SavePlayerStorableResponse* _p13628 = new SavePlayerStorableResponse();
short _g5614 = T815::_m16876(buff);
for (unsigned int _l5615 = 0; _l5615 < (unsigned int)_g5614; _l5615++) {
short _w5616 = T815::_m16876(buff);
if (_w5616 == 0) {
const char* _q5617 = T815::_m16877(buff);
_p13628->setMessageId(_q5617);
delete _q5617;
continue;
}
if (_w5616 == 1) {
const char* _r5618 = T815::_m16877(buff);
_p13628->setRequestId(_r5618);
delete _r5618;
continue;
}
if (_w5616 == 3) {
_p13628->setSavePlayerStorableStatus((SavePlayerStorableStatus*)T815::_m16617(this, buff));
continue;
}
if (_w5616 == 4) {
const char* _f5619 = T815::_m16877(buff);
_p13628->setStoreId(_f5619);
delete _f5619;
continue;
}
T815::_m16878(buff);
}
return _p13628;
}

Serializable* T819::_m16854(T817* _n11918) {
SavePlayerStorableRequest* _s13636 = new SavePlayerStorableRequest();
short _v5621 = T815::_m16876(_n11918);
for (unsigned int _w5622 = 0; _w5622 < (unsigned int)_v5621; _w5622++) {
short _h5623 = T815::_m16876(_n11918);
if (_h5623 == 0) {
const char* _z5624 = T815::_m16877(_n11918);
_s13636->setMessageId(_z5624);
delete _z5624;
continue;
}
if (_h5623 == 1) {
const char* _j5625 = T815::_m16877(_n11918);
_s13636->setRequestId(_j5625);
delete _j5625;
continue;
}
if (_h5623 == 3) {
_s13636->setStorable((Storable*)T815::_m16617(this, _n11918));
continue;
}
T815::_m16878(_n11918);
}
return _s13636;
}

Serializable* T819::_m16855(T817* buff) {
UpdatePlayerStorableResponse* _d13643 = new UpdatePlayerStorableResponse();
short _l11920 = T815::_m16876(buff);
for (unsigned int _j5628 = 0; _j5628 < (unsigned int)_l11920; _j5628++) {
short _y5629 = T815::_m16876(buff);
if (_y5629 == 0) {
const char* _n5630 = T815::_m16877(buff);
_d13643->setMessageId(_n5630);
delete _n5630;
continue;
}
if (_y5629 == 1) {
const char* _e5631 = T815::_m16877(buff);
_d13643->setRequestId(_e5631);
delete _e5631;
continue;
}
if (_y5629 == 3) {
_d13643->setUpdatePlayerStorableStatus((UpdatePlayerStorableStatus*)T815::_m16617(this, buff));
continue;
}
if (_y5629 == 4) {
const char* _k5632 = T815::_m16877(buff);
_d13643->setStoreId(_k5632);
delete _k5632;
continue;
}
T815::_m16878(buff);
}
return _d13643;
}

Serializable* T819::_m16856(T817* buff) {
UpdatePlayerStorableRequest* _y13651 = new UpdatePlayerStorableRequest();
short _l5634 = T815::_m16876(buff);
for (unsigned int _e5635 = 0; _e5635 < (unsigned int)_l5634; _e5635++) {
short _s5636 = T815::_m16876(buff);
if (_s5636 == 0) {
const char* _q5637 = T815::_m16877(buff);
_y13651->setMessageId(_q5637);
delete _q5637;
continue;
}
if (_s5636 == 1) {
const char* _i5638 = T815::_m16877(buff);
_y13651->setRequestId(_i5638);
delete _i5638;
continue;
}
if (_s5636 == 3) {
_y13651->setStorable((Storable*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _y13651;
}

Serializable* T819::_m16857(T817* _n11924) {
RemovePlayerStorableResponse* _d13658 = new RemovePlayerStorableResponse();
short _v11926 = T815::_m16876(_n11924);
for (unsigned int _s5641 = 0; _s5641 < (unsigned int)_v11926; _s5641++) {
short _b5642 = T815::_m16876(_n11924);
if (_b5642 == 0) {
const char* _e5643 = T815::_m16877(_n11924);
_d13658->setMessageId(_e5643);
delete _e5643;
continue;
}
if (_b5642 == 1) {
const char* _j5644 = T815::_m16877(_n11924);
_d13658->setRequestId(_j5644);
delete _j5644;
continue;
}
if (_b5642 == 3) {
_d13658->setRemovePlayerStorableStatus((RemovePlayerStorableStatus*)T815::_m16617(this, _n11924));
continue;
}
if (_b5642 == 4) {
const char* _u5645 = T815::_m16877(_n11924);
_d13658->setStoreId(_u5645);
delete _u5645;
continue;
}
T815::_m16878(_n11924);
}
return _d13658;
}

Serializable* T819::_m16858(T817* buff) {
RemovePlayerStorableRequest* _u13666 = new RemovePlayerStorableRequest();
short _k5647 = T815::_m16876(buff);
for (unsigned int _f5648 = 0; _f5648 < (unsigned int)_k5647; _f5648++) {
short _b5649 = T815::_m16876(buff);
if (_b5649 == 0) {
const char* _c5650 = T815::_m16877(buff);
_u13666->setMessageId(_c5650);
delete _c5650;
continue;
}
if (_b5649 == 1) {
const char* _k5651 = T815::_m16877(buff);
_u13666->setRequestId(_k5651);
delete _k5651;
continue;
}
if (_b5649 == 3) {
_u13666->setStorable((Storable*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _u13666;
}

Serializable* T819::_m16859(T817* _f11930) {
GetPlayerStorablesResponse* _r13673 = new GetPlayerStorablesResponse();
short _h11932 = T815::_m16876(_f11930);
for (unsigned int _l5654 = 0; _l5654 < (unsigned int)_h11932; _l5654++) {
short _e5655 = T815::_m16876(_f11930);
if (_e5655 == 0) {
const char* _y5656 = T815::_m16877(_f11930);
_r13673->setMessageId(_y5656);
delete _y5656;
continue;
}
if (_e5655 == 1) {
const char* _v5657 = T815::_m16877(_f11930);
_r13673->setRequestId(_v5657);
delete _v5657;
continue;
}
if (_e5655 == 3) {
_r13673->setGetPlayerStorablesStatus((GetPlayerStorablesStatus*)T815::_m16617(this, _f11930));
continue;
}
if (_e5655 == 4) {
std::vector<Storable*>* _b13679 = 0;
unsigned char _p13680 = _f11930->_m16314();
if (_p13680 != T809::_g15500) {
_f11930->_m16315();
int _u13681 = _f11930->_m16316();
_b13679 = new std::vector<Storable*>();
for (unsigned int _r5661 = 0; _r5661 < (unsigned int)_u13681; _r5661++) {
_b13679->push_back((Storable*)T815::_m16617(this, _f11930));
}
}
_r13673->setStorables(_b13679);
continue;
}
T815::_m16878(_f11930);
}
return _r13673;
}

Serializable* T819::_m16860(T817* buff) {
GetPlayerStorablesRequest* _h13684 = new GetPlayerStorablesRequest();
short _t5663 = T815::_m16876(buff);
for (unsigned int _d5664 = 0; _d5664 < (unsigned int)_t5663; _d5664++) {
short _r5665 = T815::_m16876(buff);
if (_r5665 == 0) {
const char* _y5666 = T815::_m16877(buff);
_h13684->setMessageId(_y5666);
delete _y5666;
continue;
}
if (_r5665 == 1) {
const char* _u5667 = T815::_m16877(buff);
_h13684->setRequestId(_u5667);
delete _u5667;
continue;
}
if (_r5665 == 3) {
_h13684->setDbQuery((NuggetaQuery*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _h13684;
}

Serializable* T819::_m16861(T817* buff) {
PauseSessionMonitoringResponse* _d13691 = new PauseSessionMonitoringResponse();
short _t5669 = T815::_m16876(buff);
for (unsigned int _u5670 = 0; _u5670 < (unsigned int)_t5669; _u5670++) {
short _q5671 = T815::_m16876(buff);
if (_q5671 == 0) {
const char* _p5672 = T815::_m16877(buff);
_d13691->setMessageId(_p5672);
delete _p5672;
continue;
}
if (_q5671 == 1) {
const char* _k5673 = T815::_m16877(buff);
_d13691->setRequestId(_k5673);
delete _k5673;
continue;
}
if (_q5671 == 3) {
_d13691->setPauseSessionMonitoringStatus((PauseSessionMonitoringStatus*)T815::_m16617(this, buff));
continue;
}
T815::_m16878(buff);
}
return _d13691;
}

Serializable* T819::_m16862(T817* buff) {
PauseSessionMonitoringRequest* _j13698 = new PauseSessionMonitoringRequest();
short _g5675 = T815::_m16876(buff);
for (unsigned int _u5676 = 0; _u5676 < (unsigned int)_g5675; _u5676++) {
short _l5677 = T815::_m16876(buff);
if (_l5677 == 0) {
const char* _x5678 = T815::_m16877(buff);
_j13698->setMessageId(_x5678);
delete _x5678;
continue;
}
if (_l5677 == 1) {
const char* _i5679 = T815::_m16877(buff);
_j13698->setRequestId(_i5679);
delete _i5679;
continue;
}
T815::_m16878(buff);
}
return _j13698;
}

Serializable* T819::_m16863(T817* _b11936) {
ResumeSessionMonitoringResponse* _q13705 = new ResumeSessionMonitoringResponse();
short _h11938 = T815::_m16876(_b11936);
for (unsigned int _e5682 = 0; _e5682 < (unsigned int)_h11938; _e5682++) {
short _f5683 = T815::_m16876(_b11936);
if (_f5683 == 0) {
const char* _m5684 = T815::_m16877(_b11936);
_q13705->setMessageId(_m5684);
delete _m5684;
continue;
}
if (_f5683 == 1) {
const char* _l5685 = T815::_m16877(_b11936);
_q13705->setRequestId(_l5685);
delete _l5685;
continue;
}
if (_f5683 == 3) {
_q13705->setResumeSessionMonitoringStatus((ResumeSessionMonitoringStatus*)T815::_m16617(this, _b11936));
continue;
}
T815::_m16878(_b11936);
}
return _q13705;
}

Serializable* T819::_m16864(T817* buff) {
ResumeSessionMonitoringRequest* _o13712 = new ResumeSessionMonitoringRequest();
short _r5687 = T815::_m16876(buff);
for (unsigned int _f5688 = 0; _f5688 < (unsigned int)_r5687; _f5688++) {
short _l5689 = T815::_m16876(buff);
if (_l5689 == 0) {
const char* _k5690 = T815::_m16877(buff);
_o13712->setMessageId(_k5690);
delete _k5690;
continue;
}
if (_l5689 == 1) {
const char* _g5691 = T815::_m16877(buff);
_o13712->setRequestId(_g5691);
delete _g5691;
continue;
}
T815::_m16878(buff);
}
return _o13712;
}

Serializable* T819::_m16865(T817* buff) {
PublishFriendThirdPartyMessageResponse* _j13719 = new PublishFriendThirdPartyMessageResponse();
short _c5693 = T815::_m16876(buff);
for (unsigned int _i5694 = 0; _i5694 < (unsigned int)_c5693; _i5694++) {
short _t5695 = T815::_m16876(buff);
if (_t5695 == 0) {
const char* _w5696 = T815::_m16877(buff);
_j13719->setMessageId(_w5696);
delete _w5696;
continue;
}
if (_t5695 == 1) {
const char* _s5697 = T815::_m16877(buff);
_j13719->setRequestId(_s5697);
delete _s5697;
continue;
}
if (_t5695 == 3) {
_j13719->setPublishFriendThirdPartyMessageStatus((PublishFriendThirdPartyMessageStatus*)T815::_m16617(this, buff));
continue;
}
if (_t5695 == 4) {
const char* _b5698 = T815::_m16877(buff);
_j13719->setThirdPartyId(_b5698);
delete _b5698;
continue;
}
T815::_m16878(buff);
}
return _j13719;
}

Serializable* T819::_m16866(T817* _o11942) {
PublishFriendThirdPartyMessageRequest* _i13727 = new PublishFriendThirdPartyMessageRequest();
short _g11944 = T815::_m16876(_o11942);
for (unsigned int _v5701 = 0; _v5701 < (unsigned int)_g11944; _v5701++) {
short _e5702 = T815::_m16876(_o11942);
if (_e5702 == 0) {
const char* _w5703 = T815::_m16877(_o11942);
_i13727->setMessageId(_w5703);
delete _w5703;
continue;
}
if (_e5702 == 1) {
const char* _x5704 = T815::_m16877(_o11942);
_i13727->setRequestId(_x5704);
delete _x5704;
continue;
}
if (_e5702 == 3) {
const char* _f5705 = T815::_m16877(_o11942);
_i13727->setTitle(_f5705);
delete _f5705;
continue;
}
if (_e5702 == 4) {
const char* _p5706 = T815::_m16877(_o11942);
_i13727->setMessage(_p5706);
delete _p5706;
continue;
}
if (_e5702 == 5) {
const char* _c13735 = T815::_m16877(_o11942);
_i13727->setPictureUrl(_c13735);
delete _c13735;
continue;
}
if (_e5702 == 6) {
const char* _l13736 = T815::_m16877(_o11942);
_i13727->setLink(_l13736);
delete _l13736;
continue;
}
if (_e5702 == 7) {
const char* _u13737 = T815::_m16877(_o11942);
_i13727->setThirdPartyId(_u13737);
delete _u13737;
continue;
}
if (_e5702 == 8) {
_i13727->setThirdPartySource((ThirdPartySource*)T815::_m16617(this, _o11942));
continue;
}
T815::_m16878(_o11942);
}
return _i13727;
}

Serializable* T819::_m16867(T817* buff) {
InvitePlayerResponse* _c13739 = new InvitePlayerResponse();
short _g5711 = T815::_m16876(buff);
for (unsigned int _x5712 = 0; _x5712 < (unsigned int)_g5711; _x5712++) {
short _e5713 = T815::_m16876(buff);
if (_e5713 == 0) {
const char* _f5714 = T815::_m16877(buff);
_c13739->setMessageId(_f5714);
delete _f5714;
continue;
}
if (_e5713 == 1) {
const char* _n5715 = T815::_m16877(buff);
_c13739->setRequestId(_n5715);
delete _n5715;
continue;
}
if (_e5713 == 3) {
_c13739->setInvitePlayerStatus((InvitePlayerStatus*)T815::_m16617(this, buff));
continue;
}
if (_e5713 == 4) {
const char* _j5716 = T815::_m16877(buff);
_c13739->setInvitationId(_j5716);
delete _j5716;
continue;
}
T815::_m16878(buff);
}
return _c13739;
}

Serializable* T819::_m16868(T817* _p11948) {
InvitePlayerRequest* _n13747 = new InvitePlayerRequest();
short _u11950 = T815::_m16876(_p11948);
for (unsigned int _d5719 = 0; _d5719 < (unsigned int)_u11950; _d5719++) {
short _z5720 = T815::_m16876(_p11948);
if (_z5720 == 0) {
const char* _e5721 = T815::_m16877(_p11948);
_n13747->setMessageId(_e5721);
delete _e5721;
continue;
}
if (_z5720 == 1) {
const char* _s5722 = T815::_m16877(_p11948);
_n13747->setRequestId(_s5722);
delete _s5722;
continue;
}
if (_z5720 == 3) {
const char* _h5723 = T815::_m16877(_p11948);
_n13747->setPlayerId(_h5723);
delete _h5723;
continue;
}
if (_z5720 == 4) {
_n13747->setInvitationContent((Message*)T815::_m16617(this, _p11948));
continue;
}
if (_z5720 == 5) {
_n13747->setInvitation((NInvitation*)T815::_m16617(this, _p11948));
continue;
}
T815::_m16878(_p11948);
}
return _n13747;
}

Serializable* T819::_m16869(T817* buff) {
GetInvitationsResponse* _o13755 = new GetInvitationsResponse();
short _m5725 = T815::_m16876(buff);
for (unsigned int _k5726 = 0; _k5726 < (unsigned int)_m5725; _k5726++) {
short _q5727 = T815::_m16876(buff);
if (_q5727 == 0) {
const char* _n5728 = T815::_m16877(buff);
_o13755->setMessageId(_n5728);
delete _n5728;
continue;
}
if (_q5727 == 1) {
const char* _o5729 = T815::_m16877(buff);
_o13755->setRequestId(_o5729);
delete _o5729;
continue;
}
if (_q5727 == 3) {
_o13755->setGetInvitationsStatus((GetInvitationsStatus*)T815::_m16617(this, buff));
continue;
}
if (_q5727 == 4) {
std::vector<NInvitation*>* _i13761 = 0;
unsigned char _x13762 = buff->_m16314();
if (_x13762 != T809::_g15500) {
buff->_m16315();
int _k13763 = buff->_m16316();
_i13761 = new std::vector<NInvitation*>();
for (unsigned int _c13764 = 0; _c13764 < (unsigned int)_k13763; _c13764++) {
_i13761->push_back((NInvitation*)T815::_m16617(this, buff));
}
}
_o13755->setInvitations(_i13761);
continue;
}
T815::_m16878(buff);
}
return _o13755;
}

Serializable* T819::_m16870(T817* _j11954) {
GetInvitationsRequest* _d13766 = new GetInvitationsRequest();
short _t11956 = T815::_m16876(_j11954);
for (unsigned int _h5736 = 0; _h5736 < (unsigned int)_t11956; _h5736++) {
short _j5737 = T815::_m16876(_j11954);
if (_j5737 == 0) {
const char* _j5738 = T815::_m16877(_j11954);
_d13766->setMessageId(_j5738);
delete _j5738;
continue;
}
if (_j5737 == 1) {
const char* _m5739 = T815::_m16877(_j11954);
_d13766->setRequestId(_m5739);
delete _m5739;
continue;
}
if (_j5737 == 3) {
_d13766->setNuggetaQuery((NuggetaQuery*)T815::_m16617(this, _j11954));
continue;
}
T815::_m16878(_j11954);
}
return _d13766;
}

Serializable* T819::_m16871(T817* buff) {
AcceptInvitationResponse* _n13773 = new AcceptInvitationResponse();
short _b5741 = T815::_m16876(buff);
for (unsigned int _l5742 = 0; _l5742 < (unsigned int)_b5741; _l5742++) {
short _r5743 = T815::_m16876(buff);
if (_r5743 == 0) {
const char* _i5744 = T815::_m16877(buff);
_n13773->setMessageId(_i5744);
delete _i5744;
continue;
}
if (_r5743 == 1) {
const char* _g5745 = T815::_m16877(buff);
_n13773->setRequestId(_g5745);
delete _g5745;
continue;
}
if (_r5743 == 3) {
_n13773->setAcceptInvitationStatus((AcceptInvitationStatus*)T815::_m16617(this, buff));
continue;
}
if (_r5743 == 4) {
const char* _h5746 = T815::_m16877(buff);
_n13773->setInvitationId(_h5746);
delete _h5746;
continue;
}
T815::_m16878(buff);
}
return _n13773;
}

Serializable* T819::_m16872(T817* buff) {
AcceptInvitationRequest* _v13781 = new AcceptInvitationRequest();
short _j5748 = T815::_m16876(buff);
for (unsigned int _e5749 = 0; _e5749 < (unsigned int)_j5748; _e5749++) {
short _x5750 = T815::_m16876(buff);
if (_x5750 == 0) {
const char* _g5751 = T815::_m16877(buff);
_v13781->setMessageId(_g5751);
delete _g5751;
continue;
}
if (_x5750 == 1) {
const char* _i5752 = T815::_m16877(buff);
_v13781->setRequestId(_i5752);
delete _i5752;
continue;
}
if (_x5750 == 3) {
const char* _t5753 = T815::_m16877(buff);
_v13781->setInvitationId(_t5753);
delete _t5753;
continue;
}
T815::_m16878(buff);
}
return _v13781;
}

Serializable* T819::_m16873(T817* _i11960) {
RefuseInvitationResponse* _b13789 = new RefuseInvitationResponse();
short _f11962 = T815::_m16876(_i11960);
for (unsigned int _u5756 = 0; _u5756 < (unsigned int)_f11962; _u5756++) {
short _d5757 = T815::_m16876(_i11960);
if (_d5757 == 0) {
const char* _m5758 = T815::_m16877(_i11960);
_b13789->setMessageId(_m5758);
delete _m5758;
continue;
}
if (_d5757 == 1) {
const char* _p5759 = T815::_m16877(_i11960);
_b13789->setRequestId(_p5759);
delete _p5759;
continue;
}
if (_d5757 == 3) {
_b13789->setRefuseInvitationStatus((RefuseInvitationStatus*)T815::_m16617(this, _i11960));
continue;
}
if (_d5757 == 4) {
const char* _t13795 = T815::_m16877(_i11960);
_b13789->setInvitationId(_t13795);
delete _t13795;
continue;
}
T815::_m16878(_i11960);
}
return _b13789;
}

Serializable* T819::_m16874(T817* _g13796) {
RefuseInvitationRequest* _r13797 = new RefuseInvitationRequest();
short _y13798 = T815::_m16876(_g13796);
for (unsigned int _l13799 = 0; _l13799 < (unsigned int)_y13798; _l13799++) {
short _q13800 = T815::_m16876(_g13796);
if (_q13800 == 0) {
const char* _g13801 = T815::_m16877(_g13796);
_r13797->setMessageId(_g13801);
delete _g13801;
continue;
}
if (_q13800 == 1) {
const char* _i13802 = T815::_m16877(_g13796);
_r13797->setRequestId(_i13802);
delete _i13802;
continue;
}
if (_q13800 == 3) {
const char* _z13803 = T815::_m16877(_g13796);
_r13797->setInvitationId(_z13803);
delete _z13803;
continue;
}
T815::_m16878(_g13796);
}
return _r13797;
}

T819::T819(){
}

T819::~T819(){
}

/*MIMICS*/

#include "AdApiImpl.h"

AdApiImpl::AdApiImpl(){
}

BannerAd* AdApiImpl::displayBannerAd(AdContext* adContext) {
    return 0;
}

InterstitialAd* AdApiImpl::displayInterstitialAd() {
return 0;
}


#include "ByteBuffer.h"


int createCount=0;
int deleteCount=0;

ByteBuffer::ByteBuffer() {
		//std::cout<< "calling destructor ~ByteBuffer" << std::endl;


		createCount++;
		//printf("createCount ByteBuffer : %d\n", createCount);
		/*if( createCount%100 == 0 ){
			printf("createCount ByteBuffer : %d\n", createCount);
		}*/

	this->_position = 0;
	this->data = new CppByteArray(1024*1); //reserve 1ko

}

ByteBuffer::~ByteBuffer() {

	//std::cout<< "calling destructor ~ByteBuffer" << std::endl;

	
		/*if( deleteCount%100 == 0 ){
			printf("deleteCount ByteBuffer : %d\n", deleteCount);
		}*/
	deleteCount++;
	//printf("deleteCount ByteBuffer : %d\n", deleteCount);
	delete data;
}


void ByteBuffer::flip() {
	_position = 0;
}

ByteBuffer* ByteBuffer::allocate() {
	return new ByteBuffer();
}

/*ByteBuffer* ByteBuffer::wrap(CppByteArray* data) {
	 ByteBuffer* bb = new ByteBuffer();
	 bb->putBytes(data);
	 return bb;
}*/

void ByteBuffer::skip(int n) {
	_position += n;
}

int ByteBuffer::limit() {
	return _position;
}

int ByteBuffer::position() {
	return _position;
}


void ByteBuffer::putBytes(CppByteArray* bytesObj) {

	for (int i = 0; i < bytesObj->size(); i++) {
       (*data)[_position+i] = (*bytesObj)[i] ;
    }

	 _position+=bytesObj->size();
}


CppByteArray* ByteBuffer::getBytes(int length) {
	CppByteArray* bytes  = new CppByteArray(length);

	for(int i  = _position ; i < _position + length ; i++){
		unsigned char c = (*data)[i];
		bytes->putByte(c);

	}
	_position += length;

return bytes;
}




int ByteBuffer::size()
{
	return data->size();
}


char* ByteBuffer::getByteArray()
{
	int lenght = data->size();

	char * messageToSend =   new char[lenght];

		for(int i = 0; i< data->size();i++){
		unsigned char c = (*data)[i];
		messageToSend[i] = c;
	}

	return messageToSend;
}


/**************************************************************/
unsigned char ByteBuffer::get() {
	unsigned char value = (*data)[_position];
    _position++;
    return value;
}



void ByteBuffer::put(unsigned char value) {

	  (*data)[_position]= value;
       _position+=1;
}


/**************************************************************/

short ByteBuffer::getShort() {
	short value = 0;
	value = (short) ((*data)[_position] << 8);
	value |=  ((*data)[_position+1] & 0xFF);
	_position +=2;
	return value;
}

void ByteBuffer::putShort(short value) {


	 (*data)[_position]= (unsigned char) ( (value >> 8) & 0xFF);
	  (*data)[_position+1]= (unsigned char) ((value) & 0xFF);

       _position+=2;

}


void ByteBuffer::putShortAt(int i, short value) {
	//(*data)[i] = value;
	int oldPosition = _position;
	  _position = i;
       (*data)[_position]  = (unsigned char) ((value >> 8) & 0xFF);
	    (*data)[_position+1]  = (unsigned char) (value & 0xFF);

	_position = oldPosition;
    //_position+=2;

}


/**************************************************************/


int ByteBuffer::getInt() {
 int value = 0;;
    for (int i = 0; i < 4; i++) {
        char bb = (*data)[_position+i];

        value = value << 8;
       value = value | (bb & 0xFF);
    }
    _position+=4;

    return value;
}


void ByteBuffer::putInt(int value) {
	 for (int i = 3; i >= 0; i--) {
        int val = (int) (value & 0xFF);
       (*data)[_position+i] =val ;
        value = value >> 8;
    }
    _position+=4;
}

void ByteBuffer::putIntAt(int at, int value) {

	int oldPosition = _position;
	_position = at;
    for (int i = 3; i >= 0; i--) {
        int val = (int) (value & 0xFF);
       (*data)[_position+i] =val ;
        value = value >> 8;
    }

	_position=oldPosition;

}

/**************************************************************/


double ByteBuffer::getDouble() {

	long long tempLong  = getLong();

	union {double d; long long i;};

	i = tempLong;

	return d;
}

void ByteBuffer::putDouble(double value) {

	union {double d; long long i;};
	d = value;

	putLong(i);
}



/**************************************************************/

long long  ByteBuffer::getLong() {
		long long value = 0;
        for (int i = 0; i < 8; i++) {
            long long bb = (*data)[_position+i]  ;

           value = value << 8;
           value = value | (bb & 0xFF);

        }
        _position+=8;

        return value;
}

void ByteBuffer::putLong(long long int value) {

	 for (int i = 7; i >= 0; i--) {
        int val = (int) (value & 0xFF);
       (*data)[_position+i] =val ;
        value = value >> 8;
    }
    _position+=8;

}

/**************************************************************/

float ByteBuffer::getFloat() {
return 0;
}

void ByteBuffer::putFloat(float value) {
}



#include "ByteUtil.h"

CppByteArray* ByteUtil::getBytes(const char* str) {

	int length = strlen(str);

	CppByteArray * byteArray = new CppByteArray(length);

	for(int i = 0 ; i < length ;i++){
		byteArray->putByte(str[i]);
	}

	return byteArray;
}

const char* ByteUtil::getString(CppByteArray* strBytes) {
	return  strBytes->getBytes();
}

ByteUtil::ByteUtil(){
}

#include "CppByteArray.h"

int createCountCppByteArray=0;
int deleteCountCppByteArray=0;
CppByteArray::CppByteArray(int size)
{

	createCountCppByteArray++;
	//printf("createCount CppByteArray : %d\n", createCountCppByteArray);

	_vector = new std::vector<unsigned char>();
	_vector->reserve(size);
}


CppByteArray::~CppByteArray(void)
{

	deleteCountCppByteArray++;
	//printf("deleteCount CppByteArray : %d\n", deleteCountCppByteArray);

	//std::cout<< "calling destructor ~CppByteArray" << std::endl;

	/*for(int i =0 ; i< _vector->size();i++){
		delete (*_vector)[i];
	}*/
	_vector->clear();
	delete _vector;
}


int CppByteArray::size()
{
	int size = _vector->size();
	return size;
}

void CppByteArray::setByteAtIndex(int i, unsigned char c){
	(*_vector)[i] = c;
}

unsigned char& CppByteArray::operator[](unsigned int index){

	while(_vector->size() < index+1){

		/*unsigned char *uc = new unsigned char('1');
		_vector->push_back(*uc);*/

		_vector->push_back('1');
	}
	
	return (*_vector)[index];
}

void CppByteArray::putByte( unsigned char c){
	_vector->push_back(c);
}
const char* CppByteArray::getBytes(){

	int zeSize = size() ;
	char * charArray = new char[ zeSize+1];
	charArray[zeSize] = '\0';


	for(int i = 0; i< zeSize;i++){
		charArray[i] = (*_vector)[i];
	}

	//delete charArray;

	return charArray;
}


#include "CppIntArray.h"


CppIntArray::CppIntArray(int size)
{
}


CppIntArray::~CppIntArray(void)
{
	//std::cout<< "calling destructor ~CppIntArray" << std::endl;
}

void CppIntArray::setIntAtIndex(int i, int val){
}

int& CppIntArray::operator[](int index){
	return a;
}
#include "GameStore.h"

GameStore::GameStore() {
}

GameStore::~GameStore() {
}

const char* GameStore::getSPId() {
	return NULL;
}

#include "MemoryManagement.h"

#if defined(WIN32)
#define strdup _strdup
#endif


void MemoryManagement::free(void* o) {
}

const char* MemoryManagement::dupString(const char* str) {

	if(str){
		return strdup(str);
	}

	return 0;

}

#include "NArrays.h"

void NArrays::arraycopy(CppByteArray* src, int srcPos, CppByteArray* dest, int destPos, int length) {
    int j = destPos;
    for (int i = 0; i < length; i++) {
        dest->setByteAtIndex(j, (*src)[i]);
        j++;
    }
}

NArrays::NArrays(){
}

#include "NDate.h"


NDate::NDate(void)
{
}

NDate::NDate(long long time)
{

}


NDate::~NDate(void)
{
}



long long NDate::getTime(){
	return 0;
}

#if defined(WIN32)

#include "NFileUtilsWin32.h"
#include <string>
#include <fstream>
#include <streambuf>
#include <string>
#include <iostream>

#if defined(WIN32)
#define strdup _strdup
#endif

#define N_MAX_PATH  512

const char* NFileUtilsWin32::getStringFromFile(const char* filename) {
	if(!_isInitNFileUtilsWin32){
		init();
	}

	std::string fullpath = std::string(pathNFileUtilsWin32).append(filename);

	
	std::ifstream t(fullpath);
	std::string str((std::istreambuf_iterator<char>(t)), std::istreambuf_iterator<char>());
	 
	t.close();

	if(str.empty()){
		return 0;
	}
	 
	const char * value =  strdup(str.c_str());
	//printf(value);
	return value;

	 
}
void NFileUtilsWin32::setStringToFile(const char* filename,const char* value){
	if(!_isInitNFileUtilsWin32){
		init();
	}
	std::string fullpath = std::string(pathNFileUtilsWin32).append(filename);

    std::ofstream out(fullpath);
    out << value<<'\0';
    out.close();

}

void NFileUtilsWin32::init(){
	  // Get full path of executable, e.g. c:\Program Files (x86)\My Game Folder\MyGame.exe
    char full_path[N_MAX_PATH + 1];
    ::GetModuleFileNameA(NULL, full_path, N_MAX_PATH + 1);

    // Debug app uses executable directory; Non-debug app uses local app data directory
#ifndef _DEBUG
        // Get filename of executable only, e.g. MyGame.exe
        char *base_name = strrchr(full_path, '\\');

        if(base_name)
        {
            char app_data_path[N_MAX_PATH + 1];

            // Get local app data directory, e.g. C:\Documents and Settings\username\Local Settings\Application Data
            if (SUCCEEDED(SHGetFolderPathA(NULL, CSIDL_LOCAL_APPDATA, NULL, SHGFP_TYPE_CURRENT, app_data_path)))
            {
                std::string ret((char*)app_data_path);

                // Adding executable filename, e.g. C:\Documents and Settings\username\Local Settings\Application Data\MyGame.exe
                ret += base_name;

                // Remove ".exe" extension, e.g. C:\Documents and Settings\username\Local Settings\Application Data\MyGame
                ret = ret.substr(0, ret.rfind("."));

                ret += "\\";

                // Create directory
                if (SUCCEEDED(SHCreateDirectoryExA(NULL, ret.c_str(), NULL)))
                {
                    //return ret;
					pathNFileUtilsWin32 = ret.c_str();
                }
            }
        }
#else
	 // If fetching of local app data directory fails, use the executable one
	//printf(full_path);
	pathNFileUtilsWin32 = full_path;
#endif // not defined _DEBUG



	_isInitNFileUtilsWin32 = true;
    
}


#endif // WIN32


#include "NHttpRequestImpl.h"

void NHttpRequestImpl::get(const char* id, const char* url, NetConnectionReceivedHandler* connectionReceivedHandler, NetConnectionSendFailHandler* asyncSendFailResult) {
	(*asyncSendFailResult)();
}

void NHttpRequestImpl::post(const char* id, const char* url, const char* data, NetConnectionReceivedHandler* connectionReceivedHandler, NetConnectionSendFailHandler* asyncSendFailResult) {
}

NHttpRequestImpl::NHttpRequestImpl(){
}


#include "NLoggerFactory.h"


NLogger* NLoggerFactory::getLogger(const char* className) {
	#if defined(__ANDROID__)
	return new NLoggerImplAndroid(className);
    #elif defined(TARGET_OS_IPHONE ) || defined(TARGET_IPHONE_SIMULATOR) || defined(WIN32)
    return new NLoggerImpl(className);

	#endif

	return 0;
}

NLoggerFactory::NLoggerFactory(){
}

#include "NLoggerImpl.h"

NLoggerImpl::NLoggerImpl(const char* name) {
	this->name = name;
}

NLoggerImpl::~NLoggerImpl(void) {
}

void NLoggerImpl::errorCause(const char* msg, std::exception* e) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [ERRORCAUSE] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

void NLoggerImpl::error(const char* msg) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [ERROR] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

void NLoggerImpl::info(const char* msg) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [INFO] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

void NLoggerImpl::infoCause(const char* msg, std::exception* e) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [INFOCAUSE] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

void NLoggerImpl::debug(const char* msg) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [DEBUG] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

void NLoggerImpl::debugCause(const char* msg, std::exception* e) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [DEBUGCAUSE] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

void NLoggerImpl::warn(const char* msg) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [WARN] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

void NLoggerImpl::warnCause(const char* msg, std::exception* e) {
	OutputDebugStringA("["); OutputDebugStringA(name); OutputDebugStringA("] [WARNCAUSE] ");
	OutputDebugStringA(msg); OutputDebugStringA("\n");
}

bool NLoggerImpl::isDebug() {
	return false;
}
#include "NMap.h"


NMap::NMap()
{
	_map = new std::map<const char*,void*,StrCompare>();
}

NMap::~NMap()
{
	delete _map;
}

void*& NMap::operator[](const char* str){
	return (*_map)[str];
}


 void NMap::erase(const char* str){
	 _map->erase(str);
 }
#include "NMath.h"


NMath::NMath(void)
{
}


NMath::~NMath(void)
{
}
#include "NSocketImpl.h"

NSocketImpl::NSocketImpl() {
#if defined(__ANDROID__) || defined(__APPLE__)
	socket = new NSocketImplBSD();
#elif defined(WIN32)
	socket = new NSocketImplWin32();
#endif
}

NSocketImpl::~NSocketImpl() {
	if(socket){
		//do not delete socket implementation as it is done in the read thread
		//delete socket;
		socket = 0;
	}
}

void NSocketImpl::openConnection(const char* id, const char* host, int port,
		const char* url, NetConnectionOpenedHandler* connectionOpenedHandler,
		NetConnectionLostHandler* connectionLostHandler,
		NetConnectionFailHandler* connectionFailHandler,
		NetConnectionReceivedHandler* connectionReceivedHandler) {

	this->connectionOpenedHandler = connectionOpenedHandler;
	this->connectionLostHandler = connectionLostHandler;
	this->connectionFailHandler = connectionFailHandler;
	this->connectionReceivedHandler = connectionReceivedHandler;
	this->id = id;
	this->host = host;
	this->port = port;
	socket->openConnection(id, host, port, url, connectionOpenedHandler,
			connectionLostHandler, connectionFailHandler,
			connectionReceivedHandler);

}

void NSocketImpl::sendBytes(ByteBuffer* byteBuffer,
		NetConnectionSendSuccessHandler* asyncSendSuccessResult,
		NetConnectionSendFailHandler* asyncSendFailResult) {
	socket->sendBytes(byteBuffer, asyncSendSuccessResult, asyncSendFailResult);
}

void NSocketImpl::drain(NetConnectionDrainHandler* connectionDrainHandler) {
	socket->drain(connectionDrainHandler);
}

void NSocketImpl::close() {
	if(socket){
		socket->close();
		//do not delete socket implementation as it is done in the read thread
		//delete socket;
		socket = 0;
	}

}

void NSocketImpl::sendString(const char* strData,
		NetConnectionSendSuccessHandler* asyncSendSuccessResult,
		NetConnectionSendFailHandler* asyncSendFailResult) {
}

#if !defined(WIN32)

#include "NSocketImplBSD.h"

//#include <android/log.h>

int _count=1;

void* ThreadConnectFunction(void* arg);
void* ThreadSendFunction(void* arg);
void* ThreadReadFunction(void* arg);




NSocketImplBSD::NSocketImplBSD() {
	logger = NLoggerFactory::getLogger("NSocketImplBSD");
	pendingMessagesToSend = new std::vector<CppByteArray*>();
	port = 0;
	host = 0;
	destroyRequest=false;
	connectionLost=false;


	recvbuflen = DEFAULT_BUFLEN;
	recvbuf = new char[DEFAULT_BUFLEN];

	_idSocket = _count++;


	pthread_mutex_init(&_nuggetaMutexSend,NULL);
	pthread_mutex_init(&_nuggetaMutexClose,NULL);

	//char buffer [512];
	//sprintf(buffer, "NSocketImplBSD (%d) ", _idSocket);
	//logger->debug(buffer);

	//CCLog("NSocketImplBSD::NSocketImplBSD %d",_idSocket);
}



NSocketImplBSD::~NSocketImplBSD() {
	//char buffer [512];
	//sprintf(buffer, "~NSocketImplBSD (%d) ", _idSocket);
	//logger->debug(buffer);


	for (unsigned int i = 0; i < pendingMessagesToSend->size(); i++) {
		delete  (*pendingMessagesToSend)[i];
	}
	pendingMessagesToSend->clear();
	delete pendingMessagesToSend;

	//sprintf(buffer, "~NSocketImplBSD (%d) 1", _idSocket);
	//logger->debug(buffer);

	pthread_mutex_destroy(&_nuggetaMutexSend);

	pthread_mutex_unlock(&_nuggetaMutexClose);
	pthread_mutex_destroy(&_nuggetaMutexClose);


	//sprintf(buffer, "~NSocketImplBSD  (%d) end ", _idSocket);
	//logger->debug(buffer);

	delete recvbuf;

	delete logger;

}

/***********/
/* CONNECT */
/***********/

/* Connect Thread*/
void* ThreadConnectFunction(void* arg) {

	//pid_t pid = gettid();
	//LOGI("ThreadConnectFunction %lli ",pid);

	NSocketImplBSD* nSocketImpl = (NSocketImplBSD*) arg;
	nSocketImpl->openConnectionThread();
	//LOGI("ThreadConnectFunction ended %lli ",gettid());
	return NULL;
}

void NSocketImplBSD::openConnection(const char* id, const char* host, int port,
		const char* url, NetConnectionOpenedHandler* connectionOpenedHandler,
		NetConnectionLostHandler* connectionLostHandler,
		NetConnectionFailHandler* connectionFailHandler,
		NetConnectionReceivedHandler* connectionReceivedHandler) {
	this->connectionOpenedHandler = connectionOpenedHandler;
	this->connectionLostHandler = connectionLostHandler;
	this->connectionFailHandler = connectionFailHandler;
	this->connectionReceivedHandler = connectionReceivedHandler;
	this->id = id;
	this->host = host;
	this->port = port;

	//create connect _nuggetaThreadRead
	//LOGI("Oppening BSD");
	pthread_create(&_nuggetaThreadConnect, NULL, &ThreadConnectFunction, this);
	//pthread_detach(_nuggetaThreadConnect);


	//char buffer [512];
	//sprintf(buffer, " NSocketImplBSD (%d) openConnection %s:%d", _idSocket,host,port);
	//logger->debug(buffer);

}

void NSocketImplBSD::openConnectionThread() {

	//CCLog("Opening connection : %d %s",_idSocket,this->host);
	struct sockaddr_in echoServAddr; /* Echo server address */
	/* Create a reliable, stream socket using TCP */
	if ((sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
		//LOGI("Conenction Failed %d " , sock);
		(*connectionFailHandler)();
		return;
	}

	//LOGI("Connection opened");
	/* Construct the server address structure */
	memset(&echoServAddr, 0, sizeof(echoServAddr)); /* Zero out structure */
	echoServAddr.sin_family = AF_INET; /* Internet address family */
	echoServAddr.sin_addr.s_addr = inet_addr(this->host); /* Server IP address */
	echoServAddr.sin_port = htons(this->port); /* Server port */

	//LOGI("Connection %s %d" ,this->host, this->port);
	/* Establish the connection to the echo server */
	int res = 0;
	if ((res = connect(sock, (struct sockaddr *) &echoServAddr,
							sizeof(echoServAddr))) < 0) {
		//LOGI("Connection Failed : cannot connect socket %d res = %d , error * %s * " ,_idSocket,res , strerror(errno));
		if(errno == ECONNREFUSED) {
			//LOGI("Connection REFUSED");
		}
		close();
		(*connectionFailHandler)();
	} else {

		int flags;
		flags = fcntl(sock,F_GETFL,0);

		fcntl(sock, F_SETFL, flags | O_NONBLOCK);

		//create read thread
		pthread_create(&_nuggetaThreadRead, NULL, &ThreadReadFunction, this);
		//pthread_detach(_nuggetaThreadRead);

		//create send thread
		pthread_create(&_nuggetaThreadSend, NULL, &ThreadSendFunction, this);
		//pthread_detach(_nuggetaThreadSend);

		(*connectionOpenedHandler)();
	}

}

/***********/
/* SEND */
/***********/

/* Send Thread*/
void* ThreadSendFunction(void* arg) {
	//LOGI("ThreadSendFunction %lli ",gettid());
	NSocketImplBSD* nSocketImpl = (NSocketImplBSD*) arg;
	nSocketImpl->SendData();
	//LOGI("ThreadSendFunction ended %lli ",gettid());
	return NULL;
}

void NSocketImplBSD::sendString(const char* strData,
		NetConnectionSendSuccessHandler* asyncSendSuccessResult,
		NetConnectionSendFailHandler* asyncSendFailResult) {
}

void NSocketImplBSD::sendBytes(ByteBuffer* byteBuffer,
		NetConnectionSendSuccessHandler* asyncSendSuccessResult,
		NetConnectionSendFailHandler* asyncSendFailResult) {

	this->asyncSendFailResult = asyncSendFailResult;


	CppByteArray* byteArray = byteBuffer->getBytes(byteBuffer->size());

	pthread_mutex_lock(&_nuggetaMutexSend);
	pendingMessagesToSend->push_back(byteArray);
	pthread_mutex_unlock(&_nuggetaMutexSend);

}

void NSocketImplBSD::SendData() {
	while (true) {

		//lock on queue
		//CCLog("locking  _nuggetaMutexSend SendData");
		pthread_mutex_lock(&_nuggetaMutexSend);
         //printf("SendData  %d \n",_idSocket);

		for (unsigned int i = 0; i < pendingMessagesToSend->size(); i++) {

			CppByteArray* byteArray = (*pendingMessagesToSend)[i];
			//CCLog("sending effectively buffer : %d",byteBuffer->size());

			const char * data = byteArray->getBytes();
			int length = byteArray->size();

			ssize_t res = send(sock, data, length, 0);
           // printf("res %li \n",res);

			if(res < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {
				if(destroyRequest==false) {
					printf("send failed: %d\n", errno);
					(*asyncSendFailResult)();
						pthread_mutex_unlock(&_nuggetaMutexSend);
						return;
				}
			}

			//release  byteArray
			delete byteArray;
			delete data;

		}

		pendingMessagesToSend->clear();

		pthread_mutex_unlock(&_nuggetaMutexSend);

		if(destroyRequest==true) {
			//char buffer [512];
			//sprintf(buffer, " NSocketImplBSD (%d) SendData destroyRequest exiting %s:%d", _idSocket,host,port);
			//logger->debug(buffer);
			return;
		}

		//sleep 1 millisecond
		usleep(1000);
        //printf("SendData done %d \n",_idSocket);
	}
}

/***********/
/* READ */
/***********/
/* Read Thread*/
void* ThreadReadFunction(void* arg) {

	//LOGI("ThreadReadFunction %lli ",gettid());
	NSocketImplBSD* nSocketImpl = (NSocketImplBSD*) arg;

	pthread_mutex_t* mutex = &nSocketImpl->_nuggetaMutexClose;

	nSocketImpl->ReadIncomingData();

	pthread_mutex_lock(mutex);

	//char buffer [512];
	//printf( " NSocketImplBSD  ThreadReadFunction end ");
	//__android_log_print(ANDROID_LOG_INFO, "NSocketImplBSD", "NSocketImplBSD  ThreadReadFunction end");
	//logger->debug(buffer);

	delete nSocketImpl;
	nSocketImpl=0;


	//__android_log_print(ANDROID_LOG_INFO, "NSocketImplBSD", "NSocketImplBSD  ThreadReadFunction end done");
	//printf(" NSocketImplBSD  ThreadReadFunction end done");

	//LOGI("ThreadReadFunction ended %lli ",gettid());
	return NULL;
}

void NSocketImplBSD::ReadIncomingData() {

	while (true) {



		//LOGI("ReadLoop");

		if(destroyRequest==true) {
			//char buffer [512];
			//sprintf(buffer, " NSocketImplBSD (%d) ReadIncomingData destroyRequest exiting %s:%d", _idSocket,host,port);
			return;
		}

		if(connectionLost == true){
			continue;
		}


		//CCLog("readptr %p _idSocket %d thread=%p",readptr,_idSocket,_nuggetaThreadRead);
		ssize_t res = read(sock, recvbuf, recvbuflen);
		//CCLog("_idSocket %d res %d thread=%p", _idSocket, res,_nuggetaThreadRead);

		//CCLog("errno %d str errno %s EAGAIN=%d EWOULDBLOCK=%d",errno,strerror(errno),EAGAIN,EWOULDBLOCK);

		if(res < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {
			if(destroyRequest==false) {
				connectionLost = true;
				//CCLog("connection lost on read %d res=%d",_idSocket,res);
				(*connectionLostHandler)();
			}

		}

		for (int i = 0; i < res; i++) {

			char c = recvbuf[i];
			(*connectionReceivedHandler)(c);
		}

		//CCLog("usleep %d",_idSocket);
		usleep(1000);
		//CCLog("usleep done %d",_idSocket);

	}
}

/***********/
/* STOPPING */
/***********/

void NSocketImplBSD::drain(NetConnectionDrainHandler* connectionDrainHandler2) {
	//LOGI("NSocketImplBSD drain ");

	//char buffer [512];
	//sprintf(buffer, " NSocketImplBSD (%d) drain %s:%d", _idSocket,host,port);
	//logger->debug(buffer);

	pthread_mutex_lock(&_nuggetaMutexSend);

	pthread_mutex_unlock(&_nuggetaMutexSend);


	usleep(5000);

	(*connectionDrainHandler2)();

	//sprintf(buffer, " NSocketImplBSD (%d) drain end %s:%d", _idSocket,host,port);
	//logger->debug(buffer);

}

void closeSocket(int& _sock) {
	close(_sock);
//	pthread_cancel(_nuggetaThreadRead);
}

void NSocketImplBSD::close() {

	//char buffer [512];
	//sprintf(buffer, " NSocketImplBSD (%d) close %s:%d", _idSocket,host,port);
	//logger->debug(buffer);

	pthread_mutex_lock(&_nuggetaMutexClose);

	destroyRequest =true;

	//sprintf(buffer, " NSocketImplBSD (%d) close waiting send thread %s:%d", _idSocket,host,port);
	//logger->debug(buffer);
    int res ;
	res = pthread_join(_nuggetaThreadSend,(void**)&res);
    
    if(res != 0 ) {
        //printf("join failed: %s \n", strerror(res));
       // perror("error joining thread: ");
        //printf("error joining thread : %m\n");

    }
	//sprintf(buffer, " NSocketImplBSD (%d) close waiting send thread done %d %s:%d", _idSocket,res,host,port);
	//logger->debug(buffer);

	closeSocket(sock);

	//sprintf(buffer, " NSocketImplBSD (%d) close end %s:%d", _idSocket,host,port);
	//logger->debug(buffer);

	pthread_mutex_unlock(&_nuggetaMutexClose);



}

#endif

#if  defined(WIN32)

#include "NSocketImplWin32.h"

#include <sstream>

int idCount=0;

NSocketImplWin32::NSocketImplWin32(){
	destroyRequest=false;
	connectionLost=false;
	port = 0;
	host = 0;

	recvbuflen = DEFAULT_BUFLEN;
	recvbuf = new char[DEFAULT_BUFLEN];
	id = idCount++;
	//printf("[NSocketImplWin32](%d) tid=%u ctor NSocketImplWin32 \n",id,GetCurrentThreadId());
	pendingMessagesToSend = new std::vector<CppByteArray*>(0);

	sendMutex = CreateMutex(
        NULL,              // default security attributes
        FALSE,             // initially not owned
        NULL);             // unnamed mutex

    if (sendMutex == NULL)
    {
        printf("CreateMutex error: %d\n", GetLastError());
        //return 1;
	}

	mutexClose = CreateMutex(
    NULL,              // default security attributes
    FALSE,             // initially not owned
    NULL);

	if (mutexClose == NULL)
    {
        printf("CreateMutex error: %d\n", GetLastError());
        //return 1;
	}

}


NSocketImplWin32::~NSocketImplWin32(){
	//printf("[NSocketImplWin32](%d) tid=%u ~NSocketImplWin32 \n",id,GetCurrentThreadId(), host,port);
	//connectionReceivedHandler=0;
	for (unsigned int i = 0; i < pendingMessagesToSend->size(); i++) {
		delete  (*pendingMessagesToSend)[i];
	}
	pendingMessagesToSend->clear();
	delete pendingMessagesToSend;

	CloseHandle(connectThread);
	CloseHandle(readThread);
	CloseHandle(sendThread);

	delete recvbuf;

	//close send mutex handle
	CloseHandle(sendMutex);

	//close mutex handle
	CloseHandle(mutexClose);

	//printf("[NSocketImplWin32](%d) ~NSocketImplWin32 \n",id, host,port);
}

void NSocketImplWin32::openConnection(const char* id2, const char* host, int port, const char* url, NetConnectionOpenedHandler* connectionOpenedHandler, NetConnectionLostHandler* connectionLostHandler, NetConnectionFailHandler* connectionFailHandler, NetConnectionReceivedHandler* connectionReceivedHandler) {
	this->connectionOpenedHandler = connectionOpenedHandler;
	this->connectionLostHandler = connectionLostHandler;
	this->connectionFailHandler = connectionFailHandler;
	this->connectionReceivedHandler = connectionReceivedHandler;
	this->id = id;
	this->host = host;
	this->port = port;


	//printf("[NSocketImplWin32](%d) tid=%u openConnection %s:%d\n", id,GetCurrentThreadId(),host,port);
	connectThread = CreateThread( 
            NULL,                   // default security attributes
            0,                      // use default stack size  
            ConnectThreadFunction,       // thread function name
            this,          // argument to thread function 
            0,                      // use default creation flags 
            NULL);   // ret

}


DWORD WINAPI ConnectThreadFunction( LPVOID lpParam ){
	//printf("[NSocketImplWin32] tid=%u ConnectThreadFunction start\n",GetCurrentThreadId());
	NSocketImplWin32* nSocketImpl = (NSocketImplWin32* )lpParam;
	nSocketImpl->connectSocket();

	//printf("[NSocketImplWin32] tid=%u ConnectThreadFunction end\n",GetCurrentThreadId());

	return 0; 
}

void NSocketImplWin32::connectSocket() {


	//printf("[NSocketImplWin32] connectSocket %s:%d\n", host,port);
	//0
	int iResult;

	// Initialize Winsock
	iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
	if (iResult != 0) {
		printf("[NSocketImplWin32](%d) WSAStartup failed: %d\n", id,iResult);
		//return 1;
		return;
	}

	struct addrinfo *result = NULL,
                *ptr = NULL,
                hints;
	//1
	ZeroMemory( &hints, sizeof(hints) );
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;

	
	//2
	std::ostringstream oss;
	oss << port;

	// Resolve the server address and port
	iResult = getaddrinfo(host, oss.str().c_str(), &hints, &result);
	if (iResult != 0) {
		printf("getaddrinfo failed: %d\n", iResult);
		//WSACleanup();
		(*connectionFailHandler)();
		//return 1;
		return;
	}

	//3
	ConnectSocket = INVALID_SOCKET;
	
	//4
	ptr=result;
	// Create a SOCKET for connecting to server
	ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);

	//5
	if (ConnectSocket == INVALID_SOCKET) {
		printf("Error at socket(): %ld\n", WSAGetLastError());
		//WSACleanup();
		(*connectionFailHandler)();
		//return 1;
		return;
	}
	

	iResult = connect(ConnectSocket,ptr->ai_addr,ptr->ai_addrlen);
	if (iResult != 0) {
		wprintf(L"connect failed with error: %ld\n", WSAGetLastError());
		iResult = closesocket(ConnectSocket);
        if (iResult != NO_ERROR)
            wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
			//WSACleanup();
		(*connectionFailHandler)();
		return;
	}

	  readThread = CreateThread( 
            NULL,                   // default security attributes
            0,                      // use default stack size  
            ReadThreadFunction,       // thread function name
            this,          // argument to thread function 
            THREAD_TERMINATE,                      // use default creation flags
			NULL);   // ret

	    sendThread = CreateThread( 
            NULL,                   // default security attributes
            0,                      // use default stack size  
            SendThreadFunction,       // thread function name
            this,          // argument to thread function 
            THREAD_TERMINATE,                      // use default creation flags
            NULL);   // ret


		u_long iMode = 1;
	iResult = ioctlsocket(ConnectSocket, FIONBIO, &iMode);
	if (iResult != NO_ERROR){
	  printf("ioctlsocket failed with error: %ld\n", iResult);
	}

			(*connectionOpenedHandler)();

}

DWORD WINAPI ReadThreadFunction( LPVOID lpParam ){
	//printf("[NSocketImplWin32] tid=%u ReadThreadFunction start\n",GetCurrentThreadId());
	NSocketImplWin32* nSocketImpl = (NSocketImplWin32* )lpParam;
	HANDLE mutex  = nSocketImpl->mutexClose;

	nSocketImpl->readMessages();

	//printf("[NSocketImplWin32] tid=%u ReadThreadFunction end\n",GetCurrentThreadId());

	//take a lock on close mutex
	// to avoid deleting object while still in close method
	WaitForSingleObject(mutex, INFINITE);

	delete nSocketImpl;
	nSocketImpl=0;

	//release mutex
	ReleaseMutex(mutex);


	WSACleanup();


	return 0; 
}


void NSocketImplWin32::readMessages() {
	//printf("[NSocketImplWin32] readMessages %s:%d\n", host,port);

	while(true){

		if(destroyRequest==true) {
			 //printf("[NSocketImplWin32](%d) readMessages destroyRequest exiting\n", id);
			return;
		}

		if(connectionLost == true){
			continue;
		}

	
		 int iResult = recv(ConnectSocket, recvbuf, recvbuflen, 0);

		 int nError=WSAGetLastError();
		 if(nError!=WSAEWOULDBLOCK&&nError!=0){
			 if(destroyRequest==false ){
				printf("[NSocketImplWin32](%d) read error  : %d error :%d\n", id,iResult,WSAGetLastError());
				connectionLost = true;
				//ConnectSocket=0;
				ConnectSocket = INVALID_SOCKET;
				(*connectionLostHandler)();
				
			 }
		}



		 if (iResult != SOCKET_ERROR) {
			for(int i =0;i<iResult;i++){
				(*connectionReceivedHandler)(recvbuf[i]);
			}
		 }



		Sleep(1);

	}
}


DWORD WINAPI SendThreadFunction( LPVOID lpParam ){
	//printf("[NSocketImplWin32] tid=%u SendThreadFunction start\n",GetCurrentThreadId());
	NSocketImplWin32* nSocketImpl = (NSocketImplWin32* )lpParam;
	nSocketImpl->sendMessages();
	//printf("[NSocketImplWin32] tid=%u SendThreadFunction end\n",GetCurrentThreadId());

	return 0;
}

void NSocketImplWin32::sendBytes(ByteBuffer* byteBuffer, NetConnectionSendSuccessHandler* asyncSendSuccessResult, NetConnectionSendFailHandler* asyncSendFailResult) {

	this->asyncSendFailResult = asyncSendFailResult;

	//delete byteArray;
	CppByteArray* byteArray = byteBuffer->getBytes(byteBuffer->size());

	WaitForSingleObject(sendMutex, INFINITE);

	if(pendingMessagesToSend->size() > 100){
		printf("[NSocketImplWin32] pendingMessagesToSend too big\n", host,port);
		Sleep(1);
	}

	pendingMessagesToSend->push_back(byteArray);
	ReleaseMutex(sendMutex);
	
}

void NSocketImplWin32::sendMessages() {
	//printf("[NSocketImplWin32] sendMessages %s:%d\n", host,port);
	while(true){

	
		WaitForSingleObject(sendMutex, INFINITE);


		for (unsigned int i = 0; i < pendingMessagesToSend->size(); i++) {
			CppByteArray* byteArray = (*pendingMessagesToSend)[i];
			const char* bytes = byteArray->getBytes();
			int length = byteArray->size();
			int iResult = send(ConnectSocket, bytes, length, 0);

			int nError=WSAGetLastError();
			if(nError!=WSAEWOULDBLOCK&&nError!=0){
				printf("send failed: %d\n", nError);
				(*asyncSendFailResult)();
				ReleaseMutex(sendMutex);

				return;
			}

			//release  bytebuffer
			delete bytes;
			delete byteArray;


		}

		pendingMessagesToSend->clear();

		ReleaseMutex(sendMutex);


		if(destroyRequest==true) {
			//printf("[NSocketImplWin32](%d) sendMessages destroyRequest exiting\n", id);
			//ReleaseMutex(sendMutex);
			return;
		}


		Sleep(1);
		
	}
}



void NSocketImplWin32::drain(NetConnectionDrainHandler* connectionDrainHandler2) {

	//printf("[NSocketImplWin32](%d) drain waiting  \n", id);

	//lock on send mutex to ensure that stopMessage has been sent
	WaitForSingleObject(sendMutex, INFINITE);

	//release the mutex : here we are sure that the stopMessage has been sent
	ReleaseMutex(sendMutex);


	Sleep(5);

	//printf("[NSocketImplWin32](%d) drain call \n", id);
	//call to drain handler
	(*connectionDrainHandler2)();

	//printf("[NSocketImplWin32](%d) drain end \n", id);

}


void NSocketImplWin32::close() {

	//INFO : here we are call on the read thread

	//printf("[NSocketImplWin32](%d) close waiting %s:%d\n",id, host,port);

	//lock on mutexClose to avoid read thread end to destroy NSocketImplWin32 object
	//because when we put destroyRequest =true the read thread may end and delete object before we are out
	WaitForSingleObject(mutexClose, INFINITE);

	//printf("[NSocketImplWin32](%d) close ready %s:%d\n",id, host,port);

	//put flag for threads termination
	destroyRequest =true;
	//WaitForSingleObject(readThread,INFINITE);

	//printf("[NSocketImplWin32](%d) close wait send thread  \n",id);

	//wait for send thread to terminate
	WaitForSingleObject(sendThread,INFINITE);


	//printf("[NSocketImplWin32](%d) close wait send thread done  \n",id);

	//printf("[NSocketImplWin32](%d) close call %s:%d\n",id, host,port);

	//close the socket
	if (ConnectSocket != INVALID_SOCKET) {
		int iResult = closesocket(ConnectSocket);
		if (iResult != NO_ERROR){
			wprintf(L"closesocket function failed with error: %ld\n", WSAGetLastError());
		}

	}
	else{
		wprintf(L"closesocket function failed wa invalid : \n");
	}

	//WSACleanup();

	//leave the lock so the destructor can take it now
	//printf("[NSocketImplWin32](%d) closed %s:%d\n",id, host,port);

	ReleaseMutex(mutexClose);




}


void NSocketImplWin32::sendString(const char* strData, NetConnectionSendSuccessHandler* asyncSendSuccessResult, NetConnectionSendFailHandler* asyncSendFailResult) {
}





#endif
#include "NStorage.h"

const char* NStorage::getItem(const char* key) {

#if defined(__ANDROID__)
	return _nuggetaGetStringForKeyJNI(key);
#elif TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
	return NStorageImpl::getItem(key);
#elif TARGET_OS_MAC
	return NStorageImpl::getItem(key);
#elif defined(WIN32)
	return NStorageWin32::getItem(key);
#endif

	return 0;

}

void NStorage::setItem(const char* key, const char* value) {

#if defined(__ANDROID__)
	_nuggetaSetStringForKeyJNI(key,value);
#elif TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
	NStorageImpl::setItem(key,value);
#elif TARGET_OS_MAC
	NStorageImpl::setItem(key,value);
#elif defined(WIN32)
	return NStorageWin32::setItem(key,value);
#endif
}

NStorage::NStorage() {
}

#if defined(WIN32)

#include "NStorageWin32.h"

const char* NStorageWin32::getItem(const char* key) {
	return NFileUtilsWin32::getStringFromFile(key);
}

void NStorageWin32::setItem(const char* key, const char* value) {
	NFileUtilsWin32::setStringToFile(key,value);
}


#endif // WIN32



#include "NSystem.h"

long long int NSystem::currentTimeMillis() {
    return 0;
}

NSystem::NSystem(){
}

NSystem::~NSystem(){
}


#include "NUrlEncoder.h"

const char* NUrlEncoder::encode(const char* url, const char* enc) {
    return NULL;
}

const char* NUrlEncoder::decode(const char* url, const char* enc) {
return NULL;
}

NUrlEncoder::NUrlEncoder(){
}

#include "NUtils.h"
#include <cstdio>
#include <cstring>
#include <vector>
#include <iostream>

#if defined(__ANDROID__) || defined(__APPLE__)
#define sprintf_s snprintf
#endif


NUtils::NUtils(void)
{
}


NUtils::~NUtils(void)
{
}


std::vector<const char*>* NUtils::split(const char* str,const char* ch){

	std::vector<const char*>* split = new std::vector<const char*>();

	unsigned int index  = 0;
	while(index < strlen(str)){

		const char* token  = std::strstr(str + index , ch);
		if(token!= 0){
			const char* subStr = substr(str, index , token-str);
			split->push_back(subStr);
			index = token-str + std::strlen(ch);
		}else{
			break;
		}

	}

	if(index < strlen(str)){
		const char* leaveStr = substr(str, index );
		split->push_back(leaveStr);
	}

	return split;

}



const char* NUtils::concat(const char* str, int value){
	char dest[50];
	sprintf_s(dest,sizeof(dest),"%d",value);
	return concat(str,dest);
}

const char* NUtils::concat(int _int, const char* str){

	char dest[50];
	sprintf_s(dest,sizeof(dest),"%d",_int);
	return concat(dest,str);
}


const char* NUtils::concat(long long int _long, const char* str){


	char dest[50];
	sprintf_s(dest,sizeof(dest),"%lld",_long);
	return concat(dest,str);

}

const char* NUtils::concat(const char* str,const char* str2){

	unsigned int strLength = 0;
	unsigned int str2Length = 0;


	if(str){
		strLength = strlen(str);
	}

	if(str2){
		str2Length = strlen(str2);
	}

	unsigned int  destLength = strLength+str2Length;


	char* dest =  (char*) malloc(destLength+1);

	if(str){
		#if defined(WIN32)
		strncpy_s(dest,destLength+1,str,destLength);
		#else
		std::strcpy(dest,str);
		#endif
	}

	if(str2){


		#if defined(WIN32)
		//strncpy_s(dest,strlen(src)-start,src+start,strlen(src)-start);
		strcat_s(dest,destLength+1,str2);
		#else
		std::strcat(dest,str2);
		#endif
		}

	dest[destLength] = '\0';

	return dest;
}


const char* NUtils::concat(const char* str,NMatrix2* matrix){
	return "a";
}

const char* NUtils::concat(const char* str,Serializable* serializable){
	return concat(str, serializable->toString());
}


const char* NUtils::substr(const char* src, int start){

	unsigned int length = strlen(src) - start;
	char* dest =  new char[length+1];


	#if defined(WIN32)
	const char * orig = src + start;
	strcpy_s(dest,length+1,orig);

	#else
	std::strcpy(dest,src+start);
	#endif

	dest[length] = '\0';

	return dest;
}

const char* NUtils::substr(const char* src, int start , int length){

	char* dest =  new char[length+1];


	#if defined(WIN32)
	const char * orig = src + start;
	strncpy_s(dest,length+1,orig,length);
	#else
	std::strncpy(dest,src+start,length);
	#endif

	dest[length] = '\0';

	return dest;

}

const char* NUtils::nstrdup(const char* str){
	if(str){
		return strdup(str);
	}

	return 0;
}

#include "Net.h"

void Net::openURL(const char* url) {
	#if defined(__ANDROID__)
		_nuggetaOpenURLJNI(url);
	#elif defined(WIN32)
       NetWin32::openURL(url);
    #endif
}

void Net::openWebView(const char* url) {

	#if defined(__ANDROID__)
		_nuggetaOpenWebViewJNI(url);
	#elif TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
        NetImpl::openWebView(url);
    #elif TARGET_OS_MAC
       NetImpl::openWebView(url);
	#elif defined(WIN32)
       NetWin32::openWebView(url);
    #endif
        

    

}


void Net::closeWebView() {
	#if defined(__ANDROID__)
		_nuggetaCloseWebViewJNI();
	#elif defined(WIN32)
       NetWin32::closeWebView();
    #endif

}
#if defined(WIN32)
#include "NetWin32.h"

void NetWin32::openURL(const char* url) {
	int size =  strlen(url);
	wchar_t * _url = new wchar_t[size]();
	MultiByteToWideChar(0,0,url,size,_url,size);

	ShellExecute(NULL, L"open", _url, NULL, NULL, SW_SHOWNORMAL);
}

void NetWin32::openWebView(const char* url) {

	openURL(url);
}


void NetWin32::closeWebView() {

}
#endif
#include "Notifications.h"

void Notifications::toast(const char* text) {
}

Notifications::Notifications(){
}

Notifications::~Notifications(){
}

#include "NuggetaSocialFacebook.h"


NuggetaSocialFacebook::NuggetaSocialFacebook() {
}

NuggetaSocialFacebook::~NuggetaSocialFacebook() {
}


bool NuggetaSocialFacebook::isAvailable(){
	return false;
}


void NuggetaSocialFacebook::loginFB(ThirdPartyLoginResponse* thirdPartyLoginResponse, ThirdPartyLoginResponseHandler* thirdPartyLoginResponseHandler) {}


void NuggetaSocialFacebook::getFriendsFB(GetThirdPartyFriendsResponse* getThirdPartyFriendsResponse ,GetThirdPartyFriendsResponseHandler* getThirdPartyFriendsResponseHandler){}

void NuggetaSocialFacebook::publishFB(PublishFriendThirdPartyMessageResponse* publishFriendThirdPartyMessageResponse,PublishFriendThirdPartyMessageResponseHandler* publishFriendThirdPartyMessageResponseHandler,const char* title, const char* message, const char* pictureUrl, const char* link, const char* thirdPartyId)  {

}
#include "Platform.h"

const char* Platform::get() {

#if defined(__ANDROID__)
	return "ANDROID";
#elif defined(TARGET_OS_IPHONE )
	return "IPHONE_OS";
#elif defined(TARGET_IPHONE_SIMULATOR)
	return "IPHONE_SIMULATOR";
#elif defined(WIN32)
	return "WIN32";
#else
	return "UNKNOWN";
#endif

}

bool Platform::isHTMLPlatform() {
	return false;
}

Platform::Platform() {
}


#include "Pump.h"


Pump::Pump(int timeOut){
    this->times = new std::vector<long long>();
    this->activePumpableMessages = new std::vector<Message*>();
	this->messagesToDelete = new std::vector<Message*>();
    this->timeOut = timeOut;

	#if !defined(WIN32)
	pthread_mutex_init(&_pumpMutex,NULL);
	#else
	ghMutex = CreateMutex( 
        NULL,              // default security attributes
        FALSE,             // initially not owned
        NULL);             // unnamed mutex
	#endif

}

std::vector<Message*>* Pump::pump() {


    std::vector<Message*>* copy = new std::vector<Message*>();
	#if !defined(WIN32)
	pthread_mutex_lock(&_pumpMutex);
	#else
	 WaitForSingleObject(ghMutex, INFINITE);
	#endif
	
	checkCache(NSystem::currentTimeMillis());
    for (unsigned int i = 0; i < (unsigned int)activePumpableMessages->size(); i++) {
        Message* message = (*activePumpableMessages)[i];
        if (dynamic_cast<OpenUrl*>(message) != 0) {
        } else {
			copy->push_back((Message*)message->clone());
			messagesToDelete->push_back(message);
        }
    }
    activePumpableMessages->clear();
    times->clear();

	#if !defined(WIN32)
	 pthread_mutex_unlock(&_pumpMutex);
	#else
		ReleaseMutex(ghMutex);
	#endif
   

    return copy;
}

void Pump::add(Message* message) {
	#if !defined(WIN32)
		pthread_mutex_lock(&_pumpMutex);
	#else
	 WaitForSingleObject(ghMutex, INFINITE);
	#endif
	
    long long int lastTick = NSystem::currentTimeMillis();
    checkCache(lastTick);
    activePumpableMessages->push_back(message);
    times->push_back(lastTick);

	for(unsigned int i = 0;i< messagesToDelete->size();i++){
		delete (*messagesToDelete)[i];
	}
	messagesToDelete->clear();

	#if !defined(WIN32)
		pthread_mutex_unlock(&_pumpMutex);
	#else
		ReleaseMutex(ghMutex);
	#endif
	
}

void Pump::checkCache(long long int tick) {
}






Pump::~Pump(){
	if (activePumpableMessages) {
	for (unsigned int i=0; i < activePumpableMessages->size(); i++) {
	delete (*activePumpableMessages)[i];
	}
	}
	delete activePumpableMessages;
	activePumpableMessages = 0;
	delete times;
	times = 0;
}


#include "SecurityUtils.h"

const char* SecurityUtils::SHA1(const char* text) {
    return NULL;
}

SecurityUtils::SecurityUtils(){
}


#include "StringBuilder.h"

StringBuilder::StringBuilder(const char* str){
}

const char* StringBuilder::substring(int _position, int i) {
    return NULL;
}

void StringBuilder::appendString(const char* s) {
}

int StringBuilder::length1() {
return 0;
}

void StringBuilder::replace(int i, int j, const char* str) {
}

void StringBuilder::insert(int _position, unsigned char c) {
}

//@Override
const char* StringBuilder::toString() {
return NULL;
}


#include "Utils.h"

int Utils::NULL_INTEGER = 0;

short Utils::NULL_SHORT = 0;

long long Utils::NULL_LONG = 0;

float Utils::NULL_FLOAT = 0;

double Utils::NULL_DOUBLE = 0;

bool Utils::NULL_BOOLEAN = 0;

unsigned char Utils::NULL_BYTE = 0;

NDate* Utils::NULL_DATE = 0;

bool Utils::isNull(void* o) {
    return o == 0;
}

bool Utils::isNull(const char* o) {
    return o == 0;
}

bool Utils::isNullInteger(int i) {
return false;
}

bool Utils::isNullShort(short s) {
return false;
}

bool Utils::isNullLong(long long lng) {
return false;
}

bool Utils::isNullFloat(float f) {
return false;
}

bool Utils::isNullDouble(double d) {
return false;
}

bool Utils::isNullBoolean(bool b) {
return false;
}

bool Utils::isNullByte(unsigned char by) {
return false;
}

bool Utils::isNullDate(NDate* dt) {
return dt == 0;
}

Utils::Utils(){
}

